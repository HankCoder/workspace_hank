/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 110 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 34 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 34 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 34 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 34 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopengldebug.sip"
#include <qopengldebug.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 150 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLDebugLogger.cpp"


class sipQOpenGLDebugLogger : public QOpenGLDebugLogger
{
public:
    sipQOpenGLDebugLogger(QObject*);
    virtual ~sipQOpenGLDebugLogger();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLDebugLogger(const sipQOpenGLDebugLogger &);
    sipQOpenGLDebugLogger &operator = (const sipQOpenGLDebugLogger &);

    char sipPyMethods[7];
};

sipQOpenGLDebugLogger::sipQOpenGLDebugLogger(QObject*a0): QOpenGLDebugLogger(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLDebugLogger::~sipQOpenGLDebugLogger()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQOpenGLDebugLogger::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLDebugLogger);

    return QOpenGLDebugLogger::metaObject();
}

int sipQOpenGLDebugLogger::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QOpenGLDebugLogger::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLDebugLogger,_c,_id,_a);

    return _id;
}

void *sipQOpenGLDebugLogger::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLDebugLogger, _clname, &sipCpp) ? sipCpp : QOpenGLDebugLogger::qt_metacast(_clname));
}

void sipQOpenGLDebugLogger::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QOpenGLDebugLogger::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QOpenGLDebugLogger::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QOpenGLDebugLogger::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QOpenGLDebugLogger::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLDebugLogger::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QOpenGLDebugLogger::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLDebugLogger::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QOpenGLDebugLogger::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQOpenGLDebugLogger::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QOpenGLDebugLogger::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_initialize, "initialize(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_initialize(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->initialize();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_initialize, doc_QOpenGLDebugLogger_initialize);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_isLogging, "isLogging(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_isLogging(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_isLogging(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLogging();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_isLogging, doc_QOpenGLDebugLogger_isLogging);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_loggingMode, "loggingMode(self) -> QOpenGLDebugLogger.LoggingMode");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_loggingMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_loggingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            QOpenGLDebugLogger::LoggingMode sipRes;

            sipRes = sipCpp->loggingMode();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLDebugLogger_LoggingMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_loggingMode, doc_QOpenGLDebugLogger_loggingMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_maximumMessageLength, "maximumMessageLength(self) -> int");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_maximumMessageLength(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_maximumMessageLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->maximumMessageLength();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_maximumMessageLength, doc_QOpenGLDebugLogger_maximumMessageLength);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_pushGroup, "pushGroup(self, object, id: int = 0, source: QOpenGLDebugMessage.Source = QOpenGLDebugMessage.ApplicationSource)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_pushGroup(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_pushGroup(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        GLuint a1 = 0;
        QOpenGLDebugMessage::Source a2 = QOpenGLDebugMessage::ApplicationSource;
        QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_id,
            sipName_source,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|uE", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QOpenGLDebugMessage_Source, &a2))
        {
            sipCpp->pushGroup(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_pushGroup, doc_QOpenGLDebugLogger_pushGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_popGroup, "popGroup(self)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_popGroup(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_popGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            sipCpp->popGroup();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_popGroup, doc_QOpenGLDebugLogger_popGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_enableMessages, "enableMessages(self, sources: QOpenGLDebugMessage.Sources = QOpenGLDebugMessage.AnySource, types: QOpenGLDebugMessage.Types = QOpenGLDebugMessage.AnyType, severities: QOpenGLDebugMessage.Severities = QOpenGLDebugMessage.AnySeverity)\n"
    "enableMessages(self, object, sources: QOpenGLDebugMessage.Sources = QOpenGLDebugMessage.AnySource, types: QOpenGLDebugMessage.Types = QOpenGLDebugMessage.AnyType)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_enableMessages(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_enableMessages(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLDebugMessage::Sources a0def = QOpenGLDebugMessage::AnySource;
        QOpenGLDebugMessage::Sources* a0 = &a0def;
        int a0State = 0;
        QOpenGLDebugMessage::Types a1def = QOpenGLDebugMessage::AnyType;
        QOpenGLDebugMessage::Types* a1 = &a1def;
        int a1State = 0;
        QOpenGLDebugMessage::Severities a2def = QOpenGLDebugMessage::AnySeverity;
        QOpenGLDebugMessage::Severities* a2 = &a2def;
        int a2State = 0;
        QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sources,
            sipName_types,
            sipName_severities,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugMessage_Sources, &a0, &a0State, sipType_QOpenGLDebugMessage_Types, &a1, &a1State, sipType_QOpenGLDebugMessage_Severities, &a2, &a2State))
        {
            sipCpp->enableMessages(*a0,*a1,*a2);
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Sources,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Types,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Severities,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<uint>* a0;
        int a0State = 0;
        QOpenGLDebugMessage::Sources a1def = QOpenGLDebugMessage::AnySource;
        QOpenGLDebugMessage::Sources* a1 = &a1def;
        int a1State = 0;
        QOpenGLDebugMessage::Types a2def = QOpenGLDebugMessage::AnyType;
        QOpenGLDebugMessage::Types* a2 = &a2def;
        int a2State = 0;
        QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_sources,
            sipName_types,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QVector_1900,&a0, &a0State, sipType_QOpenGLDebugMessage_Sources, &a1, &a1State, sipType_QOpenGLDebugMessage_Types, &a2, &a2State))
        {
            sipCpp->enableMessages(*a0,*a1,*a2);
            sipReleaseType(const_cast<QVector<uint> *>(a0),sipType_QVector_1900,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Sources,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Types,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_enableMessages, doc_QOpenGLDebugLogger_enableMessages);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_disableMessages, "disableMessages(self, sources: QOpenGLDebugMessage.Sources = QOpenGLDebugMessage.AnySource, types: QOpenGLDebugMessage.Types = QOpenGLDebugMessage.AnyType, severities: QOpenGLDebugMessage.Severities = QOpenGLDebugMessage.AnySeverity)\n"
    "disableMessages(self, object, sources: QOpenGLDebugMessage.Sources = QOpenGLDebugMessage.AnySource, types: QOpenGLDebugMessage.Types = QOpenGLDebugMessage.AnyType)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_disableMessages(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_disableMessages(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLDebugMessage::Sources a0def = QOpenGLDebugMessage::AnySource;
        QOpenGLDebugMessage::Sources* a0 = &a0def;
        int a0State = 0;
        QOpenGLDebugMessage::Types a1def = QOpenGLDebugMessage::AnyType;
        QOpenGLDebugMessage::Types* a1 = &a1def;
        int a1State = 0;
        QOpenGLDebugMessage::Severities a2def = QOpenGLDebugMessage::AnySeverity;
        QOpenGLDebugMessage::Severities* a2 = &a2def;
        int a2State = 0;
        QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sources,
            sipName_types,
            sipName_severities,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugMessage_Sources, &a0, &a0State, sipType_QOpenGLDebugMessage_Types, &a1, &a1State, sipType_QOpenGLDebugMessage_Severities, &a2, &a2State))
        {
            sipCpp->disableMessages(*a0,*a1,*a2);
            sipReleaseType(a0,sipType_QOpenGLDebugMessage_Sources,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Types,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Severities,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<uint>* a0;
        int a0State = 0;
        QOpenGLDebugMessage::Sources a1def = QOpenGLDebugMessage::AnySource;
        QOpenGLDebugMessage::Sources* a1 = &a1def;
        int a1State = 0;
        QOpenGLDebugMessage::Types a2def = QOpenGLDebugMessage::AnyType;
        QOpenGLDebugMessage::Types* a2 = &a2def;
        int a2State = 0;
        QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_sources,
            sipName_types,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QVector_1900,&a0, &a0State, sipType_QOpenGLDebugMessage_Sources, &a1, &a1State, sipType_QOpenGLDebugMessage_Types, &a2, &a2State))
        {
            sipCpp->disableMessages(*a0,*a1,*a2);
            sipReleaseType(const_cast<QVector<uint> *>(a0),sipType_QVector_1900,a0State);
            sipReleaseType(a1,sipType_QOpenGLDebugMessage_Sources,a1State);
            sipReleaseType(a2,sipType_QOpenGLDebugMessage_Types,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_disableMessages, doc_QOpenGLDebugLogger_disableMessages);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_loggedMessages, "loggedMessages(self) -> object");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_loggedMessages(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_loggedMessages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            QList<QOpenGLDebugMessage>*sipRes;

            sipRes = new QList<QOpenGLDebugMessage>(sipCpp->loggedMessages());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QOpenGLDebugMessage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_loggedMessages, doc_QOpenGLDebugLogger_loggedMessages);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_logMessage, "logMessage(self, QOpenGLDebugMessage)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_logMessage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_logMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLDebugMessage* a0;
        QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugMessage, &a0))
        {
            sipCpp->logMessage(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_logMessage, doc_QOpenGLDebugLogger_logMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_startLogging, "startLogging(self, loggingMode: QOpenGLDebugLogger.LoggingMode = QOpenGLDebugLogger.AsynchronousLogging)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_startLogging(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_startLogging(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLDebugLogger::LoggingMode a0 = QOpenGLDebugLogger::AsynchronousLogging;
        QOpenGLDebugLogger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_loggingMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp, sipType_QOpenGLDebugLogger_LoggingMode, &a0))
        {
            sipCpp->startLogging(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_startLogging, doc_QOpenGLDebugLogger_startLogging);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLDebugLogger_stopLogging, "stopLogging(self)");

extern "C" {static PyObject *meth_QOpenGLDebugLogger_stopLogging(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLDebugLogger_stopLogging(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLDebugLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLDebugLogger, &sipCpp))
        {
            sipCpp->stopLogging();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLDebugLogger, sipName_stopLogging, doc_QOpenGLDebugLogger_stopLogging);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLDebugLogger(void *, int);}
static void release_QOpenGLDebugLogger(void *sipCppV,int)
{
    QOpenGLDebugLogger *sipCpp = reinterpret_cast<QOpenGLDebugLogger *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLDebugLogger(sipSimpleWrapper *);}
static void dealloc_QOpenGLDebugLogger(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQOpenGLDebugLogger *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLDebugLogger(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QOpenGLDebugLogger(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLDebugLogger(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLDebugLogger *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLDebugLogger(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLDebugLogger[] = {{142, 0, 1}};


static PyMethodDef methods_QOpenGLDebugLogger[] = {
    {SIP_MLNAME_CAST(sipName_disableMessages), (PyCFunction)meth_QOpenGLDebugLogger_disableMessages, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_disableMessages)},
    {SIP_MLNAME_CAST(sipName_enableMessages), (PyCFunction)meth_QOpenGLDebugLogger_enableMessages, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_enableMessages)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QOpenGLDebugLogger_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_initialize)},
    {SIP_MLNAME_CAST(sipName_isLogging), meth_QOpenGLDebugLogger_isLogging, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_isLogging)},
    {SIP_MLNAME_CAST(sipName_logMessage), meth_QOpenGLDebugLogger_logMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_logMessage)},
    {SIP_MLNAME_CAST(sipName_loggedMessages), meth_QOpenGLDebugLogger_loggedMessages, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_loggedMessages)},
    {SIP_MLNAME_CAST(sipName_loggingMode), meth_QOpenGLDebugLogger_loggingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_loggingMode)},
    {SIP_MLNAME_CAST(sipName_maximumMessageLength), meth_QOpenGLDebugLogger_maximumMessageLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_maximumMessageLength)},
    {SIP_MLNAME_CAST(sipName_popGroup), meth_QOpenGLDebugLogger_popGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_popGroup)},
    {SIP_MLNAME_CAST(sipName_pushGroup), (PyCFunction)meth_QOpenGLDebugLogger_pushGroup, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_pushGroup)},
    {SIP_MLNAME_CAST(sipName_startLogging), (PyCFunction)meth_QOpenGLDebugLogger_startLogging, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_startLogging)},
    {SIP_MLNAME_CAST(sipName_stopLogging), meth_QOpenGLDebugLogger_stopLogging, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLDebugLogger_stopLogging)}
};

static sipEnumMemberDef enummembers_QOpenGLDebugLogger[] = {
    {sipName_AsynchronousLogging, static_cast<int>(QOpenGLDebugLogger::AsynchronousLogging), 125},
    {sipName_SynchronousLogging, static_cast<int>(QOpenGLDebugLogger::SynchronousLogging), 125},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLDebugLogger[] = {
    {"messageLogged(QOpenGLDebugMessage)", "\1messageLogged(self, QOpenGLDebugMessage)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QOpenGLDebugLogger, "\1QOpenGLDebugLogger(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOpenGLDebugLogger = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLDebugLogger,
        {0}
    },
    {
        sipNameNr_QOpenGLDebugLogger,
        {0, 0, 1},
        12, methods_QOpenGLDebugLogger,
        2, enummembers_QOpenGLDebugLogger,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLDebugLogger,
    -1,
    -1,
    supers_QOpenGLDebugLogger,
    0,
    init_type_QOpenGLDebugLogger,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLDebugLogger,
    0,
    0,
    0,
    release_QOpenGLDebugLogger,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QOpenGLDebugLogger::staticMetaObject,
    0,
    signals_QOpenGLDebugLogger,
    0
};
