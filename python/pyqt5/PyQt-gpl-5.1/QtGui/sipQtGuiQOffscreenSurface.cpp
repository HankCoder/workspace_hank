/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qoffscreensurface.sip"
#include <qoffscreensurface.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOffscreenSurface.cpp"


class sipQOffscreenSurface : public QOffscreenSurface
{
public:
    sipQOffscreenSurface(QScreen*);
    virtual ~sipQOffscreenSurface();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QSize size() const;
    QSurfaceFormat format() const;
    QSurface::SurfaceType surfaceType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOffscreenSurface(const sipQOffscreenSurface &);
    sipQOffscreenSurface &operator = (const sipQOffscreenSurface &);

    char sipPyMethods[10];
};

sipQOffscreenSurface::sipQOffscreenSurface(QScreen*a0): QOffscreenSurface(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOffscreenSurface::~sipQOffscreenSurface()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQOffscreenSurface::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOffscreenSurface);

    return QOffscreenSurface::metaObject();
}

int sipQOffscreenSurface::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QOffscreenSurface::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOffscreenSurface,_c,_id,_a);

    return _id;
}

void *sipQOffscreenSurface::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOffscreenSurface, _clname, &sipCpp) ? sipCpp : QOffscreenSurface::qt_metacast(_clname));
}

void sipQOffscreenSurface::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QOffscreenSurface::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QOffscreenSurface::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QOffscreenSurface::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QOffscreenSurface::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOffscreenSurface::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QOffscreenSurface::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQOffscreenSurface::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QOffscreenSurface::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQOffscreenSurface::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QOffscreenSurface::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQOffscreenSurface::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QOffscreenSurface::size();

    extern QSize sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth);
}

QSurfaceFormat sipQOffscreenSurface::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_format);

    if (!sipMeth)
        return QOffscreenSurface::format();

    extern QSurfaceFormat sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth);
}

QSurface::SurfaceType sipQOffscreenSurface::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_surfaceType);

    if (!sipMeth)
        return QOffscreenSurface::surfaceType();

    extern QSurface::SurfaceType sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QOffscreenSurface_surfaceType, "surfaceType(self) -> QSurface.SurfaceType");

extern "C" {static PyObject *meth_QOffscreenSurface_surfaceType(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_surfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            QSurface::SurfaceType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QOffscreenSurface::surfaceType() : sipCpp->surfaceType());

            return sipConvertFromEnum(sipRes,sipType_QSurface_SurfaceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_surfaceType, doc_QOffscreenSurface_surfaceType);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_create, "create(self)");

extern "C" {static PyObject *meth_QOffscreenSurface_create(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            sipCpp->create();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_create, doc_QOffscreenSurface_create);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOffscreenSurface_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_destroy, doc_QOffscreenSurface_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOffscreenSurface_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_isValid, doc_QOffscreenSurface_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QOffscreenSurface_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat* a0;
        QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOffscreenSurface, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_setFormat, doc_QOffscreenSurface_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QOffscreenSurface_format(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            QSurfaceFormat*sipRes;

            sipRes = new QSurfaceFormat((sipSelfWasArg ? sipCpp->QOffscreenSurface::format() : sipCpp->format()));

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_format, doc_QOffscreenSurface_format);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_requestedFormat, "requestedFormat(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QOffscreenSurface_requestedFormat(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_requestedFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            QSurfaceFormat*sipRes;

            sipRes = new QSurfaceFormat(sipCpp->requestedFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_requestedFormat, doc_QOffscreenSurface_requestedFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QOffscreenSurface_size(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QOffscreenSurface::size() : sipCpp->size()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_size, doc_QOffscreenSurface_size);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_screen, "screen(self) -> QScreen");

extern "C" {static PyObject *meth_QOffscreenSurface_screen(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOffscreenSurface, &sipCpp))
        {
            QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_screen, doc_QOffscreenSurface_screen);

    return NULL;
}


PyDoc_STRVAR(doc_QOffscreenSurface_setScreen, "setScreen(self, QScreen)");

extern "C" {static PyObject *meth_QOffscreenSurface_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QOffscreenSurface_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScreen* a0;
        QOffscreenSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOffscreenSurface, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOffscreenSurface, sipName_setScreen, doc_QOffscreenSurface_setScreen);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QOffscreenSurface(void *, const sipTypeDef *);}
static void *cast_QOffscreenSurface(void *sipCppV, const sipTypeDef *targetType)
{
    QOffscreenSurface *sipCpp = reinterpret_cast<QOffscreenSurface *>(sipCppV);

    if (targetType == sipType_QSurface)
        return static_cast<QSurface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOffscreenSurface(void *, int);}
static void release_QOffscreenSurface(void *sipCppV,int)
{
    QOffscreenSurface *sipCpp = reinterpret_cast<QOffscreenSurface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOffscreenSurface(sipSimpleWrapper *);}
static void dealloc_QOffscreenSurface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQOffscreenSurface *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QOffscreenSurface(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QOffscreenSurface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOffscreenSurface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQOffscreenSurface *sipCpp = 0;

    {
        QScreen* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_QScreen, &a0))
        {
            sipCpp = new sipQOffscreenSurface(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOffscreenSurface[] = {{142, 0, 0}, {210, 255, 1}};


static PyMethodDef methods_QOffscreenSurface[] = {
    {SIP_MLNAME_CAST(sipName_create), meth_QOffscreenSurface_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_create)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOffscreenSurface_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_destroy)},
    {SIP_MLNAME_CAST(sipName_format), meth_QOffscreenSurface_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_format)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOffscreenSurface_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_isValid)},
    {SIP_MLNAME_CAST(sipName_requestedFormat), meth_QOffscreenSurface_requestedFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_requestedFormat)},
    {SIP_MLNAME_CAST(sipName_screen), meth_QOffscreenSurface_screen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_screen)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QOffscreenSurface_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_setFormat)},
    {SIP_MLNAME_CAST(sipName_setScreen), meth_QOffscreenSurface_setScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_setScreen)},
    {SIP_MLNAME_CAST(sipName_size), meth_QOffscreenSurface_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_size)},
    {SIP_MLNAME_CAST(sipName_surfaceType), meth_QOffscreenSurface_surfaceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QOffscreenSurface_surfaceType)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOffscreenSurface[] = {
    {"screenChanged(QScreen*)", "\1screenChanged(self, QScreen)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QOffscreenSurface, "\1QOffscreenSurface(screen: QScreen = None)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOffscreenSurface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOffscreenSurface,
        {0}
    },
    {
        sipNameNr_QOffscreenSurface,
        {0, 0, 1},
        10, methods_QOffscreenSurface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOffscreenSurface,
    -1,
    -1,
    supers_QOffscreenSurface,
    0,
    init_type_QOffscreenSurface,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOffscreenSurface,
    0,
    0,
    0,
    release_QOffscreenSurface,
    cast_QOffscreenSurface,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QOffscreenSurface::staticMetaObject,
    0,
    signals_QOffscreenSurface,
    0
};
