/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQList0101QWindow.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQList0101QWindow.cpp"


extern "C" {static void assign_QList_0101QWindow(void *, SIP_SSIZE_T, const void *);}
static void assign_QList_0101QWindow(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QList<QWindow*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QList<QWindow*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QWindow(SIP_SSIZE_T);}
static void *array_QList_0101QWindow(SIP_SSIZE_T sipNrElem)
{
    return new QList<QWindow*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QWindow(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QWindow(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList<QWindow*>(reinterpret_cast<const QList<QWindow*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QWindow(void *, int);}
static void release_QList_0101QWindow(void *ptr, int)
{
    delete reinterpret_cast<QList<QWindow*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QWindow(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QWindow(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList<QWindow*> **sipCppPtr = reinterpret_cast<QList<QWindow*> **>(sipCppPtrV);

#line 145 "sip/QtCore/qlist.sip"
    SIP_SSIZE_T len;

    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PySequence_Check(sipPy) || (len = PySequence_Size(sipPy)) < 0)
            return 0;

        for (SIP_SSIZE_T i = 0; i < len; ++i)
        {
            PyObject *itm = PySequence_ITEM(sipPy, i);
            bool ok = (itm && sipCanConvertToType(itm, sipType_QWindow, 0));

            Py_XDECREF(itm);

            if (!ok)
                return 0;
        }

        return 1;
    }

    QList<QWindow *> *ql = new QList<QWindow *>;
    len = PySequence_Size(sipPy);
 
    for (SIP_SSIZE_T i = 0; i < len; ++i)
    {
        PyObject *itm = PySequence_ITEM(sipPy, i);
        QWindow *t = reinterpret_cast<QWindow *>(sipConvertToType(itm, sipType_QWindow, sipTransferObj, 0, 0, sipIsErr));

        Py_DECREF(itm);
 
        if (*sipIsErr)
        {
            delete ql;
            return 0;
        }

        ql->append(t);
    }
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 116 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQList0101QWindow.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QWindow(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QWindow(void *sipCppV, PyObject *sipTransferObj)
{
   QList<QWindow*> *sipCpp = reinterpret_cast<QList<QWindow*> *>(sipCppV);

#line 119 "sip/QtCore/qlist.sip"
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QWindow *t = sipCpp->at(i);
        PyObject *tobj;

        // The explicit (void *) cast allows QWindow to be const.
        if ((tobj = sipConvertFromType((void *)t, sipType_QWindow, sipTransferObj)) == NULL)
        {
            Py_DECREF(l);
            return NULL;
        }

        PyList_SET_ITEM(l, i, tobj);
    }

    return l;
#line 149 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQList0101QWindow.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0101QWindow = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_15722,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QWindow,
    array_QList_0101QWindow,
    copy_QList_0101QWindow,
    release_QList_0101QWindow,
    convertTo_QList_0101QWindow,
    convertFrom_QList_0101QWindow
};
