/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 123 "sip/QtCore/qset.sip"
#include <qset.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQSet0100QByteArray.cpp"

#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQSet0100QByteArray.cpp"


extern "C" {static void assign_QSet_0100QByteArray(void *, SIP_SSIZE_T, const void *);}
static void assign_QSet_0100QByteArray(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSet<QByteArray> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSet<QByteArray> *>(sipSrc);
}


extern "C" {static void *array_QSet_0100QByteArray(SIP_SSIZE_T);}
static void *array_QSet_0100QByteArray(SIP_SSIZE_T sipNrElem)
{
    return new QSet<QByteArray>[sipNrElem];
}


extern "C" {static void *copy_QSet_0100QByteArray(const void *, SIP_SSIZE_T);}
static void *copy_QSet_0100QByteArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSet<QByteArray>(reinterpret_cast<const QSet<QByteArray> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QSet_0100QByteArray(void *, int);}
static void release_QSet_0100QByteArray(void *ptr, int)
{
    delete reinterpret_cast<QSet<QByteArray> *>(ptr);
}



extern "C" {static int convertTo_QSet_0100QByteArray(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSet_0100QByteArray(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QSet<QByteArray> **sipCppPtr = reinterpret_cast<QSet<QByteArray> **>(sipCppPtrV);

#line 159 "sip/QtCore/qset.sip"
    PyObject *it = PyObject_GetIter(sipPy), *itm;

    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (it == NULL)
            return 0;

        while ((itm = PyIter_Next(it)) != NULL)
        {
            int ok = sipCanConvertToType(itm, sipType_QByteArray, SIP_NOT_NONE);

            Py_DECREF(itm);

            if (!ok)
            {
                Py_DECREF(it);
                return 0;
            }
        }

        Py_DECREF(it);
        return 1;
    }

    if (it == NULL)
    {
        *sipIsErr = 1;
        return 0;
    }

    QSet<QByteArray> *qs = new QSet<QByteArray>;

    while ((itm = PyIter_Next(it)) != NULL)
    {
        int state;
        QByteArray *t = reinterpret_cast<QByteArray *>(sipConvertToType(itm, sipType_QByteArray, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));

        Py_DECREF(itm);

        if (*sipIsErr)
        {
            sipReleaseType(t, sipType_QByteArray, state);

            delete qs;
            Py_DECREF(it);
            return 0;
        }

        qs->insert(*t);

        sipReleaseType(t, sipType_QByteArray, state);
    }

    Py_DECREF(it);

    *sipCppPtr = qs;

    return sipGetState(sipTransferObj);
#line 131 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQSet0100QByteArray.cpp"
}


extern "C" {static PyObject *convertFrom_QSet_0100QByteArray(void *, PyObject *);}
static PyObject *convertFrom_QSet_0100QByteArray(void *sipCppV, PyObject *sipTransferObj)
{
   QSet<QByteArray> *sipCpp = reinterpret_cast<QSet<QByteArray> *>(sipCppV);

#line 127 "sip/QtCore/qset.sip"
    // Create the set.
    PyObject *s;

    if ((s = PySet_New(NULL)) == NULL)
        return NULL;

    // Set the set elements.
    QSet<QByteArray>::const_iterator it = sipCpp->constBegin();
    QSet<QByteArray>::const_iterator end = sipCpp->constEnd();

    while (it != end)
    {
        QByteArray *t = new QByteArray(*it);
        PyObject *tobj;

        if ((tobj = sipConvertFromNewType(t, sipType_QByteArray, sipTransferObj)) == NULL)
        {
            Py_DECREF(s);
            delete t;

            return NULL;
        }

        PySet_Add(s, tobj);

        ++it;
    }

    return s;
#line 170 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQSet0100QByteArray.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QSet_0100QByteArray = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_13941,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QSet_0100QByteArray,
    array_QSet_0100QByteArray,
    copy_QSet_0100QByteArray,
    release_QSet_0100QByteArray,
    convertTo_QSet_0100QByteArray,
    convertFrom_QSet_0100QByteArray
};
