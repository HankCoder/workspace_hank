/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 74 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 199 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 101 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 1073 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 927 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 781 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 632 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 483 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 331 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 179 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglshaderprogram.sip"
#include <qopenglshaderprogram.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"


class sipQOpenGLShaderProgram : public QOpenGLShaderProgram
{
public:
    sipQOpenGLShaderProgram(QObject*);
    virtual ~sipQOpenGLShaderProgram();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool link();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLShaderProgram(const sipQOpenGLShaderProgram &);
    sipQOpenGLShaderProgram &operator = (const sipQOpenGLShaderProgram &);

    char sipPyMethods[8];
};

sipQOpenGLShaderProgram::sipQOpenGLShaderProgram(QObject*a0): QOpenGLShaderProgram(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLShaderProgram::~sipQOpenGLShaderProgram()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQOpenGLShaderProgram::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLShaderProgram);

    return QOpenGLShaderProgram::metaObject();
}

int sipQOpenGLShaderProgram::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QOpenGLShaderProgram::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLShaderProgram,_c,_id,_a);

    return _id;
}

void *sipQOpenGLShaderProgram::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLShaderProgram, _clname, &sipCpp) ? sipCpp : QOpenGLShaderProgram::qt_metacast(_clname));
}

void sipQOpenGLShaderProgram::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QOpenGLShaderProgram::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QOpenGLShaderProgram::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QOpenGLShaderProgram::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QOpenGLShaderProgram::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQOpenGLShaderProgram::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QOpenGLShaderProgram::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLShaderProgram::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QOpenGLShaderProgram::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQOpenGLShaderProgram::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QOpenGLShaderProgram::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQOpenGLShaderProgram::link()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_link);

    if (!sipMeth)
        return QOpenGLShaderProgram::link();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShader, "addShader(self, QOpenGLShader) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLShader* a0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addShader(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShader, doc_QOpenGLShaderProgram_addShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_removeShader, "removeShader(self, QOpenGLShader)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_removeShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_removeShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLShader* a0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader, &a0))
        {
            sipCpp->removeShader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_removeShader, doc_QOpenGLShaderProgram_removeShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_shaders, "shaders(self) -> object");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_shaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_shaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            QList<QOpenGLShader*>*sipRes;

            sipRes = new QList<QOpenGLShader*>(sipCpp->shaders());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QOpenGLShader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_shaders, doc_QOpenGLShaderProgram_shaders);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShaderFromSourceCode, "addShaderFromSourceCode(self, QOpenGLShader.ShaderType, QByteArray) -> bool\n"
    "addShaderFromSourceCode(self, QOpenGLShader.ShaderType, object) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShaderFromSourceCode, doc_QOpenGLShaderProgram_addShaderFromSourceCode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_addShaderFromSourceFile, "addShaderFromSourceFile(self, QOpenGLShader.ShaderType, object) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_addShaderFromSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLShader::ShaderType* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QOpenGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addShaderFromSourceFile(*a0,*a1);
            sipReleaseType(a0,sipType_QOpenGLShader_ShaderType,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_addShaderFromSourceFile, doc_QOpenGLShaderProgram_addShaderFromSourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_removeAllShaders, "removeAllShaders(self)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_removeAllShaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_removeAllShaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            sipCpp->removeAllShaders();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_removeAllShaders, doc_QOpenGLShaderProgram_removeAllShaders);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_link, "link(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_link(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QOpenGLShaderProgram::link() : sipCpp->link());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_link, doc_QOpenGLShaderProgram_link);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_isLinked, "isLinked(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_isLinked(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_isLinked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLinked();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_isLinked, doc_QOpenGLShaderProgram_isLinked);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_log, "log(self) -> object");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_log(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_log(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->log());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_log, doc_QOpenGLShaderProgram_log);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_bind, "bind(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_bind(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bind();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_bind, doc_QOpenGLShaderProgram_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_release, "release(self)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_release(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_release, doc_QOpenGLShaderProgram_release);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_programId, "programId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_programId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_programId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            GLuint sipRes;

            sipRes = sipCpp->programId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_programId, doc_QOpenGLShaderProgram_programId);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_bindAttributeLocation, "bindAttributeLocation(self, QByteArray, int)\n"
    "bindAttributeLocation(self, object, int)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_bindAttributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_bindAttributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        int a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            sipCpp->bindAttributeLocation(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->bindAttributeLocation(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_bindAttributeLocation, doc_QOpenGLShaderProgram_bindAttributeLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_attributeLocation, "attributeLocation(self, QByteArray) -> int\n"
    "attributeLocation(self, object) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_attributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_attributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->attributeLocation(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->attributeLocation(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_attributeLocation, doc_QOpenGLShaderProgram_attributeLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeValue, "setAttributeValue(self, int, float)\n"
    "setAttributeValue(self, int, float, float)\n"
    "setAttributeValue(self, int, float, float, float)\n"
    "setAttributeValue(self, int, float, float, float, float)\n"
    "setAttributeValue(self, int, QVector2D)\n"
    "setAttributeValue(self, int, QVector3D)\n"
    "setAttributeValue(self, int, QVector4D)\n"
    "setAttributeValue(self, int, QColor)\n"
    "setAttributeValue(self, str, float)\n"
    "setAttributeValue(self, str, float, float)\n"
    "setAttributeValue(self, str, float, float, float)\n"
    "setAttributeValue(self, str, float, float, float, float)\n"
    "setAttributeValue(self, str, QVector2D)\n"
    "setAttributeValue(self, str, QVector3D)\n"
    "setAttributeValue(self, str, QVector4D)\n"
    "setAttributeValue(self, str, QColor)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeValue(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        GLfloat a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setAttributeValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setAttributeValue(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector2D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector3D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector4D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QColor* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setAttributeValue(a0,*a1);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setAttributeValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        GLfloat a2;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2))
        {
            sipCpp->setAttributeValue(a0,a1,a2);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAfff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QVector2D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QVector3D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QVector4D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QColor* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setAttributeValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeValue, doc_QOpenGLShaderProgram_setAttributeValue);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeArray, "setAttributeArray(self, int, object)\n"
    "setAttributeArray(self, str, object)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        PyObject * a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 115 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPLong_FromLong(a0), &tsize,
                &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 1151 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        PyObject * a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 127 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPBytes_FromString(a0),
                &tsize, &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 1185 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
            Py_DECREF(a0Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeArray, doc_QOpenGLShaderProgram_setAttributeArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setAttributeBuffer, "setAttributeBuffer(self, int, int, int, int, stride: int = 0)\n"
    "setAttributeBuffer(self, str, int, int, int, stride: int = 0)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setAttributeBuffer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setAttributeBuffer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
        QOpenGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biuii|i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
        QOpenGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BAAuii|i", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setAttributeBuffer, doc_QOpenGLShaderProgram_setAttributeBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_enableAttributeArray, "enableAttributeArray(self, int)\n"
    "enableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_enableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_enableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->enableAttributeArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->enableAttributeArray(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_enableAttributeArray, doc_QOpenGLShaderProgram_enableAttributeArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_disableAttributeArray, "disableAttributeArray(self, int)\n"
    "disableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_disableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_disableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->disableAttributeArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->disableAttributeArray(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_disableAttributeArray, doc_QOpenGLShaderProgram_disableAttributeArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_uniformLocation, "uniformLocation(self, QByteArray) -> int\n"
    "uniformLocation(self, object) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_uniformLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_uniformLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->uniformLocation(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->uniformLocation(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_uniformLocation, doc_QOpenGLShaderProgram_uniformLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setUniformValue, "setUniformValue(self, int, int)\n"
    "setUniformValue(self, int, float)\n"
    "setUniformValue(self, int, float, float)\n"
    "setUniformValue(self, int, float, float, float)\n"
    "setUniformValue(self, int, float, float, float, float)\n"
    "setUniformValue(self, int, QVector2D)\n"
    "setUniformValue(self, int, QVector3D)\n"
    "setUniformValue(self, int, QVector4D)\n"
    "setUniformValue(self, int, QColor)\n"
    "setUniformValue(self, int, QPoint)\n"
    "setUniformValue(self, int, QPointF)\n"
    "setUniformValue(self, int, QSize)\n"
    "setUniformValue(self, int, QSizeF)\n"
    "setUniformValue(self, int, QMatrix2x2)\n"
    "setUniformValue(self, int, QMatrix2x3)\n"
    "setUniformValue(self, int, QMatrix2x4)\n"
    "setUniformValue(self, int, QMatrix3x2)\n"
    "setUniformValue(self, int, QMatrix3x3)\n"
    "setUniformValue(self, int, QMatrix3x4)\n"
    "setUniformValue(self, int, QMatrix4x2)\n"
    "setUniformValue(self, int, QMatrix4x3)\n"
    "setUniformValue(self, int, QMatrix4x4)\n"
    "setUniformValue(self, int, QTransform)\n"
    "setUniformValue(self, str, int)\n"
    "setUniformValue(self, str, float)\n"
    "setUniformValue(self, str, float, float)\n"
    "setUniformValue(self, str, float, float, float)\n"
    "setUniformValue(self, str, float, float, float, float)\n"
    "setUniformValue(self, str, QVector2D)\n"
    "setUniformValue(self, str, QVector3D)\n"
    "setUniformValue(self, str, QVector4D)\n"
    "setUniformValue(self, str, QColor)\n"
    "setUniformValue(self, str, QPoint)\n"
    "setUniformValue(self, str, QPointF)\n"
    "setUniformValue(self, str, QSize)\n"
    "setUniformValue(self, str, QSizeF)\n"
    "setUniformValue(self, str, QMatrix2x2)\n"
    "setUniformValue(self, str, QMatrix2x3)\n"
    "setUniformValue(self, str, QMatrix2x4)\n"
    "setUniformValue(self, str, QMatrix3x2)\n"
    "setUniformValue(self, str, QMatrix3x3)\n"
    "setUniformValue(self, str, QMatrix3x4)\n"
    "setUniformValue(self, str, QMatrix4x2)\n"
    "setUniformValue(self, str, QMatrix4x3)\n"
    "setUniformValue(self, str, QMatrix4x4)\n"
    "setUniformValue(self, str, QTransform)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setUniformValue(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setUniformValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        GLint a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        GLfloat a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setUniformValue(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector2D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector3D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector4D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QColor* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QPoint* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QPointF* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QSize* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QSizeF* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QSizeF, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix2x2* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix2x3* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix2x4* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix3x2* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix3x3* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix3x4* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix4x2* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix4x3* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QMatrix4x4* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QTransform* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, sipType_QTransform, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLint a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAXi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAXf", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->setUniformValue(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        GLfloat a2;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2))
        {
            sipCpp->setUniformValue(a0,a1,a2);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAfff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAffff", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QVector2D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector2D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QVector3D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector3D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QVector4D* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QVector4D, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QColor* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QPoint* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QPointF* a1;
        int a1State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QSize* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QSize, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QSizeF* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QSizeF, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix2x2* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix2x3* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix2x4* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix2x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix3x2* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix3x3* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix3x4* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix3x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix4x2* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x2, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix4x3* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x3, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QMatrix4x4* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QMatrix4x4, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const QTransform* a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ9", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, sipType_QTransform, &a1))
        {
            sipCpp->setUniformValue(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setUniformValue, doc_QOpenGLShaderProgram_setUniformValue);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setUniformValueArray, "setUniformValueArray(self, int, object)\n"
    "setUniformValueArray(self, str, object)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setUniformValueArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setUniformValueArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        PyObject * a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 193 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPLong_FromLong(a0),
                    &array_type, &array_len, &tsize, &sipError);
        
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 2300 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        PyObject * a1;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAP0", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtGui/qopenglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPBytes_FromString(a0),
                    &array_type, &array_len, &tsize, &sipError);
        
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 2375 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtGui/sipQtGuiQOpenGLShaderProgram.cpp"
            Py_DECREF(a0Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setUniformValueArray, doc_QOpenGLShaderProgram_setUniformValueArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms, "hasOpenGLShaderPrograms(context: QOpenGLContext = None) -> bool");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLContext* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8", sipType_QOpenGLContext, &a0))
        {
            bool sipRes;

            sipRes = QOpenGLShaderProgram::hasOpenGLShaderPrograms(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_hasOpenGLShaderPrograms, doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_maxGeometryOutputVertices, "maxGeometryOutputVertices(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_maxGeometryOutputVertices(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_maxGeometryOutputVertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxGeometryOutputVertices();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_maxGeometryOutputVertices, doc_QOpenGLShaderProgram_maxGeometryOutputVertices);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setPatchVertexCount, "setPatchVertexCount(self, int)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setPatchVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setPatchVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, &a0))
        {
            sipCpp->setPatchVertexCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setPatchVertexCount, doc_QOpenGLShaderProgram_setPatchVertexCount);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_patchVertexCount, "patchVertexCount(self) -> int");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_patchVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_patchVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->patchVertexCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_patchVertexCount, doc_QOpenGLShaderProgram_patchVertexCount);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels, "setDefaultOuterTessellationLevels(self, object)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector<float>* a0;
        int a0State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QVector_2200,&a0, &a0State))
        {
            sipCpp->setDefaultOuterTessellationLevels(*a0);
            sipReleaseType(const_cast<QVector<float> *>(a0),sipType_QVector_2200,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setDefaultOuterTessellationLevels, doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_defaultOuterTessellationLevels, "defaultOuterTessellationLevels(self) -> object");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_defaultOuterTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_defaultOuterTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            QVector<float>*sipRes;

            sipRes = new QVector<float>(sipCpp->defaultOuterTessellationLevels());

            return sipConvertFromNewType(sipRes,sipType_QVector_2200,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_defaultOuterTessellationLevels, doc_QOpenGLShaderProgram_defaultOuterTessellationLevels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels, "setDefaultInnerTessellationLevels(self, object)");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector<float>* a0;
        int a0State = 0;
        QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp, sipType_QVector_2200,&a0, &a0State))
        {
            sipCpp->setDefaultInnerTessellationLevels(*a0);
            sipReleaseType(const_cast<QVector<float> *>(a0),sipType_QVector_2200,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_setDefaultInnerTessellationLevels, doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLShaderProgram_defaultInnerTessellationLevels, "defaultInnerTessellationLevels(self) -> object");

extern "C" {static PyObject *meth_QOpenGLShaderProgram_defaultInnerTessellationLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLShaderProgram_defaultInnerTessellationLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLShaderProgram, &sipCpp))
        {
            QVector<float>*sipRes;

            sipRes = new QVector<float>(sipCpp->defaultInnerTessellationLevels());

            return sipConvertFromNewType(sipRes,sipType_QVector_2200,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLShaderProgram, sipName_defaultInnerTessellationLevels, doc_QOpenGLShaderProgram_defaultInnerTessellationLevels);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLShaderProgram(void *, int);}
static void release_QOpenGLShaderProgram(void *sipCppV,int)
{
    QOpenGLShaderProgram *sipCpp = reinterpret_cast<QOpenGLShaderProgram *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLShaderProgram(sipSimpleWrapper *);}
static void dealloc_QOpenGLShaderProgram(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQOpenGLShaderProgram *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLShaderProgram(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QOpenGLShaderProgram(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLShaderProgram(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLShaderProgram *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLShaderProgram(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLShaderProgram[] = {{142, 0, 1}};


static PyMethodDef methods_QOpenGLShaderProgram[] = {
    {SIP_MLNAME_CAST(sipName_addShader), meth_QOpenGLShaderProgram_addShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addShader)},
    {SIP_MLNAME_CAST(sipName_addShaderFromSourceCode), meth_QOpenGLShaderProgram_addShaderFromSourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addShaderFromSourceCode)},
    {SIP_MLNAME_CAST(sipName_addShaderFromSourceFile), meth_QOpenGLShaderProgram_addShaderFromSourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_addShaderFromSourceFile)},
    {SIP_MLNAME_CAST(sipName_attributeLocation), meth_QOpenGLShaderProgram_attributeLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_attributeLocation)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QOpenGLShaderProgram_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_bind)},
    {SIP_MLNAME_CAST(sipName_bindAttributeLocation), meth_QOpenGLShaderProgram_bindAttributeLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_bindAttributeLocation)},
    {SIP_MLNAME_CAST(sipName_defaultInnerTessellationLevels), meth_QOpenGLShaderProgram_defaultInnerTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_defaultInnerTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_defaultOuterTessellationLevels), meth_QOpenGLShaderProgram_defaultOuterTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_defaultOuterTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_disableAttributeArray), meth_QOpenGLShaderProgram_disableAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_disableAttributeArray)},
    {SIP_MLNAME_CAST(sipName_enableAttributeArray), meth_QOpenGLShaderProgram_enableAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_enableAttributeArray)},
    {SIP_MLNAME_CAST(sipName_hasOpenGLShaderPrograms), (PyCFunction)meth_QOpenGLShaderProgram_hasOpenGLShaderPrograms, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_hasOpenGLShaderPrograms)},
    {SIP_MLNAME_CAST(sipName_isLinked), meth_QOpenGLShaderProgram_isLinked, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_isLinked)},
    {SIP_MLNAME_CAST(sipName_link), meth_QOpenGLShaderProgram_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_link)},
    {SIP_MLNAME_CAST(sipName_log), meth_QOpenGLShaderProgram_log, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_log)},
    {SIP_MLNAME_CAST(sipName_maxGeometryOutputVertices), meth_QOpenGLShaderProgram_maxGeometryOutputVertices, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_maxGeometryOutputVertices)},
    {SIP_MLNAME_CAST(sipName_patchVertexCount), meth_QOpenGLShaderProgram_patchVertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_patchVertexCount)},
    {SIP_MLNAME_CAST(sipName_programId), meth_QOpenGLShaderProgram_programId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_programId)},
    {SIP_MLNAME_CAST(sipName_release), meth_QOpenGLShaderProgram_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_release)},
    {SIP_MLNAME_CAST(sipName_removeAllShaders), meth_QOpenGLShaderProgram_removeAllShaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_removeAllShaders)},
    {SIP_MLNAME_CAST(sipName_removeShader), meth_QOpenGLShaderProgram_removeShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_removeShader)},
    {SIP_MLNAME_CAST(sipName_setAttributeArray), meth_QOpenGLShaderProgram_setAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setAttributeArray)},
    {SIP_MLNAME_CAST(sipName_setAttributeBuffer), (PyCFunction)meth_QOpenGLShaderProgram_setAttributeBuffer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setAttributeBuffer)},
    {SIP_MLNAME_CAST(sipName_setAttributeValue), meth_QOpenGLShaderProgram_setAttributeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setAttributeValue)},
    {SIP_MLNAME_CAST(sipName_setDefaultInnerTessellationLevels), meth_QOpenGLShaderProgram_setDefaultInnerTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setDefaultInnerTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_setDefaultOuterTessellationLevels), meth_QOpenGLShaderProgram_setDefaultOuterTessellationLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setDefaultOuterTessellationLevels)},
    {SIP_MLNAME_CAST(sipName_setPatchVertexCount), meth_QOpenGLShaderProgram_setPatchVertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setPatchVertexCount)},
    {SIP_MLNAME_CAST(sipName_setUniformValue), meth_QOpenGLShaderProgram_setUniformValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setUniformValue)},
    {SIP_MLNAME_CAST(sipName_setUniformValueArray), meth_QOpenGLShaderProgram_setUniformValueArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_setUniformValueArray)},
    {SIP_MLNAME_CAST(sipName_shaders), meth_QOpenGLShaderProgram_shaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_shaders)},
    {SIP_MLNAME_CAST(sipName_uniformLocation), meth_QOpenGLShaderProgram_uniformLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLShaderProgram_uniformLocation)}
};

PyDoc_STRVAR(doc_QOpenGLShaderProgram, "\1QOpenGLShaderProgram(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOpenGLShaderProgram = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLShaderProgram,
        {0}
    },
    {
        sipNameNr_QOpenGLShaderProgram,
        {0, 0, 1},
        30, methods_QOpenGLShaderProgram,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLShaderProgram,
    -1,
    -1,
    supers_QOpenGLShaderProgram,
    0,
    init_type_QOpenGLShaderProgram,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLShaderProgram,
    0,
    0,
    0,
    release_QOpenGLShaderProgram,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QOpenGLShaderProgram::staticMetaObject,
    0,
    0,
    0
};
