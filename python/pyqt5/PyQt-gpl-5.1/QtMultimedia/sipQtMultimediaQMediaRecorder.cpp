/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qmediarecorder.sip"
#include <qmediarecorder.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qmediaobject.sip"
#include <qmediaobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qmediaencodersettings.sip"
#include <qmediaencodersettings.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qmediaencodersettings.sip"
#include <qmediaencodersettings.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 380 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 314 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"


class sipQMediaRecorder : public QMediaRecorder
{
public:
    sipQMediaRecorder(QMediaObject*,QObject*);
    virtual ~sipQMediaRecorder();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool setMediaObject(QMediaObject*);
    QMediaObject* mediaObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMediaRecorder(const sipQMediaRecorder &);
    sipQMediaRecorder &operator = (const sipQMediaRecorder &);

    char sipPyMethods[9];
};

sipQMediaRecorder::sipQMediaRecorder(QMediaObject*a0,QObject*a1): QMediaRecorder(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMediaRecorder::~sipQMediaRecorder()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMediaRecorder::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QMediaRecorder);

    return QMediaRecorder::metaObject();
}

int sipQMediaRecorder::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMediaRecorder::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QMediaRecorder,_c,_id,_a);

    return _id;
}

void *sipQMediaRecorder::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QMediaRecorder, _clname, &sipCpp) ? sipCpp : QMediaRecorder::qt_metacast(_clname));
}

void sipQMediaRecorder::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMediaRecorder::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMediaRecorder::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMediaRecorder::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMediaRecorder::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMediaRecorder::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMediaRecorder::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMediaRecorder::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQMediaRecorder::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMediaRecorder::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMediaRecorder::setMediaObject(QMediaObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setMediaObject);

    if (!sipMeth)
        return QMediaRecorder::setMediaObject(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMediaObject*);

    return sipVH_QtMultimedia_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QMediaObject* sipQMediaRecorder::mediaObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_mediaObject);

    if (!sipMeth)
        return QMediaRecorder::mediaObject();

    extern QMediaObject* sipVH_QtMultimedia_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_2(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMediaRecorder_mediaObject, "mediaObject(self) -> QMediaObject");

extern "C" {static PyObject *meth_QMediaRecorder_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaRecorder::mediaObject() : sipCpp->mediaObject());

            return sipConvertFromType(sipRes,sipType_QMediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_mediaObject, doc_QMediaRecorder_mediaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isAvailable, "isAvailable(self) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isAvailable, doc_QMediaRecorder_isAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_availability, "availability(self) -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QMediaRecorder_availability(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = sipCpp->availability();

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_availability, doc_QMediaRecorder_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_outputLocation, "outputLocation(self) -> QUrl");

extern "C" {static PyObject *meth_QMediaRecorder_outputLocation(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_outputLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->outputLocation());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_outputLocation, doc_QMediaRecorder_outputLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setOutputLocation, "setOutputLocation(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_setOutputLocation(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setOutputLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setOutputLocation(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setOutputLocation, doc_QMediaRecorder_setOutputLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_actualLocation, "actualLocation(self) -> QUrl");

extern "C" {static PyObject *meth_QMediaRecorder_actualLocation(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_actualLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->actualLocation());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_actualLocation, doc_QMediaRecorder_actualLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_state, "state(self) -> QMediaRecorder.State");

extern "C" {static PyObject *meth_QMediaRecorder_state(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaRecorder::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QMediaRecorder_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_state, doc_QMediaRecorder_state);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_status, "status(self) -> QMediaRecorder.Status");

extern "C" {static PyObject *meth_QMediaRecorder_status(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaRecorder::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_QMediaRecorder_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_status, doc_QMediaRecorder_status);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_error, "error(self) -> QMediaRecorder.Error");

extern "C" {static PyObject *meth_QMediaRecorder_error(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaRecorder::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QMediaRecorder_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_error, doc_QMediaRecorder_error);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_errorString, "errorString(self) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_errorString(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_errorString, doc_QMediaRecorder_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QMediaRecorder_duration(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->duration();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_duration, doc_QMediaRecorder_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isMuted, "isMuted(self) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMuted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isMuted, doc_QMediaRecorder_isMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_volume, "volume(self) -> float");

extern "C" {static PyObject *meth_QMediaRecorder_volume(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->volume();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_volume, doc_QMediaRecorder_volume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedContainers, "supportedContainers(self) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_supportedContainers(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedContainers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedContainers());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedContainers, doc_QMediaRecorder_supportedContainers);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_containerDescription, "containerDescription(self, object) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_containerDescription(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_containerDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->containerDescription(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_containerDescription, doc_QMediaRecorder_containerDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedAudioCodecs, "supportedAudioCodecs(self) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_supportedAudioCodecs(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedAudioCodecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedAudioCodecs());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedAudioCodecs, doc_QMediaRecorder_supportedAudioCodecs);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_audioCodecDescription, "audioCodecDescription(self, object) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_audioCodecDescription(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_audioCodecDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->audioCodecDescription(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_audioCodecDescription, doc_QMediaRecorder_audioCodecDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedAudioSampleRates, "supportedAudioSampleRates(self, settings: QAudioEncoderSettings = QAudioEncoderSettings()) -> Tuple[object, bool]");

extern "C" {static PyObject *meth_QMediaRecorder_supportedAudioSampleRates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedAudioSampleRates(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings& a0def = QAudioEncoderSettings();
        const QAudioEncoderSettings* a0 = &a0def;
        bool a1;
        const QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            sipName_settings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QAudioEncoderSettings, &a0))
        {
            QList<int>*sipRes;

            sipRes = new QList<int>(sipCpp->supportedAudioSampleRates(*a0,&a1));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedAudioSampleRates, doc_QMediaRecorder_supportedAudioSampleRates);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedVideoCodecs, "supportedVideoCodecs(self) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_supportedVideoCodecs(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedVideoCodecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedVideoCodecs());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedVideoCodecs, doc_QMediaRecorder_supportedVideoCodecs);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_videoCodecDescription, "videoCodecDescription(self, object) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_videoCodecDescription(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_videoCodecDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->videoCodecDescription(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_videoCodecDescription, doc_QMediaRecorder_videoCodecDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedResolutions, "supportedResolutions(self, settings: QVideoEncoderSettings = QVideoEncoderSettings()) -> Tuple[object, bool]");

extern "C" {static PyObject *meth_QMediaRecorder_supportedResolutions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedResolutions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVideoEncoderSettings& a0def = QVideoEncoderSettings();
        const QVideoEncoderSettings* a0 = &a0def;
        bool a1;
        const QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            sipName_settings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QVideoEncoderSettings, &a0))
        {
            QList<QSize>*sipRes;

            sipRes = new QList<QSize>(sipCpp->supportedResolutions(*a0,&a1));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_0100QSize,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedResolutions, doc_QMediaRecorder_supportedResolutions);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedFrameRates, "supportedFrameRates(self, settings: QVideoEncoderSettings = QVideoEncoderSettings()) -> Tuple[object, bool]");

extern "C" {static PyObject *meth_QMediaRecorder_supportedFrameRates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedFrameRates(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVideoEncoderSettings& a0def = QVideoEncoderSettings();
        const QVideoEncoderSettings* a0 = &a0def;
        bool a1;
        const QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            sipName_settings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QVideoEncoderSettings, &a0))
        {
            QList<qreal>*sipRes;

            sipRes = new QList<qreal>(sipCpp->supportedFrameRates(*a0,&a1));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_2400,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedFrameRates, doc_QMediaRecorder_supportedFrameRates);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_audioSettings, "audioSettings(self) -> QAudioEncoderSettings");

extern "C" {static PyObject *meth_QMediaRecorder_audioSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_audioSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QAudioEncoderSettings*sipRes;

            sipRes = new QAudioEncoderSettings(sipCpp->audioSettings());

            return sipConvertFromNewType(sipRes,sipType_QAudioEncoderSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_audioSettings, doc_QMediaRecorder_audioSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_videoSettings, "videoSettings(self) -> QVideoEncoderSettings");

extern "C" {static PyObject *meth_QMediaRecorder_videoSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_videoSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QVideoEncoderSettings*sipRes;

            sipRes = new QVideoEncoderSettings(sipCpp->videoSettings());

            return sipConvertFromNewType(sipRes,sipType_QVideoEncoderSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_videoSettings, doc_QMediaRecorder_videoSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_containerFormat, "containerFormat(self) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_containerFormat(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_containerFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->containerFormat());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_containerFormat, doc_QMediaRecorder_containerFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setAudioSettings, "setAudioSettings(self, QAudioEncoderSettings)");

extern "C" {static PyObject *meth_QMediaRecorder_setAudioSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setAudioSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings* a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QAudioEncoderSettings, &a0))
        {
            sipCpp->setAudioSettings(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setAudioSettings, doc_QMediaRecorder_setAudioSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setVideoSettings, "setVideoSettings(self, QVideoEncoderSettings)");

extern "C" {static PyObject *meth_QMediaRecorder_setVideoSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setVideoSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVideoEncoderSettings* a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QVideoEncoderSettings, &a0))
        {
            sipCpp->setVideoSettings(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setVideoSettings, doc_QMediaRecorder_setVideoSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setContainerFormat, "setContainerFormat(self, object)");

extern "C" {static PyObject *meth_QMediaRecorder_setContainerFormat(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setContainerFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setContainerFormat(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setContainerFormat, doc_QMediaRecorder_setContainerFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setEncodingSettings, "setEncodingSettings(self, QAudioEncoderSettings, video: QVideoEncoderSettings = QVideoEncoderSettings(), container: object = QString())");

extern "C" {static PyObject *meth_QMediaRecorder_setEncodingSettings(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setEncodingSettings(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings* a0;
        const QVideoEncoderSettings& a1def = QVideoEncoderSettings();
        const QVideoEncoderSettings* a1 = &a1def;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_video,
            sipName_container,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J9J1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QAudioEncoderSettings, &a0, sipType_QVideoEncoderSettings, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->setEncodingSettings(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setEncodingSettings, doc_QMediaRecorder_setEncodingSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isMetaDataAvailable, "isMetaDataAvailable(self) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isMetaDataAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isMetaDataAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMetaDataAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isMetaDataAvailable, doc_QMediaRecorder_isMetaDataAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isMetaDataWritable, "isMetaDataWritable(self) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isMetaDataWritable(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isMetaDataWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMetaDataWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isMetaDataWritable, doc_QMediaRecorder_isMetaDataWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_metaData, "metaData(self, object) -> QVariant");

extern "C" {static PyObject *meth_QMediaRecorder_metaData(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->metaData(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_metaData, doc_QMediaRecorder_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setMetaData, "setMetaData(self, object, QVariant)");

extern "C" {static PyObject *meth_QMediaRecorder_setMetaData(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setMetaData(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setMetaData, doc_QMediaRecorder_setMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_availableMetaData, "availableMetaData(self) -> object");

extern "C" {static PyObject *meth_QMediaRecorder_availableMetaData(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_availableMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->availableMetaData());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_availableMetaData, doc_QMediaRecorder_availableMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_record, "record(self)");

extern "C" {static PyObject *meth_QMediaRecorder_record(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            sipCpp->record();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_record, doc_QMediaRecorder_record);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_pause, "pause(self)");

extern "C" {static PyObject *meth_QMediaRecorder_pause(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            sipCpp->pause();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_pause, doc_QMediaRecorder_pause);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_stop, "stop(self)");

extern "C" {static PyObject *meth_QMediaRecorder_stop(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_stop, doc_QMediaRecorder_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setMuted, "setMuted(self, bool)");

extern "C" {static PyObject *meth_QMediaRecorder_setMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMediaRecorder, &sipCpp, &a0))
        {
            sipCpp->setMuted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setMuted, doc_QMediaRecorder_setMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setVolume, "setVolume(self, float)");

extern "C" {static PyObject *meth_QMediaRecorder_setVolume(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMediaRecorder, &sipCpp, &a0))
        {
            sipCpp->setVolume(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setVolume, doc_QMediaRecorder_setVolume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setMediaObject, "setMediaObject(self, QMediaObject) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_setMediaObject(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setMediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMediaObject* a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QMediaObject, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaRecorder::setMediaObject(a0) : sipCpp->setMediaObject(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setMediaObject, doc_QMediaRecorder_setMediaObject);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QMediaRecorder(void *, const sipTypeDef *);}
static void *cast_QMediaRecorder(void *sipCppV, const sipTypeDef *targetType)
{
    QMediaRecorder *sipCpp = reinterpret_cast<QMediaRecorder *>(sipCppV);

    if (targetType == sipType_QMediaBindableInterface)
        return static_cast<QMediaBindableInterface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaRecorder(void *, int);}
static void release_QMediaRecorder(void *sipCppV,int)
{
    QMediaRecorder *sipCpp = reinterpret_cast<QMediaRecorder *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMediaRecorder(sipSimpleWrapper *);}
static void dealloc_QMediaRecorder(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMediaRecorder *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaRecorder(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMediaRecorder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaRecorder(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMediaRecorder *sipCpp = 0;

    {
        QMediaObject* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QMediaObject, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQMediaRecorder(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMediaRecorder[] = {{142, 0, 0}, {60, 255, 1}};


static PyMethodDef methods_QMediaRecorder[] = {
    {SIP_MLNAME_CAST(sipName_actualLocation), meth_QMediaRecorder_actualLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_actualLocation)},
    {SIP_MLNAME_CAST(sipName_audioCodecDescription), meth_QMediaRecorder_audioCodecDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_audioCodecDescription)},
    {SIP_MLNAME_CAST(sipName_audioSettings), meth_QMediaRecorder_audioSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_audioSettings)},
    {SIP_MLNAME_CAST(sipName_availability), meth_QMediaRecorder_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_availability)},
    {SIP_MLNAME_CAST(sipName_availableMetaData), meth_QMediaRecorder_availableMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_availableMetaData)},
    {SIP_MLNAME_CAST(sipName_containerDescription), meth_QMediaRecorder_containerDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_containerDescription)},
    {SIP_MLNAME_CAST(sipName_containerFormat), meth_QMediaRecorder_containerFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_containerFormat)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QMediaRecorder_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_duration)},
    {SIP_MLNAME_CAST(sipName_error), meth_QMediaRecorder_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QMediaRecorder_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_errorString)},
    {SIP_MLNAME_CAST(sipName_isAvailable), meth_QMediaRecorder_isAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isAvailable)},
    {SIP_MLNAME_CAST(sipName_isMetaDataAvailable), meth_QMediaRecorder_isMetaDataAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isMetaDataAvailable)},
    {SIP_MLNAME_CAST(sipName_isMetaDataWritable), meth_QMediaRecorder_isMetaDataWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isMetaDataWritable)},
    {SIP_MLNAME_CAST(sipName_isMuted), meth_QMediaRecorder_isMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isMuted)},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_QMediaRecorder_mediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_mediaObject)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QMediaRecorder_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_metaData)},
    {SIP_MLNAME_CAST(sipName_outputLocation), meth_QMediaRecorder_outputLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_outputLocation)},
    {SIP_MLNAME_CAST(sipName_pause), meth_QMediaRecorder_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_pause)},
    {SIP_MLNAME_CAST(sipName_record), meth_QMediaRecorder_record, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_record)},
    {SIP_MLNAME_CAST(sipName_setAudioSettings), meth_QMediaRecorder_setAudioSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setAudioSettings)},
    {SIP_MLNAME_CAST(sipName_setContainerFormat), meth_QMediaRecorder_setContainerFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setContainerFormat)},
    {SIP_MLNAME_CAST(sipName_setEncodingSettings), (PyCFunction)meth_QMediaRecorder_setEncodingSettings, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_setEncodingSettings)},
    {SIP_MLNAME_CAST(sipName_setMediaObject), meth_QMediaRecorder_setMediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setMediaObject)},
    {SIP_MLNAME_CAST(sipName_setMetaData), meth_QMediaRecorder_setMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setMetaData)},
    {SIP_MLNAME_CAST(sipName_setMuted), meth_QMediaRecorder_setMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setMuted)},
    {SIP_MLNAME_CAST(sipName_setOutputLocation), meth_QMediaRecorder_setOutputLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setOutputLocation)},
    {SIP_MLNAME_CAST(sipName_setVideoSettings), meth_QMediaRecorder_setVideoSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setVideoSettings)},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_QMediaRecorder_setVolume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setVolume)},
    {SIP_MLNAME_CAST(sipName_state), meth_QMediaRecorder_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_state)},
    {SIP_MLNAME_CAST(sipName_status), meth_QMediaRecorder_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_status)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QMediaRecorder_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_stop)},
    {SIP_MLNAME_CAST(sipName_supportedAudioCodecs), meth_QMediaRecorder_supportedAudioCodecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedAudioCodecs)},
    {SIP_MLNAME_CAST(sipName_supportedAudioSampleRates), (PyCFunction)meth_QMediaRecorder_supportedAudioSampleRates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedAudioSampleRates)},
    {SIP_MLNAME_CAST(sipName_supportedContainers), meth_QMediaRecorder_supportedContainers, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedContainers)},
    {SIP_MLNAME_CAST(sipName_supportedFrameRates), (PyCFunction)meth_QMediaRecorder_supportedFrameRates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedFrameRates)},
    {SIP_MLNAME_CAST(sipName_supportedResolutions), (PyCFunction)meth_QMediaRecorder_supportedResolutions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedResolutions)},
    {SIP_MLNAME_CAST(sipName_supportedVideoCodecs), meth_QMediaRecorder_supportedVideoCodecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedVideoCodecs)},
    {SIP_MLNAME_CAST(sipName_videoCodecDescription), meth_QMediaRecorder_videoCodecDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_videoCodecDescription)},
    {SIP_MLNAME_CAST(sipName_videoSettings), meth_QMediaRecorder_videoSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_videoSettings)},
    {SIP_MLNAME_CAST(sipName_volume), meth_QMediaRecorder_volume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_volume)}
};

static sipEnumMemberDef enummembers_QMediaRecorder[] = {
    {sipName_FinalizingStatus, static_cast<int>(QMediaRecorder::FinalizingStatus), 77},
    {sipName_FormatError, static_cast<int>(QMediaRecorder::FormatError), 75},
    {sipName_LoadedStatus, static_cast<int>(QMediaRecorder::LoadedStatus), 77},
    {sipName_LoadingStatus, static_cast<int>(QMediaRecorder::LoadingStatus), 77},
    {sipName_NoError, static_cast<int>(QMediaRecorder::NoError), 75},
    {sipName_OutOfSpaceError, static_cast<int>(QMediaRecorder::OutOfSpaceError), 75},
    {sipName_PausedState, static_cast<int>(QMediaRecorder::PausedState), 76},
    {sipName_PausedStatus, static_cast<int>(QMediaRecorder::PausedStatus), 77},
    {sipName_RecordingState, static_cast<int>(QMediaRecorder::RecordingState), 76},
    {sipName_RecordingStatus, static_cast<int>(QMediaRecorder::RecordingStatus), 77},
    {sipName_ResourceError, static_cast<int>(QMediaRecorder::ResourceError), 75},
    {sipName_StartingStatus, static_cast<int>(QMediaRecorder::StartingStatus), 77},
    {sipName_StoppedState, static_cast<int>(QMediaRecorder::StoppedState), 76},
    {sipName_UnavailableStatus, static_cast<int>(QMediaRecorder::UnavailableStatus), 77},
    {sipName_UnloadedStatus, static_cast<int>(QMediaRecorder::UnloadedStatus), 77},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMediaRecorder[] = {
    {"availabilityChanged(QMultimedia::AvailabilityStatus)", "\1availabilityChanged(self, QMultimedia.AvailabilityStatus)", 0, 0},
    {"metaDataChanged(QString,QVariant)", "\1metaDataChanged(self, object, QVariant)", 0, 0},
    {"metaDataWritableChanged(bool)", "\1metaDataWritableChanged(self, bool)", 0, 0},
    {"metaDataAvailableChanged(bool)", "\1metaDataAvailableChanged(self, bool)", 0, 0},
    {"actualLocationChanged(QUrl)", "\1actualLocationChanged(self, QUrl)", 0, 0},
    {"volumeChanged(qreal)", "\1volumeChanged(self, float)", 0, 0},
    {"mutedChanged(bool)", "\1mutedChanged(self, bool)", 0, 0},
    {"durationChanged(qint64)", "\1durationChanged(self, int)", 0, 0},
    {"statusChanged(QMediaRecorder::Status)", "\1statusChanged(self, QMediaRecorder.Status)", 0, 0},
    {"stateChanged(QMediaRecorder::State)", "\1stateChanged(self, QMediaRecorder.State)", 0, 0},
    {"error(QMediaRecorder::Error)", "\1error(self, QMediaRecorder.Error)", &methods_QMediaRecorder[8], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMediaRecorder, "\1QMediaRecorder(QMediaObject, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaRecorder = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaRecorder,
        {0}
    },
    {
        sipNameNr_QMediaRecorder,
        {0, 0, 1},
        40, methods_QMediaRecorder,
        15, enummembers_QMediaRecorder,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaRecorder,
    -1,
    -1,
    supers_QMediaRecorder,
    0,
    init_type_QMediaRecorder,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaRecorder,
    0,
    0,
    0,
    release_QMediaRecorder,
    cast_QMediaRecorder,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMediaRecorder::staticMetaObject,
    0,
    signals_QMediaRecorder,
    0
};
