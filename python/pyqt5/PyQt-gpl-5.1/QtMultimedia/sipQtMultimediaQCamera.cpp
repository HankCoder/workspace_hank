/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qabstractvideosurface.sip"
#include <qabstractvideosurface.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qcameraimageprocessing.sip"
#include <qcameraimageprocessing.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 56 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qcamerafocus.sip"
#include <qcamerafocus.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qcameraexposure.sip"
#include <qcameraexposure.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtMultimedia/qmediaservice.sip"
#include <qmediaservice.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtMultimedia/sipQtMultimediaQCamera.cpp"


class sipQCamera : public QCamera
{
public:
    sipQCamera(QObject*);
    sipQCamera(const QByteArray&,QObject*);
    virtual ~sipQCamera();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void unbind(QObject*);
    bool bind(QObject*);
    QMediaService* service() const;
    bool isAvailable() const;
    QMultimedia::AvailabilityStatus availability() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCamera(const sipQCamera &);
    sipQCamera &operator = (const sipQCamera &);

    char sipPyMethods[12];
};

sipQCamera::sipQCamera(QObject*a0): QCamera(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCamera::sipQCamera(const QByteArray& a0,QObject*a1): QCamera(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCamera::~sipQCamera()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCamera::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QCamera);

    return QCamera::metaObject();
}

int sipQCamera::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCamera::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QCamera,_c,_id,_a);

    return _id;
}

void *sipQCamera::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QCamera, _clname, &sipCpp) ? sipCpp : QCamera::qt_metacast(_clname));
}

void sipQCamera::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCamera::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCamera::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCamera::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCamera::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCamera::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCamera::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCamera::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCamera::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCamera::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCamera::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCamera::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQCamera::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCamera::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCamera::unbind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_unbind);

    if (!sipMeth)
    {
        QCamera::unbind(a0);
        return;
    }

    extern void sipVH_QtMultimedia_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtMultimedia_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCamera::bind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_bind);

    if (!sipMeth)
        return QCamera::bind(a0);

    typedef bool (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[63]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QMediaService* sipQCamera::service() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_service);

    if (!sipMeth)
        return QCamera::service();

    extern QMediaService* sipVH_QtMultimedia_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQCamera::isAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_isAvailable);

    if (!sipMeth)
        return QCamera::isAvailable();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

QMultimedia::AvailabilityStatus sipQCamera::availability() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_availability);

    if (!sipMeth)
        return QCamera::availability();

    extern QMultimedia::AvailabilityStatus sipVH_QtMultimedia_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QCamera_availableDevices, "availableDevices() -> object");

extern "C" {static PyObject *meth_QCamera_availableDevices(PyObject *, PyObject *);}
static PyObject *meth_QCamera_availableDevices(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(QCamera::availableDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_availableDevices, doc_QCamera_availableDevices);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_deviceDescription, "deviceDescription(QByteArray) -> object");

extern "C" {static PyObject *meth_QCamera_deviceDescription(PyObject *, PyObject *);}
static PyObject *meth_QCamera_deviceDescription(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(QCamera::deviceDescription(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_deviceDescription, doc_QCamera_deviceDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_availability, "availability(self) -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QCamera_availability(PyObject *, PyObject *);}
static PyObject *meth_QCamera_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCamera::availability() : sipCpp->availability());

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_availability, doc_QCamera_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_state, "state(self) -> QCamera.State");

extern "C" {static PyObject *meth_QCamera_state(PyObject *, PyObject *);}
static PyObject *meth_QCamera_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QCamera_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_state, doc_QCamera_state);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_status, "status(self) -> QCamera.Status");

extern "C" {static PyObject *meth_QCamera_status(PyObject *, PyObject *);}
static PyObject *meth_QCamera_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_QCamera_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_status, doc_QCamera_status);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_captureMode, "captureMode(self) -> QCamera.CaptureModes");

extern "C" {static PyObject *meth_QCamera_captureMode(PyObject *, PyObject *);}
static PyObject *meth_QCamera_captureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::CaptureModes*sipRes;

            sipRes = new QCamera::CaptureModes(sipCpp->captureMode());

            return sipConvertFromNewType(sipRes,sipType_QCamera_CaptureModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_captureMode, doc_QCamera_captureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_isCaptureModeSupported, "isCaptureModeSupported(self, QCamera.CaptureModes) -> bool");

extern "C" {static PyObject *meth_QCamera_isCaptureModeSupported(PyObject *, PyObject *);}
static PyObject *meth_QCamera_isCaptureModeSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera::CaptureModes* a0;
        int a0State = 0;
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_CaptureModes, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isCaptureModeSupported(*a0);
            sipReleaseType(a0,sipType_QCamera_CaptureModes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_isCaptureModeSupported, doc_QCamera_isCaptureModeSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_exposure, "exposure(self) -> QCameraExposure");

extern "C" {static PyObject *meth_QCamera_exposure(PyObject *, PyObject *);}
static PyObject *meth_QCamera_exposure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCameraExposure*sipRes;

            sipRes = sipCpp->exposure();

            return sipConvertFromType(sipRes,sipType_QCameraExposure,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_exposure, doc_QCamera_exposure);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_focus, "focus(self) -> QCameraFocus");

extern "C" {static PyObject *meth_QCamera_focus(PyObject *, PyObject *);}
static PyObject *meth_QCamera_focus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCameraFocus*sipRes;

            sipRes = sipCpp->focus();

            return sipConvertFromType(sipRes,sipType_QCameraFocus,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_focus, doc_QCamera_focus);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_imageProcessing, "imageProcessing(self) -> QCameraImageProcessing");

extern "C" {static PyObject *meth_QCamera_imageProcessing(PyObject *, PyObject *);}
static PyObject *meth_QCamera_imageProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCameraImageProcessing*sipRes;

            sipRes = sipCpp->imageProcessing();

            return sipConvertFromType(sipRes,sipType_QCameraImageProcessing,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_imageProcessing, doc_QCamera_imageProcessing);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_setViewfinder, "setViewfinder(self, QVideoWidget)\n"
    "setViewfinder(self, QGraphicsVideoItem)\n"
    "setViewfinder(self, QAbstractVideoSurface)");

extern "C" {static PyObject *meth_QCamera_setViewfinder(PyObject *, PyObject *);}
static PyObject *meth_QCamera_setViewfinder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVideoWidget* a0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QVideoWidget, &a0))
        {
            sipCpp->setViewfinder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QGraphicsVideoItem* a0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QGraphicsVideoItem, &a0))
        {
            sipCpp->setViewfinder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QAbstractVideoSurface* a0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QAbstractVideoSurface, &a0))
        {
            sipCpp->setViewfinder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_setViewfinder, doc_QCamera_setViewfinder);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_error, "error(self) -> QCamera.Error");

extern "C" {static PyObject *meth_QCamera_error(PyObject *, PyObject *);}
static PyObject *meth_QCamera_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QCamera_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_error, doc_QCamera_error);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_errorString, "errorString(self) -> object");

extern "C" {static PyObject *meth_QCamera_errorString(PyObject *, PyObject *);}
static PyObject *meth_QCamera_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_errorString, doc_QCamera_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_supportedLocks, "supportedLocks(self) -> QCamera.LockTypes");

extern "C" {static PyObject *meth_QCamera_supportedLocks(PyObject *, PyObject *);}
static PyObject *meth_QCamera_supportedLocks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::LockTypes*sipRes;

            sipRes = new QCamera::LockTypes(sipCpp->supportedLocks());

            return sipConvertFromNewType(sipRes,sipType_QCamera_LockTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_supportedLocks, doc_QCamera_supportedLocks);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_requestedLocks, "requestedLocks(self) -> QCamera.LockTypes");

extern "C" {static PyObject *meth_QCamera_requestedLocks(PyObject *, PyObject *);}
static PyObject *meth_QCamera_requestedLocks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::LockTypes*sipRes;

            sipRes = new QCamera::LockTypes(sipCpp->requestedLocks());

            return sipConvertFromNewType(sipRes,sipType_QCamera_LockTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_requestedLocks, doc_QCamera_requestedLocks);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_lockStatus, "lockStatus(self) -> QCamera.LockStatus\n"
    "lockStatus(self, QCamera.LockType) -> QCamera.LockStatus");

extern "C" {static PyObject *meth_QCamera_lockStatus(PyObject *, PyObject *);}
static PyObject *meth_QCamera_lockStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::LockStatus sipRes;

            sipRes = sipCpp->lockStatus();

            return sipConvertFromEnum(sipRes,sipType_QCamera_LockStatus);
        }
    }

    {
        QCamera::LockType a0;
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_LockType, &a0))
        {
            QCamera::LockStatus sipRes;

            sipRes = sipCpp->lockStatus(a0);

            return sipConvertFromEnum(sipRes,sipType_QCamera_LockStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_lockStatus, doc_QCamera_lockStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_setCaptureMode, "setCaptureMode(self, QCamera.CaptureModes)");

extern "C" {static PyObject *meth_QCamera_setCaptureMode(PyObject *, PyObject *);}
static PyObject *meth_QCamera_setCaptureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera::CaptureModes* a0;
        int a0State = 0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_CaptureModes, &a0, &a0State))
        {
            sipCpp->setCaptureMode(*a0);
            sipReleaseType(a0,sipType_QCamera_CaptureModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_setCaptureMode, doc_QCamera_setCaptureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_load, "load(self)");

extern "C" {static PyObject *meth_QCamera_load(PyObject *, PyObject *);}
static PyObject *meth_QCamera_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->load();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_load, doc_QCamera_load);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_unload, "unload(self)");

extern "C" {static PyObject *meth_QCamera_unload(PyObject *, PyObject *);}
static PyObject *meth_QCamera_unload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->unload();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_unload, doc_QCamera_unload);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_start, "start(self)");

extern "C" {static PyObject *meth_QCamera_start(PyObject *, PyObject *);}
static PyObject *meth_QCamera_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_start, doc_QCamera_start);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_stop, "stop(self)");

extern "C" {static PyObject *meth_QCamera_stop(PyObject *, PyObject *);}
static PyObject *meth_QCamera_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_stop, doc_QCamera_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_searchAndLock, "searchAndLock(self)\n"
    "searchAndLock(self, QCamera.LockTypes)");

extern "C" {static PyObject *meth_QCamera_searchAndLock(PyObject *, PyObject *);}
static PyObject *meth_QCamera_searchAndLock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->searchAndLock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QCamera::LockTypes* a0;
        int a0State = 0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_LockTypes, &a0, &a0State))
        {
            sipCpp->searchAndLock(*a0);
            sipReleaseType(a0,sipType_QCamera_LockTypes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_searchAndLock, doc_QCamera_searchAndLock);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_unlock, "unlock(self)\n"
    "unlock(self, QCamera.LockTypes)");

extern "C" {static PyObject *meth_QCamera_unlock(PyObject *, PyObject *);}
static PyObject *meth_QCamera_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->unlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QCamera::LockTypes* a0;
        int a0State = 0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_LockTypes, &a0, &a0State))
        {
            sipCpp->unlock(*a0);
            sipReleaseType(a0,sipType_QCamera_LockTypes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_unlock, doc_QCamera_unlock);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCamera(void *, int);}
static void release_QCamera(void *sipCppV,int)
{
    QCamera *sipCpp = reinterpret_cast<QCamera *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCamera(sipSimpleWrapper *);}
static void dealloc_QCamera(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCamera *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCamera(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCamera(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCamera(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCamera *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQCamera(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QByteArray, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCamera(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCamera[] = {{64, 255, 1}};


static PyMethodDef methods_QCamera[] = {
    {SIP_MLNAME_CAST(sipName_availability), meth_QCamera_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_availability)},
    {SIP_MLNAME_CAST(sipName_availableDevices), meth_QCamera_availableDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_availableDevices)},
    {SIP_MLNAME_CAST(sipName_captureMode), meth_QCamera_captureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_captureMode)},
    {SIP_MLNAME_CAST(sipName_deviceDescription), meth_QCamera_deviceDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_deviceDescription)},
    {SIP_MLNAME_CAST(sipName_error), meth_QCamera_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QCamera_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_errorString)},
    {SIP_MLNAME_CAST(sipName_exposure), meth_QCamera_exposure, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_exposure)},
    {SIP_MLNAME_CAST(sipName_focus), meth_QCamera_focus, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_focus)},
    {SIP_MLNAME_CAST(sipName_imageProcessing), meth_QCamera_imageProcessing, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_imageProcessing)},
    {SIP_MLNAME_CAST(sipName_isCaptureModeSupported), meth_QCamera_isCaptureModeSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_isCaptureModeSupported)},
    {SIP_MLNAME_CAST(sipName_load), meth_QCamera_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_load)},
    {SIP_MLNAME_CAST(sipName_lockStatus), meth_QCamera_lockStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_lockStatus)},
    {SIP_MLNAME_CAST(sipName_requestedLocks), meth_QCamera_requestedLocks, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_requestedLocks)},
    {SIP_MLNAME_CAST(sipName_searchAndLock), meth_QCamera_searchAndLock, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_searchAndLock)},
    {SIP_MLNAME_CAST(sipName_setCaptureMode), meth_QCamera_setCaptureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_setCaptureMode)},
    {SIP_MLNAME_CAST(sipName_setViewfinder), meth_QCamera_setViewfinder, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_setViewfinder)},
    {SIP_MLNAME_CAST(sipName_start), meth_QCamera_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_start)},
    {SIP_MLNAME_CAST(sipName_state), meth_QCamera_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_state)},
    {SIP_MLNAME_CAST(sipName_status), meth_QCamera_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_status)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QCamera_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_stop)},
    {SIP_MLNAME_CAST(sipName_supportedLocks), meth_QCamera_supportedLocks, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_supportedLocks)},
    {SIP_MLNAME_CAST(sipName_unload), meth_QCamera_unload, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_unload)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QCamera_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_unlock)}
};

static sipEnumMemberDef enummembers_QCamera[] = {
    {sipName_ActiveState, static_cast<int>(QCamera::ActiveState), 30},
    {sipName_ActiveStatus, static_cast<int>(QCamera::ActiveStatus), 31},
    {sipName_CameraError, static_cast<int>(QCamera::CameraError), 25},
    {sipName_CaptureStillImage, static_cast<int>(QCamera::CaptureStillImage), 23},
    {sipName_CaptureVideo, static_cast<int>(QCamera::CaptureVideo), 23},
    {sipName_CaptureViewfinder, static_cast<int>(QCamera::CaptureViewfinder), 23},
    {sipName_InvalidRequestError, static_cast<int>(QCamera::InvalidRequestError), 25},
    {sipName_LoadedState, static_cast<int>(QCamera::LoadedState), 30},
    {sipName_LoadedStatus, static_cast<int>(QCamera::LoadedStatus), 31},
    {sipName_LoadingStatus, static_cast<int>(QCamera::LoadingStatus), 31},
    {sipName_LockAcquired, static_cast<int>(QCamera::LockAcquired), 26},
    {sipName_LockExposure, static_cast<int>(QCamera::LockExposure), 28},
    {sipName_LockFailed, static_cast<int>(QCamera::LockFailed), 26},
    {sipName_LockFocus, static_cast<int>(QCamera::LockFocus), 28},
    {sipName_LockLost, static_cast<int>(QCamera::LockLost), 26},
    {sipName_LockTemporaryLost, static_cast<int>(QCamera::LockTemporaryLost), 26},
    {sipName_LockWhiteBalance, static_cast<int>(QCamera::LockWhiteBalance), 28},
    {sipName_Locked, static_cast<int>(QCamera::Locked), 27},
    {sipName_NoError, static_cast<int>(QCamera::NoError), 25},
    {sipName_NoLock, static_cast<int>(QCamera::NoLock), 28},
    {sipName_NotSupportedFeatureError, static_cast<int>(QCamera::NotSupportedFeatureError), 25},
    {sipName_Searching, static_cast<int>(QCamera::Searching), 27},
    {sipName_ServiceMissingError, static_cast<int>(QCamera::ServiceMissingError), 25},
    {sipName_StandbyStatus, static_cast<int>(QCamera::StandbyStatus), 31},
    {sipName_StartingStatus, static_cast<int>(QCamera::StartingStatus), 31},
    {sipName_StoppingStatus, static_cast<int>(QCamera::StoppingStatus), 31},
    {sipName_UnavailableStatus, static_cast<int>(QCamera::UnavailableStatus), 31},
    {sipName_UnloadedState, static_cast<int>(QCamera::UnloadedState), 30},
    {sipName_UnloadedStatus, static_cast<int>(QCamera::UnloadedStatus), 31},
    {sipName_UnloadingStatus, static_cast<int>(QCamera::UnloadingStatus), 31},
    {sipName_Unlocked, static_cast<int>(QCamera::Unlocked), 27},
    {sipName_UserRequest, static_cast<int>(QCamera::UserRequest), 26},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCamera[] = {
    {"lockStatusChanged(QCamera::LockStatus,QCamera::LockChangeReason)", "\1lockStatusChanged(self, QCamera.LockStatus, QCamera.LockChangeReason)", 0, 0},
    {"lockStatusChanged(QCamera::LockType,QCamera::LockStatus,QCamera::LockChangeReason)", "\1lockStatusChanged(self, QCamera.LockType, QCamera.LockStatus, QCamera.LockChangeReason)", 0, 0},
    {"lockFailed()", "\1lockFailed(self)", 0, 0},
    {"locked()", "\1locked(self)", 0, 0},
    {"statusChanged(QCamera::Status)", "\1statusChanged(self, QCamera.Status)", 0, 0},
    {"captureModeChanged(QCamera::CaptureModes)", "\1captureModeChanged(self, QCamera.CaptureModes)", 0, 0},
    {"stateChanged(QCamera::State)", "\1stateChanged(self, QCamera.State)", 0, 0},
    {"error(QCamera::Error)", "\1error(self, QCamera.Error)", &methods_QCamera[4], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QCamera, "\1QCamera(parent: QObject = None)\n"
    "QCamera(QByteArray, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QCamera = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCamera,
        {0}
    },
    {
        sipNameNr_QCamera,
        {0, 0, 1},
        23, methods_QCamera,
        32, enummembers_QCamera,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCamera,
    -1,
    -1,
    supers_QCamera,
    0,
    init_type_QCamera,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCamera,
    0,
    0,
    0,
    release_QCamera,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCamera::staticMetaObject,
    0,
    signals_QCamera,
    0
};
