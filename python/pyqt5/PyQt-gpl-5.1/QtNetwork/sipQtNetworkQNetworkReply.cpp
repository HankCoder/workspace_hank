/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 196 "sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 46 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 49 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 52 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 58 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 64 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 70 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 73 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 82 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 91 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 94 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 97 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 100 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 103 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtNetwork/sipQtNetworkQNetworkReply.cpp"


class sipQNetworkReply : public QNetworkReply
{
public:
    sipQNetworkReply(QObject*);
    virtual ~sipQNetworkReply();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool reset();
    bool atEnd() const;
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    void ignoreSslErrorsImplementation(const QList<QSslError>&);
    void setSslConfigurationImplementation(const QSslConfiguration&);
    void sslConfigurationImplementation(QSslConfiguration&) const;
    qint64 writeData(const char*,PY_LONG_LONG);
    void ignoreSslErrors();
    void setReadBufferSize(qint64);
    bool isSequential() const;
    void close();
    void abort();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkReply(const sipQNetworkReply &);
    sipQNetworkReply &operator = (const sipQNetworkReply &);

    char sipPyMethods[29];
};

sipQNetworkReply::sipQNetworkReply(QObject*a0): QNetworkReply(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkReply::~sipQNetworkReply()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkReply::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkReply);

    return QNetworkReply::metaObject();
}

int sipQNetworkReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkReply,_c,_id,_a);

    return _id;
}

void *sipQNetworkReply::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkReply, _clname, &sipCpp) ? sipCpp : QNetworkReply::qt_metacast(_clname));
}

void sipQNetworkReply::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNetworkReply::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNetworkReply::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNetworkReply::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNetworkReply::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNetworkReply::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNetworkReply::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkReply::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNetworkReply::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQNetworkReply::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QNetworkReply::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQNetworkReply::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QNetworkReply,sipName_readData);

    if (!sipMeth)
        return 0;

    typedef PY_LONG_LONG (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_52)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkReply::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QNetworkReply::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QNetworkReply::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QNetworkReply::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQNetworkReply::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QNetworkReply::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQNetworkReply::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QNetworkReply::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQNetworkReply::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QNetworkReply::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQNetworkReply::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QNetworkReply::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQNetworkReply::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QNetworkReply::seek(a0);

    typedef bool (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[53]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQNetworkReply::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QNetworkReply::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth);
}

qint64 sipQNetworkReply::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QNetworkReply::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQNetworkReply::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QNetworkReply::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::ignoreSslErrorsImplementation(const QList<QSslError>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_ignoreSslErrorsImplementation);

    if (!sipMeth)
    {
        QNetworkReply::ignoreSslErrorsImplementation(a0);
        return;
    }

    extern void sipVH_QtNetwork_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QSslError>&);

    sipVH_QtNetwork_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::setSslConfigurationImplementation(const QSslConfiguration& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setSslConfigurationImplementation);

    if (!sipMeth)
    {
        QNetworkReply::setSslConfigurationImplementation(a0);
        return;
    }

    extern void sipVH_QtNetwork_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSslConfiguration&);

    sipVH_QtNetwork_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::sslConfigurationImplementation(QSslConfiguration& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_sslConfigurationImplementation);

    if (!sipMeth)
    {
        QNetworkReply::sslConfigurationImplementation(a0);
        return;
    }

    extern void sipVH_QtNetwork_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSslConfiguration&);

    sipVH_QtNetwork_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

qint64 sipQNetworkReply::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QNetworkReply::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQNetworkReply::ignoreSslErrors()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_ignoreSslErrors);

    if (!sipMeth)
    {
        QNetworkReply::ignoreSslErrors();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQNetworkReply::setReadBufferSize(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_setReadBufferSize);

    if (!sipMeth)
    {
        QNetworkReply::setReadBufferSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    sipVH_QtNetwork_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QNetworkReply::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQNetworkReply::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QNetworkReply::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQNetworkReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,sipName_QNetworkReply,sipName_abort);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QNetworkReply_abort, "abort(self)");

extern "C" {static PyObject *meth_QNetworkReply_abort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNetworkReply, sipName_abort);
                return NULL;
            }

            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_abort, doc_QNetworkReply_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_close, "close(self)");

extern "C" {static PyObject *meth_QNetworkReply_close(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QNetworkReply::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_close, doc_QNetworkReply_close);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QNetworkReply::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isSequential, doc_QNetworkReply_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QNetworkReply_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_readBufferSize, doc_QNetworkReply_readBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QNetworkReply::setReadBufferSize(a0) : sipCpp->setReadBufferSize(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setReadBufferSize, doc_QNetworkReply_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_manager, "manager(self) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QNetworkReply_manager(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_manager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkAccessManager*sipRes;

            sipRes = sipCpp->manager();

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_manager, doc_QNetworkReply_manager);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_operation, "operation(self) -> QNetworkAccessManager.Operation");

extern "C" {static PyObject *meth_QNetworkReply_operation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_operation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkAccessManager::Operation sipRes;

            sipRes = sipCpp->operation();

            return sipConvertFromEnum(sipRes,sipType_QNetworkAccessManager_Operation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_operation, doc_QNetworkReply_operation);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_request, "request(self) -> QNetworkRequest");

extern "C" {static PyObject *meth_QNetworkReply_request(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkRequest*sipRes;

            sipRes = new QNetworkRequest(sipCpp->request());

            return sipConvertFromNewType(sipRes,sipType_QNetworkRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_request, doc_QNetworkReply_request);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_error, "error(self) -> QNetworkReply.NetworkError");

extern "C" {static PyObject *meth_QNetworkReply_error(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QNetworkReply::NetworkError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QNetworkReply_NetworkError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_error, doc_QNetworkReply_error);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNetworkReply_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_url, doc_QNetworkReply_url);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_header, "header(self, QNetworkRequest.KnownHeaders) -> QVariant");

extern "C" {static PyObject *meth_QNetworkReply_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->header(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_header, doc_QNetworkReply_header);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_hasRawHeader, "hasRawHeader(self, QByteArray) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasRawHeader(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_hasRawHeader, doc_QNetworkReply_hasRawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeaderList, "rawHeaderList(self) -> object");

extern "C" {static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(sipCpp->rawHeaderList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeaderList, doc_QNetworkReply_rawHeaderList);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeader, "rawHeader(self, QByteArray) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkReply_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->rawHeader(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeader, doc_QNetworkReply_rawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_attribute, "attribute(self, QNetworkRequest.Attribute) -> QVariant");

extern "C" {static PyObject *meth_QNetworkReply_attribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_attribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->attribute(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_attribute, doc_QNetworkReply_attribute);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_sslConfiguration, "sslConfiguration(self) -> QSslConfiguration");

extern "C" {static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_sslConfiguration, doc_QNetworkReply_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setSslConfiguration, "setSslConfiguration(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setSslConfiguration, doc_QNetworkReply_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_ignoreSslErrors, "ignoreSslErrors(self)\n"
    "ignoreSslErrors(self, object)");

extern "C" {static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QNetworkReply::ignoreSslErrors() : sipCpp->ignoreSslErrors());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<QSslError>* a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            sipCpp->ignoreSslErrors(*a0);
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_ignoreSslErrors, doc_QNetworkReply_ignoreSslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QNetworkReply_writeData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QNetworkReply::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_writeData, doc_QNetworkReply_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setOperation, "setOperation(self, QNetworkAccessManager.Operation)");

extern "C" {static PyObject *meth_QNetworkReply_setOperation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager::Operation a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0))
        {
            sipCpp->setOperation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setOperation, doc_QNetworkReply_setOperation);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setRequest, "setRequest(self, QNetworkRequest)");

extern "C" {static PyObject *meth_QNetworkReply_setRequest(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            sipCpp->setRequest(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRequest, doc_QNetworkReply_setRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setError, "setError(self, QNetworkReply.NetworkError, object)");

extern "C" {static PyObject *meth_QNetworkReply_setError(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkReply::NetworkError a0;
        const QString* a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkReply_NetworkError, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setError(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setError, doc_QNetworkReply_setError);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkReply_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setUrl, doc_QNetworkReply_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setHeader, "setHeader(self, QNetworkRequest.KnownHeaders, QVariant)");

extern "C" {static PyObject *meth_QNetworkReply_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        const QVariant* a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setHeader(a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setHeader, doc_QNetworkReply_setHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setRawHeader, "setRawHeader(self, QByteArray, QByteArray)");

extern "C" {static PyObject *meth_QNetworkReply_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setRawHeader(*a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRawHeader, doc_QNetworkReply_setRawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setAttribute, "setAttribute(self, QNetworkRequest.Attribute, QVariant)");

extern "C" {static PyObject *meth_QNetworkReply_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        const QVariant* a1;
        int a1State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setAttribute, doc_QNetworkReply_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setFinished, "setFinished(self, bool)");

extern "C" {static PyObject *meth_QNetworkReply_setFinished(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            sipCpp->setFinished(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setFinished, doc_QNetworkReply_setFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isFinished, doc_QNetworkReply_isFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isRunning, doc_QNetworkReply_isRunning);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeaderPairs, "rawHeaderPairs(self) -> object");

extern "C" {static PyObject *meth_QNetworkReply_rawHeaderPairs(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeaderPairs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QList<QPair<QByteArray,QByteArray> >*sipRes;

            sipRes = new QList<QPair<QByteArray,QByteArray> >(sipCpp->rawHeaderPairs());

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeaderPairs, doc_QNetworkReply_rawHeaderPairs);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_sslConfigurationImplementation, "sslConfigurationImplementation(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkReply_sslConfigurationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_sslConfigurationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSslConfiguration* a0;
        const QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            (sipSelfWasArg ? sipCpp->QNetworkReply::sslConfigurationImplementation(*a0) : sipCpp->sslConfigurationImplementation(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_sslConfigurationImplementation, doc_QNetworkReply_sslConfigurationImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_setSslConfigurationImplementation, "setSslConfigurationImplementation(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkReply_setSslConfigurationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setSslConfigurationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslConfiguration* a0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            (sipSelfWasArg ? sipCpp->QNetworkReply::setSslConfigurationImplementation(*a0) : sipCpp->setSslConfigurationImplementation(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setSslConfigurationImplementation, doc_QNetworkReply_setSslConfigurationImplementation);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkReply_ignoreSslErrorsImplementation, "ignoreSslErrorsImplementation(self, object)");

extern "C" {static PyObject *meth_QNetworkReply_ignoreSslErrorsImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_ignoreSslErrorsImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QSslError>* a0;
        int a0State = 0;
        QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QNetworkReply::ignoreSslErrorsImplementation(*a0) : sipCpp->ignoreSslErrorsImplementation(*a0));
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_ignoreSslErrorsImplementation, doc_QNetworkReply_ignoreSslErrorsImplementation);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkReply(void *, int);}
static void release_QNetworkReply(void *sipCppV,int)
{
    QNetworkReply *sipCpp = reinterpret_cast<QNetworkReply *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkReply(sipSimpleWrapper *);}
static void dealloc_QNetworkReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkReply *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkReply(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNetworkReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkReply *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkReply(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkReply[] = {{70, 0, 1}};


static PyMethodDef methods_QNetworkReply[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QNetworkReply_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_abort)},
    {SIP_MLNAME_CAST(sipName_attribute), meth_QNetworkReply_attribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_attribute)},
    {SIP_MLNAME_CAST(sipName_close), meth_QNetworkReply_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_close)},
    {SIP_MLNAME_CAST(sipName_error), meth_QNetworkReply_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_error)},
    {SIP_MLNAME_CAST(sipName_hasRawHeader), meth_QNetworkReply_hasRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_hasRawHeader)},
    {SIP_MLNAME_CAST(sipName_header), meth_QNetworkReply_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_header)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QNetworkReply_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrorsImplementation), meth_QNetworkReply_ignoreSslErrorsImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_ignoreSslErrorsImplementation)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QNetworkReply_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isFinished)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QNetworkReply_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isRunning)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QNetworkReply_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isSequential)},
    {SIP_MLNAME_CAST(sipName_manager), meth_QNetworkReply_manager, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_manager)},
    {SIP_MLNAME_CAST(sipName_operation), meth_QNetworkReply_operation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_operation)},
    {SIP_MLNAME_CAST(sipName_rawHeader), meth_QNetworkReply_rawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeader)},
    {SIP_MLNAME_CAST(sipName_rawHeaderList), meth_QNetworkReply_rawHeaderList, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeaderList)},
    {SIP_MLNAME_CAST(sipName_rawHeaderPairs), meth_QNetworkReply_rawHeaderPairs, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeaderPairs)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QNetworkReply_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_request), meth_QNetworkReply_request, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_request)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QNetworkReply_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QNetworkReply_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setError)},
    {SIP_MLNAME_CAST(sipName_setFinished), meth_QNetworkReply_setFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setFinished)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QNetworkReply_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setHeader)},
    {SIP_MLNAME_CAST(sipName_setOperation), meth_QNetworkReply_setOperation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setOperation)},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QNetworkReply_setRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setRawHeader)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QNetworkReply_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setRequest), meth_QNetworkReply_setRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setRequest)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QNetworkReply_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_setSslConfigurationImplementation), meth_QNetworkReply_setSslConfigurationImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setSslConfigurationImplementation)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkReply_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setUrl)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QNetworkReply_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_sslConfigurationImplementation), meth_QNetworkReply_sslConfigurationImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_sslConfigurationImplementation)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkReply_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_url)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QNetworkReply_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_writeData)}
};

static sipEnumMemberDef enummembers_QNetworkReply[] = {
    {sipName_AuthenticationRequiredError, static_cast<int>(QNetworkReply::AuthenticationRequiredError), 80},
    {sipName_BackgroundRequestNotAllowedError, static_cast<int>(QNetworkReply::BackgroundRequestNotAllowedError), 80},
    {sipName_ConnectionRefusedError, static_cast<int>(QNetworkReply::ConnectionRefusedError), 80},
    {sipName_ContentAccessDenied, static_cast<int>(QNetworkReply::ContentAccessDenied), 80},
    {sipName_ContentNotFoundError, static_cast<int>(QNetworkReply::ContentNotFoundError), 80},
    {sipName_ContentOperationNotPermittedError, static_cast<int>(QNetworkReply::ContentOperationNotPermittedError), 80},
    {sipName_ContentReSendError, static_cast<int>(QNetworkReply::ContentReSendError), 80},
    {sipName_HostNotFoundError, static_cast<int>(QNetworkReply::HostNotFoundError), 80},
    {sipName_NetworkSessionFailedError, static_cast<int>(QNetworkReply::NetworkSessionFailedError), 80},
    {sipName_NoError, static_cast<int>(QNetworkReply::NoError), 80},
    {sipName_OperationCanceledError, static_cast<int>(QNetworkReply::OperationCanceledError), 80},
    {sipName_ProtocolFailure, static_cast<int>(QNetworkReply::ProtocolFailure), 80},
    {sipName_ProtocolInvalidOperationError, static_cast<int>(QNetworkReply::ProtocolInvalidOperationError), 80},
    {sipName_ProtocolUnknownError, static_cast<int>(QNetworkReply::ProtocolUnknownError), 80},
    {sipName_ProxyAuthenticationRequiredError, static_cast<int>(QNetworkReply::ProxyAuthenticationRequiredError), 80},
    {sipName_ProxyConnectionClosedError, static_cast<int>(QNetworkReply::ProxyConnectionClosedError), 80},
    {sipName_ProxyConnectionRefusedError, static_cast<int>(QNetworkReply::ProxyConnectionRefusedError), 80},
    {sipName_ProxyNotFoundError, static_cast<int>(QNetworkReply::ProxyNotFoundError), 80},
    {sipName_ProxyTimeoutError, static_cast<int>(QNetworkReply::ProxyTimeoutError), 80},
    {sipName_RemoteHostClosedError, static_cast<int>(QNetworkReply::RemoteHostClosedError), 80},
    {sipName_SslHandshakeFailedError, static_cast<int>(QNetworkReply::SslHandshakeFailedError), 80},
    {sipName_TemporaryNetworkFailureError, static_cast<int>(QNetworkReply::TemporaryNetworkFailureError), 80},
    {sipName_TimeoutError, static_cast<int>(QNetworkReply::TimeoutError), 80},
    {sipName_UnknownContentError, static_cast<int>(QNetworkReply::UnknownContentError), 80},
    {sipName_UnknownNetworkError, static_cast<int>(QNetworkReply::UnknownNetworkError), 80},
    {sipName_UnknownProxyError, static_cast<int>(QNetworkReply::UnknownProxyError), 80},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkReply[] = {
    {"downloadProgress(qint64,qint64)", "\1downloadProgress(self, int, int)", 0, 0},
    {"uploadProgress(qint64,qint64)", "\1uploadProgress(self, int, int)", 0, 0},
    {"sslErrors(QList<QSslError>)", "\1sslErrors(self, object)", 0, 0},
    {"encrypted()", "\1encrypted(self)", 0, 0},
    {"finished()", "\1finished(self)", 0, 0},
    {"metaDataChanged()", "\1metaDataChanged(self)", 0, 0},
    {"error(QNetworkReply::NetworkError)", "\1error(self, QNetworkReply.NetworkError)", &methods_QNetworkReply[3], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QNetworkReply, "\1QNetworkReply(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QNetworkReply = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNetworkReply,
        {0}
    },
    {
        sipNameNr_QNetworkReply,
        {0, 0, 1},
        33, methods_QNetworkReply,
        26, enummembers_QNetworkReply,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkReply,
    -1,
    -1,
    supers_QNetworkReply,
    0,
    init_type_QNetworkReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkReply,
    0,
    0,
    0,
    release_QNetworkReply,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNetworkReply::staticMetaObject,
    0,
    signals_QNetworkReply,
    0
};
