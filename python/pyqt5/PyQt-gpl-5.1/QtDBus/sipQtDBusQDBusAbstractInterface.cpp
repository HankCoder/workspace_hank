/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbusabstractinterface.sip"
#include <qdbusabstractinterface.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbuspendingcall.sip"
#include <qdbuspendingcall.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbusmessage.sip"
#include <qdbusmessage.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbuserror.sip"
#include <qdbuserror.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"


class sipQDBusAbstractInterface : public QDBusAbstractInterface
{
public:
    sipQDBusAbstractInterface(const QString&,const QString&,const char*,const QDBusConnection&,QObject*);
    virtual ~sipQDBusAbstractInterface();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDBusAbstractInterface(const sipQDBusAbstractInterface &);
    sipQDBusAbstractInterface &operator = (const sipQDBusAbstractInterface &);

    char sipPyMethods[7];
};

sipQDBusAbstractInterface::sipQDBusAbstractInterface(const QString& a0,const QString& a1,const char*a2,const QDBusConnection& a3,QObject*a4): QDBusAbstractInterface(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDBusAbstractInterface::~sipQDBusAbstractInterface()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDBusAbstractInterface::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtDBus_qt_metaobject(sipPySelf,sipType_QDBusAbstractInterface);

    return QDBusAbstractInterface::metaObject();
}

int sipQDBusAbstractInterface::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDBusAbstractInterface::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDBus_qt_metacall(sipPySelf,sipType_QDBusAbstractInterface,_c,_id,_a);

    return _id;
}

void *sipQDBusAbstractInterface::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtDBus_qt_metacast(sipPySelf, sipType_QDBusAbstractInterface, _clname, &sipCpp) ? sipCpp : QDBusAbstractInterface::qt_metacast(_clname));
}

void sipQDBusAbstractInterface::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QDBusAbstractInterface::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusAbstractInterface::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QDBusAbstractInterface::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusAbstractInterface::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QDBusAbstractInterface::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDBusAbstractInterface::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QDBusAbstractInterface::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDBusAbstractInterface::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QDBusAbstractInterface::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusAbstractInterface::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QDBusAbstractInterface::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDBusAbstractInterface::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QDBusAbstractInterface::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtDBus_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QDBusAbstractInterface_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_isValid, doc_QDBusAbstractInterface_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_connection, "connection(self) -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusAbstractInterface_connection(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_connection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp))
        {
            QDBusConnection*sipRes;

            sipRes = new QDBusConnection(sipCpp->connection());

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_connection, doc_QDBusAbstractInterface_connection);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_service, "service(self) -> object");

extern "C" {static PyObject *meth_QDBusAbstractInterface_service(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_service(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->service());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_service, doc_QDBusAbstractInterface_service);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_path, "path(self) -> object");

extern "C" {static PyObject *meth_QDBusAbstractInterface_path(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_path, doc_QDBusAbstractInterface_path);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_interface, "interface(self) -> object");

extern "C" {static PyObject *meth_QDBusAbstractInterface_interface(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_interface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->interface());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_interface, doc_QDBusAbstractInterface_interface);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_lastError, "lastError(self) -> QDBusError");

extern "C" {static PyObject *meth_QDBusAbstractInterface_lastError(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp))
        {
            QDBusError*sipRes;

            sipRes = new QDBusError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QDBusError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_lastError, doc_QDBusAbstractInterface_lastError);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_setTimeout, "setTimeout(self, int)");

extern "C" {static PyObject *meth_QDBusAbstractInterface_setTimeout(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_setTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, &a0))
        {
            sipCpp->setTimeout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_setTimeout, doc_QDBusAbstractInterface_setTimeout);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_timeout, "timeout(self) -> int");

extern "C" {static PyObject *meth_QDBusAbstractInterface_timeout(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_timeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->timeout();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_timeout, doc_QDBusAbstractInterface_timeout);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_call, "call(self, object, arg1: QVariant = QVariant(), arg2: QVariant = QVariant(), arg3: QVariant = QVariant(), arg4: QVariant = QVariant(), arg5: QVariant = QVariant(), arg6: QVariant = QVariant(), arg7: QVariant = QVariant(), arg8: QVariant = QVariant()) -> QDBusMessage\n"
    "call(self, QDBus.CallMode, object, arg1: QVariant = QVariant(), arg2: QVariant = QVariant(), arg3: QVariant = QVariant(), arg4: QVariant = QVariant(), arg5: QVariant = QVariant(), arg6: QVariant = QVariant(), arg7: QVariant = QVariant(), arg8: QVariant = QVariant()) -> QDBusMessage");

extern "C" {static PyObject *meth_QDBusAbstractInterface_call(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_call(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant& a1def = QVariant();
        const QVariant* a1 = &a1def;
        int a1State = 0;
        const QVariant& a2def = QVariant();
        const QVariant* a2 = &a2def;
        int a2State = 0;
        const QVariant& a3def = QVariant();
        const QVariant* a3 = &a3def;
        int a3State = 0;
        const QVariant& a4def = QVariant();
        const QVariant* a4 = &a4def;
        int a4State = 0;
        const QVariant& a5def = QVariant();
        const QVariant* a5 = &a5def;
        int a5State = 0;
        const QVariant& a6def = QVariant();
        const QVariant* a6 = &a6def;
        int a6State = 0;
        const QVariant& a7def = QVariant();
        const QVariant* a7 = &a7def;
        int a7State = 0;
        const QVariant& a8def = QVariant();
        const QVariant* a8 = &a8def;
        int a8State = 0;
        QDBusAbstractInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_arg1,
            sipName_arg2,
            sipName_arg3,
            sipName_arg4,
            sipName_arg5,
            sipName_arg6,
            sipName_arg7,
            sipName_arg8,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1J1J1J1J1J1J1", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, sipType_QVariant, &a2, &a2State, sipType_QVariant, &a3, &a3State, sipType_QVariant, &a4, &a4State, sipType_QVariant, &a5, &a5State, sipType_QVariant, &a6, &a6State, sipType_QVariant, &a7, &a7State, sipType_QVariant, &a8, &a8State))
        {
            QDBusMessage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusMessage(sipCpp->call(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(const_cast<QVariant *>(a3),sipType_QVariant,a3State);
            sipReleaseType(const_cast<QVariant *>(a4),sipType_QVariant,a4State);
            sipReleaseType(const_cast<QVariant *>(a5),sipType_QVariant,a5State);
            sipReleaseType(const_cast<QVariant *>(a6),sipType_QVariant,a6State);
            sipReleaseType(const_cast<QVariant *>(a7),sipType_QVariant,a7State);
            sipReleaseType(const_cast<QVariant *>(a8),sipType_QVariant,a8State);

            return sipConvertFromNewType(sipRes,sipType_QDBusMessage,NULL);
        }
    }

    {
        QDBus::CallMode a0;
        const QString* a1;
        int a1State = 0;
        const QVariant& a2def = QVariant();
        const QVariant* a2 = &a2def;
        int a2State = 0;
        const QVariant& a3def = QVariant();
        const QVariant* a3 = &a3def;
        int a3State = 0;
        const QVariant& a4def = QVariant();
        const QVariant* a4 = &a4def;
        int a4State = 0;
        const QVariant& a5def = QVariant();
        const QVariant* a5 = &a5def;
        int a5State = 0;
        const QVariant& a6def = QVariant();
        const QVariant* a6 = &a6def;
        int a6State = 0;
        const QVariant& a7def = QVariant();
        const QVariant* a7 = &a7def;
        int a7State = 0;
        const QVariant& a8def = QVariant();
        const QVariant* a8 = &a8def;
        int a8State = 0;
        const QVariant& a9def = QVariant();
        const QVariant* a9 = &a9def;
        int a9State = 0;
        QDBusAbstractInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_arg1,
            sipName_arg2,
            sipName_arg3,
            sipName_arg4,
            sipName_arg5,
            sipName_arg6,
            sipName_arg7,
            sipName_arg8,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1|J1J1J1J1J1J1J1J1", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QDBus_CallMode, &a0, sipType_QString,&a1, &a1State, sipType_QVariant, &a2, &a2State, sipType_QVariant, &a3, &a3State, sipType_QVariant, &a4, &a4State, sipType_QVariant, &a5, &a5State, sipType_QVariant, &a6, &a6State, sipType_QVariant, &a7, &a7State, sipType_QVariant, &a8, &a8State, sipType_QVariant, &a9, &a9State))
        {
            QDBusMessage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusMessage(sipCpp->call(a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(const_cast<QVariant *>(a3),sipType_QVariant,a3State);
            sipReleaseType(const_cast<QVariant *>(a4),sipType_QVariant,a4State);
            sipReleaseType(const_cast<QVariant *>(a5),sipType_QVariant,a5State);
            sipReleaseType(const_cast<QVariant *>(a6),sipType_QVariant,a6State);
            sipReleaseType(const_cast<QVariant *>(a7),sipType_QVariant,a7State);
            sipReleaseType(const_cast<QVariant *>(a8),sipType_QVariant,a8State);
            sipReleaseType(const_cast<QVariant *>(a9),sipType_QVariant,a9State);

            return sipConvertFromNewType(sipRes,sipType_QDBusMessage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_call, doc_QDBusAbstractInterface_call);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_callWithArgumentList, "callWithArgumentList(self, QDBus.CallMode, object, object) -> QDBusMessage");

extern "C" {static PyObject *meth_QDBusAbstractInterface_callWithArgumentList(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_callWithArgumentList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDBus::CallMode a0;
        const QString* a1;
        int a1State = 0;
        const QList<QVariant>* a2;
        int a2State = 0;
        QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1J1", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QDBus_CallMode, &a0, sipType_QString,&a1, &a1State, sipType_QList_0100QVariant,&a2, &a2State))
        {
            QDBusMessage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusMessage(sipCpp->callWithArgumentList(a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QList<QVariant> *>(a2),sipType_QList_0100QVariant,a2State);

            return sipConvertFromNewType(sipRes,sipType_QDBusMessage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_callWithArgumentList, doc_QDBusAbstractInterface_callWithArgumentList);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_callWithCallback, "callWithCallback(self, object, object, object, object) -> bool\n"
    "callWithCallback(self, object, object, object) -> bool");

extern "C" {static PyObject *meth_QDBusAbstractInterface_callWithCallback(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_callWithCallback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QList<QVariant>* a1;
        int a1State = 0;
        PyObject * a2;
        PyObject * a3;
        QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1P0P0", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QList_0100QVariant,&a1, &a1State, &a2, &a3))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 77 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbusabstractinterface.sip"
        QObject *receiver;
        QByteArray return_slot;
        
        if ((sipError = pyqt5_get_pyqtslot_parts(a2, &receiver, return_slot)) == sipErrorNone)
        {
            QObject *error_receiver;
            QByteArray error_slot;
        
            if ((sipError = pyqt5_get_pyqtslot_parts(a3, &error_receiver, error_slot)) == sipErrorNone)
            {
                if (receiver == error_receiver)
                {
                    sipRes = sipCpp->callWithCallback(*a0, *a1, receiver, return_slot.constData(), error_slot.constData());
                }
                else
                {
                    PyErr_SetString(PyExc_ValueError,
                            "the return and error methods must be bound to the same QObject instance");
                    sipError = sipErrorFail;
                }
            }
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(3, a3);
            }
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(2, a2);
        }
#line 747 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QList<QVariant> *>(a1),sipType_QList_0100QVariant,a1State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QList<QVariant>* a1;
        int a1State = 0;
        PyObject * a2;
        QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1P0", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QList_0100QVariant,&a1, &a1State, &a2))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtDBus/qdbusabstractinterface.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_get_pyqtslot_parts(a2, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->callWithCallback(*a0, *a1, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(2, a2);
        }
#line 788 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtDBus/sipQtDBusQDBusAbstractInterface.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QList_0100QVariant,a1State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_callWithCallback, doc_QDBusAbstractInterface_callWithCallback);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_asyncCall, "asyncCall(self, object, arg1: QVariant = QVariant(), arg2: QVariant = QVariant(), arg3: QVariant = QVariant(), arg4: QVariant = QVariant(), arg5: QVariant = QVariant(), arg6: QVariant = QVariant(), arg7: QVariant = QVariant(), arg8: QVariant = QVariant()) -> QDBusPendingCall");

extern "C" {static PyObject *meth_QDBusAbstractInterface_asyncCall(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_asyncCall(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant& a1def = QVariant();
        const QVariant* a1 = &a1def;
        int a1State = 0;
        const QVariant& a2def = QVariant();
        const QVariant* a2 = &a2def;
        int a2State = 0;
        const QVariant& a3def = QVariant();
        const QVariant* a3 = &a3def;
        int a3State = 0;
        const QVariant& a4def = QVariant();
        const QVariant* a4 = &a4def;
        int a4State = 0;
        const QVariant& a5def = QVariant();
        const QVariant* a5 = &a5def;
        int a5State = 0;
        const QVariant& a6def = QVariant();
        const QVariant* a6 = &a6def;
        int a6State = 0;
        const QVariant& a7def = QVariant();
        const QVariant* a7 = &a7def;
        int a7State = 0;
        const QVariant& a8def = QVariant();
        const QVariant* a8 = &a8def;
        int a8State = 0;
        QDBusAbstractInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_arg1,
            sipName_arg2,
            sipName_arg3,
            sipName_arg4,
            sipName_arg5,
            sipName_arg6,
            sipName_arg7,
            sipName_arg8,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1J1J1J1J1J1J1", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, sipType_QVariant, &a2, &a2State, sipType_QVariant, &a3, &a3State, sipType_QVariant, &a4, &a4State, sipType_QVariant, &a5, &a5State, sipType_QVariant, &a6, &a6State, sipType_QVariant, &a7, &a7State, sipType_QVariant, &a8, &a8State))
        {
            QDBusPendingCall*sipRes;

            sipRes = new QDBusPendingCall(sipCpp->asyncCall(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(const_cast<QVariant *>(a3),sipType_QVariant,a3State);
            sipReleaseType(const_cast<QVariant *>(a4),sipType_QVariant,a4State);
            sipReleaseType(const_cast<QVariant *>(a5),sipType_QVariant,a5State);
            sipReleaseType(const_cast<QVariant *>(a6),sipType_QVariant,a6State);
            sipReleaseType(const_cast<QVariant *>(a7),sipType_QVariant,a7State);
            sipReleaseType(const_cast<QVariant *>(a8),sipType_QVariant,a8State);

            return sipConvertFromNewType(sipRes,sipType_QDBusPendingCall,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_asyncCall, doc_QDBusAbstractInterface_asyncCall);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_asyncCallWithArgumentList, "asyncCallWithArgumentList(self, object, object) -> QDBusPendingCall");

extern "C" {static PyObject *meth_QDBusAbstractInterface_asyncCallWithArgumentList(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_asyncCallWithArgumentList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QList<QVariant>* a1;
        int a1State = 0;
        QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QList_0100QVariant,&a1, &a1State))
        {
            QDBusPendingCall*sipRes;

            sipRes = new QDBusPendingCall(sipCpp->asyncCallWithArgumentList(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QList<QVariant> *>(a1),sipType_QList_0100QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDBusPendingCall,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_asyncCallWithArgumentList, doc_QDBusAbstractInterface_asyncCallWithArgumentList);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QDBusAbstractInterface_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp->QDBusAbstractInterface::connectNotify(*a0) : sipCpp->connectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_connectNotify, doc_QDBusAbstractInterface_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusAbstractInterface_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QDBusAbstractInterface_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusAbstractInterface_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        QDBusAbstractInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QDBusAbstractInterface, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp->QDBusAbstractInterface::disconnectNotify(*a0) : sipCpp->disconnectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusAbstractInterface, sipName_disconnectNotify, doc_QDBusAbstractInterface_disconnectNotify);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusAbstractInterface(void *, int);}
static void release_QDBusAbstractInterface(void *sipCppV,int)
{
    QDBusAbstractInterface *sipCpp = reinterpret_cast<QDBusAbstractInterface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QDBusAbstractInterface(sipSimpleWrapper *);}
static void dealloc_QDBusAbstractInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDBusAbstractInterface *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDBusAbstractInterface(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDBusAbstractInterface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDBusAbstractInterface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDBusAbstractInterface *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const char* a2;
        PyObject *a2Keep;
        const QDBusConnection* a3;
        QObject* a4;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1AAJ9JH", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2Keep, &a2, sipType_QDBusConnection, &a3, sipType_QObject, &a4, sipOwner))
        {
            sipCpp = new sipQDBusAbstractInterface(*a0,*a1,a2,*a3,a4);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            Py_DECREF(a2Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDBusAbstractInterface[] = {{142, 0, 1}};


static PyMethodDef methods_QDBusAbstractInterface[] = {
    {SIP_MLNAME_CAST(sipName_asyncCall), (PyCFunction)meth_QDBusAbstractInterface_asyncCall, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_asyncCall)},
    {SIP_MLNAME_CAST(sipName_asyncCallWithArgumentList), meth_QDBusAbstractInterface_asyncCallWithArgumentList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_asyncCallWithArgumentList)},
    {SIP_MLNAME_CAST(sipName_call), (PyCFunction)meth_QDBusAbstractInterface_call, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_call)},
    {SIP_MLNAME_CAST(sipName_callWithArgumentList), meth_QDBusAbstractInterface_callWithArgumentList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_callWithArgumentList)},
    {SIP_MLNAME_CAST(sipName_callWithCallback), meth_QDBusAbstractInterface_callWithCallback, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_callWithCallback)},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QDBusAbstractInterface_connectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_connectNotify)},
    {SIP_MLNAME_CAST(sipName_connection), meth_QDBusAbstractInterface_connection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_connection)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QDBusAbstractInterface_disconnectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_disconnectNotify)},
    {SIP_MLNAME_CAST(sipName_interface), meth_QDBusAbstractInterface_interface, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_interface)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QDBusAbstractInterface_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_isValid)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QDBusAbstractInterface_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_lastError)},
    {SIP_MLNAME_CAST(sipName_path), meth_QDBusAbstractInterface_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_path)},
    {SIP_MLNAME_CAST(sipName_service), meth_QDBusAbstractInterface_service, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_service)},
    {SIP_MLNAME_CAST(sipName_setTimeout), meth_QDBusAbstractInterface_setTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_setTimeout)},
    {SIP_MLNAME_CAST(sipName_timeout), meth_QDBusAbstractInterface_timeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusAbstractInterface_timeout)}
};

PyDoc_STRVAR(doc_QDBusAbstractInterface, "\1QDBusAbstractInterface(object, object, str, QDBusConnection, QObject)");


pyqt5ClassTypeDef sipTypeDef_QtDBus_QDBusAbstractInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDBusAbstractInterface,
        {0}
    },
    {
        sipNameNr_QDBusAbstractInterface,
        {0, 0, 1},
        15, methods_QDBusAbstractInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDBusAbstractInterface,
    -1,
    -1,
    supers_QDBusAbstractInterface,
    0,
    init_type_QDBusAbstractInterface,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDBusAbstractInterface,
    0,
    0,
    0,
    release_QDBusAbstractInterface,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDBusAbstractInterface::staticMetaObject,
    0,
    0,
    0
};
