// qfontdatabase.sip generated by MetaSIP on Wed Oct  2 09:09:07 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QFontDatabase
{
%TypeHeaderCode
#include <qfontdatabase.h>
%End

public:
    enum WritingSystem
    {
        Any,
        Latin,
        Greek,
        Cyrillic,
        Armenian,
        Hebrew,
        Arabic,
        Syriac,
        Thaana,
        Devanagari,
        Bengali,
        Gurmukhi,
        Gujarati,
        Oriya,
        Tamil,
        Telugu,
        Kannada,
        Malayalam,
        Sinhala,
        Thai,
        Lao,
        Tibetan,
        Myanmar,
        Georgian,
        Khmer,
        SimplifiedChinese,
        TraditionalChinese,
        Japanese,
        Korean,
        Vietnamese,
        Other,
        Symbol,
        Ogham,
        Runic,
        Nko,
    };

    static QList<int> standardSizes();
    QFontDatabase();
    QList<QFontDatabase::WritingSystem> writingSystems() const;
    QList<QFontDatabase::WritingSystem> writingSystems(const QString &family) const;
    QStringList families(QFontDatabase::WritingSystem writingSystem = QFontDatabase::Any) const;
    QStringList styles(const QString &family) const;
    QList<int> pointSizes(const QString &family, const QString &style /DocValue="''"/ = QString());
    QList<int> smoothSizes(const QString &family, const QString &style);
    QString styleString(const QFont &font);
    QString styleString(const QFontInfo &fontInfo);
    QFont font(const QString &family, const QString &style, int pointSize) const;
    bool isBitmapScalable(const QString &family, const QString &style /DocValue="''"/ = QString()) const;
    bool isSmoothlyScalable(const QString &family, const QString &style /DocValue="''"/ = QString()) const;
    bool isScalable(const QString &family, const QString &style /DocValue="''"/ = QString()) const;
    bool isFixedPitch(const QString &family, const QString &style /DocValue="''"/ = QString()) const;
    bool italic(const QString &family, const QString &style) const;
    bool bold(const QString &family, const QString &style) const;
    int weight(const QString &family, const QString &style) const;
    static QString writingSystemName(QFontDatabase::WritingSystem writingSystem);
    static QString writingSystemSample(QFontDatabase::WritingSystem writingSystem);
    static int addApplicationFont(const QString &fileName);
    static int addApplicationFontFromData(const QByteArray &fontData);
    static QStringList applicationFontFamilies(int id);
    static bool removeApplicationFont(int id);
    static bool removeAllApplicationFonts();
    static bool supportsThreadedFontRendering();
};

// QList<QFontDatabase::WritingSystem> is implemented as a Python list.
%MappedType QList<QFontDatabase::WritingSystem> /DocType="list-of-QFontDatabase.WritingSystem"/
{
%TypeHeaderCode
#include <qfontdatabase.h>
#include <qlist.h>
%End

%ConvertFromTypeCode
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QFontDatabase::WritingSystem ws = sipCpp->at(i);
        PyObject *wsobj;

        if ((wsobj = sipConvertFromEnum(ws, sipType_QFontDatabase_WritingSystem)) == NULL)
        {
            Py_DECREF(l);

            return NULL;
        }

        PyList_SET_ITEM(l, i, wsobj);
    }

    return l;
%End

%ConvertToTypeCode
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!sipCanConvertToEnum(PyList_GET_ITEM(sipPy, i), sipType_QFontDatabase_WritingSystem))
                return 0;

        return 1;
    }

    QList<QFontDatabase::WritingSystem> *ql = new QList<QFontDatabase::WritingSystem>;
 
    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        long l = SIPLong_AsLong(PyList_GET_ITEM(sipPy, i));
        ql->append(static_cast<QFontDatabase::WritingSystem>(l));
    }
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
%End
};
