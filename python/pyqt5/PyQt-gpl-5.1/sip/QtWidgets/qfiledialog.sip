// qfiledialog.sip generated by MetaSIP on Wed Oct  2 09:09:09 2013
//
// This file is part of the QtWidgets Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qfiledialog.h>
%End

class QFileDialog : QDialog
{
%TypeHeaderCode
#include <qfiledialog.h>
%End

public:
    enum ViewMode
    {
        Detail,
        List,
    };

    enum FileMode
    {
        AnyFile,
        ExistingFile,
        Directory,
        ExistingFiles,
        DirectoryOnly,
    };

    enum AcceptMode
    {
        AcceptOpen,
        AcceptSave,
    };

    enum DialogLabel
    {
        LookIn,
        FileName,
        FileType,
        Accept,
        Reject,
    };

    enum Option
    {
        ShowDirsOnly,
        DontResolveSymlinks,
        DontConfirmOverwrite,
        DontUseSheet,
        DontUseNativeDialog,
        ReadOnly,
        HideNameFilterDetails,
    };

    typedef QFlags<QFileDialog::Option> Options;
    QFileDialog(QWidget *parent /TransferThis/, Qt::WindowFlags f);
    QFileDialog(QWidget *parent /TransferThis/ = 0, const QString &caption /DocValue="''"/ = QString(), const QString &directory /DocValue="''"/ = QString(), const QString &filter /DocValue="''"/ = QString());
    virtual ~QFileDialog();
    void setDirectory(const QString &directory);
    void setDirectory(const QDir &adirectory);
    QDir directory() const;
    void selectFile(const QString &filename);
    QStringList selectedFiles() const;
    void setViewMode(QFileDialog::ViewMode mode);
    QFileDialog::ViewMode viewMode() const;
    void setFileMode(QFileDialog::FileMode mode);
    QFileDialog::FileMode fileMode() const;
    void setAcceptMode(QFileDialog::AcceptMode mode);
    QFileDialog::AcceptMode acceptMode() const;
    void setDefaultSuffix(const QString &suffix);
    QString defaultSuffix() const;
    void setHistory(const QStringList &paths);
    QStringList history() const;
    void setItemDelegate(QAbstractItemDelegate *delegate /KeepReference/);
    QAbstractItemDelegate *itemDelegate() const;
    void setIconProvider(QFileIconProvider *provider /KeepReference/);
    QFileIconProvider *iconProvider() const;
    void setLabelText(QFileDialog::DialogLabel label, const QString &text);
    QString labelText(QFileDialog::DialogLabel label) const;

signals:
    void currentChanged(const QString &path);
    void directoryEntered(const QString &directory);
    void filesSelected(const QStringList &files);
    void filterSelected(const QString &filter);
    void fileSelected(const QString &file);

public:
    static QString getExistingDirectory(QWidget *parent = 0, const QString &caption /DocValue="''"/ = QString(), const QString &directory /DocValue="''"/ = QString(), QFlags<QFileDialog::Option> options = ShowDirsOnly) /ReleaseGIL/;
    static SIP_PYTUPLE getOpenFileName(QWidget *parent = 0, const QString &caption /DocValue="''"/ = QString(), const QString &directory /DocValue="''"/ = QString(), const QString &filter /DocValue="''"/ = QString(), const QString &initialFilter /DocValue="''"/ = QString(), Options options = 0) /DocType="(str, str)", ReleaseGIL/;
%MethodCode
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getOpenFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
%End

    static SIP_PYTUPLE getOpenFileNames(QWidget *parent = 0, const QString &caption /DocValue="''"/ = QString(), const QString &directory /DocValue="''"/ = QString(), const QString &filter /DocValue="''"/ = QString(), const QString &initialFilter /DocValue="''"/ = QString(), Options options = 0) /DocType="(str, str)", ReleaseGIL/;
%MethodCode
        QStringList *names;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        names = new QStringList(QFileDialog::getOpenFileNames(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *names_obj = sipConvertFromNewType(names, sipType_QStringList, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (names_obj && filter_obj)
            sipRes = PyTuple_Pack(2, names_obj, filter_obj);
        
        Py_XDECREF(names_obj);
        Py_XDECREF(filter_obj);
%End

    static SIP_PYTUPLE getSaveFileName(QWidget *parent = 0, const QString &caption /DocValue="''"/ = QString(), const QString &directory /DocValue="''"/ = QString(), const QString &filter /DocValue="''"/ = QString(), const QString &initialFilter /DocValue="''"/ = QString(), Options options = 0) /DocType="(str, str)", ReleaseGIL/;
%MethodCode
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getSaveFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
%End

protected:
    virtual void done(int result);
    virtual void accept();
    virtual void changeEvent(QEvent *e);

public:
    void setSidebarUrls(const QList<QUrl> &urls);
    QList<QUrl> sidebarUrls() const;
    QByteArray saveState() const;
    bool restoreState(const QByteArray &state);
    void setProxyModel(QAbstractProxyModel *model /Transfer/);
    QAbstractProxyModel *proxyModel() const;
    void setNameFilter(const QString &filter);
    void setNameFilters(const QStringList &filters);
    QStringList nameFilters() const;
    void selectNameFilter(const QString &filter);
    QString selectedNameFilter() const;
    QFlags<QDir::Filter> filter() const;
    void setFilter(QFlags<QDir::Filter> filters);
    void setOption(QFileDialog::Option option, bool on = true);
    bool testOption(QFileDialog::Option option) const;
    void setOptions(QFlags<QFileDialog::Option> options);
    QFlags<QFileDialog::Option> options() const;
    virtual void open();
    void open(SIP_PYOBJECT slot /DocType="slot"/);
%MethodCode
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_get_connection_parts(a0, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipCpp->open(receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

    virtual void setVisible(bool visible);

private:
    QFileDialog(const QFileDialog &);
};

QFlags<QFileDialog::Option> operator|(QFileDialog::Option f1, QFlags<QFileDialog::Option> f2);
