/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"
#line 28 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtSql/qsql.sip"
#include <qsql.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtSql/sipQtSqlQSqlResult.cpp"


class sipQSqlResult : public QSqlResult
{
public:
    sipQSqlResult(const QSqlDriver*);
    virtual ~sipQSqlResult();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QVariant lastInsertId() const;
    QSqlRecord record() const;
    int numRowsAffected();
    int size();
    bool fetchLast();
    bool fetchFirst();
    bool fetchPrevious();
    bool fetchNext();
    bool fetch(int);
    bool reset(const QString&);
    bool isNull(int);
    QVariant data(int);
    void bindValue(const QString&,const QVariant&,QSql::ParamType);
    void bindValue(int,const QVariant&,QSql::ParamType);
    bool savePrepare(const QString&);
    bool prepare(const QString&);
    bool exec();
    void setForwardOnly(bool);
    void setSelect(bool);
    void setQuery(const QString&);
    void setLastError(const QSqlError&);
    void setActive(bool);
    void setAt(int);
    QVariant handle() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlResult(const sipQSqlResult &);
    sipQSqlResult &operator = (const sipQSqlResult &);

    char sipPyMethods[25];
};

sipQSqlResult::sipQSqlResult(const QSqlDriver*a0): QSqlResult(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlResult::~sipQSqlResult()
{
    sipCommonDtor(sipPySelf);
}

QVariant sipQSqlResult::lastInsertId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_lastInsertId);

    if (!sipMeth)
        return QSqlResult::lastInsertId();

    extern QVariant sipVH_QtSql_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_3(sipGILState, 0, sipPySelf, sipMeth);
}

QSqlRecord sipQSqlResult::record() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_record);

    if (!sipMeth)
        return QSqlResult::record();

    extern QSqlRecord sipVH_QtSql_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_4(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQSqlResult::numRowsAffected()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QSqlResult,sipName_numRowsAffected);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtSql_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQSqlResult::size()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QSqlResult,sipName_size);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtSql_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchLast()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QSqlResult,sipName_fetchLast);

    if (!sipMeth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchFirst()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QSqlResult,sipName_fetchFirst);

    if (!sipMeth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchPrevious()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_fetchPrevious);

    if (!sipMeth)
        return QSqlResult::fetchPrevious();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetchNext()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_fetchNext);

    if (!sipMeth)
        return QSqlResult::fetchNext();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlResult::fetch(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QSqlResult,sipName_fetch);

    if (!sipMeth)
        return 0;

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtSql_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::reset(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QSqlResult,sipName_reset);

    if (!sipMeth)
        return 0;

    typedef bool (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return ((sipVH_QtCore_49)(sipModuleAPI_QtSql_QtCore->em_virthandlers[49]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::isNull(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QSqlResult,sipName_isNull);

    if (!sipMeth)
        return 0;

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtSql_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQSqlResult::data(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_QSqlResult,sipName_data);

    if (!sipMeth)
        return QVariant();

    typedef QVariant (*sipVH_QtGui_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_27)(sipModuleAPI_QtSql_QtGui->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::bindValue(const QString& a0,const QVariant& a1,QSql::ParamType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_bindValue);

    if (!sipMeth)
    {
        QSqlResult::bindValue(a0,a1,a2);
        return;
    }

    extern void sipVH_QtSql_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,const QVariant&,QSql::ParamType);

    sipVH_QtSql_5(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSqlResult::bindValue(int a0,const QVariant& a1,QSql::ParamType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_bindValue);

    if (!sipMeth)
    {
        QSqlResult::bindValue(a0,a1,a2);
        return;
    }

    extern void sipVH_QtSql_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const QVariant&,QSql::ParamType);

    sipVH_QtSql_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlResult::savePrepare(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_savePrepare);

    if (!sipMeth)
        return QSqlResult::savePrepare(a0);

    typedef bool (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return ((sipVH_QtCore_49)(sipModuleAPI_QtSql_QtCore->em_virthandlers[49]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::prepare(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_prepare);

    if (!sipMeth)
        return QSqlResult::prepare(a0);

    typedef bool (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return ((sipVH_QtCore_49)(sipModuleAPI_QtSql_QtCore->em_virthandlers[49]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlResult::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_exec);

    if (!sipMeth)
        return QSqlResult::exec();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQSqlResult::setForwardOnly(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_setForwardOnly);

    if (!sipMeth)
    {
        QSqlResult::setForwardOnly(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_1)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[1]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setSelect(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setSelect);

    if (!sipMeth)
    {
        QSqlResult::setSelect(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_1)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[1]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setQuery(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setQuery);

    if (!sipMeth)
    {
        QSqlResult::setQuery(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtSql_QtGui->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setLastError(const QSqlError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setLastError);

    if (!sipMeth)
    {
        QSqlResult::setLastError(a0);
        return;
    }

    extern void sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSqlError&);

    sipVH_QtSql_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setActive(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setActive);

    if (!sipMeth)
    {
        QSqlResult::setActive(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_1)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[1]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlResult::setAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setAt);

    if (!sipMeth)
    {
        QSqlResult::setAt(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtSql_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQSqlResult::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_handle);

    if (!sipMeth)
        return QSqlResult::handle();

    extern QVariant sipVH_QtSql_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_3(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSqlResult_handle, "handle(self) -> QVariant");

extern "C" {static PyObject *meth_QSqlResult_handle(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlResult::handle() : sipCpp->handle()));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_handle, doc_QSqlResult_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_at, "at(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_at(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->at();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_at, doc_QSqlResult_at);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_lastQuery, "lastQuery(self) -> object");

extern "C" {static PyObject *meth_QSqlResult_lastQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->lastQuery());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastQuery, doc_QSqlResult_lastQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_lastError, "lastError(self) -> QSqlError");

extern "C" {static PyObject *meth_QSqlResult_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QSqlError*sipRes;

            sipRes = new QSqlError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastError, doc_QSqlResult_lastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isValid, doc_QSqlResult_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isActive, doc_QSqlResult_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_isSelect, "isSelect(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelect();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isSelect, doc_QSqlResult_isSelect);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_isForwardOnly, "isForwardOnly(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isForwardOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isForwardOnly, doc_QSqlResult_isForwardOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_driver, "driver(self) -> QSqlDriver");

extern "C" {static PyObject *meth_QSqlResult_driver(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_driver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            const QSqlDriver*sipRes;

            sipRes = sipCpp->driver();

            return sipConvertFromType(const_cast<QSqlDriver *>(sipRes),sipType_QSqlDriver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_driver, doc_QSqlResult_driver);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_setAt, "setAt(self, int)");

extern "C" {static PyObject *meth_QSqlResult_setAt(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::setAt(a0) : sipCpp->setAt(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setAt, doc_QSqlResult_setAt);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_setActive, "setActive(self, bool)");

extern "C" {static PyObject *meth_QSqlResult_setActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::setActive(a0) : sipCpp->setActive(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setActive, doc_QSqlResult_setActive);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_setLastError, "setLastError(self, QSqlError)");

extern "C" {static PyObject *meth_QSqlResult_setLastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setLastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlError* a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QSqlError, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::setLastError(*a0) : sipCpp->setLastError(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setLastError, doc_QSqlResult_setLastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_setQuery, "setQuery(self, object)");

extern "C" {static PyObject *meth_QSqlResult_setQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::setQuery(*a0) : sipCpp->setQuery(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setQuery, doc_QSqlResult_setQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_setSelect, "setSelect(self, bool)");

extern "C" {static PyObject *meth_QSqlResult_setSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::setSelect(a0) : sipCpp->setSelect(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setSelect, doc_QSqlResult_setSelect);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_setForwardOnly, "setForwardOnly(self, bool)");

extern "C" {static PyObject *meth_QSqlResult_setForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_setForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::setForwardOnly(a0) : sipCpp->setForwardOnly(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_setForwardOnly, doc_QSqlResult_setForwardOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_exec_, "exec_(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_exec_(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlResult::exec() : sipCpp->exec());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_exec_, doc_QSqlResult_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_exec, "exec(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_exec(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_exec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlResult::exec() : sipCpp->exec());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_exec, doc_QSqlResult_exec);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_prepare, "prepare(self, object) -> bool");

extern "C" {static PyObject *meth_QSqlResult_prepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlResult::prepare(*a0) : sipCpp->prepare(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_prepare, doc_QSqlResult_prepare);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_savePrepare, "savePrepare(self, object) -> bool");

extern "C" {static PyObject *meth_QSqlResult_savePrepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_savePrepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlResult::savePrepare(*a0) : sipCpp->savePrepare(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_savePrepare, doc_QSqlResult_savePrepare);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_bindValue, "bindValue(self, int, QVariant, QSql.ParamType)\n"
    "bindValue(self, object, QVariant, QSql.ParamType)");

extern "C" {static PyObject *meth_QSqlResult_bindValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QVariant* a1;
        int a1State = 0;
        QSql::ParamType* a2;
        int a2State = 0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ1J1", &sipSelf, sipType_QSqlResult, &sipCpp, &a0, sipType_QVariant, &a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::bindValue(a0,*a1,*a2) : sipCpp->bindValue(a0,*a1,*a2));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QSql::ParamType* a2;
        int a2State = 0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1J1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QSqlResult::bindValue(*a0,*a1,*a2) : sipCpp->bindValue(*a0,*a1,*a2));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindValue, doc_QSqlResult_bindValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_addBindValue, "addBindValue(self, QVariant, QSql.ParamType)");

extern "C" {static PyObject *meth_QSqlResult_addBindValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_addBindValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QSql::ParamType* a1;
        int a1State = 0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QVariant, &a0, &a0State, sipType_QSql_ParamType, &a1, &a1State))
        {
            sipCpp->addBindValue(*a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(a1,sipType_QSql_ParamType,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_addBindValue, doc_QSqlResult_addBindValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_boundValue, "boundValue(self, object) -> QVariant\n"
    "boundValue(self, int) -> QVariant");

extern "C" {static PyObject *meth_QSqlResult_boundValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->boundValue(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        int a0;
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->boundValue(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValue, doc_QSqlResult_boundValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_bindValueType, "bindValueType(self, object) -> QSql.ParamType\n"
    "bindValueType(self, int) -> QSql.ParamType");

extern "C" {static PyObject *meth_QSqlResult_bindValueType(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindValueType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSql::ParamType*sipRes;

            sipRes = new QSql::ParamType(sipCpp->bindValueType(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSql_ParamType,NULL);
        }
    }

    {
        int a0;
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QSql::ParamType*sipRes;

            sipRes = new QSql::ParamType(sipCpp->bindValueType(a0));

            return sipConvertFromNewType(sipRes,sipType_QSql_ParamType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindValueType, doc_QSqlResult_bindValueType);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_boundValueCount, "boundValueCount(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_boundValueCount(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValueCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->boundValueCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValueCount, doc_QSqlResult_boundValueCount);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_boundValues, "boundValues(self) -> object");

extern "C" {static PyObject *meth_QSqlResult_boundValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QVector<QVariant>*sipRes;

            sipRes = &sipCpp->boundValues();

            return sipConvertFromType(sipRes,sipType_QVector_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValues, doc_QSqlResult_boundValues);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_executedQuery, "executedQuery(self) -> object");

extern "C" {static PyObject *meth_QSqlResult_executedQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_executedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->executedQuery());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_executedQuery, doc_QSqlResult_executedQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_boundValueName, "boundValueName(self, int) -> object");

extern "C" {static PyObject *meth_QSqlResult_boundValueName(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_boundValueName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->boundValueName(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_boundValueName, doc_QSqlResult_boundValueName);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_clear, "clear(self)");

extern "C" {static PyObject *meth_QSqlResult_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_clear, doc_QSqlResult_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_hasOutValues, "hasOutValues(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_hasOutValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_hasOutValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasOutValues();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_hasOutValues, doc_QSqlResult_hasOutValues);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_bindingSyntax, "bindingSyntax(self) -> QSqlResult.BindingSyntax");

extern "C" {static PyObject *meth_QSqlResult_bindingSyntax(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_bindingSyntax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QSqlResult::BindingSyntax sipRes;

            sipRes = sipCpp->bindingSyntax();

            return sipConvertFromEnum(sipRes,sipType_QSqlResult_BindingSyntax);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_bindingSyntax, doc_QSqlResult_bindingSyntax);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_data, "data(self, int) -> QVariant");

extern "C" {static PyObject *meth_QSqlResult_data(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            QVariant*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_data);
                return NULL;
            }

            sipRes = new QVariant(sipCpp->data(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_data, doc_QSqlResult_data);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_isNull, "isNull(self, int) -> bool");

extern "C" {static PyObject *meth_QSqlResult_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_isNull);
                return NULL;
            }

            sipRes = sipCpp->isNull(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_isNull, doc_QSqlResult_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_reset, "reset(self, object) -> bool");

extern "C" {static PyObject *meth_QSqlResult_reset(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QSqlResult, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_reset);
                return NULL;
            }

            sipRes = sipCpp->reset(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_reset, doc_QSqlResult_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_fetch, "fetch(self, int) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetch(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSqlResult, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetch);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fetch(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetch, doc_QSqlResult_fetch);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_fetchNext, "fetchNext(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchNext(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlResult::fetchNext() : sipCpp->fetchNext());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchNext, doc_QSqlResult_fetchNext);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_fetchPrevious, "fetchPrevious(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchPrevious(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchPrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlResult::fetchPrevious() : sipCpp->fetchPrevious());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchPrevious, doc_QSqlResult_fetchPrevious);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_fetchFirst, "fetchFirst(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchFirst(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetchFirst);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fetchFirst();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchFirst, doc_QSqlResult_fetchFirst);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_fetchLast, "fetchLast(self) -> bool");

extern "C" {static PyObject *meth_QSqlResult_fetchLast(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_fetchLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_fetchLast);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fetchLast();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_fetchLast, doc_QSqlResult_fetchLast);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_size, "size(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_size(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_size);
                return NULL;
            }

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_size, doc_QSqlResult_size);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_numRowsAffected, "numRowsAffected(self) -> int");

extern "C" {static PyObject *meth_QSqlResult_numRowsAffected(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_numRowsAffected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlResult, sipName_numRowsAffected);
                return NULL;
            }

            sipRes = sipCpp->numRowsAffected();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_numRowsAffected, doc_QSqlResult_numRowsAffected);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_record, "record(self) -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlResult_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QSqlRecord*sipRes;

            sipRes = new QSqlRecord((sipSelfWasArg ? sipCpp->QSqlResult::record() : sipCpp->record()));

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_record, doc_QSqlResult_record);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlResult_lastInsertId, "lastInsertId(self) -> QVariant");

extern "C" {static PyObject *meth_QSqlResult_lastInsertId(PyObject *, PyObject *);}
static PyObject *meth_QSqlResult_lastInsertId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlResult, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlResult::lastInsertId() : sipCpp->lastInsertId()));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlResult, sipName_lastInsertId, doc_QSqlResult_lastInsertId);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlResult(void *, int);}
static void release_QSqlResult(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSqlResult *>(sipCppV);
    else
        delete reinterpret_cast<QSqlResult *>(sipCppV);
}


extern "C" {static void dealloc_QSqlResult(sipSimpleWrapper *);}
static void dealloc_QSqlResult(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlResult *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlResult(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSqlResult(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlResult(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSqlResult *sipCpp = 0;

    {
        const QSqlDriver* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QSqlDriver, &a0))
        {
            sipCpp = new sipQSqlResult(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSqlResult[] = {
    {SIP_MLNAME_CAST(sipName_addBindValue), meth_QSqlResult_addBindValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_addBindValue)},
    {SIP_MLNAME_CAST(sipName_at), meth_QSqlResult_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_at)},
    {SIP_MLNAME_CAST(sipName_bindValue), meth_QSqlResult_bindValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_bindValue)},
    {SIP_MLNAME_CAST(sipName_bindValueType), meth_QSqlResult_bindValueType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_bindValueType)},
    {SIP_MLNAME_CAST(sipName_bindingSyntax), meth_QSqlResult_bindingSyntax, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_bindingSyntax)},
    {SIP_MLNAME_CAST(sipName_boundValue), meth_QSqlResult_boundValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_boundValue)},
    {SIP_MLNAME_CAST(sipName_boundValueCount), meth_QSqlResult_boundValueCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_boundValueCount)},
    {SIP_MLNAME_CAST(sipName_boundValueName), meth_QSqlResult_boundValueName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_boundValueName)},
    {SIP_MLNAME_CAST(sipName_boundValues), meth_QSqlResult_boundValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_boundValues)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSqlResult_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_clear)},
    {SIP_MLNAME_CAST(sipName_data), meth_QSqlResult_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_data)},
    {SIP_MLNAME_CAST(sipName_driver), meth_QSqlResult_driver, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_driver)},
    {SIP_MLNAME_CAST(sipName_exec), meth_QSqlResult_exec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QSqlResult_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_exec_)},
    {SIP_MLNAME_CAST(sipName_executedQuery), meth_QSqlResult_executedQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_executedQuery)},
    {SIP_MLNAME_CAST(sipName_fetch), meth_QSqlResult_fetch, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_fetch)},
    {SIP_MLNAME_CAST(sipName_fetchFirst), meth_QSqlResult_fetchFirst, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_fetchFirst)},
    {SIP_MLNAME_CAST(sipName_fetchLast), meth_QSqlResult_fetchLast, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_fetchLast)},
    {SIP_MLNAME_CAST(sipName_fetchNext), meth_QSqlResult_fetchNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_fetchNext)},
    {SIP_MLNAME_CAST(sipName_fetchPrevious), meth_QSqlResult_fetchPrevious, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_fetchPrevious)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSqlResult_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_handle)},
    {SIP_MLNAME_CAST(sipName_hasOutValues), meth_QSqlResult_hasOutValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_hasOutValues)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QSqlResult_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_isActive)},
    {SIP_MLNAME_CAST(sipName_isForwardOnly), meth_QSqlResult_isForwardOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_isForwardOnly)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSqlResult_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_isNull)},
    {SIP_MLNAME_CAST(sipName_isSelect), meth_QSqlResult_isSelect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_isSelect)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSqlResult_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_isValid)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlResult_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_lastError)},
    {SIP_MLNAME_CAST(sipName_lastInsertId), meth_QSqlResult_lastInsertId, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_lastInsertId)},
    {SIP_MLNAME_CAST(sipName_lastQuery), meth_QSqlResult_lastQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_lastQuery)},
    {SIP_MLNAME_CAST(sipName_numRowsAffected), meth_QSqlResult_numRowsAffected, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_numRowsAffected)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QSqlResult_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_prepare)},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlResult_record, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_record)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QSqlResult_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_reset)},
    {SIP_MLNAME_CAST(sipName_savePrepare), meth_QSqlResult_savePrepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_savePrepare)},
    {SIP_MLNAME_CAST(sipName_setActive), meth_QSqlResult_setActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_setActive)},
    {SIP_MLNAME_CAST(sipName_setAt), meth_QSqlResult_setAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_setAt)},
    {SIP_MLNAME_CAST(sipName_setForwardOnly), meth_QSqlResult_setForwardOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_setForwardOnly)},
    {SIP_MLNAME_CAST(sipName_setLastError), meth_QSqlResult_setLastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_setLastError)},
    {SIP_MLNAME_CAST(sipName_setQuery), meth_QSqlResult_setQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_setQuery)},
    {SIP_MLNAME_CAST(sipName_setSelect), meth_QSqlResult_setSelect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_setSelect)},
    {SIP_MLNAME_CAST(sipName_size), meth_QSqlResult_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlResult_size)}
};

static sipEnumMemberDef enummembers_QSqlResult[] = {
    {sipName_NamedBinding, static_cast<int>(QSqlResult::NamedBinding), 27},
    {sipName_PositionalBinding, static_cast<int>(QSqlResult::PositionalBinding), 27},
};

PyDoc_STRVAR(doc_QSqlResult, "\1QSqlResult(QSqlDriver)");


pyqt5ClassTypeDef sipTypeDef_QtSql_QSqlResult = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSqlResult,
        {0}
    },
    {
        sipNameNr_QSqlResult,
        {0, 0, 1},
        42, methods_QSqlResult,
        2, enummembers_QSqlResult,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlResult,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QSqlResult,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlResult,
    0,
    0,
    0,
    release_QSqlResult,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
