/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qitemdelegate.sip"
#include <qitemdelegate.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 564 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qitemeditorfactory.sip"
#include <qitemeditorfactory.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 569 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQItemDelegate.cpp"


class sipQItemDelegate : public QItemDelegate
{
public:
    sipQItemDelegate(QObject*);
    virtual ~sipQItemDelegate();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool event(QEvent*);
    bool helpEvent(QHelpEvent*,QAbstractItemView*,const QStyleOptionViewItem&,const QModelIndex&);
    void destroyEditor(QWidget*,const QModelIndex&) const;
    bool editorEvent(QEvent*,QAbstractItemModel*,const QStyleOptionViewItem&,const QModelIndex&);
    bool eventFilter(QObject*,QEvent*);
    void drawFocus(QPainter*,const QStyleOptionViewItem&,const QRect&) const;
    void drawDisplay(QPainter*,const QStyleOptionViewItem&,const QRect&,const QString&) const;
    void drawDecoration(QPainter*,const QStyleOptionViewItem&,const QRect&,const QPixmap&) const;
    void drawCheck(QPainter*,const QStyleOptionViewItem&,const QRect&,Qt::CheckState) const;
    void updateEditorGeometry(QWidget*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void setModelData(QWidget*,QAbstractItemModel*,const QModelIndex&) const;
    void setEditorData(QWidget*,const QModelIndex&) const;
    QWidget* createEditor(QWidget*,const QStyleOptionViewItem&,const QModelIndex&) const;
    QSize sizeHint(const QStyleOptionViewItem&,const QModelIndex&) const;
    void paint(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQItemDelegate(const sipQItemDelegate &);
    sipQItemDelegate &operator = (const sipQItemDelegate &);

    char sipPyMethods[20];
};

sipQItemDelegate::sipQItemDelegate(QObject*a0): QItemDelegate(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemDelegate::~sipQItemDelegate()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQItemDelegate::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QItemDelegate);

    return QItemDelegate::metaObject();
}

int sipQItemDelegate::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QItemDelegate::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QItemDelegate,_c,_id,_a);

    return _id;
}

void *sipQItemDelegate::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QItemDelegate, _clname, &sipCpp) ? sipCpp : QItemDelegate::qt_metacast(_clname));
}

void sipQItemDelegate::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QItemDelegate::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQItemDelegate::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QItemDelegate::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQItemDelegate::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QItemDelegate::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQItemDelegate::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QItemDelegate::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQItemDelegate::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QItemDelegate::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQItemDelegate::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QItemDelegate::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQItemDelegate::helpEvent(QHelpEvent*a0,QAbstractItemView*a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_helpEvent);

    if (!sipMeth)
        return QItemDelegate::helpEvent(a0,a1,a2,a3);

    extern bool sipVH_QtWidgets_150(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHelpEvent*,QAbstractItemView*,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtWidgets_150(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQItemDelegate::destroyEditor(QWidget*a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_destroyEditor);

    if (!sipMeth)
    {
        QItemDelegate::destroyEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QModelIndex&);

    sipVH_QtWidgets_55(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQItemDelegate::editorEvent(QEvent*a0,QAbstractItemModel*a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_editorEvent);

    if (!sipMeth)
        return QItemDelegate::editorEvent(a0,a1,a2,a3);

    extern bool sipVH_QtWidgets_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*,QAbstractItemModel*,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtWidgets_50(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQItemDelegate::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QItemDelegate::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQItemDelegate::drawFocus(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_drawFocus);

    if (!sipMeth)
    {
        QItemDelegate::drawFocus(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&);

    sipVH_QtWidgets_101(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQItemDelegate::drawDisplay(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,const QString& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_drawDisplay);

    if (!sipMeth)
    {
        QItemDelegate::drawDisplay(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&,const QString&);

    sipVH_QtWidgets_102(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQItemDelegate::drawDecoration(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,const QPixmap& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_drawDecoration);

    if (!sipMeth)
    {
        QItemDelegate::drawDecoration(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&,const QPixmap&);

    sipVH_QtWidgets_103(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQItemDelegate::drawCheck(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,Qt::CheckState a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_drawCheck);

    if (!sipMeth)
    {
        QItemDelegate::drawCheck(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&,Qt::CheckState);

    sipVH_QtWidgets_104(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQItemDelegate::updateEditorGeometry(QWidget*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_updateEditorGeometry);

    if (!sipMeth)
    {
        QItemDelegate::updateEditorGeometry(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtWidgets_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQItemDelegate::setModelData(QWidget*a0,QAbstractItemModel*a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_setModelData);

    if (!sipMeth)
    {
        QItemDelegate::setModelData(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemModel*,const QModelIndex&);

    sipVH_QtWidgets_54(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQItemDelegate::setEditorData(QWidget*a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_setEditorData);

    if (!sipMeth)
    {
        QItemDelegate::setEditorData(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QModelIndex&);

    sipVH_QtWidgets_55(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QWidget* sipQItemDelegate::createEditor(QWidget*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_createEditor);

    if (!sipMeth)
        return QItemDelegate::createEditor(a0,a1,a2);

    extern QWidget* sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtWidgets_56(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QSize sipQItemDelegate::sizeHint(const QStyleOptionViewItem& a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QItemDelegate::sizeHint(a0,a1);

    extern QSize sipVH_QtWidgets_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtWidgets_57(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQItemDelegate::paint(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_paint);

    if (!sipMeth)
    {
        QItemDelegate::paint(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtWidgets_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QItemDelegate_paint, "paint(self, QPainter, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QItemDelegate_paint(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::paint(a0,*a1,*a2) : sipCpp->paint(a0,*a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_paint, doc_QItemDelegate_paint);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_sizeHint, "sizeHint(self, QStyleOptionViewItem, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QItemDelegate_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStyleOptionViewItem* a0;
        const QModelIndex* a1;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QStyleOptionViewItem, &a0, sipType_QModelIndex, &a1))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QItemDelegate::sizeHint(*a0,*a1) : sipCpp->sizeHint(*a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_sizeHint, doc_QItemDelegate_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_createEditor, "createEditor(self, QWidget, QStyleOptionViewItem, QModelIndex) -> QWidget");

extern "C" {static PyObject *meth_QItemDelegate_createEditor(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_createEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        sipWrapper *sipOwner = 0;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJHJ9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QWidget, &a0, &sipOwner, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            QWidget*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QItemDelegate::createEditor(a0,*a1,*a2) : sipCpp->createEditor(a0,*a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_createEditor, doc_QItemDelegate_createEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_setEditorData, "setEditorData(self, QWidget, QModelIndex)");

extern "C" {static PyObject *meth_QItemDelegate_setEditorData(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QModelIndex* a1;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QWidget, &a0, sipType_QModelIndex, &a1))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::setEditorData(a0,*a1) : sipCpp->setEditorData(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_setEditorData, doc_QItemDelegate_setEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_setModelData, "setModelData(self, QWidget, QAbstractItemModel, QModelIndex)");

extern "C" {static PyObject *meth_QItemDelegate_setModelData(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setModelData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemModel* a1;
        PyObject *a1Keep;
        const QModelIndex* a2;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8@J8J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QWidget, &a0, &a1Keep, sipType_QAbstractItemModel, &a1, sipType_QModelIndex, &a2))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::setModelData(a0,a1,*a2) : sipCpp->setModelData(a0,a1,*a2));

            sipKeepReference(sipSelf, -30, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_setModelData, doc_QItemDelegate_setModelData);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_updateEditorGeometry, "updateEditorGeometry(self, QWidget, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QItemDelegate_updateEditorGeometry(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_updateEditorGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QWidget, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::updateEditorGeometry(a0,*a1,*a2) : sipCpp->updateEditorGeometry(a0,*a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_updateEditorGeometry, doc_QItemDelegate_updateEditorGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_itemEditorFactory, "itemEditorFactory(self) -> QItemEditorFactory");

extern "C" {static PyObject *meth_QItemDelegate_itemEditorFactory(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_itemEditorFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemDelegate, &sipCpp))
        {
            QItemEditorFactory*sipRes;

            sipRes = sipCpp->itemEditorFactory();

            return sipConvertFromType(sipRes,sipType_QItemEditorFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_itemEditorFactory, doc_QItemDelegate_itemEditorFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_setItemEditorFactory, "setItemEditorFactory(self, QItemEditorFactory)");

extern "C" {static PyObject *meth_QItemDelegate_setItemEditorFactory(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setItemEditorFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemEditorFactory* a0;
        PyObject *a0Keep;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QItemDelegate, &sipCpp, &a0Keep, sipType_QItemEditorFactory, &a0))
        {
            sipCpp->setItemEditorFactory(a0);

            sipKeepReference(sipSelf, -31, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_setItemEditorFactory, doc_QItemDelegate_setItemEditorFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_hasClipping, "hasClipping(self) -> bool");

extern "C" {static PyObject *meth_QItemDelegate_hasClipping(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_hasClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemDelegate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasClipping();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_hasClipping, doc_QItemDelegate_hasClipping);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_setClipping, "setClipping(self, bool)");

extern "C" {static PyObject *meth_QItemDelegate_setClipping(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QItemDelegate, &sipCpp, &a0))
        {
            sipCpp->setClipping(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_setClipping, doc_QItemDelegate_setClipping);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_drawBackground, "drawBackground(self, QPainter, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QItemDelegate_drawBackground(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            sipCpp->drawBackground(a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_drawBackground, doc_QItemDelegate_drawBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_drawCheck, "drawCheck(self, QPainter, QStyleOptionViewItem, QRect, Qt.CheckState)");

extern "C" {static PyObject *meth_QItemDelegate_drawCheck(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawCheck(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        Qt::CheckState a3;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9E", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2, sipType_Qt_CheckState, &a3))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::drawCheck(a0,*a1,*a2,a3) : sipCpp->drawCheck(a0,*a1,*a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_drawCheck, doc_QItemDelegate_drawCheck);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_drawDecoration, "drawDecoration(self, QPainter, QStyleOptionViewItem, QRect, QPixmap)");

extern "C" {static PyObject *meth_QItemDelegate_drawDecoration(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawDecoration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        const QPixmap* a3;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2, sipType_QPixmap, &a3))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::drawDecoration(a0,*a1,*a2,*a3) : sipCpp->drawDecoration(a0,*a1,*a2,*a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_drawDecoration, doc_QItemDelegate_drawDecoration);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_drawDisplay, "drawDisplay(self, QPainter, QStyleOptionViewItem, QRect, object)");

extern "C" {static PyObject *meth_QItemDelegate_drawDisplay(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        const QString* a3;
        int a3State = 0;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9J1", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2, sipType_QString,&a3, &a3State))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::drawDisplay(a0,*a1,*a2,*a3) : sipCpp->drawDisplay(a0,*a1,*a2,*a3));
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_drawDisplay, doc_QItemDelegate_drawDisplay);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_drawFocus, "drawFocus(self, QPainter, QStyleOptionViewItem, QRect)");

extern "C" {static PyObject *meth_QItemDelegate_drawFocus(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        const QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2))
        {
            (sipSelfWasArg ? sipCpp->QItemDelegate::drawFocus(a0,*a1,*a2) : sipCpp->drawFocus(a0,*a1,*a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_drawFocus, doc_QItemDelegate_drawFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QItemDelegate_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QItemDelegate::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_eventFilter, doc_QItemDelegate_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QItemDelegate_editorEvent, "editorEvent(self, QEvent, QAbstractItemModel, QStyleOptionViewItem, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemDelegate_editorEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_editorEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractItemModel* a1;
        const QStyleOptionViewItem* a2;
        const QModelIndex* a3;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8J9J9", &sipSelf, sipType_QItemDelegate, &sipCpp, sipType_QEvent, &a0, sipType_QAbstractItemModel, &a1, sipType_QStyleOptionViewItem, &a2, sipType_QModelIndex, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QItemDelegate::editorEvent(a0,a1,*a2,*a3) : sipCpp->editorEvent(a0,a1,*a2,*a3));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemDelegate, sipName_editorEvent, doc_QItemDelegate_editorEvent);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemDelegate(void *, int);}
static void release_QItemDelegate(void *sipCppV,int)
{
    QItemDelegate *sipCpp = reinterpret_cast<QItemDelegate *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QItemDelegate(sipSimpleWrapper *);}
static void dealloc_QItemDelegate(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQItemDelegate *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QItemDelegate(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QItemDelegate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemDelegate(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQItemDelegate *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQItemDelegate(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QItemDelegate[] = {{2, 255, 1}};


static PyMethodDef methods_QItemDelegate[] = {
    {SIP_MLNAME_CAST(sipName_createEditor), meth_QItemDelegate_createEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_createEditor)},
    {SIP_MLNAME_CAST(sipName_drawBackground), meth_QItemDelegate_drawBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_drawBackground)},
    {SIP_MLNAME_CAST(sipName_drawCheck), meth_QItemDelegate_drawCheck, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_drawCheck)},
    {SIP_MLNAME_CAST(sipName_drawDecoration), meth_QItemDelegate_drawDecoration, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_drawDecoration)},
    {SIP_MLNAME_CAST(sipName_drawDisplay), meth_QItemDelegate_drawDisplay, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_drawDisplay)},
    {SIP_MLNAME_CAST(sipName_drawFocus), meth_QItemDelegate_drawFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_drawFocus)},
    {SIP_MLNAME_CAST(sipName_editorEvent), meth_QItemDelegate_editorEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_editorEvent)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QItemDelegate_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_eventFilter)},
    {SIP_MLNAME_CAST(sipName_hasClipping), meth_QItemDelegate_hasClipping, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_hasClipping)},
    {SIP_MLNAME_CAST(sipName_itemEditorFactory), meth_QItemDelegate_itemEditorFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_itemEditorFactory)},
    {SIP_MLNAME_CAST(sipName_paint), meth_QItemDelegate_paint, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_paint)},
    {SIP_MLNAME_CAST(sipName_setClipping), meth_QItemDelegate_setClipping, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_setClipping)},
    {SIP_MLNAME_CAST(sipName_setEditorData), meth_QItemDelegate_setEditorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_setEditorData)},
    {SIP_MLNAME_CAST(sipName_setItemEditorFactory), meth_QItemDelegate_setItemEditorFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_setItemEditorFactory)},
    {SIP_MLNAME_CAST(sipName_setModelData), meth_QItemDelegate_setModelData, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_setModelData)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QItemDelegate_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_sizeHint)},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometry), meth_QItemDelegate_updateEditorGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemDelegate_updateEditorGeometry)}
};

PyDoc_STRVAR(doc_QItemDelegate, "\1QItemDelegate(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QItemDelegate = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QItemDelegate,
        {0}
    },
    {
        sipNameNr_QItemDelegate,
        {0, 0, 1},
        17, methods_QItemDelegate,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QItemDelegate,
    -1,
    -1,
    supers_QItemDelegate,
    0,
    init_type_QItemDelegate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QItemDelegate,
    0,
    0,
    0,
    release_QItemDelegate,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QItemDelegate::staticMetaObject,
    0,
    0,
    0
};
