/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qinputdialog.sip"
#include <qinputdialog.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlineedit.sip"
#include <qlineedit.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qinputdialog.sip"
#include <qinputdialog.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 427 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 370 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 405 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 308 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 454 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 531 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 547 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 259 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 357 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 343 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 329 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 237 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 198 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"


class sipQInputDialog : public QInputDialog
{
public:
    sipQInputDialog(QWidget*,Qt::WindowFlags);
    virtual ~sipQInputDialog();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    QPaintDevice* redirected(QPoint*) const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool event(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    int devType() const;
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void resizeEvent(QResizeEvent*);
    void showEvent(QShowEvent*);
    void closeEvent(QCloseEvent*);
    void keyPressEvent(QKeyEvent*);
    void reject();
    void accept();
    int exec();
    void done(int);
    void setVisible(bool);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void open();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQInputDialog(const sipQInputDialog &);
    sipQInputDialog &operator = (const sipQInputDialog &);

    char sipPyMethods[53];
};

sipQInputDialog::sipQInputDialog(QWidget*a0,Qt::WindowFlags a1): QInputDialog(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQInputDialog::~sipQInputDialog()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQInputDialog::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QInputDialog);

    return QInputDialog::metaObject();
}

int sipQInputDialog::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QInputDialog::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QInputDialog,_c,_id,_a);

    return _id;
}

void *sipQInputDialog::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QInputDialog, _clname, &sipCpp) ? sipCpp : QInputDialog::qt_metacast(_clname));
}

void sipQInputDialog::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QInputDialog::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QInputDialog::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QInputDialog::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QInputDialog::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QInputDialog::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QInputDialog::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPainter* sipQInputDialog::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QInputDialog::sharedPainter();

    extern QPainter* sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_5(sipGILState, 0, sipPySelf, sipMeth);
}

QPaintDevice* sipQInputDialog::redirected(QPoint*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_redirected);

    if (!sipMeth)
        return QInputDialog::redirected(a0);

    extern QPaintDevice* sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPoint*);

    return sipVH_QtWidgets_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQInputDialog::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QInputDialog::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQInputDialog::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QInputDialog::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQInputDialog::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QInputDialog::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQInputDialog::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QInputDialog::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QInputDialog::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQInputDialog::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QInputDialog::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QInputDialog::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QInputDialog::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QInputDialog::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QInputDialog::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QInputDialog::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QInputDialog::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QInputDialog::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QInputDialog::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QInputDialog::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QInputDialog::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtWidgets_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QInputDialog::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QInputDialog::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QInputDialog::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QInputDialog::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QInputDialog::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QInputDialog::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QInputDialog::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QInputDialog::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QInputDialog::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QInputDialog::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQInputDialog::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QInputDialog::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQInputDialog::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QInputDialog::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQInputDialog::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QInputDialog::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQInputDialog::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QInputDialog::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQInputDialog::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QInputDialog::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQInputDialog::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QInputDialog::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QInputDialog::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QInputDialog::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QInputDialog::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QInputDialog::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_reject);

    if (!sipMeth)
    {
        QInputDialog::reject();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQInputDialog::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_accept);

    if (!sipMeth)
    {
        QInputDialog::accept();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQInputDialog::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_exec);

    if (!sipMeth)
        return QInputDialog::exec();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQInputDialog::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_done);

    if (!sipMeth)
    {
        QInputDialog::done(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputDialog::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QInputDialog::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQInputDialog::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QInputDialog::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQInputDialog::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QInputDialog::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQInputDialog::open()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
    {
        QInputDialog::open();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QInputDialog_getText, "getText(QWidget, object, object, echo: QLineEdit.EchoMode = QLineEdit.Normal, text: object = QString(), flags: Qt.WindowFlags = 0, inputMethodHints: Qt.InputMethodHints = Qt.ImhNone) -> Tuple[object, bool]");

extern "C" {static PyObject *meth_QInputDialog_getText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_getText(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QLineEdit::EchoMode a3 = QLineEdit::Normal;
        const QString& a4def = QString();
        const QString* a4 = &a4def;
        int a4State = 0;
        bool a5;
        Qt::WindowFlags a6def = 0;
        Qt::WindowFlags* a6 = &a6def;
        int a6State = 0;
        Qt::InputMethodHints a7def = Qt::ImhNone;
        Qt::InputMethodHints* a7 = &a7def;
        int a7State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_echo,
            sipName_text,
            sipName_flags,
            sipName_inputMethodHints,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|EJ1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QLineEdit_EchoMode, &a3, sipType_QString,&a4, &a4State, sipType_Qt_WindowFlags, &a6, &a6State, sipType_Qt_InputMethodHints, &a7, &a7State))
        {
            QString*sipRes;

            sipRes = new QString(QInputDialog::getText(a0,*a1,*a2,a3,*a4,&a5,*a6,*a7));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a6,sipType_Qt_WindowFlags,a6State);
            sipReleaseType(a7,sipType_Qt_InputMethodHints,a7State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QString,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a5);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_getText, doc_QInputDialog_getText);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_getInt, "getInt(QWidget, object, object, value: int = 0, min: int = -2147483647, max: int = 2147483647, step: int = 1, flags: Qt.WindowFlags = 0) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QInputDialog_getInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_getInt(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        int a3 = 0;
        int a4 = -2147483647;
        int a5 = 2147483647;
        int a6 = 1;
        bool a7;
        Qt::WindowFlags a8def = 0;
        Qt::WindowFlags* a8 = &a8def;
        int a8State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_value,
            sipName_min,
            sipName_max,
            sipName_step,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|iiiiJ1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4, &a5, &a6, sipType_Qt_WindowFlags, &a8, &a8State))
        {
            int sipRes;

            sipRes = QInputDialog::getInt(a0,*a1,*a2,a3,a4,a5,a6,&a7,*a8);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a8,sipType_Qt_WindowFlags,a8State);

            return sipBuildResult(0,"(ib)",sipRes,a7);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_getInt, doc_QInputDialog_getInt);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_getDouble, "getDouble(QWidget, object, object, value: float = 0, min: float = -2147483647, max: float = 2147483647, decimals: int = 1, flags: Qt.WindowFlags = 0) -> Tuple[float, bool]");

extern "C" {static PyObject *meth_QInputDialog_getDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_getDouble(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        double a3 = 0;
        double a4 = -2147483647;
        double a5 = 2147483647;
        int a6 = 1;
        bool a7;
        Qt::WindowFlags a8def = 0;
        Qt::WindowFlags* a8 = &a8def;
        int a8State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_value,
            sipName_min,
            sipName_max,
            sipName_decimals,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|dddiJ1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4, &a5, &a6, sipType_Qt_WindowFlags, &a8, &a8State))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QInputDialog::getDouble(a0,*a1,*a2,a3,a4,a5,a6,&a7,*a8);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a8,sipType_Qt_WindowFlags,a8State);

            return sipBuildResult(0,"(db)",sipRes,a7);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_getDouble, doc_QInputDialog_getDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_getItem, "getItem(QWidget, object, object, object, current: int = 0, editable: bool = True, flags: Qt.WindowFlags = 0, inputMethodHints: Qt.InputMethodHints = Qt.ImhNone) -> Tuple[object, bool]");

extern "C" {static PyObject *meth_QInputDialog_getItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_getItem(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QStringList* a3;
        int a3State = 0;
        int a4 = 0;
        bool a5 = 1;
        bool a6;
        Qt::WindowFlags a7def = 0;
        Qt::WindowFlags* a7 = &a7def;
        int a7State = 0;
        Qt::InputMethodHints a8def = Qt::ImhNone;
        Qt::InputMethodHints* a8 = &a8def;
        int a8State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_current,
            sipName_editable,
            sipName_flags,
            sipName_inputMethodHints,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1J1|ibJ1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QStringList,&a3, &a3State, &a4, &a5, sipType_Qt_WindowFlags, &a7, &a7State, sipType_Qt_InputMethodHints, &a8, &a8State))
        {
            QString*sipRes;

            sipRes = new QString(QInputDialog::getItem(a0,*a1,*a2,*a3,a4,a5,&a6,*a7,*a8));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QStringList *>(a3),sipType_QStringList,a3State);
            sipReleaseType(a7,sipType_Qt_WindowFlags,a7State);
            sipReleaseType(a8,sipType_Qt_InputMethodHints,a8State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QString,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a6);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_getItem, doc_QInputDialog_getItem);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setInputMode, "setInputMode(self, QInputDialog.InputMode)");

extern "C" {static PyObject *meth_QInputDialog_setInputMode(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setInputMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QInputDialog::InputMode a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QInputDialog_InputMode, &a0))
        {
            sipCpp->setInputMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setInputMode, doc_QInputDialog_setInputMode);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_inputMode, "inputMode(self) -> QInputDialog.InputMode");

extern "C" {static PyObject *meth_QInputDialog_inputMode(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_inputMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QInputDialog::InputMode sipRes;

            sipRes = sipCpp->inputMode();

            return sipConvertFromEnum(sipRes,sipType_QInputDialog_InputMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_inputMode, doc_QInputDialog_inputMode);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setLabelText, "setLabelText(self, object)");

extern "C" {static PyObject *meth_QInputDialog_setLabelText(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setLabelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setLabelText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setLabelText, doc_QInputDialog_setLabelText);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_labelText, "labelText(self) -> object");

extern "C" {static PyObject *meth_QInputDialog_labelText(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_labelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->labelText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_labelText, doc_QInputDialog_labelText);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setOption, "setOption(self, QInputDialog.InputDialogOption, on: bool = True)");

extern "C" {static PyObject *meth_QInputDialog_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QInputDialog::InputDialogOption a0;
        bool a1 = 1;
        QInputDialog *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QInputDialog_InputDialogOption, &a0, &a1))
        {
            sipCpp->setOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setOption, doc_QInputDialog_setOption);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_testOption, "testOption(self, QInputDialog.InputDialogOption) -> bool");

extern "C" {static PyObject *meth_QInputDialog_testOption(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QInputDialog::InputDialogOption a0;
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QInputDialog_InputDialogOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_testOption, doc_QInputDialog_testOption);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setOptions, "setOptions(self, QInputDialog.InputDialogOptions)");

extern "C" {static PyObject *meth_QInputDialog_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QInputDialog::InputDialogOptions* a0;
        int a0State = 0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QInputDialog_InputDialogOptions, &a0, &a0State))
        {
            sipCpp->setOptions(*a0);
            sipReleaseType(a0,sipType_QInputDialog_InputDialogOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setOptions, doc_QInputDialog_setOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_options, "options(self) -> QInputDialog.InputDialogOptions");

extern "C" {static PyObject *meth_QInputDialog_options(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QInputDialog::InputDialogOptions*sipRes;

            sipRes = new QInputDialog::InputDialogOptions(sipCpp->options());

            return sipConvertFromNewType(sipRes,sipType_QInputDialog_InputDialogOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_options, doc_QInputDialog_options);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setTextValue, "setTextValue(self, object)");

extern "C" {static PyObject *meth_QInputDialog_setTextValue(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setTextValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTextValue(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setTextValue, doc_QInputDialog_setTextValue);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_textValue, "textValue(self) -> object");

extern "C" {static PyObject *meth_QInputDialog_textValue(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_textValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->textValue());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_textValue, doc_QInputDialog_textValue);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setTextEchoMode, "setTextEchoMode(self, QLineEdit.EchoMode)");

extern "C" {static PyObject *meth_QInputDialog_setTextEchoMode(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setTextEchoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit::EchoMode a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QLineEdit_EchoMode, &a0))
        {
            sipCpp->setTextEchoMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setTextEchoMode, doc_QInputDialog_setTextEchoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_textEchoMode, "textEchoMode(self) -> QLineEdit.EchoMode");

extern "C" {static PyObject *meth_QInputDialog_textEchoMode(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_textEchoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QLineEdit::EchoMode sipRes;

            sipRes = sipCpp->textEchoMode();

            return sipConvertFromEnum(sipRes,sipType_QLineEdit_EchoMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_textEchoMode, doc_QInputDialog_textEchoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setComboBoxEditable, "setComboBoxEditable(self, bool)");

extern "C" {static PyObject *meth_QInputDialog_setComboBoxEditable(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setComboBoxEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setComboBoxEditable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setComboBoxEditable, doc_QInputDialog_setComboBoxEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_isComboBoxEditable, "isComboBoxEditable(self) -> bool");

extern "C" {static PyObject *meth_QInputDialog_isComboBoxEditable(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_isComboBoxEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComboBoxEditable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_isComboBoxEditable, doc_QInputDialog_isComboBoxEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setComboBoxItems, "setComboBoxItems(self, object)");

extern "C" {static PyObject *meth_QInputDialog_setComboBoxItems(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setComboBoxItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setComboBoxItems(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setComboBoxItems, doc_QInputDialog_setComboBoxItems);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_comboBoxItems, "comboBoxItems(self) -> object");

extern "C" {static PyObject *meth_QInputDialog_comboBoxItems(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_comboBoxItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->comboBoxItems());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_comboBoxItems, doc_QInputDialog_comboBoxItems);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setIntValue, "setIntValue(self, int)");

extern "C" {static PyObject *meth_QInputDialog_setIntValue(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setIntValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setIntValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setIntValue, doc_QInputDialog_setIntValue);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_intValue, "intValue(self) -> int");

extern "C" {static PyObject *meth_QInputDialog_intValue(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_intValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->intValue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_intValue, doc_QInputDialog_intValue);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setIntMinimum, "setIntMinimum(self, int)");

extern "C" {static PyObject *meth_QInputDialog_setIntMinimum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setIntMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setIntMinimum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setIntMinimum, doc_QInputDialog_setIntMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_intMinimum, "intMinimum(self) -> int");

extern "C" {static PyObject *meth_QInputDialog_intMinimum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_intMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->intMinimum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_intMinimum, doc_QInputDialog_intMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setIntMaximum, "setIntMaximum(self, int)");

extern "C" {static PyObject *meth_QInputDialog_setIntMaximum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setIntMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setIntMaximum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setIntMaximum, doc_QInputDialog_setIntMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_intMaximum, "intMaximum(self) -> int");

extern "C" {static PyObject *meth_QInputDialog_intMaximum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_intMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->intMaximum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_intMaximum, doc_QInputDialog_intMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setIntRange, "setIntRange(self, int, int)");

extern "C" {static PyObject *meth_QInputDialog_setIntRange(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setIntRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QInputDialog, &sipCpp, &a0, &a1))
        {
            sipCpp->setIntRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setIntRange, doc_QInputDialog_setIntRange);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setIntStep, "setIntStep(self, int)");

extern "C" {static PyObject *meth_QInputDialog_setIntStep(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setIntStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setIntStep(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setIntStep, doc_QInputDialog_setIntStep);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_intStep, "intStep(self) -> int");

extern "C" {static PyObject *meth_QInputDialog_intStep(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_intStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->intStep();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_intStep, doc_QInputDialog_intStep);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setDoubleValue, "setDoubleValue(self, float)");

extern "C" {static PyObject *meth_QInputDialog_setDoubleValue(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setDoubleValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setDoubleValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setDoubleValue, doc_QInputDialog_setDoubleValue);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_doubleValue, "doubleValue(self) -> float");

extern "C" {static PyObject *meth_QInputDialog_doubleValue(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_doubleValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->doubleValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_doubleValue, doc_QInputDialog_doubleValue);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setDoubleMinimum, "setDoubleMinimum(self, float)");

extern "C" {static PyObject *meth_QInputDialog_setDoubleMinimum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setDoubleMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setDoubleMinimum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setDoubleMinimum, doc_QInputDialog_setDoubleMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_doubleMinimum, "doubleMinimum(self) -> float");

extern "C" {static PyObject *meth_QInputDialog_doubleMinimum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_doubleMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->doubleMinimum();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_doubleMinimum, doc_QInputDialog_doubleMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setDoubleMaximum, "setDoubleMaximum(self, float)");

extern "C" {static PyObject *meth_QInputDialog_setDoubleMaximum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setDoubleMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setDoubleMaximum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setDoubleMaximum, doc_QInputDialog_setDoubleMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_doubleMaximum, "doubleMaximum(self) -> float");

extern "C" {static PyObject *meth_QInputDialog_doubleMaximum(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_doubleMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->doubleMaximum();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_doubleMaximum, doc_QInputDialog_doubleMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setDoubleRange, "setDoubleRange(self, float, float)");

extern "C" {static PyObject *meth_QInputDialog_setDoubleRange(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setDoubleRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QInputDialog, &sipCpp, &a0, &a1))
        {
            sipCpp->setDoubleRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setDoubleRange, doc_QInputDialog_setDoubleRange);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setDoubleDecimals, "setDoubleDecimals(self, int)");

extern "C" {static PyObject *meth_QInputDialog_setDoubleDecimals(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setDoubleDecimals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipCpp->setDoubleDecimals(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setDoubleDecimals, doc_QInputDialog_setDoubleDecimals);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_doubleDecimals, "doubleDecimals(self) -> int");

extern "C" {static PyObject *meth_QInputDialog_doubleDecimals(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_doubleDecimals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->doubleDecimals();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_doubleDecimals, doc_QInputDialog_doubleDecimals);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setOkButtonText, "setOkButtonText(self, object)");

extern "C" {static PyObject *meth_QInputDialog_setOkButtonText(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setOkButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setOkButtonText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setOkButtonText, doc_QInputDialog_setOkButtonText);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_okButtonText, "okButtonText(self) -> object");

extern "C" {static PyObject *meth_QInputDialog_okButtonText(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_okButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->okButtonText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_okButtonText, doc_QInputDialog_okButtonText);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setCancelButtonText, "setCancelButtonText(self, object)");

extern "C" {static PyObject *meth_QInputDialog_setCancelButtonText(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setCancelButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QInputDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCancelButtonText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setCancelButtonText, doc_QInputDialog_setCancelButtonText);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_cancelButtonText, "cancelButtonText(self) -> object");

extern "C" {static PyObject *meth_QInputDialog_cancelButtonText(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_cancelButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->cancelButtonText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_cancelButtonText, doc_QInputDialog_cancelButtonText);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_open, "open(self)\n"
    "open(self, object)");

extern "C" {static PyObject *meth_QInputDialog_open(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QInputDialog::open() : sipCpp->open());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 101 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qinputdialog.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_get_connection_parts(a0, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipCpp->open(receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 2605 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQInputDialog.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_open, doc_QInputDialog_open);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QInputDialog_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QInputDialog::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_minimumSizeHint, doc_QInputDialog_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QInputDialog_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputDialog, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QInputDialog::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_sizeHint, doc_QInputDialog_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QInputDialog_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QInputDialog::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_setVisible, doc_QInputDialog_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QInputDialog_done, "done(self, int)");

extern "C" {static PyObject *meth_QInputDialog_done(PyObject *, PyObject *);}
static PyObject *meth_QInputDialog_done(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QInputDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QInputDialog, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QInputDialog::done(a0) : sipCpp->done(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputDialog, sipName_done, doc_QInputDialog_done);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QInputDialog(void *, const sipTypeDef *);}
static void *cast_QInputDialog(void *sipCppV, const sipTypeDef *targetType)
{
    QInputDialog *sipCpp = reinterpret_cast<QInputDialog *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputDialog(void *, int);}
static void release_QInputDialog(void *sipCppV,int)
{
    QInputDialog *sipCpp = reinterpret_cast<QInputDialog *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QInputDialog(sipSimpleWrapper *);}
static void dealloc_QInputDialog(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQInputDialog *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QInputDialog(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QInputDialog(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QInputDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQInputDialog *sipCpp = 0;

    {
        QWidget* a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp = new sipQInputDialog(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QInputDialog[] = {{59, 255, 1}};


static PyMethodDef methods_QInputDialog[] = {
    {SIP_MLNAME_CAST(sipName_cancelButtonText), meth_QInputDialog_cancelButtonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_cancelButtonText)},
    {SIP_MLNAME_CAST(sipName_comboBoxItems), meth_QInputDialog_comboBoxItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_comboBoxItems)},
    {SIP_MLNAME_CAST(sipName_done), meth_QInputDialog_done, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_done)},
    {SIP_MLNAME_CAST(sipName_doubleDecimals), meth_QInputDialog_doubleDecimals, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_doubleDecimals)},
    {SIP_MLNAME_CAST(sipName_doubleMaximum), meth_QInputDialog_doubleMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_doubleMaximum)},
    {SIP_MLNAME_CAST(sipName_doubleMinimum), meth_QInputDialog_doubleMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_doubleMinimum)},
    {SIP_MLNAME_CAST(sipName_doubleValue), meth_QInputDialog_doubleValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_doubleValue)},
    {SIP_MLNAME_CAST(sipName_getDouble), (PyCFunction)meth_QInputDialog_getDouble, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QInputDialog_getDouble)},
    {SIP_MLNAME_CAST(sipName_getInt), (PyCFunction)meth_QInputDialog_getInt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QInputDialog_getInt)},
    {SIP_MLNAME_CAST(sipName_getItem), (PyCFunction)meth_QInputDialog_getItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QInputDialog_getItem)},
    {SIP_MLNAME_CAST(sipName_getText), (PyCFunction)meth_QInputDialog_getText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QInputDialog_getText)},
    {SIP_MLNAME_CAST(sipName_inputMode), meth_QInputDialog_inputMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_inputMode)},
    {SIP_MLNAME_CAST(sipName_intMaximum), meth_QInputDialog_intMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_intMaximum)},
    {SIP_MLNAME_CAST(sipName_intMinimum), meth_QInputDialog_intMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_intMinimum)},
    {SIP_MLNAME_CAST(sipName_intStep), meth_QInputDialog_intStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_intStep)},
    {SIP_MLNAME_CAST(sipName_intValue), meth_QInputDialog_intValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_intValue)},
    {SIP_MLNAME_CAST(sipName_isComboBoxEditable), meth_QInputDialog_isComboBoxEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_isComboBoxEditable)},
    {SIP_MLNAME_CAST(sipName_labelText), meth_QInputDialog_labelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_labelText)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QInputDialog_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_okButtonText), meth_QInputDialog_okButtonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_okButtonText)},
    {SIP_MLNAME_CAST(sipName_open), meth_QInputDialog_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_open)},
    {SIP_MLNAME_CAST(sipName_options), meth_QInputDialog_options, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_options)},
    {SIP_MLNAME_CAST(sipName_setCancelButtonText), meth_QInputDialog_setCancelButtonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setCancelButtonText)},
    {SIP_MLNAME_CAST(sipName_setComboBoxEditable), meth_QInputDialog_setComboBoxEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setComboBoxEditable)},
    {SIP_MLNAME_CAST(sipName_setComboBoxItems), meth_QInputDialog_setComboBoxItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setComboBoxItems)},
    {SIP_MLNAME_CAST(sipName_setDoubleDecimals), meth_QInputDialog_setDoubleDecimals, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setDoubleDecimals)},
    {SIP_MLNAME_CAST(sipName_setDoubleMaximum), meth_QInputDialog_setDoubleMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setDoubleMaximum)},
    {SIP_MLNAME_CAST(sipName_setDoubleMinimum), meth_QInputDialog_setDoubleMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setDoubleMinimum)},
    {SIP_MLNAME_CAST(sipName_setDoubleRange), meth_QInputDialog_setDoubleRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setDoubleRange)},
    {SIP_MLNAME_CAST(sipName_setDoubleValue), meth_QInputDialog_setDoubleValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setDoubleValue)},
    {SIP_MLNAME_CAST(sipName_setInputMode), meth_QInputDialog_setInputMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setInputMode)},
    {SIP_MLNAME_CAST(sipName_setIntMaximum), meth_QInputDialog_setIntMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setIntMaximum)},
    {SIP_MLNAME_CAST(sipName_setIntMinimum), meth_QInputDialog_setIntMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setIntMinimum)},
    {SIP_MLNAME_CAST(sipName_setIntRange), meth_QInputDialog_setIntRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setIntRange)},
    {SIP_MLNAME_CAST(sipName_setIntStep), meth_QInputDialog_setIntStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setIntStep)},
    {SIP_MLNAME_CAST(sipName_setIntValue), meth_QInputDialog_setIntValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setIntValue)},
    {SIP_MLNAME_CAST(sipName_setLabelText), meth_QInputDialog_setLabelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setLabelText)},
    {SIP_MLNAME_CAST(sipName_setOkButtonText), meth_QInputDialog_setOkButtonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setOkButtonText)},
    {SIP_MLNAME_CAST(sipName_setOption), (PyCFunction)meth_QInputDialog_setOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QInputDialog_setOption)},
    {SIP_MLNAME_CAST(sipName_setOptions), meth_QInputDialog_setOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setOptions)},
    {SIP_MLNAME_CAST(sipName_setTextEchoMode), meth_QInputDialog_setTextEchoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setTextEchoMode)},
    {SIP_MLNAME_CAST(sipName_setTextValue), meth_QInputDialog_setTextValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setTextValue)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QInputDialog_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_setVisible)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QInputDialog_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_sizeHint)},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QInputDialog_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_testOption)},
    {SIP_MLNAME_CAST(sipName_textEchoMode), meth_QInputDialog_textEchoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_textEchoMode)},
    {SIP_MLNAME_CAST(sipName_textValue), meth_QInputDialog_textValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputDialog_textValue)}
};

static sipEnumMemberDef enummembers_QInputDialog[] = {
    {sipName_DoubleInput, static_cast<int>(QInputDialog::DoubleInput), 173},
    {sipName_IntInput, static_cast<int>(QInputDialog::IntInput), 173},
    {sipName_NoButtons, static_cast<int>(QInputDialog::NoButtons), 171},
    {sipName_TextInput, static_cast<int>(QInputDialog::TextInput), 173},
    {sipName_UseListViewForComboBoxItems, static_cast<int>(QInputDialog::UseListViewForComboBoxItems), 171},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QInputDialog[] = {
    {"doubleValueSelected(double)", "\1doubleValueSelected(self, float)", 0, 0},
    {"doubleValueChanged(double)", "\1doubleValueChanged(self, float)", 0, 0},
    {"intValueSelected(int)", "\1intValueSelected(self, int)", 0, 0},
    {"intValueChanged(int)", "\1intValueChanged(self, int)", 0, 0},
    {"textValueSelected(QString)", "\1textValueSelected(self, object)", 0, 0},
    {"textValueChanged(QString)", "\1textValueChanged(self, object)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QInputDialog, "\1QInputDialog(parent: QWidget = None, flags: Qt.WindowFlags = 0)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QInputDialog = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QInputDialog,
        {0}
    },
    {
        sipNameNr_QInputDialog,
        {0, 0, 1},
        47, methods_QInputDialog,
        5, enummembers_QInputDialog,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QInputDialog,
    -1,
    -1,
    supers_QInputDialog,
    0,
    init_type_QInputDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QInputDialog,
    0,
    0,
    0,
    release_QInputDialog,
    cast_QInputDialog,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QInputDialog::staticMetaObject,
    0,
    signals_QInputDialog,
    0
};
