/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 67 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qspinbox.sip"
#include <qspinbox.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 753 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlineedit.sip"
#include <qlineedit.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 405 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 343 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 198 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 427 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 329 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 237 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 308 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 370 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 454 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 531 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 547 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 259 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 357 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQDoubleSpinBox.cpp"


class sipQDoubleSpinBox : public QDoubleSpinBox
{
public:
    sipQDoubleSpinBox(QWidget*);
    virtual ~sipQDoubleSpinBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    QPaintDevice* redirected(QPoint*) const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QAbstractSpinBox::StepEnabled stepEnabled() const;
    void showEvent(QShowEvent*);
    void paintEvent(QPaintEvent*);
    void timerEvent(QTimerEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void hideEvent(QHideEvent*);
    void closeEvent(QCloseEvent*);
    void changeEvent(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void wheelEvent(QWheelEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void resizeEvent(QResizeEvent*);
    void clear();
    void stepBy(int);
    bool event(QEvent*);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void fixup(QString&) const;
    QString textFromValue(double) const;
    double valueFromText(const QString&) const;
    QValidator::State validate(QString&,int&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDoubleSpinBox(const sipQDoubleSpinBox &);
    sipQDoubleSpinBox &operator = (const sipQDoubleSpinBox &);

    char sipPyMethods[54];
};

sipQDoubleSpinBox::sipQDoubleSpinBox(QWidget*a0): QDoubleSpinBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDoubleSpinBox::~sipQDoubleSpinBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDoubleSpinBox::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QDoubleSpinBox);

    return QDoubleSpinBox::metaObject();
}

int sipQDoubleSpinBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDoubleSpinBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QDoubleSpinBox,_c,_id,_a);

    return _id;
}

void *sipQDoubleSpinBox::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QDoubleSpinBox, _clname, &sipCpp) ? sipCpp : QDoubleSpinBox::qt_metacast(_clname));
}

void sipQDoubleSpinBox::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QDoubleSpinBox::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QDoubleSpinBox::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDoubleSpinBox::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QDoubleSpinBox::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDoubleSpinBox::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QDoubleSpinBox::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPainter* sipQDoubleSpinBox::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QDoubleSpinBox::sharedPainter();

    extern QPainter* sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_5(sipGILState, 0, sipPySelf, sipMeth);
}

QPaintDevice* sipQDoubleSpinBox::redirected(QPoint*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_redirected);

    if (!sipMeth)
        return QDoubleSpinBox::redirected(a0);

    extern QPaintDevice* sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPoint*);

    return sipVH_QtWidgets_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDoubleSpinBox::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QDoubleSpinBox::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQDoubleSpinBox::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QDoubleSpinBox::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQDoubleSpinBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QDoubleSpinBox::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDoubleSpinBox::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QDoubleSpinBox::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQDoubleSpinBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QDoubleSpinBox::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQDoubleSpinBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QDoubleSpinBox::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QDoubleSpinBox::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDoubleSpinBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QDoubleSpinBox::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QVariant sipQDoubleSpinBox::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QDoubleSpinBox::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QAbstractSpinBox::StepEnabled sipQDoubleSpinBox::stepEnabled() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_stepEnabled);

    if (!sipMeth)
        return QDoubleSpinBox::stepEnabled();

    extern QAbstractSpinBox::StepEnabled sipVH_QtWidgets_139(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_139(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDoubleSpinBox::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtWidgets_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QDoubleSpinBox::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDoubleSpinBox::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QDoubleSpinBox::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDoubleSpinBox::stepBy(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_stepBy);

    if (!sipMeth)
    {
        QDoubleSpinBox::stepBy(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDoubleSpinBox::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QDoubleSpinBox::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQDoubleSpinBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QDoubleSpinBox::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQDoubleSpinBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QDoubleSpinBox::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDoubleSpinBox::fixup(QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_fixup);

    if (!sipMeth)
    {
        QDoubleSpinBox::fixup(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&);

    ((sipVH_QtGui_18)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQDoubleSpinBox::textFromValue(double a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_textFromValue);

    if (!sipMeth)
        return QDoubleSpinBox::textFromValue(a0);

    extern QString sipVH_QtWidgets_83(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, double);

    return sipVH_QtWidgets_83(sipGILState, 0, sipPySelf, sipMeth, a0);
}

double sipQDoubleSpinBox::valueFromText(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_valueFromText);

    if (!sipMeth)
        return QDoubleSpinBox::valueFromText(a0);

    extern double sipVH_QtWidgets_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtWidgets_84(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QValidator::State sipQDoubleSpinBox::validate(QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,NULL,sipName_validate);

    if (!sipMeth)
        return QDoubleSpinBox::validate(a0,a1);

    typedef QValidator::State (*sipVH_QtGui_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&,int&);

    return ((sipVH_QtGui_15)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QDoubleSpinBox_value, "value(self) -> float");

extern "C" {static PyObject *meth_QDoubleSpinBox_value(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->value();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_value, doc_QDoubleSpinBox_value);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_prefix, "prefix(self) -> object");

extern "C" {static PyObject *meth_QDoubleSpinBox_prefix(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_prefix, doc_QDoubleSpinBox_prefix);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setPrefix, "setPrefix(self, object)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setPrefix(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPrefix(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setPrefix, doc_QDoubleSpinBox_setPrefix);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_suffix, "suffix(self) -> object");

extern "C" {static PyObject *meth_QDoubleSpinBox_suffix(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_suffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->suffix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_suffix, doc_QDoubleSpinBox_suffix);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setSuffix, "setSuffix(self, object)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setSuffix(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setSuffix(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setSuffix, doc_QDoubleSpinBox_setSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_cleanText, "cleanText(self) -> object");

extern "C" {static PyObject *meth_QDoubleSpinBox_cleanText(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_cleanText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->cleanText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_cleanText, doc_QDoubleSpinBox_cleanText);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_singleStep, "singleStep(self) -> float");

extern "C" {static PyObject *meth_QDoubleSpinBox_singleStep(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_singleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->singleStep();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_singleStep, doc_QDoubleSpinBox_singleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setSingleStep, "setSingleStep(self, float)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setSingleStep(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setSingleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, &a0))
        {
            sipCpp->setSingleStep(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setSingleStep, doc_QDoubleSpinBox_setSingleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_minimum, "minimum(self) -> float");

extern "C" {static PyObject *meth_QDoubleSpinBox_minimum(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_minimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->minimum();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_minimum, doc_QDoubleSpinBox_minimum);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setMinimum, "setMinimum(self, float)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setMinimum(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, &a0))
        {
            sipCpp->setMinimum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setMinimum, doc_QDoubleSpinBox_setMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_maximum, "maximum(self) -> float");

extern "C" {static PyObject *meth_QDoubleSpinBox_maximum(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_maximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->maximum();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_maximum, doc_QDoubleSpinBox_maximum);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setMaximum, "setMaximum(self, float)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setMaximum(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, &a0))
        {
            sipCpp->setMaximum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setMaximum, doc_QDoubleSpinBox_setMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setRange, "setRange(self, float, float)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setRange(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, &a0, &a1))
        {
            sipCpp->setRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setRange, doc_QDoubleSpinBox_setRange);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_decimals, "decimals(self) -> int");

extern "C" {static PyObject *meth_QDoubleSpinBox_decimals(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_decimals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDoubleSpinBox, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->decimals();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_decimals, doc_QDoubleSpinBox_decimals);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setDecimals, "setDecimals(self, int)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setDecimals(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setDecimals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, &a0))
        {
            sipCpp->setDecimals(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setDecimals, doc_QDoubleSpinBox_setDecimals);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_validate, "validate(self, object, int) -> Tuple[QValidator.State, object, int]");

extern "C" {static PyObject *meth_QDoubleSpinBox_validate(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QString* a0;
        int a0State = 0;
        int a1;
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            QValidator::State sipRes;
            PyObject *sipResObj;

            sipRes = (sipSelfWasArg ? sipCpp->QDoubleSpinBox::validate(*a0,a1) : sipCpp->validate(*a0,a1));

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,NULL,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_validate, doc_QDoubleSpinBox_validate);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_valueFromText, "valueFromText(self, object) -> float");

extern "C" {static PyObject *meth_QDoubleSpinBox_valueFromText(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_valueFromText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            double sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QDoubleSpinBox::valueFromText(*a0) : sipCpp->valueFromText(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_valueFromText, doc_QDoubleSpinBox_valueFromText);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_textFromValue, "textFromValue(self, float) -> object");

extern "C" {static PyObject *meth_QDoubleSpinBox_textFromValue(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_textFromValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        double a0;
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QDoubleSpinBox::textFromValue(a0) : sipCpp->textFromValue(a0)));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_textFromValue, doc_QDoubleSpinBox_textFromValue);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_fixup, "fixup(self, object) -> object");

extern "C" {static PyObject *meth_QDoubleSpinBox_fixup(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_fixup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QString* a0;
        int a0State = 0;
        const QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResObj;

            (sipSelfWasArg ? sipCpp->QDoubleSpinBox::fixup(*a0) : sipCpp->fixup(*a0));

            sipResObj = sipConvertFromType(a0,sipType_QString,NULL);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_fixup, doc_QDoubleSpinBox_fixup);

    return NULL;
}


PyDoc_STRVAR(doc_QDoubleSpinBox_setValue, "setValue(self, float)");

extern "C" {static PyObject *meth_QDoubleSpinBox_setValue(PyObject *, PyObject *);}
static PyObject *meth_QDoubleSpinBox_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QDoubleSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDoubleSpinBox, &sipCpp, &a0))
        {
            sipCpp->setValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDoubleSpinBox, sipName_setValue, doc_QDoubleSpinBox_setValue);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QDoubleSpinBox(void *, const sipTypeDef *);}
static void *cast_QDoubleSpinBox(void *sipCppV, const sipTypeDef *targetType)
{
    QDoubleSpinBox *sipCpp = reinterpret_cast<QDoubleSpinBox *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDoubleSpinBox(void *, int);}
static void release_QDoubleSpinBox(void *sipCppV,int)
{
    QDoubleSpinBox *sipCpp = reinterpret_cast<QDoubleSpinBox *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QDoubleSpinBox(sipSimpleWrapper *);}
static void dealloc_QDoubleSpinBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDoubleSpinBox *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDoubleSpinBox(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QDoubleSpinBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDoubleSpinBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDoubleSpinBox *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQDoubleSpinBox(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDoubleSpinBox[] = {{19, 255, 1}};


static PyMethodDef methods_QDoubleSpinBox[] = {
    {SIP_MLNAME_CAST(sipName_cleanText), meth_QDoubleSpinBox_cleanText, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_cleanText)},
    {SIP_MLNAME_CAST(sipName_decimals), meth_QDoubleSpinBox_decimals, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_decimals)},
    {SIP_MLNAME_CAST(sipName_fixup), meth_QDoubleSpinBox_fixup, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_fixup)},
    {SIP_MLNAME_CAST(sipName_maximum), meth_QDoubleSpinBox_maximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_maximum)},
    {SIP_MLNAME_CAST(sipName_minimum), meth_QDoubleSpinBox_minimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_minimum)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QDoubleSpinBox_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_prefix)},
    {SIP_MLNAME_CAST(sipName_setDecimals), meth_QDoubleSpinBox_setDecimals, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setDecimals)},
    {SIP_MLNAME_CAST(sipName_setMaximum), meth_QDoubleSpinBox_setMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setMaximum)},
    {SIP_MLNAME_CAST(sipName_setMinimum), meth_QDoubleSpinBox_setMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setMinimum)},
    {SIP_MLNAME_CAST(sipName_setPrefix), meth_QDoubleSpinBox_setPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setPrefix)},
    {SIP_MLNAME_CAST(sipName_setRange), meth_QDoubleSpinBox_setRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setRange)},
    {SIP_MLNAME_CAST(sipName_setSingleStep), meth_QDoubleSpinBox_setSingleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setSingleStep)},
    {SIP_MLNAME_CAST(sipName_setSuffix), meth_QDoubleSpinBox_setSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setSuffix)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QDoubleSpinBox_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_setValue)},
    {SIP_MLNAME_CAST(sipName_singleStep), meth_QDoubleSpinBox_singleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_singleStep)},
    {SIP_MLNAME_CAST(sipName_suffix), meth_QDoubleSpinBox_suffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_suffix)},
    {SIP_MLNAME_CAST(sipName_textFromValue), meth_QDoubleSpinBox_textFromValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_textFromValue)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QDoubleSpinBox_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_validate)},
    {SIP_MLNAME_CAST(sipName_value), meth_QDoubleSpinBox_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_value)},
    {SIP_MLNAME_CAST(sipName_valueFromText), meth_QDoubleSpinBox_valueFromText, METH_VARARGS, SIP_MLDOC_CAST(doc_QDoubleSpinBox_valueFromText)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDoubleSpinBox[] = {
    {"valueChanged(double)", "\1valueChanged(self, float)", 0, 0},
    {"valueChanged(QString)", "\1valueChanged(self, object)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QDoubleSpinBox, "\1QDoubleSpinBox(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QDoubleSpinBox = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDoubleSpinBox,
        {0}
    },
    {
        sipNameNr_QDoubleSpinBox,
        {0, 0, 1},
        20, methods_QDoubleSpinBox,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDoubleSpinBox,
    -1,
    -1,
    supers_QDoubleSpinBox,
    0,
    init_type_QDoubleSpinBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDoubleSpinBox,
    0,
    0,
    0,
    release_QDoubleSpinBox,
    cast_QDoubleSpinBox,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDoubleSpinBox::staticMetaObject,
    0,
    signals_QDoubleSpinBox,
    0
};
