/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstackedlayout.sip"
#include <qstackedlayout.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"
#line 71 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQStackedLayout.cpp"


class sipQStackedLayout : public QStackedLayout
{
public:
    sipQStackedLayout();
    sipQStackedLayout(QWidget*);
    sipQStackedLayout(QLayout*);
    virtual ~sipQStackedLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSpacerItem* spacerItem();
    int minimumHeightForWidth(int) const;
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QSizePolicy::ControlTypes controlTypes() const;
    void childEvent(QChildEvent*);
    QLayout* layout();
    bool isEmpty() const;
    int indexOf(QWidget*) const;
    QSize maximumSize() const;
    Qt::Orientations expandingDirections() const;
    QRect geometry() const;
    void invalidate();
    int heightForWidth(int) const;
    bool hasHeightForWidth() const;
    void setGeometry(const QRect&);
    QLayoutItem* takeAt(int);
    QLayoutItem* itemAt(int) const;
    QSize minimumSize() const;
    QSize sizeHint() const;
    void addItem(QLayoutItem*);
    int count() const;
    QWidget* widget();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStackedLayout(const sipQStackedLayout &);
    sipQStackedLayout &operator = (const sipQStackedLayout &);

    char sipPyMethods[27];
};

sipQStackedLayout::sipQStackedLayout(): QStackedLayout(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStackedLayout::sipQStackedLayout(QWidget*a0): QStackedLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStackedLayout::sipQStackedLayout(QLayout*a0): QStackedLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStackedLayout::~sipQStackedLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQStackedLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QStackedLayout);

    return QStackedLayout::metaObject();
}

int sipQStackedLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QStackedLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QStackedLayout,_c,_id,_a);

    return _id;
}

void *sipQStackedLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QStackedLayout, _clname, &sipCpp) ? sipCpp : QStackedLayout::qt_metacast(_clname));
}

QSpacerItem* sipQStackedLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return QStackedLayout::spacerItem();

    extern QSpacerItem* sipVH_QtWidgets_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_96(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQStackedLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return QStackedLayout::minimumHeightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStackedLayout::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QStackedLayout::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStackedLayout::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QStackedLayout::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStackedLayout::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QStackedLayout::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStackedLayout::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QStackedLayout::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStackedLayout::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QStackedLayout::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQStackedLayout::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QStackedLayout::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSizePolicy::ControlTypes sipQStackedLayout::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_controlTypes);

    if (!sipMeth)
        return QStackedLayout::controlTypes();

    extern QSizePolicy::ControlTypes sipVH_QtWidgets_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_94(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQStackedLayout::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QStackedLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QLayout* sipQStackedLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return QStackedLayout::layout();

    extern QLayout* sipVH_QtWidgets_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_97(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQStackedLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return QStackedLayout::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQStackedLayout::indexOf(QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_indexOf);

    if (!sipMeth)
        return QStackedLayout::indexOf(a0);

    extern int sipVH_QtWidgets_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    return sipVH_QtWidgets_98(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQStackedLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return QStackedLayout::maximumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

Qt::Orientations sipQStackedLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return QStackedLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtWidgets_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_95(sipGILState, 0, sipPySelf, sipMeth);
}

QRect sipQStackedLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return QStackedLayout::geometry();

    typedef QRect (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQStackedLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
        QStackedLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQStackedLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QStackedLayout::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStackedLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QStackedLayout::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQStackedLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QStackedLayout::setGeometry(a0);
        return;
    }

    typedef void (*sipVH_QtGui_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&);

    ((sipVH_QtGui_44)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQStackedLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_takeAt);

    if (!sipMeth)
        return QStackedLayout::takeAt(a0);

    extern QLayoutItem* sipVH_QtWidgets_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_78(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQStackedLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_itemAt);

    if (!sipMeth)
        return QStackedLayout::itemAt(a0);

    extern QLayoutItem* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_79(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQStackedLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return QStackedLayout::minimumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQStackedLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QStackedLayout::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQStackedLayout::addItem(QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_addItem);

    if (!sipMeth)
    {
        QStackedLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtWidgets_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QLayoutItem*);

    sipVH_QtWidgets_80(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQStackedLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_count);

    if (!sipMeth)
        return QStackedLayout::count();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QWidget* sipQStackedLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return QStackedLayout::widget();

    extern QWidget* sipVH_QtWidgets_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_81(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QStackedLayout_addWidget, "addWidget(self, QWidget) -> int");

extern "C" {static PyObject *meth_QStackedLayout_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            sipRes = sipCpp->addWidget(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_addWidget, doc_QStackedLayout_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_insertWidget, "insertWidget(self, int, QWidget) -> int");

extern "C" {static PyObject *meth_QStackedLayout_insertWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_insertWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget* a1;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0, sipType_QWidget, &a1))
        {
            int sipRes;

            sipRes = sipCpp->insertWidget(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_insertWidget, doc_QStackedLayout_insertWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_currentWidget, "currentWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QStackedLayout_currentWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_currentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->currentWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_currentWidget, doc_QStackedLayout_currentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_currentIndex, "currentIndex(self) -> int");

extern "C" {static PyObject *meth_QStackedLayout_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_currentIndex, doc_QStackedLayout_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_widget, "widget(self, int) -> QWidget\n"
    "widget(self) -> QWidget");

extern "C" {static PyObject *meth_QStackedLayout_widget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            QWidget*sipRes;

            sipRes = sipCpp->widget(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::widget() : sipCpp->widget());

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_widget, doc_QStackedLayout_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_count, "count(self) -> int");

extern "C" {static PyObject *meth_QStackedLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::count() : sipCpp->count());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_count, doc_QStackedLayout_count);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_addItem, "addItem(self, QLayoutItem)");

extern "C" {static PyObject *meth_QStackedLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayoutItem* a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            (sipSelfWasArg ? sipCpp->QStackedLayout::addItem(a0) : sipCpp->addItem(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_addItem, doc_QStackedLayout_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QStackedLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QStackedLayout::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_sizeHint, doc_QStackedLayout_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QStackedLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QStackedLayout::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_minimumSize, doc_QStackedLayout_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_itemAt, "itemAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QStackedLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::itemAt(a0) : sipCpp->itemAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_itemAt, doc_QStackedLayout_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_takeAt, "takeAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QStackedLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::takeAt(a0) : sipCpp->takeAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_takeAt, doc_QStackedLayout_takeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setGeometry, "setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QStackedLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp->QStackedLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setGeometry, doc_QStackedLayout_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setCurrentIndex, "setCurrentIndex(self, int)");

extern "C" {static PyObject *meth_QStackedLayout_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            sipCpp->setCurrentIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setCurrentIndex, doc_QStackedLayout_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setCurrentWidget, "setCurrentWidget(self, QWidget)");

extern "C" {static PyObject *meth_QStackedLayout_setCurrentWidget(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setCurrentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setCurrentWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setCurrentWidget, doc_QStackedLayout_setCurrentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_stackingMode, "stackingMode(self) -> QStackedLayout.StackingMode");

extern "C" {static PyObject *meth_QStackedLayout_stackingMode(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_stackingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            QStackedLayout::StackingMode sipRes;

            sipRes = sipCpp->stackingMode();

            return sipConvertFromEnum(sipRes,sipType_QStackedLayout_StackingMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_stackingMode, doc_QStackedLayout_stackingMode);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_setStackingMode, "setStackingMode(self, QStackedLayout.StackingMode)");

extern "C" {static PyObject *meth_QStackedLayout_setStackingMode(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_setStackingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStackedLayout::StackingMode a0;
        QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStackedLayout, &sipCpp, sipType_QStackedLayout_StackingMode, &a0))
        {
            sipCpp->setStackingMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_setStackingMode, doc_QStackedLayout_setStackingMode);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_hasHeightForWidth, "hasHeightForWidth(self) -> bool");

extern "C" {static PyObject *meth_QStackedLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStackedLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_hasHeightForWidth, doc_QStackedLayout_hasHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QStackedLayout_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QStackedLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QStackedLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QStackedLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStackedLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStackedLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStackedLayout, sipName_heightForWidth, doc_QStackedLayout_heightForWidth);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QStackedLayout(void *, const sipTypeDef *);}
static void *cast_QStackedLayout(void *sipCppV, const sipTypeDef *targetType)
{
    QStackedLayout *sipCpp = reinterpret_cast<QStackedLayout *>(sipCppV);

    if (targetType == sipType_QLayoutItem)
        return static_cast<QLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStackedLayout(void *, int);}
static void release_QStackedLayout(void *sipCppV,int)
{
    QStackedLayout *sipCpp = reinterpret_cast<QStackedLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QStackedLayout(sipSimpleWrapper *);}
static void dealloc_QStackedLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQStackedLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QStackedLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QStackedLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStackedLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStackedLayout *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQStackedLayout();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQStackedLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QLayout* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QLayout, &a0, sipOwner))
        {
            sipCpp = new sipQStackedLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStackedLayout[] = {{182, 255, 1}};


static PyMethodDef methods_QStackedLayout[] = {
    {SIP_MLNAME_CAST(sipName_addItem), meth_QStackedLayout_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_addItem)},
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QStackedLayout_addWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_addWidget)},
    {SIP_MLNAME_CAST(sipName_count), meth_QStackedLayout_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_count)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QStackedLayout_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_currentIndex)},
    {SIP_MLNAME_CAST(sipName_currentWidget), meth_QStackedLayout_currentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_currentWidget)},
    {SIP_MLNAME_CAST(sipName_hasHeightForWidth), meth_QStackedLayout_hasHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_hasHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QStackedLayout_heightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_heightForWidth)},
    {SIP_MLNAME_CAST(sipName_insertWidget), meth_QStackedLayout_insertWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_insertWidget)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QStackedLayout_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_itemAt)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QStackedLayout_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_minimumSize)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QStackedLayout_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setCurrentWidget), meth_QStackedLayout_setCurrentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setCurrentWidget)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QStackedLayout_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setStackingMode), meth_QStackedLayout_setStackingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_setStackingMode)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QStackedLayout_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stackingMode), meth_QStackedLayout_stackingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_stackingMode)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QStackedLayout_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_takeAt)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QStackedLayout_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QStackedLayout_widget)}
};

static sipEnumMemberDef enummembers_QStackedLayout[] = {
    {sipName_StackAll, static_cast<int>(QStackedLayout::StackAll), 274},
    {sipName_StackOne, static_cast<int>(QStackedLayout::StackOne), 274},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QStackedLayout[] = {
    {"currentChanged(int)", "\1currentChanged(self, int)", 0, 0},
    {"widgetRemoved(int)", "\1widgetRemoved(self, int)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QStackedLayout, "\1QStackedLayout()\n"
    "QStackedLayout(QWidget)\n"
    "QStackedLayout(QLayout)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QStackedLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QStackedLayout,
        {0}
    },
    {
        sipNameNr_QStackedLayout,
        {0, 0, 1},
        18, methods_QStackedLayout,
        2, enummembers_QStackedLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStackedLayout,
    -1,
    -1,
    supers_QStackedLayout,
    0,
    init_type_QStackedLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStackedLayout,
    0,
    0,
    0,
    release_QStackedLayout,
    cast_QStackedLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QStackedLayout::staticMetaObject,
    0,
    signals_QStackedLayout,
    0
};
