/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qtreewidget.sip"
#include <qtreewidget.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qtreewidget.sip"
#include <qtreewidget.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 133 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 531 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 308 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 198 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 564 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 343 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 101 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qheaderview.sip"
#include <qheaderview.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 454 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 370 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 329 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 547 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 427 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 237 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 405 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 259 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 357 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 252 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 255 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 258 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 261 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 264 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 267 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 270 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 273 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 276 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 279 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 282 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 285 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 288 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 291 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 294 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 297 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 300 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"


class sipQTreeWidget : public QTreeWidget
{
public:
    sipQTreeWidget(QWidget*);
    virtual ~sipQTreeWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    QPaintDevice* redirected(QPoint*) const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void resizeEvent(QResizeEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void verticalScrollbarAction(int);
    void updateEditorGeometries();
    void updateEditorData();
    int sizeHintForRow(int) const;
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    bool viewportEvent(QEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    bool isIndexHidden(const QModelIndex&) const;
    void horizontalScrollbarAction(int);
    int sizeHintForColumn(int) const;
    void updateGeometries();
    void keyPressEvent(QKeyEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void drawBranches(QPainter*,const QRect&,const QModelIndex&) const;
    void drawRow(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void mouseReleaseEvent(QMouseEvent*);
    void timerEvent(QTimerEvent*);
    void paintEvent(QPaintEvent*);
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    int verticalOffset() const;
    int horizontalOffset() const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void scrollContentsBy(int,int);
    void selectAll();
    void dataChanged(const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void reset();
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void keyboardSearch(const QString&);
    void setRootIndex(const QModelIndex&);
    void setSelectionModel(QItemSelectionModel*);
    void dropEvent(QDropEvent*);
    bool event(QEvent*);
    Qt::DropActions supportedDropActions() const;
    bool dropMimeData(QTreeWidgetItem*,int,const QMimeData*,Qt::DropAction);
    QMimeData* mimeData(const QList<QTreeWidgetItem*>) const;
    QStringList mimeTypes() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeWidget(const sipQTreeWidget &);
    sipQTreeWidget &operator = (const sipQTreeWidget &);

    char sipPyMethods[92];
};

sipQTreeWidget::sipQTreeWidget(QWidget*a0): QTreeWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidget::~sipQTreeWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTreeWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTreeWidget);

    return QTreeWidget::metaObject();
}

int sipQTreeWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTreeWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTreeWidget,_c,_id,_a);

    return _id;
}

void *sipQTreeWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTreeWidget, _clname, &sipCpp) ? sipCpp : QTreeWidget::qt_metacast(_clname));
}

void sipQTreeWidget::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTreeWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTreeWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTreeWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTreeWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QTreeWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPainter* sipQTreeWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QTreeWidget::sharedPainter();

    extern QPainter* sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_5(sipGILState, 0, sipPySelf, sipMeth);
}

QPaintDevice* sipQTreeWidget::redirected(QPoint*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_redirected);

    if (!sipMeth)
        return QTreeWidget::redirected(a0);

    extern QPaintDevice* sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPoint*);

    return sipVH_QtWidgets_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QTreeWidget::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTreeWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QTreeWidget::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTreeWidget::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTreeWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTreeWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTreeWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTreeWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTreeWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTreeWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTreeWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTreeWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTreeWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTreeWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTreeWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTreeWidget::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTreeWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTreeWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTreeWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QTreeWidget::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTreeWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTreeWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTreeWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQTreeWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTreeWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQTreeWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTreeWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTreeWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTreeWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQTreeWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTreeWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTreeWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTreeWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTreeWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTreeWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTreeWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQTreeWidget::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QTreeWidget::viewOptions();

    extern QStyleOptionViewItem sipVH_QtWidgets_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QTreeWidget::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtWidgets_93(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQTreeWidget::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QTreeWidget::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtWidgets_146(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtWidgets_146(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeWidget::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QTreeWidget::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtWidgets_147(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QTreeWidget::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_148(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtWidgets_148(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QTreeWidget::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QTreeWidget::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_149(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_149(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeWidget::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeWidget::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QTreeWidget::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QTreeWidget::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QTreeWidget::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeWidget::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QTreeWidget::sizeHintForRow(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QTreeWidget::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtWidgets_25(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QTreeWidget::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtWidgets_26(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeWidget::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTreeWidget::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTreeWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QTreeWidget::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QTreeWidget::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTreeWidget::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QTreeWidget::sizeHintForColumn(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QTreeWidget::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTreeWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTreeWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTreeWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTreeWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::drawBranches(QPainter*a0,const QRect& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,NULL,sipName_drawBranches);

    if (!sipMeth)
    {
        QTreeWidget::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,const QModelIndex&);

    sipVH_QtWidgets_27(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::drawRow(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_drawRow);

    if (!sipMeth)
    {
        QTreeWidget::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtWidgets_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTreeWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTreeWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTreeWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtWidgets_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQTreeWidget::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QTreeWidget::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_29(sipGILState, 0, sipPySelf, sipMeth);
}

QRegion sipQTreeWidget::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[69]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QTreeWidget::visualRegionForSelection(a0);

    extern QRegion sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtWidgets_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QTreeWidget::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQTreeWidget::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[71]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QTreeWidget::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTreeWidget::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[72]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QTreeWidget::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndex sipQTreeWidget::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QTreeWidget::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtWidgets_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QTreeWidget::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_33(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QTreeWidget::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_33(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTreeWidget::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTreeWidget::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QTreeWidget::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTreeWidget::dataChanged(const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QTreeWidget::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&,const QVector<int>&);

    sipVH_QtWidgets_34(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeWidget::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QTreeWidget::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndex sipQTreeWidget::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[80]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QTreeWidget::indexAt(a0);

    extern QModelIndex sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_35(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QTreeWidget::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_36(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QRect sipQTreeWidget::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[82]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QTreeWidget::visualRect(a0);

    extern QRect sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QTreeWidget::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QTreeWidget::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QTreeWidget::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtWidgets_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTreeWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTreeWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTreeWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTreeWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

Qt::DropActions sipQTreeWidget::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[88]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QTreeWidget::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTreeWidget::dropMimeData(QTreeWidgetItem*a0,int a1,const QMimeData*a2,Qt::DropAction a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[89],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QTreeWidget::dropMimeData(a0,a1,a2,a3);

    extern bool sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTreeWidgetItem*,int,const QMimeData*,Qt::DropAction);

    return sipVH_QtWidgets_19(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMimeData* sipQTreeWidget::mimeData(const QList<QTreeWidgetItem*> a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[90]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QTreeWidget::mimeData(a0);

    extern QMimeData* sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QTreeWidgetItem*>);

    return sipVH_QtWidgets_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipQTreeWidget::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[91]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QTreeWidget::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTreeWidget_columnCount, "columnCount(self) -> int");

extern "C" {static PyObject *meth_QTreeWidget_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_columnCount, doc_QTreeWidget_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setColumnCount, "setColumnCount(self, int)");

extern "C" {static PyObject *meth_QTreeWidget_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            sipCpp->setColumnCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setColumnCount, doc_QTreeWidget_setColumnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_topLevelItem, "topLevelItem(self, int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_topLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->topLevelItem(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItem, doc_QTreeWidget_topLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_topLevelItemCount, "topLevelItemCount(self) -> int");

extern "C" {static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_topLevelItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->topLevelItemCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_topLevelItemCount, doc_QTreeWidget_topLevelItemCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_insertTopLevelItem, "insertTopLevelItem(self, int, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem* a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QTreeWidgetItem, &a1))
        {
            sipCpp->insertTopLevelItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItem, doc_QTreeWidget_insertTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_addTopLevelItem, "addTopLevelItem(self, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->addTopLevelItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItem, doc_QTreeWidget_addTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_takeTopLevelItem, "takeTopLevelItem(self, int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_takeTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->takeTopLevelItem(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_takeTopLevelItem, doc_QTreeWidget_takeTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_indexOfTopLevelItem, "indexOfTopLevelItem(self, QTreeWidgetItem) -> int");

extern "C" {static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexOfTopLevelItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfTopLevelItem(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexOfTopLevelItem, doc_QTreeWidget_indexOfTopLevelItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_insertTopLevelItems, "insertTopLevelItems(self, int, object)");

extern "C" {static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_insertTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QTreeWidgetItem*>* a1;
        int a1State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_QList_0101QTreeWidgetItem,&a1, &a1State))
        {
            sipCpp->insertTopLevelItems(a0,*a1);
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a1),sipType_QList_0101QTreeWidgetItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_insertTopLevelItems, doc_QTreeWidget_insertTopLevelItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_addTopLevelItems, "addTopLevelItems(self, object)");

extern "C" {static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_addTopLevelItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTreeWidgetItem*>* a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            sipCpp->addTopLevelItems(*a0);
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_addTopLevelItems, doc_QTreeWidget_addTopLevelItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_headerItem, "headerItem(self) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_headerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_headerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->headerItem();

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_headerItem, doc_QTreeWidget_headerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderItem, "setHeaderItem(self, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->setHeaderItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderItem, doc_QTreeWidget_setHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderLabels, "setHeaderLabels(self, object)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setHeaderLabels(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabels, doc_QTreeWidget_setHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_currentItem, "currentItem(self) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_currentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->currentItem();

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentItem, doc_QTreeWidget_currentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_currentColumn, "currentColumn(self) -> int");

extern "C" {static PyObject *meth_QTreeWidget_currentColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_currentColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentColumn();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_currentColumn, doc_QTreeWidget_currentColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setCurrentItem, "setCurrentItem(self, QTreeWidgetItem)\n"
    "setCurrentItem(self, QTreeWidgetItem, int)\n"
    "setCurrentItem(self, QTreeWidgetItem, int, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setCurrentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->setCurrentItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem* a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            sipCpp->setCurrentItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTreeWidgetItem* a0;
        int a1;
        QItemSelectionModel::SelectionFlags* a2;
        int a2State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QItemSelectionModel_SelectionFlags, &a2, &a2State))
        {
            sipCpp->setCurrentItem(a0,a1,*a2);
            sipReleaseType(a2,sipType_QItemSelectionModel_SelectionFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setCurrentItem, doc_QTreeWidget_setCurrentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemAt, "itemAt(self, QPoint) -> QTreeWidgetItem\n"
    "itemAt(self, int, int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->itemAt(*a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, &a1))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->itemAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAt, doc_QTreeWidget_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_visualItemRect, "visualItemRect(self, QTreeWidgetItem) -> QRect");

extern "C" {static PyObject *meth_QTreeWidget_visualItemRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_visualItemRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->visualItemRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_visualItemRect, doc_QTreeWidget_visualItemRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_sortColumn, "sortColumn(self) -> int");

extern "C" {static PyObject *meth_QTreeWidget_sortColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortColumn();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortColumn, doc_QTreeWidget_sortColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_sortItems, "sortItems(self, int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeWidget_sortItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_sortItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortItems(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_sortItems, doc_QTreeWidget_sortItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_editItem, "editItem(self, QTreeWidgetItem, column: int = 0)");

extern "C" {static PyObject *meth_QTreeWidget_editItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_editItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            sipCpp->editItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_editItem, doc_QTreeWidget_editItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_openPersistentEditor, "openPersistentEditor(self, QTreeWidgetItem, column: int = 0)");

extern "C" {static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            sipCpp->openPersistentEditor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_openPersistentEditor, doc_QTreeWidget_openPersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_closePersistentEditor, "closePersistentEditor(self, QTreeWidgetItem, column: int = 0)");

extern "C" {static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            sipCpp->closePersistentEditor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_closePersistentEditor, doc_QTreeWidget_closePersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemWidget, "itemWidget(self, QTreeWidgetItem, int) -> QWidget");

extern "C" {static PyObject *meth_QTreeWidget_itemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QWidget*sipRes;

            sipRes = sipCpp->itemWidget(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemWidget, doc_QTreeWidget_itemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setItemWidget, "setItemWidget(self, QTreeWidgetItem, int, QWidget)");

extern "C" {static PyObject *meth_QTreeWidget_setItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1;
        QWidget* a2;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iJ:", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QWidget, &a2))
        {
#line 164 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qtreewidget.sip"
        // We have to break the association with any existing widget.  Note that I'm
        // not sure this is really necessary as it should get tidied up when Qt
        // destroys any current widget, except (possibly) when the widget wasn't
        // created from PyQt.  See also removeItemWidget(), QListWidget and
        // QTableWidget.
        QWidget *w = sipCpp->itemWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setItemWidget(a0, a1, a2);
        Py_END_ALLOW_THREADS
#line 2810 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setItemWidget, doc_QTreeWidget_setItemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_selectedItems, "selectedItems(self) -> object");

extern "C" {static PyObject *meth_QTreeWidget_selectedItems(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_selectedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QList<QTreeWidgetItem*>*sipRes;

            sipRes = new QList<QTreeWidgetItem*>(sipCpp->selectedItems());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_selectedItems, doc_QTreeWidget_selectedItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_findItems, "findItems(self, object, Qt.MatchFlags, column: int = 0) -> object");

extern "C" {static PyObject *meth_QTreeWidget_findItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_findItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::MatchFlags* a1;
        int a1State = 0;
        int a2 = 0;
        const QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State, &a2))
        {
            QList<QTreeWidgetItem*>*sipRes;

            sipRes = new QList<QTreeWidgetItem*>(sipCpp->findItems(*a0,*a1,a2));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_findItems, doc_QTreeWidget_findItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_scrollToItem, "scrollToItem(self, QTreeWidgetItem, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTreeWidget_scrollToItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_scrollToItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            sipCpp->scrollToItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_scrollToItem, doc_QTreeWidget_scrollToItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_expandItem, "expandItem(self, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_expandItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_expandItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->expandItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_expandItem, doc_QTreeWidget_expandItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_collapseItem, "collapseItem(self, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidget_collapseItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_collapseItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->collapseItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_collapseItem, doc_QTreeWidget_collapseItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_clear, "clear(self)");

extern "C" {static PyObject *meth_QTreeWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_clear, doc_QTreeWidget_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_mimeTypes, "mimeTypes(self) -> object");

extern "C" {static PyObject *meth_QTreeWidget_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QTreeWidget::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeTypes, doc_QTreeWidget_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_mimeData, "mimeData(self, object) -> QMimeData");

extern "C" {static PyObject *meth_QTreeWidget_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QTreeWidgetItem*>* a0;
        int a0State = 0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_mimeData, doc_QTreeWidget_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_dropMimeData, "dropMimeData(self, QTreeWidgetItem, int, QMimeData, Qt.DropAction) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeWidgetItem* a0;
        int a1;
        const QMimeData* a2;
        Qt::DropAction a3;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8iJ8E", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1, sipType_QMimeData, &a2, sipType_Qt_DropAction, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::dropMimeData(a0,a1,a2,a3) : sipCpp->dropMimeData(a0,a1,a2,a3));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropMimeData, doc_QTreeWidget_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            Qt::DropActions*sipRes;

            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QTreeWidget::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_supportedDropActions, doc_QTreeWidget_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_indexFromItem, "indexFromItem(self, QTreeWidgetItem, column: int = 0) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeWidget_indexFromItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_indexFromItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1 = 0;
        const QTreeWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ8|i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->indexFromItem(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_indexFromItem, doc_QTreeWidget_indexFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemFromIndex, "itemFromIndex(self, QModelIndex) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->itemFromIndex(*a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemFromIndex, doc_QTreeWidget_itemFromIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_event, doc_QTreeWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QTreeWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTreeWidget::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_dropEvent, doc_QTreeWidget_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_invisibleRootItem, "invisibleRootItem(self) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_invisibleRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidget, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->invisibleRootItem();

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_invisibleRootItem, doc_QTreeWidget_invisibleRootItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setHeaderLabel, "setHeaderLabel(self, object)");

extern "C" {static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setHeaderLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHeaderLabel(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setHeaderLabel, doc_QTreeWidget_setHeaderLabel);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_isFirstItemColumnSpanned, "isFirstItemColumnSpanned(self, QTreeWidgetItem) -> bool");

extern "C" {static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_isFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isFirstItemColumnSpanned(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_isFirstItemColumnSpanned, doc_QTreeWidget_isFirstItemColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setFirstItemColumnSpanned, "setFirstItemColumnSpanned(self, QTreeWidgetItem, bool)");

extern "C" {static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setFirstItemColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        bool a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
            sipCpp->setFirstItemColumnSpanned(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setFirstItemColumnSpanned, doc_QTreeWidget_setFirstItemColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemAbove, "itemAbove(self, QTreeWidgetItem) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->itemAbove(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemAbove, doc_QTreeWidget_itemAbove);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_itemBelow, "itemBelow(self, QTreeWidgetItem) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidget_itemBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_itemBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;
        const QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->itemBelow(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_itemBelow, doc_QTreeWidget_itemBelow);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_removeItemWidget, "removeItemWidget(self, QTreeWidgetItem, int)");

extern "C" {static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_removeItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        int a1;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QTreeWidget, &sipCpp, sipType_QTreeWidgetItem, &a0, &a1))
        {
#line 224 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qtreewidget.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->itemWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->removeItemWidget(a0, a1);
        Py_END_ALLOW_THREADS
#line 3460 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQTreeWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_removeItemWidget, doc_QTreeWidget_removeItemWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidget_setSelectionModel, "setSelectionModel(self, QItemSelectionModel)");

extern "C" {static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel* a0;
        PyObject *a0Keep;
        QTreeWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeWidget, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTreeWidget::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));

            sipKeepReference(sipSelf, -53, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidget, sipName_setSelectionModel, doc_QTreeWidget_setSelectionModel);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidget_setModel(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QTreeWidget, sipName_setModel, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QTreeWidget(void *, const sipTypeDef *);}
static void *cast_QTreeWidget(void *sipCppV, const sipTypeDef *targetType)
{
    QTreeWidget *sipCpp = reinterpret_cast<QTreeWidget *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidget(void *, int);}
static void release_QTreeWidget(void *sipCppV,int)
{
    QTreeWidget *sipCpp = reinterpret_cast<QTreeWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTreeWidget(sipSimpleWrapper *);}
static void dealloc_QTreeWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTreeWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTreeWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeWidget[] = {{434, 255, 1}};


static PyMethodDef methods_QTreeWidget[] = {
    {SIP_MLNAME_CAST(sipName_addTopLevelItem), meth_QTreeWidget_addTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_addTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_addTopLevelItems), meth_QTreeWidget_addTopLevelItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_addTopLevelItems)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTreeWidget_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_clear)},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), (PyCFunction)meth_QTreeWidget_closePersistentEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_closePersistentEditor)},
    {SIP_MLNAME_CAST(sipName_collapseItem), meth_QTreeWidget_collapseItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_collapseItem)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QTreeWidget_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_columnCount)},
    {SIP_MLNAME_CAST(sipName_currentColumn), meth_QTreeWidget_currentColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_currentColumn)},
    {SIP_MLNAME_CAST(sipName_currentItem), meth_QTreeWidget_currentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_currentItem)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QTreeWidget_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QTreeWidget_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_editItem), (PyCFunction)meth_QTreeWidget_editItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_editItem)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTreeWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_event)},
    {SIP_MLNAME_CAST(sipName_expandItem), meth_QTreeWidget_expandItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_expandItem)},
    {SIP_MLNAME_CAST(sipName_findItems), (PyCFunction)meth_QTreeWidget_findItems, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_findItems)},
    {SIP_MLNAME_CAST(sipName_headerItem), meth_QTreeWidget_headerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_headerItem)},
    {SIP_MLNAME_CAST(sipName_indexFromItem), (PyCFunction)meth_QTreeWidget_indexFromItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_indexFromItem)},
    {SIP_MLNAME_CAST(sipName_indexOfTopLevelItem), meth_QTreeWidget_indexOfTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_indexOfTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItem), meth_QTreeWidget_insertTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_insertTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_insertTopLevelItems), meth_QTreeWidget_insertTopLevelItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_insertTopLevelItems)},
    {SIP_MLNAME_CAST(sipName_invisibleRootItem), meth_QTreeWidget_invisibleRootItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_invisibleRootItem)},
    {SIP_MLNAME_CAST(sipName_isFirstItemColumnSpanned), meth_QTreeWidget_isFirstItemColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_isFirstItemColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_itemAbove), meth_QTreeWidget_itemAbove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemAbove)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QTreeWidget_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemAt)},
    {SIP_MLNAME_CAST(sipName_itemBelow), meth_QTreeWidget_itemBelow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemBelow)},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QTreeWidget_itemFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemFromIndex)},
    {SIP_MLNAME_CAST(sipName_itemWidget), meth_QTreeWidget_itemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_itemWidget)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QTreeWidget_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QTreeWidget_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), (PyCFunction)meth_QTreeWidget_openPersistentEditor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_openPersistentEditor)},
    {SIP_MLNAME_CAST(sipName_removeItemWidget), meth_QTreeWidget_removeItemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_removeItemWidget)},
    {SIP_MLNAME_CAST(sipName_scrollToItem), (PyCFunction)meth_QTreeWidget_scrollToItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidget_scrollToItem)},
    {SIP_MLNAME_CAST(sipName_selectedItems), meth_QTreeWidget_selectedItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_selectedItems)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QTreeWidget_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setCurrentItem), meth_QTreeWidget_setCurrentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setCurrentItem)},
    {SIP_MLNAME_CAST(sipName_setFirstItemColumnSpanned), meth_QTreeWidget_setFirstItemColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setFirstItemColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_setHeaderItem), meth_QTreeWidget_setHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setHeaderLabel), meth_QTreeWidget_setHeaderLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderLabel)},
    {SIP_MLNAME_CAST(sipName_setHeaderLabels), meth_QTreeWidget_setHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setItemWidget), meth_QTreeWidget_setItemWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setItemWidget)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTreeWidget_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTreeWidget_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_sortColumn), meth_QTreeWidget_sortColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_sortColumn)},
    {SIP_MLNAME_CAST(sipName_sortItems), meth_QTreeWidget_sortItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_sortItems)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QTreeWidget_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_takeTopLevelItem), meth_QTreeWidget_takeTopLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_takeTopLevelItem)},
    {SIP_MLNAME_CAST(sipName_topLevelItem), meth_QTreeWidget_topLevelItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_topLevelItem)},
    {SIP_MLNAME_CAST(sipName_topLevelItemCount), meth_QTreeWidget_topLevelItemCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_topLevelItemCount)},
    {SIP_MLNAME_CAST(sipName_visualItemRect), meth_QTreeWidget_visualItemRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidget_visualItemRect)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTreeWidget[] = {
    {"itemSelectionChanged()", "\1itemSelectionChanged(self)", 0, 0},
    {"currentItemChanged(QTreeWidgetItem*,QTreeWidgetItem*)", "\1currentItemChanged(self, QTreeWidgetItem, QTreeWidgetItem)", 0, 0},
    {"itemCollapsed(QTreeWidgetItem*)", "\1itemCollapsed(self, QTreeWidgetItem)", 0, 0},
    {"itemExpanded(QTreeWidgetItem*)", "\1itemExpanded(self, QTreeWidgetItem)", 0, 0},
    {"itemChanged(QTreeWidgetItem*,int)", "\1itemChanged(self, QTreeWidgetItem, int)", 0, 0},
    {"itemEntered(QTreeWidgetItem*,int)", "\1itemEntered(self, QTreeWidgetItem, int)", 0, 0},
    {"itemActivated(QTreeWidgetItem*,int)", "\1itemActivated(self, QTreeWidgetItem, int)", 0, 0},
    {"itemDoubleClicked(QTreeWidgetItem*,int)", "\1itemDoubleClicked(self, QTreeWidgetItem, int)", 0, 0},
    {"itemClicked(QTreeWidgetItem*,int)", "\1itemClicked(self, QTreeWidgetItem, int)", 0, 0},
    {"itemPressed(QTreeWidgetItem*,int)", "\1itemPressed(self, QTreeWidgetItem, int)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTreeWidget, "\1QTreeWidget(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTreeWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTreeWidget,
        {0}
    },
    {
        sipNameNr_QTreeWidget,
        {0, 0, 1},
        48, methods_QTreeWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTreeWidget,
    -1,
    -1,
    supers_QTreeWidget,
    0,
    init_type_QTreeWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeWidget,
    0,
    0,
    0,
    release_QTreeWidget,
    cast_QTreeWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTreeWidget::staticMetaObject,
    0,
    signals_QTreeWidget,
    0
};
