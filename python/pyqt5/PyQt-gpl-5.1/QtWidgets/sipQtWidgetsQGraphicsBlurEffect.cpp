/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 109 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 109 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQGraphicsBlurEffect.cpp"


class sipQGraphicsBlurEffect : public QGraphicsBlurEffect
{
public:
    sipQGraphicsBlurEffect(QObject*);
    virtual ~sipQGraphicsBlurEffect();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void sourceChanged(QGraphicsEffect::ChangeFlags);
    void draw(QPainter*);
    QRectF boundingRectFor(const QRectF&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsBlurEffect(const sipQGraphicsBlurEffect &);
    sipQGraphicsBlurEffect &operator = (const sipQGraphicsBlurEffect &);

    char sipPyMethods[10];
};

sipQGraphicsBlurEffect::sipQGraphicsBlurEffect(QObject*a0): QGraphicsBlurEffect(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsBlurEffect::~sipQGraphicsBlurEffect()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsBlurEffect::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QGraphicsBlurEffect);

    return QGraphicsBlurEffect::metaObject();
}

int sipQGraphicsBlurEffect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsBlurEffect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QGraphicsBlurEffect,_c,_id,_a);

    return _id;
}

void *sipQGraphicsBlurEffect::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QGraphicsBlurEffect, _clname, &sipCpp) ? sipCpp : QGraphicsBlurEffect::qt_metacast(_clname));
}

void sipQGraphicsBlurEffect::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGraphicsBlurEffect::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGraphicsBlurEffect::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGraphicsBlurEffect::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGraphicsBlurEffect::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGraphicsBlurEffect::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsBlurEffect::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGraphicsBlurEffect::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsBlurEffect::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGraphicsBlurEffect::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::sourceChanged(QGraphicsEffect::ChangeFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_sourceChanged);

    if (!sipMeth)
    {
        QGraphicsBlurEffect::sourceChanged(a0);
        return;
    }

    extern void sipVH_QtWidgets_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsEffect::ChangeFlags);

    sipVH_QtWidgets_131(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsBlurEffect::draw(QPainter*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        QGraphicsBlurEffect::draw(a0);
        return;
    }

    extern void sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QRectF sipQGraphicsBlurEffect::boundingRectFor(const QRectF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_boundingRectFor);

    if (!sipMeth)
        return QGraphicsBlurEffect::boundingRectFor(a0);

    extern QRectF sipVH_QtWidgets_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&);

    return sipVH_QtWidgets_130(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_boundingRectFor, "boundingRectFor(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_boundingRectFor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_boundingRectFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        const QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QGraphicsBlurEffect::boundingRectFor(*a0) : sipCpp->boundingRectFor(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_boundingRectFor, doc_QGraphicsBlurEffect_boundingRectFor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_blurRadius, "blurRadius(self) -> float");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_blurRadius(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_blurRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->blurRadius();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_blurRadius, doc_QGraphicsBlurEffect_blurRadius);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_blurHints, "blurHints(self) -> QGraphicsBlurEffect.BlurHints");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_blurHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_blurHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp))
        {
            QGraphicsBlurEffect::BlurHints*sipRes;

            sipRes = new QGraphicsBlurEffect::BlurHints(sipCpp->blurHints());

            return sipConvertFromNewType(sipRes,sipType_QGraphicsBlurEffect_BlurHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_blurHints, doc_QGraphicsBlurEffect_blurHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_setBlurRadius, "setBlurRadius(self, float)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_setBlurRadius(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_setBlurRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, &a0))
        {
            sipCpp->setBlurRadius(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_setBlurRadius, doc_QGraphicsBlurEffect_setBlurRadius);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_setBlurHints, "setBlurHints(self, QGraphicsBlurEffect.BlurHints)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_setBlurHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_setBlurHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsBlurEffect::BlurHints* a0;
        int a0State = 0;
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QGraphicsBlurEffect_BlurHints, &a0, &a0State))
        {
            sipCpp->setBlurHints(*a0);
            sipReleaseType(a0,sipType_QGraphicsBlurEffect_BlurHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_setBlurHints, doc_QGraphicsBlurEffect_setBlurHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsBlurEffect_draw, "draw(self, QPainter)");

extern "C" {static PyObject *meth_QGraphicsBlurEffect_draw(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsBlurEffect_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        QGraphicsBlurEffect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGraphicsBlurEffect, &sipCpp, sipType_QPainter, &a0))
        {
            (sipSelfWasArg ? sipCpp->QGraphicsBlurEffect::draw(a0) : sipCpp->draw(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsBlurEffect, sipName_draw, doc_QGraphicsBlurEffect_draw);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsBlurEffect(void *, int);}
static void release_QGraphicsBlurEffect(void *sipCppV,int)
{
    QGraphicsBlurEffect *sipCpp = reinterpret_cast<QGraphicsBlurEffect *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGraphicsBlurEffect(sipSimpleWrapper *);}
static void dealloc_QGraphicsBlurEffect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsBlurEffect *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsBlurEffect(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGraphicsBlurEffect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsBlurEffect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsBlurEffect *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGraphicsBlurEffect(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsBlurEffect[] = {{112, 255, 1}};


static PyMethodDef methods_QGraphicsBlurEffect[] = {
    {SIP_MLNAME_CAST(sipName_blurHints), meth_QGraphicsBlurEffect_blurHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_blurHints)},
    {SIP_MLNAME_CAST(sipName_blurRadius), meth_QGraphicsBlurEffect_blurRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_blurRadius)},
    {SIP_MLNAME_CAST(sipName_boundingRectFor), meth_QGraphicsBlurEffect_boundingRectFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_boundingRectFor)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QGraphicsBlurEffect_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_draw)},
    {SIP_MLNAME_CAST(sipName_setBlurHints), meth_QGraphicsBlurEffect_setBlurHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_setBlurHints)},
    {SIP_MLNAME_CAST(sipName_setBlurRadius), meth_QGraphicsBlurEffect_setBlurRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsBlurEffect_setBlurRadius)}
};

static sipEnumMemberDef enummembers_QGraphicsBlurEffect[] = {
    {sipName_AnimationHint, static_cast<int>(QGraphicsBlurEffect::AnimationHint), 108},
    {sipName_PerformanceHint, static_cast<int>(QGraphicsBlurEffect::PerformanceHint), 108},
    {sipName_QualityHint, static_cast<int>(QGraphicsBlurEffect::QualityHint), 108},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGraphicsBlurEffect[] = {
    {"blurHintsChanged(QGraphicsBlurEffect::BlurHints)", "\1blurHintsChanged(self, QGraphicsBlurEffect.BlurHints)", 0, 0},
    {"blurRadiusChanged(qreal)", "\1blurRadiusChanged(self, float)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsBlurEffect, "\1QGraphicsBlurEffect(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QGraphicsBlurEffect = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsBlurEffect,
        {0}
    },
    {
        sipNameNr_QGraphicsBlurEffect,
        {0, 0, 1},
        6, methods_QGraphicsBlurEffect,
        3, enummembers_QGraphicsBlurEffect,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsBlurEffect,
    -1,
    -1,
    supers_QGraphicsBlurEffect,
    0,
    init_type_QGraphicsBlurEffect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsBlurEffect,
    0,
    0,
    0,
    release_QGraphicsBlurEffect,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGraphicsBlurEffect::staticMetaObject,
    0,
    signals_QGraphicsBlurEffect,
    0
};
