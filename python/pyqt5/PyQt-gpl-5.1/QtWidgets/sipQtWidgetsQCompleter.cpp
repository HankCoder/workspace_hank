/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qcompleter.sip"
#include <qcompleter.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCompleter.cpp"


class sipQCompleter : public QCompleter
{
public:
    sipQCompleter(QObject*);
    sipQCompleter(QAbstractItemModel*,QObject*);
    sipQCompleter(const QStringList&,QObject*);
    virtual ~sipQCompleter();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool event(QEvent*);
    bool eventFilter(QObject*,QEvent*);
    QStringList splitPath(const QString&) const;
    QString pathFromIndex(const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCompleter(const sipQCompleter &);
    sipQCompleter &operator = (const sipQCompleter &);

    char sipPyMethods[9];
};

sipQCompleter::sipQCompleter(QObject*a0): QCompleter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::sipQCompleter(QAbstractItemModel*a0,QObject*a1): QCompleter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::sipQCompleter(const QStringList& a0,QObject*a1): QCompleter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCompleter::~sipQCompleter()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCompleter::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QCompleter);

    return QCompleter::metaObject();
}

int sipQCompleter::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCompleter::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QCompleter,_c,_id,_a);

    return _id;
}

void *sipQCompleter::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QCompleter, _clname, &sipCpp) ? sipCpp : QCompleter::qt_metacast(_clname));
}

void sipQCompleter::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCompleter::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCompleter::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCompleter::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCompleter::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCompleter::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCompleter::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCompleter::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCompleter::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCompleter::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCompleter::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCompleter::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCompleter::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCompleter::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QStringList sipQCompleter::splitPath(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_splitPath);

    if (!sipMeth)
        return QCompleter::splitPath(a0);

    extern QStringList sipVH_QtWidgets_142(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtWidgets_142(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QString sipQCompleter::pathFromIndex(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_pathFromIndex);

    if (!sipMeth)
        return QCompleter::pathFromIndex(a0);

    extern QString sipVH_QtWidgets_143(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_143(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QCompleter_setWidget, "setWidget(self, QWidget)");

extern "C" {static PyObject *meth_QCompleter_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setWidget, doc_QCompleter_setWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_widget, "widget(self) -> QWidget");

extern "C" {static PyObject *meth_QCompleter_widget(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->widget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_widget, doc_QCompleter_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QCompleter_setModel(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QCompleter, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            sipCpp->setModel(a0);

            sipKeepReference(sipSelf, -15, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setModel, doc_QCompleter_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QCompleter_model(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_model, doc_QCompleter_model);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionMode, "setCompletionMode(self, QCompleter.CompletionMode)");

extern "C" {static PyObject *meth_QCompleter_setCompletionMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter::CompletionMode a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QCompleter_CompletionMode, &a0))
        {
            sipCpp->setCompletionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionMode, doc_QCompleter_setCompletionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_completionMode, "completionMode(self) -> QCompleter.CompletionMode");

extern "C" {static PyObject *meth_QCompleter_completionMode(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QCompleter::CompletionMode sipRes;

            sipRes = sipCpp->completionMode();

            return sipConvertFromEnum(sipRes,sipType_QCompleter_CompletionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionMode, doc_QCompleter_completionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_popup, "popup(self) -> QAbstractItemView");

extern "C" {static PyObject *meth_QCompleter_popup(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_popup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QAbstractItemView*sipRes;

            sipRes = sipCpp->popup();

            return sipConvertFromType(sipRes,sipType_QAbstractItemView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_popup, doc_QCompleter_popup);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setPopup, "setPopup(self, QAbstractItemView)");

extern "C" {static PyObject *meth_QCompleter_setPopup(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView* a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QAbstractItemView, &a0))
        {
            sipCpp->setPopup(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setPopup, doc_QCompleter_setPopup);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setCaseSensitivity, "setCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QCompleter_setCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CaseSensitivity a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCaseSensitivity, doc_QCompleter_setCaseSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_caseSensitivity, "caseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QCompleter_caseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_caseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->caseSensitivity();

            return sipConvertFromEnum(sipRes,sipType_Qt_CaseSensitivity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_caseSensitivity, doc_QCompleter_caseSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setModelSorting, "setModelSorting(self, QCompleter.ModelSorting)");

extern "C" {static PyObject *meth_QCompleter_setModelSorting(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setModelSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter::ModelSorting a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QCompleter_ModelSorting, &a0))
        {
            sipCpp->setModelSorting(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setModelSorting, doc_QCompleter_setModelSorting);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_modelSorting, "modelSorting(self) -> QCompleter.ModelSorting");

extern "C" {static PyObject *meth_QCompleter_modelSorting(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_modelSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QCompleter::ModelSorting sipRes;

            sipRes = sipCpp->modelSorting();

            return sipConvertFromEnum(sipRes,sipType_QCompleter_ModelSorting);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_modelSorting, doc_QCompleter_modelSorting);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionColumn, "setCompletionColumn(self, int)");

extern "C" {static PyObject *meth_QCompleter_setCompletionColumn(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setCompletionColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionColumn, doc_QCompleter_setCompletionColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_completionColumn, "completionColumn(self) -> int");

extern "C" {static PyObject *meth_QCompleter_completionColumn(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->completionColumn();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionColumn, doc_QCompleter_completionColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionRole, "setCompletionRole(self, int)");

extern "C" {static PyObject *meth_QCompleter_setCompletionRole(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setCompletionRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionRole, doc_QCompleter_setCompletionRole);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_completionRole, "completionRole(self) -> int");

extern "C" {static PyObject *meth_QCompleter_completionRole(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->completionRole();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionRole, doc_QCompleter_completionRole);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_completionCount, "completionCount(self) -> int");

extern "C" {static PyObject *meth_QCompleter_completionCount(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->completionCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionCount, doc_QCompleter_completionCount);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setCurrentRow, "setCurrentRow(self, int) -> bool");

extern "C" {static PyObject *meth_QCompleter_setCurrentRow(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCurrentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setCurrentRow(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCurrentRow, doc_QCompleter_setCurrentRow);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_currentRow, "currentRow(self) -> int");

extern "C" {static PyObject *meth_QCompleter_currentRow(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentRow();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentRow, doc_QCompleter_currentRow);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_currentIndex, "currentIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QCompleter_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->currentIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentIndex, doc_QCompleter_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_currentCompletion, "currentCompletion(self) -> object");

extern "C" {static PyObject *meth_QCompleter_currentCompletion(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_currentCompletion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->currentCompletion());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_currentCompletion, doc_QCompleter_currentCompletion);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_completionModel, "completionModel(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QCompleter_completionModel(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QAbstractItemModel*sipRes;

            sipRes = sipCpp->completionModel();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionModel, doc_QCompleter_completionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_completionPrefix, "completionPrefix(self) -> object");

extern "C" {static PyObject *meth_QCompleter_completionPrefix(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_completionPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->completionPrefix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_completionPrefix, doc_QCompleter_completionPrefix);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_pathFromIndex, "pathFromIndex(self, QModelIndex) -> object");

extern "C" {static PyObject *meth_QCompleter_pathFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_pathFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QModelIndex, &a0))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QCompleter::pathFromIndex(*a0) : sipCpp->pathFromIndex(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_pathFromIndex, doc_QCompleter_pathFromIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_splitPath, "splitPath(self, object) -> object");

extern "C" {static PyObject *meth_QCompleter_splitPath(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_splitPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QCompleter::splitPath(*a0) : sipCpp->splitPath(*a0)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_splitPath, doc_QCompleter_splitPath);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_wrapAround, "wrapAround(self) -> bool");

extern "C" {static PyObject *meth_QCompleter_wrapAround(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_wrapAround(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wrapAround();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_wrapAround, doc_QCompleter_wrapAround);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_complete, "complete(self, rect: QRect = QRect())");

extern "C" {static PyObject *meth_QCompleter_complete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCompleter_complete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect& a0def = QRect();
        const QRect* a0 = &a0def;
        QCompleter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->complete(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_complete, doc_QCompleter_complete);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setCompletionPrefix, "setCompletionPrefix(self, object)");

extern "C" {static PyObject *meth_QCompleter_setCompletionPrefix(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setCompletionPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCompletionPrefix(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setCompletionPrefix, doc_QCompleter_setCompletionPrefix);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setWrapAround, "setWrapAround(self, bool)");

extern "C" {static PyObject *meth_QCompleter_setWrapAround(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setWrapAround(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setWrapAround(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setWrapAround, doc_QCompleter_setWrapAround);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCompleter_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCompleter::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_eventFilter, doc_QCompleter_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QCompleter_event(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCompleter, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCompleter::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_event, doc_QCompleter_event);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_maxVisibleItems, "maxVisibleItems(self) -> int");

extern "C" {static PyObject *meth_QCompleter_maxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_maxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCompleter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxVisibleItems();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_maxVisibleItems, doc_QCompleter_maxVisibleItems);

    return NULL;
}


PyDoc_STRVAR(doc_QCompleter_setMaxVisibleItems, "setMaxVisibleItems(self, int)");

extern "C" {static PyObject *meth_QCompleter_setMaxVisibleItems(PyObject *, PyObject *);}
static PyObject *meth_QCompleter_setMaxVisibleItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCompleter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCompleter, &sipCpp, &a0))
        {
            sipCpp->setMaxVisibleItems(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCompleter, sipName_setMaxVisibleItems, doc_QCompleter_setMaxVisibleItems);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCompleter(void *, int);}
static void release_QCompleter(void *sipCppV,int)
{
    QCompleter *sipCpp = reinterpret_cast<QCompleter *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCompleter(sipSimpleWrapper *);}
static void dealloc_QCompleter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCompleter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCompleter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCompleter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCompleter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCompleter *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J<", sipType_QObject, &a0))
        {
            sipCpp = new sipQCompleter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QAbstractItemModel* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QAbstractItemModel, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCompleter(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QStringList* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QStringList,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCompleter(*a0,a1);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCompleter[] = {{142, 0, 1}};


static PyMethodDef methods_QCompleter[] = {
    {SIP_MLNAME_CAST(sipName_caseSensitivity), meth_QCompleter_caseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_caseSensitivity)},
    {SIP_MLNAME_CAST(sipName_complete), (PyCFunction)meth_QCompleter_complete, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCompleter_complete)},
    {SIP_MLNAME_CAST(sipName_completionColumn), meth_QCompleter_completionColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_completionColumn)},
    {SIP_MLNAME_CAST(sipName_completionCount), meth_QCompleter_completionCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_completionCount)},
    {SIP_MLNAME_CAST(sipName_completionMode), meth_QCompleter_completionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_completionMode)},
    {SIP_MLNAME_CAST(sipName_completionModel), meth_QCompleter_completionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_completionModel)},
    {SIP_MLNAME_CAST(sipName_completionPrefix), meth_QCompleter_completionPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_completionPrefix)},
    {SIP_MLNAME_CAST(sipName_completionRole), meth_QCompleter_completionRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_completionRole)},
    {SIP_MLNAME_CAST(sipName_currentCompletion), meth_QCompleter_currentCompletion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_currentCompletion)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QCompleter_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_currentIndex)},
    {SIP_MLNAME_CAST(sipName_currentRow), meth_QCompleter_currentRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_currentRow)},
    {SIP_MLNAME_CAST(sipName_event), meth_QCompleter_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QCompleter_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_eventFilter)},
    {SIP_MLNAME_CAST(sipName_maxVisibleItems), meth_QCompleter_maxVisibleItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_maxVisibleItems)},
    {SIP_MLNAME_CAST(sipName_model), meth_QCompleter_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_model)},
    {SIP_MLNAME_CAST(sipName_modelSorting), meth_QCompleter_modelSorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_modelSorting)},
    {SIP_MLNAME_CAST(sipName_pathFromIndex), meth_QCompleter_pathFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_pathFromIndex)},
    {SIP_MLNAME_CAST(sipName_popup), meth_QCompleter_popup, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_popup)},
    {SIP_MLNAME_CAST(sipName_setCaseSensitivity), meth_QCompleter_setCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_setCompletionColumn), meth_QCompleter_setCompletionColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setCompletionColumn)},
    {SIP_MLNAME_CAST(sipName_setCompletionMode), meth_QCompleter_setCompletionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setCompletionMode)},
    {SIP_MLNAME_CAST(sipName_setCompletionPrefix), meth_QCompleter_setCompletionPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setCompletionPrefix)},
    {SIP_MLNAME_CAST(sipName_setCompletionRole), meth_QCompleter_setCompletionRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setCompletionRole)},
    {SIP_MLNAME_CAST(sipName_setCurrentRow), meth_QCompleter_setCurrentRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setCurrentRow)},
    {SIP_MLNAME_CAST(sipName_setMaxVisibleItems), meth_QCompleter_setMaxVisibleItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setMaxVisibleItems)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QCompleter_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setModel)},
    {SIP_MLNAME_CAST(sipName_setModelSorting), meth_QCompleter_setModelSorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setModelSorting)},
    {SIP_MLNAME_CAST(sipName_setPopup), meth_QCompleter_setPopup, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setPopup)},
    {SIP_MLNAME_CAST(sipName_setWidget), meth_QCompleter_setWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setWidget)},
    {SIP_MLNAME_CAST(sipName_setWrapAround), meth_QCompleter_setWrapAround, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_setWrapAround)},
    {SIP_MLNAME_CAST(sipName_splitPath), meth_QCompleter_splitPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_splitPath)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QCompleter_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_widget)},
    {SIP_MLNAME_CAST(sipName_wrapAround), meth_QCompleter_wrapAround, METH_VARARGS, SIP_MLDOC_CAST(doc_QCompleter_wrapAround)}
};

static sipEnumMemberDef enummembers_QCompleter[] = {
    {sipName_CaseInsensitivelySortedModel, static_cast<int>(QCompleter::CaseInsensitivelySortedModel), 50},
    {sipName_CaseSensitivelySortedModel, static_cast<int>(QCompleter::CaseSensitivelySortedModel), 50},
    {sipName_InlineCompletion, static_cast<int>(QCompleter::InlineCompletion), 49},
    {sipName_PopupCompletion, static_cast<int>(QCompleter::PopupCompletion), 49},
    {sipName_UnfilteredPopupCompletion, static_cast<int>(QCompleter::UnfilteredPopupCompletion), 49},
    {sipName_UnsortedModel, static_cast<int>(QCompleter::UnsortedModel), 50},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCompleter[] = {
    {"highlighted(QString)", "\1highlighted(self, object)", 0, 0},
    {"highlighted(QModelIndex)", "\1highlighted(self, QModelIndex)", 0, 0},
    {"activated(QString)", "\1activated(self, object)", 0, 0},
    {"activated(QModelIndex)", "\1activated(self, QModelIndex)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QCompleter, "\1QCompleter(parent: QObject = None)\n"
    "QCompleter(QAbstractItemModel, parent: QObject = None)\n"
    "QCompleter(object, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QCompleter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCompleter,
        {0}
    },
    {
        sipNameNr_QCompleter,
        {0, 0, 1},
        33, methods_QCompleter,
        6, enummembers_QCompleter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCompleter,
    -1,
    -1,
    supers_QCompleter,
    0,
    init_type_QCompleter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCompleter,
    0,
    0,
    0,
    release_QCompleter,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCompleter::staticMetaObject,
    0,
    signals_QCompleter,
    0
};
