/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 343 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 237 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 198 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 308 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 488 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 454 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 405 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 531 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 547 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 259 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 427 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 370 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 357 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 329 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"


class sipQMenu : public QMenu
{
public:
    sipQMenu(QWidget*);
    sipQMenu(const QString&,QWidget*);
    virtual ~sipQMenu();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    QPaintDevice* redirected(QPoint*) const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    void setVisible(bool);
    int devType() const;
    bool focusNextPrevChild(bool);
    bool event(QEvent*);
    void timerEvent(QTimerEvent*);
    void actionEvent(QActionEvent*);
    void paintEvent(QPaintEvent*);
    void hideEvent(QHideEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void keyPressEvent(QKeyEvent*);
    void changeEvent(QEvent*);
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMenu(const sipQMenu &);
    sipQMenu &operator = (const sipQMenu &);

    char sipPyMethods[47];
};

sipQMenu::sipQMenu(QWidget*a0): QMenu(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMenu::sipQMenu(const QString& a0,QWidget*a1): QMenu(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMenu::~sipQMenu()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMenu::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QMenu);

    return QMenu::metaObject();
}

int sipQMenu::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMenu::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QMenu,_c,_id,_a);

    return _id;
}

void *sipQMenu::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QMenu, _clname, &sipCpp) ? sipCpp : QMenu::qt_metacast(_clname));
}

void sipQMenu::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMenu::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMenu::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMenu::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMenu::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMenu::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMenu::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQMenu::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QMenu::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPainter* sipQMenu::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QMenu::sharedPainter();

    extern QPainter* sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_5(sipGILState, 0, sipPySelf, sipMeth);
}

QPaintDevice* sipQMenu::redirected(QPoint*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_redirected);

    if (!sipMeth)
        return QMenu::redirected(a0);

    extern QPaintDevice* sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPoint*);

    return sipVH_QtWidgets_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMenu::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QMenu::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQMenu::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QMenu::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

QVariant sipQMenu::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QMenu::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QMenu::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMenu::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QMenu::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QMenu::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QMenu::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QMenu::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QMenu::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QMenu::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QMenu::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QMenu::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QMenu::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QMenu::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QMenu::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QMenu::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QMenu::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QMenu::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QMenu::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQMenu::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QMenu::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQMenu::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QMenu::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQMenu::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QMenu::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMenu::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QMenu::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMenu::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QMenu::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQMenu::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QMenu::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMenu::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMenu::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMenu::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QMenu::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QMenu::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtWidgets_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QMenu::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QMenu::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QMenu::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QMenu::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QMenu::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QMenu::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QMenu::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QMenu::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMenu::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QMenu::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQMenu::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QMenu::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMenu_addAction, "addAction(self, QAction)\n"
    "addAction(self, object) -> QAction\n"
    "addAction(self, QIcon, object) -> QAction\n"
    "addAction(self, object, object, shortcut: QKeySequence = 0) -> QAction\n"
    "addAction(self, QIcon, object, object, shortcut: QKeySequence = 0) -> QAction");

extern "C" {static PyObject *meth_QMenu_addAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMenu_addAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QMenu *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QAction, &a0))
        {
            sipCpp->addAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QMenu *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QAction*sipRes;

            sipRes = sipCpp->addAction(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        QMenu *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            QAction*sipRes;

            sipRes = sipCpp->addAction(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        PyObject * a1;
        const QKeySequence& a2def = 0;
        const QKeySequence* a2 = &a2def;
        int a2State = 0;
        QMenu *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_shortcut,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1P0|J1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QKeySequence, &a2, &a2State))
        {
            QAction*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qmenu.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_get_connection_parts(a1, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->addAction(*a0, receiver, slot_signature.constData(), *a2);
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(1, a1);
        }
#line 1250 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QKeySequence *>(a2),sipType_QKeySequence,a2State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        PyObject * a2;
        const QKeySequence& a3def = 0;
        const QKeySequence* a3 = &a3def;
        int a3State = 0;
        QMenu *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_shortcut,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1P0|J1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State, &a2, sipType_QKeySequence, &a3, &a3State))
        {
            QAction*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 53 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qmenu.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_get_connection_parts(a2, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->addAction(*a0, *a1, receiver, slot_signature.constData(), *a3);
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(2, a2);
        }
#line 1300 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQMenu.cpp"
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QKeySequence *>(a3),sipType_QKeySequence,a3State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_addAction, doc_QMenu_addAction);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_addMenu, "addMenu(self, QMenu) -> QAction\n"
    "addMenu(self, object) -> QMenu\n"
    "addMenu(self, QIcon, object) -> QMenu");

extern "C" {static PyObject *meth_QMenu_addMenu(PyObject *, PyObject *);}
static PyObject *meth_QMenu_addMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QMenu, &a0))
        {
            QAction*sipRes;

            sipRes = sipCpp->addMenu(a0);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QMenu*sipRes;

            sipRes = sipCpp->addMenu(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QMenu,sipSelf);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            QMenu*sipRes;

            sipRes = sipCpp->addMenu(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QMenu,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_addMenu, doc_QMenu_addMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_addSeparator, "addSeparator(self) -> QAction");

extern "C" {static PyObject *meth_QMenu_addSeparator(PyObject *, PyObject *);}
static PyObject *meth_QMenu_addSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QAction*sipRes;

            sipRes = sipCpp->addSeparator();

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_addSeparator, doc_QMenu_addSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_insertMenu, "insertMenu(self, QAction, QMenu) -> QAction");

extern "C" {static PyObject *meth_QMenu_insertMenu(PyObject *, PyObject *);}
static PyObject *meth_QMenu_insertMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QMenu* a1;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QAction, &a0, sipType_QMenu, &a1))
        {
            QAction*sipRes;

            sipRes = sipCpp->insertMenu(a0,a1);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_insertMenu, doc_QMenu_insertMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_insertSeparator, "insertSeparator(self, QAction) -> QAction");

extern "C" {static PyObject *meth_QMenu_insertSeparator(PyObject *, PyObject *);}
static PyObject *meth_QMenu_insertSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QAction, &a0))
        {
            QAction*sipRes;

            sipRes = sipCpp->insertSeparator(a0);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_insertSeparator, doc_QMenu_insertSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_clear, "clear(self)");

extern "C" {static PyObject *meth_QMenu_clear(PyObject *, PyObject *);}
static PyObject *meth_QMenu_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_clear, doc_QMenu_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setTearOffEnabled, "setTearOffEnabled(self, bool)");

extern "C" {static PyObject *meth_QMenu_setTearOffEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setTearOffEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMenu, &sipCpp, &a0))
        {
            sipCpp->setTearOffEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setTearOffEnabled, doc_QMenu_setTearOffEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_isTearOffEnabled, "isTearOffEnabled(self) -> bool");

extern "C" {static PyObject *meth_QMenu_isTearOffEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMenu_isTearOffEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTearOffEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_isTearOffEnabled, doc_QMenu_isTearOffEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_isTearOffMenuVisible, "isTearOffMenuVisible(self) -> bool");

extern "C" {static PyObject *meth_QMenu_isTearOffMenuVisible(PyObject *, PyObject *);}
static PyObject *meth_QMenu_isTearOffMenuVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTearOffMenuVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_isTearOffMenuVisible, doc_QMenu_isTearOffMenuVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_hideTearOffMenu, "hideTearOffMenu(self)");

extern "C" {static PyObject *meth_QMenu_hideTearOffMenu(PyObject *, PyObject *);}
static PyObject *meth_QMenu_hideTearOffMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            sipCpp->hideTearOffMenu();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_hideTearOffMenu, doc_QMenu_hideTearOffMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setDefaultAction, "setDefaultAction(self, QAction)");

extern "C" {static PyObject *meth_QMenu_setDefaultAction(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setDefaultAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        PyObject *a0Keep;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QMenu, &sipCpp, &a0Keep, sipType_QAction, &a0))
        {
            sipCpp->setDefaultAction(a0);

            sipKeepReference(sipSelf, -37, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setDefaultAction, doc_QMenu_setDefaultAction);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_defaultAction, "defaultAction(self) -> QAction");

extern "C" {static PyObject *meth_QMenu_defaultAction(PyObject *, PyObject *);}
static PyObject *meth_QMenu_defaultAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QAction*sipRes;

            sipRes = sipCpp->defaultAction();

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_defaultAction, doc_QMenu_defaultAction);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setActiveAction, "setActiveAction(self, QAction)");

extern "C" {static PyObject *meth_QMenu_setActiveAction(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setActiveAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QAction, &a0))
        {
            sipCpp->setActiveAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setActiveAction, doc_QMenu_setActiveAction);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_activeAction, "activeAction(self) -> QAction");

extern "C" {static PyObject *meth_QMenu_activeAction(PyObject *, PyObject *);}
static PyObject *meth_QMenu_activeAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QAction*sipRes;

            sipRes = sipCpp->activeAction();

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_activeAction, doc_QMenu_activeAction);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_popup, "popup(self, QPoint, action: QAction = None)");

extern "C" {static PyObject *meth_QMenu_popup(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMenu_popup(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        QAction* a1 = 0;
        QMenu *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_action,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QPoint, &a0, sipType_QAction, &a1))
        {
            sipCpp->popup(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_popup, doc_QMenu_popup);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_exec_, "exec_(self) -> QAction\n"
    "exec_(self, QPoint, action: QAction = None) -> QAction\n"
    "exec_(object, QPoint, at: QAction = None, parent: QWidget = None) -> QAction");

extern "C" {static PyObject *meth_QMenu_exec_(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMenu_exec_(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QAction*sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    {
        const QPoint* a0;
        QAction* a1 = 0;
        QMenu *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_action,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QPoint, &a0, sipType_QAction, &a1))
        {
            QAction*sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0,a1);
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    {
        QList<QAction*>* a0;
        int a0State = 0;
        const QPoint* a1;
        QAction* a2 = 0;
        QWidget* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_at,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J9|J8J8", sipType_QList_0101QAction,&a0, &a0State, sipType_QPoint, &a1, sipType_QAction, &a2, sipType_QWidget, &a3))
        {
            QAction*sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMenu::exec(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QList_0101QAction,a0State);


            sipCallHook("__pyQtPostEventLoopHook__");
            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_exec_, doc_QMenu_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_exec, "exec(self) -> QAction\n"
    "exec(self, QPoint, action: QAction = None) -> QAction\n"
    "exec(object, QPoint, at: QAction = None, parent: QWidget = None) -> QAction");

extern "C" {static PyObject *meth_QMenu_exec(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMenu_exec(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QMenu *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    {
        const QPoint* a0;
        QAction* a1 = 0;
        QMenu *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_action,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QPoint, &a0, sipType_QAction, &a1))
        {
            QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    {
        QList<QAction*>* a0;
        int a0State = 0;
        const QPoint* a1;
        QAction* a2 = 0;
        QWidget* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_at,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J9|J8J8", sipType_QList_0101QAction,&a0, &a0State, sipType_QPoint, &a1, sipType_QAction, &a2, sipType_QWidget, &a3))
        {
            QAction*sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMenu::exec(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QList_0101QAction,a0State);


            sipCallHook("__pyQtPostEventLoopHook__");
            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_exec, doc_QMenu_exec);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QMenu_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QMenu_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QMenu::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_sizeHint, doc_QMenu_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_actionGeometry, "actionGeometry(self, QAction) -> QRect");

extern "C" {static PyObject *meth_QMenu_actionGeometry(PyObject *, PyObject *);}
static PyObject *meth_QMenu_actionGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QAction, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->actionGeometry(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_actionGeometry, doc_QMenu_actionGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_actionAt, "actionAt(self, QPoint) -> QAction");

extern "C" {static PyObject *meth_QMenu_actionAt(PyObject *, PyObject *);}
static PyObject *meth_QMenu_actionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMenu, &sipCpp, sipType_QPoint, &a0))
        {
            QAction*sipRes;

            sipRes = sipCpp->actionAt(*a0);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_actionAt, doc_QMenu_actionAt);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_menuAction, "menuAction(self) -> QAction");

extern "C" {static PyObject *meth_QMenu_menuAction(PyObject *, PyObject *);}
static PyObject *meth_QMenu_menuAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QAction*sipRes;

            sipRes = sipCpp->menuAction();

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_menuAction, doc_QMenu_menuAction);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_title, "title(self) -> object");

extern "C" {static PyObject *meth_QMenu_title(PyObject *, PyObject *);}
static PyObject *meth_QMenu_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_title, doc_QMenu_title);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setTitle, "setTitle(self, object)");

extern "C" {static PyObject *meth_QMenu_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setTitle, doc_QMenu_setTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QMenu_icon(PyObject *, PyObject *);}
static PyObject *meth_QMenu_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_icon, doc_QMenu_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QMenu_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMenu, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setIcon, doc_QMenu_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setNoReplayFor, "setNoReplayFor(self, QWidget)");

extern "C" {static PyObject *meth_QMenu_setNoReplayFor(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setNoReplayFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setNoReplayFor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setNoReplayFor, doc_QMenu_setNoReplayFor);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_columnCount, "columnCount(self) -> int");

extern "C" {static PyObject *meth_QMenu_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QMenu_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QMenu, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_columnCount, doc_QMenu_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_initStyleOption, "initStyleOption(self, QStyleOptionMenuItem, QAction)");

extern "C" {static PyObject *meth_QMenu_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QMenu_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionMenuItem* a0;
        const QAction* a1;
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QStyleOptionMenuItem, &a0, sipType_QAction, &a1))
        {
            sipCpp->initStyleOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_initStyleOption, doc_QMenu_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QMenu_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_changeEvent, doc_QMenu_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QMenu_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_keyPressEvent, doc_QMenu_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QMenu_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_mouseReleaseEvent, doc_QMenu_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QMenu_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_mousePressEvent, doc_QMenu_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QMenu_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_mouseMoveEvent, doc_QMenu_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QMenu_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_wheelEvent, doc_QMenu_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_enterEvent, "enterEvent(self, QEvent)");

extern "C" {static PyObject *meth_QMenu_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::enterEvent(a0) : sipCpp->enterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_enterEvent, doc_QMenu_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_leaveEvent, "leaveEvent(self, QEvent)");

extern "C" {static PyObject *meth_QMenu_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::leaveEvent(a0) : sipCpp->leaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_leaveEvent, doc_QMenu_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QMenu_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_hideEvent, doc_QMenu_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QMenu_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_paintEvent, doc_QMenu_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_actionEvent, "actionEvent(self, QActionEvent)");

extern "C" {static PyObject *meth_QMenu_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QActionEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::actionEvent(a0) : sipCpp->actionEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_actionEvent, doc_QMenu_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QMenu_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QMenu_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMenu::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_timerEvent, doc_QMenu_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QMenu_event(PyObject *, PyObject *);}
static PyObject *meth_QMenu_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMenu, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMenu::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_event, doc_QMenu_event);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QMenu_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QMenu_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QMenu, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMenu::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_focusNextPrevChild, doc_QMenu_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QMenu_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QMenu_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_isEmpty, doc_QMenu_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_separatorsCollapsible, "separatorsCollapsible(self) -> bool");

extern "C" {static PyObject *meth_QMenu_separatorsCollapsible(PyObject *, PyObject *);}
static PyObject *meth_QMenu_separatorsCollapsible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->separatorsCollapsible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_separatorsCollapsible, doc_QMenu_separatorsCollapsible);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setSeparatorsCollapsible, "setSeparatorsCollapsible(self, bool)");

extern "C" {static PyObject *meth_QMenu_setSeparatorsCollapsible(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setSeparatorsCollapsible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMenu, &sipCpp, &a0))
        {
            sipCpp->setSeparatorsCollapsible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setSeparatorsCollapsible, doc_QMenu_setSeparatorsCollapsible);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_addSection, "addSection(self, object) -> QAction\n"
    "addSection(self, QIcon, object) -> QAction");

extern "C" {static PyObject *meth_QMenu_addSection(PyObject *, PyObject *);}
static PyObject *meth_QMenu_addSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QAction*sipRes;

            sipRes = sipCpp->addSection(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            QAction*sipRes;

            sipRes = sipCpp->addSection(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_addSection, doc_QMenu_addSection);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_insertSection, "insertSection(self, QAction, object) -> QAction\n"
    "insertSection(self, QAction, QIcon, object) -> QAction");

extern "C" {static PyObject *meth_QMenu_insertSection(PyObject *, PyObject *);}
static PyObject *meth_QMenu_insertSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        const QString* a1;
        int a1State = 0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QAction, &a0, sipType_QString,&a1, &a1State))
        {
            QAction*sipRes;

            sipRes = sipCpp->insertSection(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    {
        QAction* a0;
        const QIcon* a1;
        const QString* a2;
        int a2State = 0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J1", &sipSelf, sipType_QMenu, &sipCpp, sipType_QAction, &a0, sipType_QIcon, &a1, sipType_QString,&a2, &a2State))
        {
            QAction*sipRes;

            sipRes = sipCpp->insertSection(a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_insertSection, doc_QMenu_insertSection);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_toolTipsVisible, "toolTipsVisible(self) -> bool");

extern "C" {static PyObject *meth_QMenu_toolTipsVisible(PyObject *, PyObject *);}
static PyObject *meth_QMenu_toolTipsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMenu, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->toolTipsVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_toolTipsVisible, doc_QMenu_toolTipsVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QMenu_setToolTipsVisible, "setToolTipsVisible(self, bool)");

extern "C" {static PyObject *meth_QMenu_setToolTipsVisible(PyObject *, PyObject *);}
static PyObject *meth_QMenu_setToolTipsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMenu *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMenu, &sipCpp, &a0))
        {
            sipCpp->setToolTipsVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMenu, sipName_setToolTipsVisible, doc_QMenu_setToolTipsVisible);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QMenu(void *, const sipTypeDef *);}
static void *cast_QMenu(void *sipCppV, const sipTypeDef *targetType)
{
    QMenu *sipCpp = reinterpret_cast<QMenu *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMenu(void *, int);}
static void release_QMenu(void *sipCppV,int)
{
    QMenu *sipCpp = reinterpret_cast<QMenu *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMenu(sipSimpleWrapper *);}
static void dealloc_QMenu(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMenu *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMenu(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMenu(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMenu(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMenu *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQMenu(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQMenu(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMenu[] = {{448, 255, 1}};


static PyMethodDef methods_QMenu[] = {
    {SIP_MLNAME_CAST(sipName_actionAt), meth_QMenu_actionAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_actionAt)},
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QMenu_actionEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_actionEvent)},
    {SIP_MLNAME_CAST(sipName_actionGeometry), meth_QMenu_actionGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_actionGeometry)},
    {SIP_MLNAME_CAST(sipName_activeAction), meth_QMenu_activeAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_activeAction)},
    {SIP_MLNAME_CAST(sipName_addAction), (PyCFunction)meth_QMenu_addAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMenu_addAction)},
    {SIP_MLNAME_CAST(sipName_addMenu), meth_QMenu_addMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_addMenu)},
    {SIP_MLNAME_CAST(sipName_addSection), meth_QMenu_addSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_addSection)},
    {SIP_MLNAME_CAST(sipName_addSeparator), meth_QMenu_addSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_addSeparator)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QMenu_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QMenu_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_clear)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QMenu_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_columnCount)},
    {SIP_MLNAME_CAST(sipName_defaultAction), meth_QMenu_defaultAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_defaultAction)},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QMenu_enterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_enterEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QMenu_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_event)},
    {SIP_MLNAME_CAST(sipName_exec), (PyCFunction)meth_QMenu_exec, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMenu_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), (PyCFunction)meth_QMenu_exec_, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMenu_exec_)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QMenu_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QMenu_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_hideEvent)},
    {SIP_MLNAME_CAST(sipName_hideTearOffMenu), meth_QMenu_hideTearOffMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_hideTearOffMenu)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QMenu_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_icon)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QMenu_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_insertMenu), meth_QMenu_insertMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_insertMenu)},
    {SIP_MLNAME_CAST(sipName_insertSection), meth_QMenu_insertSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_insertSection)},
    {SIP_MLNAME_CAST(sipName_insertSeparator), meth_QMenu_insertSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_insertSeparator)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QMenu_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isTearOffEnabled), meth_QMenu_isTearOffEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_isTearOffEnabled)},
    {SIP_MLNAME_CAST(sipName_isTearOffMenuVisible), meth_QMenu_isTearOffMenuVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_isTearOffMenuVisible)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QMenu_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QMenu_leaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_leaveEvent)},
    {SIP_MLNAME_CAST(sipName_menuAction), meth_QMenu_menuAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_menuAction)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QMenu_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QMenu_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QMenu_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QMenu_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_paintEvent)},
    {SIP_MLNAME_CAST(sipName_popup), (PyCFunction)meth_QMenu_popup, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMenu_popup)},
    {SIP_MLNAME_CAST(sipName_separatorsCollapsible), meth_QMenu_separatorsCollapsible, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_separatorsCollapsible)},
    {SIP_MLNAME_CAST(sipName_setActiveAction), meth_QMenu_setActiveAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setActiveAction)},
    {SIP_MLNAME_CAST(sipName_setDefaultAction), meth_QMenu_setDefaultAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setDefaultAction)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QMenu_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setIcon)},
    {SIP_MLNAME_CAST(sipName_setNoReplayFor), meth_QMenu_setNoReplayFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setNoReplayFor)},
    {SIP_MLNAME_CAST(sipName_setSeparatorsCollapsible), meth_QMenu_setSeparatorsCollapsible, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setSeparatorsCollapsible)},
    {SIP_MLNAME_CAST(sipName_setTearOffEnabled), meth_QMenu_setTearOffEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setTearOffEnabled)},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_QMenu_setTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setTitle)},
    {SIP_MLNAME_CAST(sipName_setToolTipsVisible), meth_QMenu_setToolTipsVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_setToolTipsVisible)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QMenu_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_sizeHint)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QMenu_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_timerEvent)},
    {SIP_MLNAME_CAST(sipName_title), meth_QMenu_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_title)},
    {SIP_MLNAME_CAST(sipName_toolTipsVisible), meth_QMenu_toolTipsVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_toolTipsVisible)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QMenu_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMenu_wheelEvent)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMenu[] = {
    {"triggered(QAction*)", "\1triggered(self, QAction)", 0, 0},
    {"hovered(QAction*)", "\1hovered(self, QAction)", 0, 0},
    {"aboutToShow()", "\1aboutToShow(self)", 0, 0},
    {"aboutToHide()", "\1aboutToHide(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMenu, "\1QMenu(parent: QWidget = None)\n"
    "QMenu(object, parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QMenu = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMenu,
        {0}
    },
    {
        sipNameNr_QMenu,
        {0, 0, 1},
        49, methods_QMenu,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMenu,
    -1,
    -1,
    supers_QMenu,
    0,
    init_type_QMenu,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMenu,
    0,
    0,
    0,
    release_QMenu,
    cast_QMenu,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMenu::staticMetaObject,
    0,
    signals_QMenu,
    0
};
