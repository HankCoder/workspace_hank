/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlineedit.sip"
#include <qlineedit.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qcompleter.sip"
#include <qcompleter.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 454 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 427 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 531 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 547 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 343 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 329 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 308 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 198 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 212 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 405 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 259 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 370 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 357 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 237 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQLineEdit.cpp"


class sipQLineEdit : public QLineEdit
{
public:
    sipQLineEdit(QWidget*);
    sipQLineEdit(const QString&,QWidget*);
    virtual ~sipQLineEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    QPaintDevice* redirected(QPoint*) const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    bool event(QEvent*);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void changeEvent(QEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void paintEvent(QPaintEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyPressEvent(QKeyEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLineEdit(const sipQLineEdit &);
    sipQLineEdit &operator = (const sipQLineEdit &);

    char sipPyMethods[47];
};

sipQLineEdit::sipQLineEdit(QWidget*a0): QLineEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLineEdit::sipQLineEdit(const QString& a0,QWidget*a1): QLineEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLineEdit::~sipQLineEdit()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLineEdit::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QLineEdit);

    return QLineEdit::metaObject();
}

int sipQLineEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QLineEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QLineEdit,_c,_id,_a);

    return _id;
}

void *sipQLineEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QLineEdit, _clname, &sipCpp) ? sipCpp : QLineEdit::qt_metacast(_clname));
}

void sipQLineEdit::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QLineEdit::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QLineEdit::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QLineEdit::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QLineEdit::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QLineEdit::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QLineEdit::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQLineEdit::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QLineEdit::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPainter* sipQLineEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QLineEdit::sharedPainter();

    extern QPainter* sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_5(sipGILState, 0, sipPySelf, sipMeth);
}

QPaintDevice* sipQLineEdit::redirected(QPoint*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_redirected);

    if (!sipMeth)
        return QLineEdit::redirected(a0);

    extern QPaintDevice* sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPoint*);

    return sipVH_QtWidgets_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQLineEdit::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QLineEdit::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQLineEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QLineEdit::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQLineEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QLineEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQLineEdit::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QLineEdit::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QLineEdit::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QLineEdit::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QLineEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QLineEdit::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QLineEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QLineEdit::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QLineEdit::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QLineEdit::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QLineEdit::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QLineEdit::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QLineEdit::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQLineEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QLineEdit::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQLineEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QLineEdit::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QLineEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQLineEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QLineEdit::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQLineEdit::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QLineEdit::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQLineEdit::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QLineEdit::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QLineEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QLineEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QLineEdit::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QLineEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QLineEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QLineEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QLineEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QLineEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtWidgets_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QLineEdit::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QLineEdit::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QLineEdit::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QLineEdit::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QLineEdit::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QLineEdit::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLineEdit::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QLineEdit::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQLineEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QLineEdit::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQLineEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QLineEdit::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QLineEdit_text, "text(self) -> object");

extern "C" {static PyObject *meth_QLineEdit_text(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_text, doc_QLineEdit_text);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_displayText, "displayText(self) -> object");

extern "C" {static PyObject *meth_QLineEdit_displayText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_displayText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->displayText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_displayText, doc_QLineEdit_displayText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_maxLength, "maxLength(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_maxLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_maxLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_maxLength, doc_QLineEdit_maxLength);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setMaxLength, "setMaxLength(self, int)");

extern "C" {static PyObject *meth_QLineEdit_setMaxLength(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setMaxLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setMaxLength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setMaxLength, doc_QLineEdit_setMaxLength);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setFrame, "setFrame(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setFrame(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setFrame, doc_QLineEdit_setFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_hasFrame, "hasFrame(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasFrame(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFrame();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasFrame, doc_QLineEdit_hasFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_echoMode, "echoMode(self) -> QLineEdit.EchoMode");

extern "C" {static PyObject *meth_QLineEdit_echoMode(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_echoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QLineEdit::EchoMode sipRes;

            sipRes = sipCpp->echoMode();

            return sipConvertFromEnum(sipRes,sipType_QLineEdit_EchoMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_echoMode, doc_QLineEdit_echoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setEchoMode, "setEchoMode(self, QLineEdit.EchoMode)");

extern "C" {static PyObject *meth_QLineEdit_setEchoMode(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setEchoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit::EchoMode a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QLineEdit_EchoMode, &a0))
        {
            sipCpp->setEchoMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setEchoMode, doc_QLineEdit_setEchoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isReadOnly, doc_QLineEdit_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setReadOnly, doc_QLineEdit_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setValidator, "setValidator(self, QValidator)");

extern "C" {static PyObject *meth_QLineEdit_setValidator(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QValidator* a0;
        PyObject *a0Keep;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLineEdit, &sipCpp, &a0Keep, sipType_QValidator, &a0))
        {
            sipCpp->setValidator(a0);

            sipKeepReference(sipSelf, -34, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setValidator, doc_QLineEdit_setValidator);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_validator, "validator(self) -> QValidator");

extern "C" {static PyObject *meth_QLineEdit_validator(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_validator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            const QValidator*sipRes;

            sipRes = sipCpp->validator();

            return sipConvertFromType(const_cast<QValidator *>(sipRes),sipType_QValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_validator, doc_QLineEdit_validator);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLineEdit_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLineEdit::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_sizeHint, doc_QLineEdit_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLineEdit_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLineEdit::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_minimumSizeHint, doc_QLineEdit_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorPosition, "cursorPosition(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_cursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorPosition, doc_QLineEdit_cursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setCursorPosition, "setCursorPosition(self, int)");

extern "C" {static PyObject *meth_QLineEdit_setCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setCursorPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCursorPosition, doc_QLineEdit_setCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorPositionAt, "cursorPositionAt(self, QPoint) -> int");

extern "C" {static PyObject *meth_QLineEdit_cursorPositionAt(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorPositionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->cursorPositionAt(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorPositionAt, doc_QLineEdit_cursorPositionAt);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setAlignment, "setAlignment(self, Qt.Alignment)");

extern "C" {static PyObject *meth_QLineEdit_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setAlignment, doc_QLineEdit_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QLineEdit_alignment(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_alignment, doc_QLineEdit_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorForward, "cursorForward(self, bool, steps: int = 1)");

extern "C" {static PyObject *meth_QLineEdit_cursorForward(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorForward(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 1;
        QLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|i", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->cursorForward(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorForward, doc_QLineEdit_cursorForward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorBackward, "cursorBackward(self, bool, steps: int = 1)");

extern "C" {static PyObject *meth_QLineEdit_cursorBackward(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorBackward(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        int a1 = 1;
        QLineEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|i", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->cursorBackward(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorBackward, doc_QLineEdit_cursorBackward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorWordForward, "cursorWordForward(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_cursorWordForward(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorWordForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->cursorWordForward(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorWordForward, doc_QLineEdit_cursorWordForward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorWordBackward, "cursorWordBackward(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_cursorWordBackward(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorWordBackward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->cursorWordBackward(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorWordBackward, doc_QLineEdit_cursorWordBackward);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_backspace, "backspace(self)");

extern "C" {static PyObject *meth_QLineEdit_backspace(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_backspace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->backspace();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_backspace, doc_QLineEdit_backspace);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_del_, "del_(self)");

extern "C" {static PyObject *meth_QLineEdit_del_(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_del_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->del();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_del_, doc_QLineEdit_del_);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_home, "home(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_home(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_home(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->home(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_home, doc_QLineEdit_home);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_end, "end(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_end(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->end(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_end, doc_QLineEdit_end);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isModified, "isModified(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isModified(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModified();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isModified, doc_QLineEdit_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setModified, "setModified(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setModified(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setModified(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setModified, doc_QLineEdit_setModified);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setSelection, "setSelection(self, int, int)");

extern "C" {static PyObject *meth_QLineEdit_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->setSelection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setSelection, doc_QLineEdit_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_hasSelectedText, "hasSelectedText(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelectedText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasSelectedText, doc_QLineEdit_hasSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectedText, "selectedText(self) -> object");

extern "C" {static PyObject *meth_QLineEdit_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectedText, doc_QLineEdit_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectionStart, "selectionStart(self) -> int");

extern "C" {static PyObject *meth_QLineEdit_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionStart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectionStart, doc_QLineEdit_selectionStart);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isUndoAvailable, "isUndoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isUndoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isUndoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isUndoAvailable, doc_QLineEdit_isUndoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_isRedoAvailable, "isRedoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_isRedoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_isRedoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRedoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_isRedoAvailable, doc_QLineEdit_isRedoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setDragEnabled, "setDragEnabled(self, bool)");

extern "C" {static PyObject *meth_QLineEdit_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLineEdit, &sipCpp, &a0))
        {
            sipCpp->setDragEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setDragEnabled, doc_QLineEdit_setDragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragEnabled, "dragEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_dragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dragEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragEnabled, doc_QLineEdit_dragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_inputMask, "inputMask(self) -> object");

extern "C" {static PyObject *meth_QLineEdit_inputMask(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->inputMask());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMask, doc_QLineEdit_inputMask);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setInputMask, "setInputMask(self, object)");

extern "C" {static PyObject *meth_QLineEdit_setInputMask(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setInputMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setInputMask(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setInputMask, doc_QLineEdit_setInputMask);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_hasAcceptableInput, "hasAcceptableInput(self) -> bool");

extern "C" {static PyObject *meth_QLineEdit_hasAcceptableInput(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_hasAcceptableInput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAcceptableInput();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_hasAcceptableInput, doc_QLineEdit_hasAcceptableInput);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setText, "setText(self, object)");

extern "C" {static PyObject *meth_QLineEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setText, doc_QLineEdit_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QLineEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_clear, doc_QLineEdit_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QLineEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->selectAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_selectAll, doc_QLineEdit_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_undo, "undo(self)");

extern "C" {static PyObject *meth_QLineEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_undo, doc_QLineEdit_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_redo, "redo(self)");

extern "C" {static PyObject *meth_QLineEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_redo, doc_QLineEdit_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cut, "cut(self)");

extern "C" {static PyObject *meth_QLineEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->cut();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cut, doc_QLineEdit_cut);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_copy, "copy(self)");

extern "C" {static PyObject *meth_QLineEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->copy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_copy, doc_QLineEdit_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_paste, "paste(self)");

extern "C" {static PyObject *meth_QLineEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->paste();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_paste, doc_QLineEdit_paste);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_deselect, "deselect(self)");

extern "C" {static PyObject *meth_QLineEdit_deselect(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_deselect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->deselect();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_deselect, doc_QLineEdit_deselect);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_insert, "insert(self, object)");

extern "C" {static PyObject *meth_QLineEdit_insert(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insert(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_insert, doc_QLineEdit_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QLineEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_createStandardContextMenu, doc_QLineEdit_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_initStyleOption, "initStyleOption(self, QStyleOptionFrame)");

extern "C" {static PyObject *meth_QLineEdit_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionFrame* a0;
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QStyleOptionFrame, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_initStyleOption, doc_QLineEdit_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mousePressEvent, doc_QLineEdit_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseMoveEvent, doc_QLineEdit_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseReleaseEvent, doc_QLineEdit_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QLineEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_mouseDoubleClickEvent, doc_QLineEdit_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QLineEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_keyPressEvent, doc_QLineEdit_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLineEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusInEvent, doc_QLineEdit_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QLineEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_focusOutEvent, doc_QLineEdit_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QLineEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_paintEvent, doc_QLineEdit_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragEnterEvent, doc_QLineEdit_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragMoveEvent, doc_QLineEdit_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QLineEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dragLeaveEvent, doc_QLineEdit_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QLineEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_dropEvent, doc_QLineEdit_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLineEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_changeEvent, doc_QLineEdit_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QLineEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_contextMenuEvent, doc_QLineEdit_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QLineEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLineEdit::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMethodEvent, doc_QLineEdit_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorRect, "cursorRect(self) -> QRect");

extern "C" {static PyObject *meth_QLineEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->cursorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorRect, doc_QLineEdit_cursorRect);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QLineEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QLineEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_inputMethodQuery, doc_QLineEdit_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QLineEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLineEdit::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_event, doc_QLineEdit_event);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setCompleter, "setCompleter(self, QCompleter)");

extern "C" {static PyObject *meth_QLineEdit_setCompleter(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCompleter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCompleter* a0;
        PyObject *a0Keep;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLineEdit, &sipCpp, &a0Keep, sipType_QCompleter, &a0))
        {
            sipCpp->setCompleter(a0);

            sipKeepReference(sipSelf, -35, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCompleter, doc_QLineEdit_setCompleter);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_completer, "completer(self) -> QCompleter");

extern "C" {static PyObject *meth_QLineEdit_completer(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_completer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QCompleter*sipRes;

            sipRes = sipCpp->completer();

            return sipConvertFromType(sipRes,sipType_QCompleter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_completer, doc_QLineEdit_completer);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setTextMargins, "setTextMargins(self, int, int, int, int)\n"
    "setTextMargins(self, QMargins)");

extern "C" {static PyObject *meth_QLineEdit_setTextMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setTextMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QLineEdit, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setTextMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->setTextMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setTextMargins, doc_QLineEdit_setTextMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_getTextMargins, "getTextMargins(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QLineEdit_getTextMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_getTextMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            sipCpp->getTextMargins(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_getTextMargins, doc_QLineEdit_getTextMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_textMargins, "textMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QLineEdit_textMargins(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_textMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QMargins*sipRes;

            sipRes = new QMargins(sipCpp->textMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_textMargins, doc_QLineEdit_textMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_placeholderText, "placeholderText(self) -> object");

extern "C" {static PyObject *meth_QLineEdit_placeholderText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_placeholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->placeholderText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_placeholderText, doc_QLineEdit_placeholderText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setPlaceholderText, "setPlaceholderText(self, object)");

extern "C" {static PyObject *meth_QLineEdit_setPlaceholderText(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setPlaceholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceholderText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setPlaceholderText, doc_QLineEdit_setPlaceholderText);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_setCursorMoveStyle, "setCursorMoveStyle(self, Qt.CursorMoveStyle)");

extern "C" {static PyObject *meth_QLineEdit_setCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_setCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CursorMoveStyle a0;
        QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLineEdit, &sipCpp, sipType_Qt_CursorMoveStyle, &a0))
        {
            sipCpp->setCursorMoveStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_setCursorMoveStyle, doc_QLineEdit_setCursorMoveStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QLineEdit_cursorMoveStyle, "cursorMoveStyle(self) -> Qt.CursorMoveStyle");

extern "C" {static PyObject *meth_QLineEdit_cursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QLineEdit_cursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineEdit, &sipCpp))
        {
            Qt::CursorMoveStyle sipRes;

            sipRes = sipCpp->cursorMoveStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_CursorMoveStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineEdit, sipName_cursorMoveStyle, doc_QLineEdit_cursorMoveStyle);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QLineEdit(void *, const sipTypeDef *);}
static void *cast_QLineEdit(void *sipCppV, const sipTypeDef *targetType)
{
    QLineEdit *sipCpp = reinterpret_cast<QLineEdit *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLineEdit(void *, int);}
static void release_QLineEdit(void *sipCppV,int)
{
    QLineEdit *sipCpp = reinterpret_cast<QLineEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLineEdit(sipSimpleWrapper *);}
static void dealloc_QLineEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQLineEdit *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QLineEdit(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QLineEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLineEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLineEdit *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQLineEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQLineEdit(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLineEdit[] = {{448, 255, 1}};


static PyMethodDef methods_QLineEdit[] = {
    {SIP_MLNAME_CAST(sipName_alignment), meth_QLineEdit_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_alignment)},
    {SIP_MLNAME_CAST(sipName_backspace), meth_QLineEdit_backspace, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_backspace)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QLineEdit_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QLineEdit_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_clear)},
    {SIP_MLNAME_CAST(sipName_completer), meth_QLineEdit_completer, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_completer)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QLineEdit_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QLineEdit_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_copy)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QLineEdit_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_cursorBackward), (PyCFunction)meth_QLineEdit_cursorBackward, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_cursorBackward)},
    {SIP_MLNAME_CAST(sipName_cursorForward), (PyCFunction)meth_QLineEdit_cursorForward, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLineEdit_cursorForward)},
    {SIP_MLNAME_CAST(sipName_cursorMoveStyle), meth_QLineEdit_cursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_cursorPosition), meth_QLineEdit_cursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorPosition)},
    {SIP_MLNAME_CAST(sipName_cursorPositionAt), meth_QLineEdit_cursorPositionAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorPositionAt)},
    {SIP_MLNAME_CAST(sipName_cursorRect), meth_QLineEdit_cursorRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorRect)},
    {SIP_MLNAME_CAST(sipName_cursorWordBackward), meth_QLineEdit_cursorWordBackward, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorWordBackward)},
    {SIP_MLNAME_CAST(sipName_cursorWordForward), meth_QLineEdit_cursorWordForward, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cursorWordForward)},
    {SIP_MLNAME_CAST(sipName_cut), meth_QLineEdit_cut, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_cut)},
    {SIP_MLNAME_CAST(sipName_del_), meth_QLineEdit_del_, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_del_)},
    {SIP_MLNAME_CAST(sipName_deselect), meth_QLineEdit_deselect, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_deselect)},
    {SIP_MLNAME_CAST(sipName_displayText), meth_QLineEdit_displayText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_displayText)},
    {SIP_MLNAME_CAST(sipName_dragEnabled), meth_QLineEdit_dragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_dragEnabled)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QLineEdit_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QLineEdit_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QLineEdit_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QLineEdit_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_dropEvent)},
    {SIP_MLNAME_CAST(sipName_echoMode), meth_QLineEdit_echoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_echoMode)},
    {SIP_MLNAME_CAST(sipName_end), meth_QLineEdit_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_end)},
    {SIP_MLNAME_CAST(sipName_event), meth_QLineEdit_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QLineEdit_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QLineEdit_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_getTextMargins), meth_QLineEdit_getTextMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_getTextMargins)},
    {SIP_MLNAME_CAST(sipName_hasAcceptableInput), meth_QLineEdit_hasAcceptableInput, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_hasAcceptableInput)},
    {SIP_MLNAME_CAST(sipName_hasFrame), meth_QLineEdit_hasFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_hasFrame)},
    {SIP_MLNAME_CAST(sipName_hasSelectedText), meth_QLineEdit_hasSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_hasSelectedText)},
    {SIP_MLNAME_CAST(sipName_home), meth_QLineEdit_home, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_home)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QLineEdit_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_inputMask), meth_QLineEdit_inputMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_inputMask)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QLineEdit_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QLineEdit_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QLineEdit_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_insert)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QLineEdit_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isModified)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QLineEdit_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isRedoAvailable), meth_QLineEdit_isRedoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isRedoAvailable)},
    {SIP_MLNAME_CAST(sipName_isUndoAvailable), meth_QLineEdit_isUndoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_isUndoAvailable)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QLineEdit_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_maxLength), meth_QLineEdit_maxLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_maxLength)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QLineEdit_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QLineEdit_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QLineEdit_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QLineEdit_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QLineEdit_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QLineEdit_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paste), meth_QLineEdit_paste, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_paste)},
    {SIP_MLNAME_CAST(sipName_placeholderText), meth_QLineEdit_placeholderText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_placeholderText)},
    {SIP_MLNAME_CAST(sipName_redo), meth_QLineEdit_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_redo)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QLineEdit_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QLineEdit_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectedText)},
    {SIP_MLNAME_CAST(sipName_selectionStart), meth_QLineEdit_selectionStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_selectionStart)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QLineEdit_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setCompleter), meth_QLineEdit_setCompleter, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setCompleter)},
    {SIP_MLNAME_CAST(sipName_setCursorMoveStyle), meth_QLineEdit_setCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_setCursorPosition), meth_QLineEdit_setCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setCursorPosition)},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QLineEdit_setDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setDragEnabled)},
    {SIP_MLNAME_CAST(sipName_setEchoMode), meth_QLineEdit_setEchoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setEchoMode)},
    {SIP_MLNAME_CAST(sipName_setFrame), meth_QLineEdit_setFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setFrame)},
    {SIP_MLNAME_CAST(sipName_setInputMask), meth_QLineEdit_setInputMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setInputMask)},
    {SIP_MLNAME_CAST(sipName_setMaxLength), meth_QLineEdit_setMaxLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setMaxLength)},
    {SIP_MLNAME_CAST(sipName_setModified), meth_QLineEdit_setModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setModified)},
    {SIP_MLNAME_CAST(sipName_setPlaceholderText), meth_QLineEdit_setPlaceholderText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setPlaceholderText)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QLineEdit_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QLineEdit_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setSelection)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QLineEdit_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setText)},
    {SIP_MLNAME_CAST(sipName_setTextMargins), meth_QLineEdit_setTextMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setTextMargins)},
    {SIP_MLNAME_CAST(sipName_setValidator), meth_QLineEdit_setValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_setValidator)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QLineEdit_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_sizeHint)},
    {SIP_MLNAME_CAST(sipName_text), meth_QLineEdit_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_text)},
    {SIP_MLNAME_CAST(sipName_textMargins), meth_QLineEdit_textMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_textMargins)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QLineEdit_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_undo)},
    {SIP_MLNAME_CAST(sipName_validator), meth_QLineEdit_validator, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineEdit_validator)}
};

static sipEnumMemberDef enummembers_QLineEdit[] = {
    {sipName_NoEcho, static_cast<int>(QLineEdit::NoEcho), 186},
    {sipName_Normal, static_cast<int>(QLineEdit::Normal), 186},
    {sipName_Password, static_cast<int>(QLineEdit::Password), 186},
    {sipName_PasswordEchoOnEdit, static_cast<int>(QLineEdit::PasswordEchoOnEdit), 186},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLineEdit[] = {
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"editingFinished()", "\1editingFinished(self)", 0, 0},
    {"returnPressed()", "\1returnPressed(self)", 0, 0},
    {"cursorPositionChanged(int,int)", "\1cursorPositionChanged(self, int, int)", 0, 0},
    {"textEdited(QString)", "\1textEdited(self, object)", 0, 0},
    {"textChanged(QString)", "\1textChanged(self, object)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QLineEdit, "\1QLineEdit(parent: QWidget = None)\n"
    "QLineEdit(object, parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QLineEdit = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLineEdit,
        {0}
    },
    {
        sipNameNr_QLineEdit,
        {0, 0, 1},
        79, methods_QLineEdit,
        4, enummembers_QLineEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLineEdit,
    -1,
    -1,
    supers_QLineEdit,
    0,
    init_type_QLineEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLineEdit,
    0,
    0,
    0,
    release_QLineEdit,
    cast_QLineEdit,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QLineEdit::staticMetaObject,
    0,
    signals_QLineEdit,
    0
};
