/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qcalendarwidget.sip"
#include <qcalendarwidget.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 308 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 370 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 198 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 244 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 28 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 454 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 405 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 558 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 531 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 547 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 259 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 427 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 357 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 343 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 329 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 237 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQCalendarWidget.cpp"


class sipQCalendarWidget : public QCalendarWidget
{
public:
    sipQCalendarWidget(QWidget*);
    virtual ~sipQCalendarWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    QPaintDevice* redirected(QPoint*) const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void paintCell(QPainter*,const QRect&,const QDate&) const;
    void keyPressEvent(QKeyEvent*);
    void resizeEvent(QResizeEvent*);
    void mousePressEvent(QMouseEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCalendarWidget(const sipQCalendarWidget &);
    sipQCalendarWidget &operator = (const sipQCalendarWidget &);

    char sipPyMethods[48];
};

sipQCalendarWidget::sipQCalendarWidget(QWidget*a0): QCalendarWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCalendarWidget::~sipQCalendarWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCalendarWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QCalendarWidget);

    return QCalendarWidget::metaObject();
}

int sipQCalendarWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCalendarWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QCalendarWidget,_c,_id,_a);

    return _id;
}

void *sipQCalendarWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QCalendarWidget, _clname, &sipCpp) ? sipCpp : QCalendarWidget::qt_metacast(_clname));
}

void sipQCalendarWidget::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCalendarWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCalendarWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCalendarWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCalendarWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCalendarWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QCalendarWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPainter* sipQCalendarWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QCalendarWidget::sharedPainter();

    extern QPainter* sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_5(sipGILState, 0, sipPySelf, sipMeth);
}

QPaintDevice* sipQCalendarWidget::redirected(QPoint*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_redirected);

    if (!sipMeth)
        return QCalendarWidget::redirected(a0);

    extern QPaintDevice* sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPoint*);

    return sipVH_QtWidgets_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCalendarWidget::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QCalendarWidget::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQCalendarWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QCalendarWidget::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQCalendarWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QCalendarWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQCalendarWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QCalendarWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QCalendarWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQCalendarWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QCalendarWidget::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QCalendarWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QCalendarWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QCalendarWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QCalendarWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QCalendarWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QCalendarWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QCalendarWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QCalendarWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QCalendarWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QCalendarWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QCalendarWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QCalendarWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QCalendarWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtWidgets_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QCalendarWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QCalendarWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QCalendarWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QCalendarWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QCalendarWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QCalendarWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QCalendarWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QCalendarWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QCalendarWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQCalendarWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QCalendarWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQCalendarWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QCalendarWidget::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QCalendarWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQCalendarWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QCalendarWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQCalendarWidget::paintCell(QPainter*a0,const QRect& a1,const QDate& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_paintCell);

    if (!sipMeth)
    {
        QCalendarWidget::paintCell(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_145(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,const QDate&);

    sipVH_QtWidgets_145(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQCalendarWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QCalendarWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QCalendarWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCalendarWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QCalendarWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCalendarWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCalendarWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQCalendarWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCalendarWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQCalendarWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QCalendarWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipQCalendarWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QCalendarWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QCalendarWidget_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QCalendarWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QCalendarWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_sizeHint, doc_QCalendarWidget_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QCalendarWidget_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QCalendarWidget::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_minimumSizeHint, doc_QCalendarWidget_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_selectedDate, "selectedDate(self) -> QDate");

extern "C" {static PyObject *meth_QCalendarWidget_selectedDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_selectedDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QDate*sipRes;

            sipRes = new QDate(sipCpp->selectedDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_selectedDate, doc_QCalendarWidget_selectedDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_yearShown, "yearShown(self) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_yearShown(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_yearShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->yearShown();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_yearShown, doc_QCalendarWidget_yearShown);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_monthShown, "monthShown(self) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_monthShown(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_monthShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->monthShown();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_monthShown, doc_QCalendarWidget_monthShown);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_minimumDate, "minimumDate(self) -> QDate");

extern "C" {static PyObject *meth_QCalendarWidget_minimumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_minimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QDate*sipRes;

            sipRes = new QDate(sipCpp->minimumDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_minimumDate, doc_QCalendarWidget_minimumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setMinimumDate, "setMinimumDate(self, QDate)");

extern "C" {static PyObject *meth_QCalendarWidget_setMinimumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setMinimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setMinimumDate(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setMinimumDate, doc_QCalendarWidget_setMinimumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_maximumDate, "maximumDate(self) -> QDate");

extern "C" {static PyObject *meth_QCalendarWidget_maximumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_maximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QDate*sipRes;

            sipRes = new QDate(sipCpp->maximumDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_maximumDate, doc_QCalendarWidget_maximumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setMaximumDate, "setMaximumDate(self, QDate)");

extern "C" {static PyObject *meth_QCalendarWidget_setMaximumDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setMaximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setMaximumDate(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setMaximumDate, doc_QCalendarWidget_setMaximumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_firstDayOfWeek, "firstDayOfWeek(self) -> Qt.DayOfWeek");

extern "C" {static PyObject *meth_QCalendarWidget_firstDayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_firstDayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            Qt::DayOfWeek sipRes;

            sipRes = sipCpp->firstDayOfWeek();

            return sipConvertFromEnum(sipRes,sipType_Qt_DayOfWeek);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_firstDayOfWeek, doc_QCalendarWidget_firstDayOfWeek);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setFirstDayOfWeek, "setFirstDayOfWeek(self, Qt.DayOfWeek)");

extern "C" {static PyObject *meth_QCalendarWidget_setFirstDayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setFirstDayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DayOfWeek a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_Qt_DayOfWeek, &a0))
        {
            sipCpp->setFirstDayOfWeek(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setFirstDayOfWeek, doc_QCalendarWidget_setFirstDayOfWeek);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_isGridVisible, "isGridVisible(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_isGridVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_isGridVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isGridVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_isGridVisible, doc_QCalendarWidget_isGridVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setGridVisible, "setGridVisible(self, bool)");

extern "C" {static PyObject *meth_QCalendarWidget_setGridVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setGridVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setGridVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setGridVisible, doc_QCalendarWidget_setGridVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_selectionMode, "selectionMode(self) -> QCalendarWidget.SelectionMode");

extern "C" {static PyObject *meth_QCalendarWidget_selectionMode(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_selectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QCalendarWidget::SelectionMode sipRes;

            sipRes = sipCpp->selectionMode();

            return sipConvertFromEnum(sipRes,sipType_QCalendarWidget_SelectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_selectionMode, doc_QCalendarWidget_selectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setSelectionMode, "setSelectionMode(self, QCalendarWidget.SelectionMode)");

extern "C" {static PyObject *meth_QCalendarWidget_setSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget::SelectionMode a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QCalendarWidget_SelectionMode, &a0))
        {
            sipCpp->setSelectionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setSelectionMode, doc_QCalendarWidget_setSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_horizontalHeaderFormat, "horizontalHeaderFormat(self) -> QCalendarWidget.HorizontalHeaderFormat");

extern "C" {static PyObject *meth_QCalendarWidget_horizontalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_horizontalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QCalendarWidget::HorizontalHeaderFormat sipRes;

            sipRes = sipCpp->horizontalHeaderFormat();

            return sipConvertFromEnum(sipRes,sipType_QCalendarWidget_HorizontalHeaderFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_horizontalHeaderFormat, doc_QCalendarWidget_horizontalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setHorizontalHeaderFormat, "setHorizontalHeaderFormat(self, QCalendarWidget.HorizontalHeaderFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setHorizontalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setHorizontalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget::HorizontalHeaderFormat a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QCalendarWidget_HorizontalHeaderFormat, &a0))
        {
            sipCpp->setHorizontalHeaderFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setHorizontalHeaderFormat, doc_QCalendarWidget_setHorizontalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_verticalHeaderFormat, "verticalHeaderFormat(self) -> QCalendarWidget.VerticalHeaderFormat");

extern "C" {static PyObject *meth_QCalendarWidget_verticalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_verticalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QCalendarWidget::VerticalHeaderFormat sipRes;

            sipRes = sipCpp->verticalHeaderFormat();

            return sipConvertFromEnum(sipRes,sipType_QCalendarWidget_VerticalHeaderFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_verticalHeaderFormat, doc_QCalendarWidget_verticalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setVerticalHeaderFormat, "setVerticalHeaderFormat(self, QCalendarWidget.VerticalHeaderFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setVerticalHeaderFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setVerticalHeaderFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget::VerticalHeaderFormat a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QCalendarWidget_VerticalHeaderFormat, &a0))
        {
            sipCpp->setVerticalHeaderFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setVerticalHeaderFormat, doc_QCalendarWidget_setVerticalHeaderFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_headerTextFormat, "headerTextFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QCalendarWidget_headerTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_headerTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->headerTextFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_headerTextFormat, doc_QCalendarWidget_headerTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setHeaderTextFormat, "setHeaderTextFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setHeaderTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setHeaderTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat* a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setHeaderTextFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setHeaderTextFormat, doc_QCalendarWidget_setHeaderTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_weekdayTextFormat, "weekdayTextFormat(self, Qt.DayOfWeek) -> QTextCharFormat");

extern "C" {static PyObject *meth_QCalendarWidget_weekdayTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_weekdayTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DayOfWeek a0;
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_Qt_DayOfWeek, &a0))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->weekdayTextFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_weekdayTextFormat, doc_QCalendarWidget_weekdayTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setWeekdayTextFormat, "setWeekdayTextFormat(self, Qt.DayOfWeek, QTextCharFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setWeekdayTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setWeekdayTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DayOfWeek a0;
        const QTextCharFormat* a1;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_Qt_DayOfWeek, &a0, sipType_QTextCharFormat, &a1))
        {
            sipCpp->setWeekdayTextFormat(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setWeekdayTextFormat, doc_QCalendarWidget_setWeekdayTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dateTextFormat, "dateTextFormat(self) -> object\n"
    "dateTextFormat(self, QDate) -> QTextCharFormat");

extern "C" {static PyObject *meth_QCalendarWidget_dateTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dateTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            QMap<QDate,QTextCharFormat>*sipRes;

            sipRes = new QMap<QDate,QTextCharFormat>(sipCpp->dateTextFormat());

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QDate_0100QTextCharFormat,NULL);
        }
    }

    {
        const QDate* a0;
        int a0State = 0;
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->dateTextFormat(*a0));
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dateTextFormat, doc_QCalendarWidget_dateTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateTextFormat, "setDateTextFormat(self, QDate, QTextCharFormat)");

extern "C" {static PyObject *meth_QCalendarWidget_setDateTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;
        const QTextCharFormat* a1;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QTextCharFormat, &a1))
        {
            sipCpp->setDateTextFormat(*a0,*a1);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateTextFormat, doc_QCalendarWidget_setDateTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_updateCell, "updateCell(self, QDate)");

extern "C" {static PyObject *meth_QCalendarWidget_updateCell(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_updateCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->updateCell(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_updateCell, doc_QCalendarWidget_updateCell);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_updateCells, "updateCells(self)");

extern "C" {static PyObject *meth_QCalendarWidget_updateCells(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_updateCells(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->updateCells();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_updateCells, doc_QCalendarWidget_updateCells);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCalendarWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_event, doc_QCalendarWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCalendarWidget::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_eventFilter, doc_QCalendarWidget_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCalendarWidget::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_mousePressEvent, doc_QCalendarWidget_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCalendarWidget::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_resizeEvent, doc_QCalendarWidget_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QCalendarWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCalendarWidget::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_keyPressEvent, doc_QCalendarWidget_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_paintCell, "paintCell(self, QPainter, QRect, QDate)");

extern "C" {static PyObject *meth_QCalendarWidget_paintCell(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_paintCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRect* a1;
        const QDate* a2;
        int a2State = 0;
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9J1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_QDate, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QCalendarWidget::paintCell(a0,*a1,*a2) : sipCpp->paintCell(a0,*a1,*a2));
            sipReleaseType(const_cast<QDate *>(a2),sipType_QDate,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_paintCell, doc_QCalendarWidget_paintCell);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setCurrentPage, "setCurrentPage(self, int, int)");

extern "C" {static PyObject *meth_QCalendarWidget_setCurrentPage(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setCurrentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setCurrentPage(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setCurrentPage, doc_QCalendarWidget_setCurrentPage);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateRange, "setDateRange(self, QDate, QDate)");

extern "C" {static PyObject *meth_QCalendarWidget_setDateRange(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;
        const QDate* a1;
        int a1State = 0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QDate, &a1, &a1State))
        {
            sipCpp->setDateRange(*a0,*a1);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast<QDate *>(a1),sipType_QDate,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateRange, doc_QCalendarWidget_setDateRange);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setSelectedDate, "setSelectedDate(self, QDate)");

extern "C" {static PyObject *meth_QCalendarWidget_setSelectedDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setSelectedDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCalendarWidget, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setSelectedDate(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setSelectedDate, doc_QCalendarWidget_setSelectedDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showNextMonth, "showNextMonth(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showNextMonth(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showNextMonth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showNextMonth();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showNextMonth, doc_QCalendarWidget_showNextMonth);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showNextYear, "showNextYear(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showNextYear(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showNextYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showNextYear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showNextYear, doc_QCalendarWidget_showNextYear);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showPreviousMonth, "showPreviousMonth(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showPreviousMonth(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showPreviousMonth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showPreviousMonth();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showPreviousMonth, doc_QCalendarWidget_showPreviousMonth);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showPreviousYear, "showPreviousYear(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showPreviousYear(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showPreviousYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showPreviousYear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showPreviousYear, doc_QCalendarWidget_showPreviousYear);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showSelectedDate, "showSelectedDate(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showSelectedDate(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showSelectedDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showSelectedDate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showSelectedDate, doc_QCalendarWidget_showSelectedDate);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_showToday, "showToday(self)");

extern "C" {static PyObject *meth_QCalendarWidget_showToday(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_showToday(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            sipCpp->showToday();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_showToday, doc_QCalendarWidget_showToday);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_isNavigationBarVisible, "isNavigationBarVisible(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_isNavigationBarVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_isNavigationBarVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNavigationBarVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_isNavigationBarVisible, doc_QCalendarWidget_isNavigationBarVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_isDateEditEnabled, "isDateEditEnabled(self) -> bool");

extern "C" {static PyObject *meth_QCalendarWidget_isDateEditEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_isDateEditEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDateEditEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_isDateEditEnabled, doc_QCalendarWidget_isDateEditEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateEditEnabled, "setDateEditEnabled(self, bool)");

extern "C" {static PyObject *meth_QCalendarWidget_setDateEditEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateEditEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setDateEditEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateEditEnabled, doc_QCalendarWidget_setDateEditEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_dateEditAcceptDelay, "dateEditAcceptDelay(self) -> int");

extern "C" {static PyObject *meth_QCalendarWidget_dateEditAcceptDelay(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_dateEditAcceptDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCalendarWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dateEditAcceptDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_dateEditAcceptDelay, doc_QCalendarWidget_dateEditAcceptDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setDateEditAcceptDelay, "setDateEditAcceptDelay(self, int)");

extern "C" {static PyObject *meth_QCalendarWidget_setDateEditAcceptDelay(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setDateEditAcceptDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setDateEditAcceptDelay(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setDateEditAcceptDelay, doc_QCalendarWidget_setDateEditAcceptDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QCalendarWidget_setNavigationBarVisible, "setNavigationBarVisible(self, bool)");

extern "C" {static PyObject *meth_QCalendarWidget_setNavigationBarVisible(PyObject *, PyObject *);}
static PyObject *meth_QCalendarWidget_setNavigationBarVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QCalendarWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCalendarWidget, &sipCpp, &a0))
        {
            sipCpp->setNavigationBarVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCalendarWidget, sipName_setNavigationBarVisible, doc_QCalendarWidget_setNavigationBarVisible);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QCalendarWidget(void *, const sipTypeDef *);}
static void *cast_QCalendarWidget(void *sipCppV, const sipTypeDef *targetType)
{
    QCalendarWidget *sipCpp = reinterpret_cast<QCalendarWidget *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCalendarWidget(void *, int);}
static void release_QCalendarWidget(void *sipCppV,int)
{
    QCalendarWidget *sipCpp = reinterpret_cast<QCalendarWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCalendarWidget(sipSimpleWrapper *);}
static void dealloc_QCalendarWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCalendarWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCalendarWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCalendarWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCalendarWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCalendarWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQCalendarWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCalendarWidget[] = {{448, 255, 1}};


static PyMethodDef methods_QCalendarWidget[] = {
    {SIP_MLNAME_CAST(sipName_dateEditAcceptDelay), meth_QCalendarWidget_dateEditAcceptDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_dateEditAcceptDelay)},
    {SIP_MLNAME_CAST(sipName_dateTextFormat), meth_QCalendarWidget_dateTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_dateTextFormat)},
    {SIP_MLNAME_CAST(sipName_event), meth_QCalendarWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QCalendarWidget_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_eventFilter)},
    {SIP_MLNAME_CAST(sipName_firstDayOfWeek), meth_QCalendarWidget_firstDayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_firstDayOfWeek)},
    {SIP_MLNAME_CAST(sipName_headerTextFormat), meth_QCalendarWidget_headerTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_headerTextFormat)},
    {SIP_MLNAME_CAST(sipName_horizontalHeaderFormat), meth_QCalendarWidget_horizontalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_horizontalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_isDateEditEnabled), meth_QCalendarWidget_isDateEditEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_isDateEditEnabled)},
    {SIP_MLNAME_CAST(sipName_isGridVisible), meth_QCalendarWidget_isGridVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_isGridVisible)},
    {SIP_MLNAME_CAST(sipName_isNavigationBarVisible), meth_QCalendarWidget_isNavigationBarVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_isNavigationBarVisible)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QCalendarWidget_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_maximumDate), meth_QCalendarWidget_maximumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_maximumDate)},
    {SIP_MLNAME_CAST(sipName_minimumDate), meth_QCalendarWidget_minimumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_minimumDate)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QCalendarWidget_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_monthShown), meth_QCalendarWidget_monthShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_monthShown)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QCalendarWidget_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_paintCell), meth_QCalendarWidget_paintCell, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_paintCell)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QCalendarWidget_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_selectedDate), meth_QCalendarWidget_selectedDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_selectedDate)},
    {SIP_MLNAME_CAST(sipName_selectionMode), meth_QCalendarWidget_selectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_selectionMode)},
    {SIP_MLNAME_CAST(sipName_setCurrentPage), meth_QCalendarWidget_setCurrentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setCurrentPage)},
    {SIP_MLNAME_CAST(sipName_setDateEditAcceptDelay), meth_QCalendarWidget_setDateEditAcceptDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateEditAcceptDelay)},
    {SIP_MLNAME_CAST(sipName_setDateEditEnabled), meth_QCalendarWidget_setDateEditEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateEditEnabled)},
    {SIP_MLNAME_CAST(sipName_setDateRange), meth_QCalendarWidget_setDateRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateRange)},
    {SIP_MLNAME_CAST(sipName_setDateTextFormat), meth_QCalendarWidget_setDateTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setDateTextFormat)},
    {SIP_MLNAME_CAST(sipName_setFirstDayOfWeek), meth_QCalendarWidget_setFirstDayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setFirstDayOfWeek)},
    {SIP_MLNAME_CAST(sipName_setGridVisible), meth_QCalendarWidget_setGridVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setGridVisible)},
    {SIP_MLNAME_CAST(sipName_setHeaderTextFormat), meth_QCalendarWidget_setHeaderTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setHeaderTextFormat)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderFormat), meth_QCalendarWidget_setHorizontalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setHorizontalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_setMaximumDate), meth_QCalendarWidget_setMaximumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setMaximumDate)},
    {SIP_MLNAME_CAST(sipName_setMinimumDate), meth_QCalendarWidget_setMinimumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setMinimumDate)},
    {SIP_MLNAME_CAST(sipName_setNavigationBarVisible), meth_QCalendarWidget_setNavigationBarVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setNavigationBarVisible)},
    {SIP_MLNAME_CAST(sipName_setSelectedDate), meth_QCalendarWidget_setSelectedDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setSelectedDate)},
    {SIP_MLNAME_CAST(sipName_setSelectionMode), meth_QCalendarWidget_setSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setSelectionMode)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderFormat), meth_QCalendarWidget_setVerticalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setVerticalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_setWeekdayTextFormat), meth_QCalendarWidget_setWeekdayTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_setWeekdayTextFormat)},
    {SIP_MLNAME_CAST(sipName_showNextMonth), meth_QCalendarWidget_showNextMonth, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showNextMonth)},
    {SIP_MLNAME_CAST(sipName_showNextYear), meth_QCalendarWidget_showNextYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showNextYear)},
    {SIP_MLNAME_CAST(sipName_showPreviousMonth), meth_QCalendarWidget_showPreviousMonth, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showPreviousMonth)},
    {SIP_MLNAME_CAST(sipName_showPreviousYear), meth_QCalendarWidget_showPreviousYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showPreviousYear)},
    {SIP_MLNAME_CAST(sipName_showSelectedDate), meth_QCalendarWidget_showSelectedDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showSelectedDate)},
    {SIP_MLNAME_CAST(sipName_showToday), meth_QCalendarWidget_showToday, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_showToday)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QCalendarWidget_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_sizeHint)},
    {SIP_MLNAME_CAST(sipName_updateCell), meth_QCalendarWidget_updateCell, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_updateCell)},
    {SIP_MLNAME_CAST(sipName_updateCells), meth_QCalendarWidget_updateCells, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_updateCells)},
    {SIP_MLNAME_CAST(sipName_verticalHeaderFormat), meth_QCalendarWidget_verticalHeaderFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_verticalHeaderFormat)},
    {SIP_MLNAME_CAST(sipName_weekdayTextFormat), meth_QCalendarWidget_weekdayTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_weekdayTextFormat)},
    {SIP_MLNAME_CAST(sipName_yearShown), meth_QCalendarWidget_yearShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCalendarWidget_yearShown)}
};

static sipEnumMemberDef enummembers_QCalendarWidget[] = {
    {sipName_ISOWeekNumbers, static_cast<int>(QCalendarWidget::ISOWeekNumbers), 37},
    {sipName_LongDayNames, static_cast<int>(QCalendarWidget::LongDayNames), 35},
    {sipName_NoHorizontalHeader, static_cast<int>(QCalendarWidget::NoHorizontalHeader), 35},
    {sipName_NoSelection, static_cast<int>(QCalendarWidget::NoSelection), 36},
    {sipName_NoVerticalHeader, static_cast<int>(QCalendarWidget::NoVerticalHeader), 37},
    {sipName_ShortDayNames, static_cast<int>(QCalendarWidget::ShortDayNames), 35},
    {sipName_SingleLetterDayNames, static_cast<int>(QCalendarWidget::SingleLetterDayNames), 35},
    {sipName_SingleSelection, static_cast<int>(QCalendarWidget::SingleSelection), 36},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCalendarWidget[] = {
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"currentPageChanged(int,int)", "\1currentPageChanged(self, int, int)", 0, 0},
    {"clicked(QDate)", "\1clicked(self, QDate)", 0, 0},
    {"activated(QDate)", "\1activated(self, QDate)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QCalendarWidget, "\1QCalendarWidget(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QCalendarWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCalendarWidget,
        {0}
    },
    {
        sipNameNr_QCalendarWidget,
        {0, 0, 1},
        48, methods_QCalendarWidget,
        8, enummembers_QCalendarWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCalendarWidget,
    -1,
    -1,
    supers_QCalendarWidget,
    0,
    init_type_QCalendarWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCalendarWidget,
    0,
    0,
    0,
    release_QCalendarWidget,
    cast_QCalendarWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCalendarWidget::staticMetaObject,
    0,
    signals_QCalendarWidget,
    0
};
