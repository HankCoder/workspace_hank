/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qbuttongroup.sip"
#include <qbuttongroup.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtWidgets/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 231 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 219 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtWidgets/sipQtWidgetsQButtonGroup.cpp"


class sipQButtonGroup : public QButtonGroup
{
public:
    sipQButtonGroup(QObject*);
    virtual ~sipQButtonGroup();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQButtonGroup(const sipQButtonGroup &);
    sipQButtonGroup &operator = (const sipQButtonGroup &);

    char sipPyMethods[7];
};

sipQButtonGroup::sipQButtonGroup(QObject*a0): QButtonGroup(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQButtonGroup::~sipQButtonGroup()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQButtonGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QButtonGroup);

    return QButtonGroup::metaObject();
}

int sipQButtonGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QButtonGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QButtonGroup,_c,_id,_a);

    return _id;
}

void *sipQButtonGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QButtonGroup, _clname, &sipCpp) ? sipCpp : QButtonGroup::qt_metacast(_clname));
}

void sipQButtonGroup::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QButtonGroup::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QButtonGroup::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QButtonGroup::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QButtonGroup::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQButtonGroup::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QButtonGroup::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQButtonGroup::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QButtonGroup::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQButtonGroup::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QButtonGroup::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QButtonGroup_setExclusive, "setExclusive(self, bool)");

extern "C" {static PyObject *meth_QButtonGroup_setExclusive(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_setExclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QButtonGroup, &sipCpp, &a0))
        {
            sipCpp->setExclusive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_setExclusive, doc_QButtonGroup_setExclusive);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_exclusive, "exclusive(self) -> bool");

extern "C" {static PyObject *meth_QButtonGroup_exclusive(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_exclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exclusive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_exclusive, doc_QButtonGroup_exclusive);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_addButton, "addButton(self, QAbstractButton, id: int = -1)");

extern "C" {static PyObject *meth_QButtonGroup_addButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_addButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        int a1 = -1;
        QButtonGroup *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0, &a1))
        {
            sipCpp->addButton(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_addButton, doc_QButtonGroup_addButton);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_removeButton, "removeButton(self, QAbstractButton)");

extern "C" {static PyObject *meth_QButtonGroup_removeButton(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_removeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0))
        {
            sipCpp->removeButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_removeButton, doc_QButtonGroup_removeButton);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_buttons, "buttons(self) -> object");

extern "C" {static PyObject *meth_QButtonGroup_buttons(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
            QList<QAbstractButton*>*sipRes;

            sipRes = new QList<QAbstractButton*>(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_buttons, doc_QButtonGroup_buttons);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_button, "button(self, int) -> QAbstractButton");

extern "C" {static PyObject *meth_QButtonGroup_button(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QButtonGroup, &sipCpp, &a0))
        {
            QAbstractButton*sipRes;

            sipRes = sipCpp->button(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_button, doc_QButtonGroup_button);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_checkedButton, "checkedButton(self) -> QAbstractButton");

extern "C" {static PyObject *meth_QButtonGroup_checkedButton(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_checkedButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
            QAbstractButton*sipRes;

            sipRes = sipCpp->checkedButton();

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_checkedButton, doc_QButtonGroup_checkedButton);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_setId, "setId(self, QAbstractButton, int)");

extern "C" {static PyObject *meth_QButtonGroup_setId(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_setId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        int a1;
        QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0, &a1))
        {
            sipCpp->setId(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_setId, doc_QButtonGroup_setId);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_id, "id(self, QAbstractButton) -> int");

extern "C" {static PyObject *meth_QButtonGroup_id(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        const QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QButtonGroup, &sipCpp, sipType_QAbstractButton, &a0))
        {
            int sipRes;

            sipRes = sipCpp->id(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_id, doc_QButtonGroup_id);

    return NULL;
}


PyDoc_STRVAR(doc_QButtonGroup_checkedId, "checkedId(self) -> int");

extern "C" {static PyObject *meth_QButtonGroup_checkedId(PyObject *, PyObject *);}
static PyObject *meth_QButtonGroup_checkedId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QButtonGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QButtonGroup, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->checkedId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QButtonGroup, sipName_checkedId, doc_QButtonGroup_checkedId);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QButtonGroup(void *, int);}
static void release_QButtonGroup(void *sipCppV,int)
{
    QButtonGroup *sipCpp = reinterpret_cast<QButtonGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QButtonGroup(sipSimpleWrapper *);}
static void dealloc_QButtonGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQButtonGroup *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QButtonGroup(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QButtonGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QButtonGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQButtonGroup *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQButtonGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QButtonGroup[] = {{142, 0, 1}};


static PyMethodDef methods_QButtonGroup[] = {
    {SIP_MLNAME_CAST(sipName_addButton), (PyCFunction)meth_QButtonGroup_addButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QButtonGroup_addButton)},
    {SIP_MLNAME_CAST(sipName_button), meth_QButtonGroup_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_button)},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QButtonGroup_buttons, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_buttons)},
    {SIP_MLNAME_CAST(sipName_checkedButton), meth_QButtonGroup_checkedButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_checkedButton)},
    {SIP_MLNAME_CAST(sipName_checkedId), meth_QButtonGroup_checkedId, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_checkedId)},
    {SIP_MLNAME_CAST(sipName_exclusive), meth_QButtonGroup_exclusive, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_exclusive)},
    {SIP_MLNAME_CAST(sipName_id), meth_QButtonGroup_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_id)},
    {SIP_MLNAME_CAST(sipName_removeButton), meth_QButtonGroup_removeButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_removeButton)},
    {SIP_MLNAME_CAST(sipName_setExclusive), meth_QButtonGroup_setExclusive, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_setExclusive)},
    {SIP_MLNAME_CAST(sipName_setId), meth_QButtonGroup_setId, METH_VARARGS, SIP_MLDOC_CAST(doc_QButtonGroup_setId)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QButtonGroup[] = {
    {"buttonReleased(QAbstractButton*)", "\1buttonReleased(self, QAbstractButton)", 0, 0},
    {"buttonReleased(int)", "\1buttonReleased(self, int)", 0, 0},
    {"buttonPressed(QAbstractButton*)", "\1buttonPressed(self, QAbstractButton)", 0, 0},
    {"buttonPressed(int)", "\1buttonPressed(self, int)", 0, 0},
    {"buttonClicked(QAbstractButton*)", "\1buttonClicked(self, QAbstractButton)", 0, 0},
    {"buttonClicked(int)", "\1buttonClicked(self, int)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QButtonGroup, "\1QButtonGroup(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QButtonGroup = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QButtonGroup,
        {0}
    },
    {
        sipNameNr_QButtonGroup,
        {0, 0, 1},
        10, methods_QButtonGroup,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QButtonGroup,
    -1,
    -1,
    supers_QButtonGroup,
    0,
    init_type_QButtonGroup,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QButtonGroup,
    0,
    0,
    0,
    release_QButtonGroup,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QButtonGroup::staticMetaObject,
    0,
    signals_QButtonGroup,
    0
};
