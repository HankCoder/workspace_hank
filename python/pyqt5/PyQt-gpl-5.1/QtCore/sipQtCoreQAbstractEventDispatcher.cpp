/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 47 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qsocketnotifier.sip"
#include <qsocketnotifier.h>
#line 53 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 56 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 59 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 62 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 74 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 77 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 115 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 83 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 86 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 89 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 92 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 95 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractEventDispatcher.cpp"


class sipQAbstractEventDispatcher : public QAbstractEventDispatcher
{
public:
    sipQAbstractEventDispatcher(QObject*);
    virtual ~sipQAbstractEventDispatcher();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    int remainingTime(int);
    void closingDown();
    void startingUp();
    void flush();
    void interrupt();
    void wakeUp();
    QList<QAbstractEventDispatcher::TimerInfo> registeredTimers(QObject*) const;
    bool unregisterTimers(QObject*);
    bool unregisterTimer(int);
    void registerTimer(int,int,Qt::TimerType,QObject*);
    void unregisterSocketNotifier(QSocketNotifier*);
    void registerSocketNotifier(QSocketNotifier*);
    bool hasPendingEvents();
    bool processEvents(QEventLoop::ProcessEventsFlags);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractEventDispatcher(const sipQAbstractEventDispatcher &);
    sipQAbstractEventDispatcher &operator = (const sipQAbstractEventDispatcher &);

    char sipPyMethods[21];
};

sipQAbstractEventDispatcher::sipQAbstractEventDispatcher(QObject*a0): QAbstractEventDispatcher(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractEventDispatcher::~sipQAbstractEventDispatcher()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractEventDispatcher::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractEventDispatcher);

    return QAbstractEventDispatcher::metaObject();
}

int sipQAbstractEventDispatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractEventDispatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractEventDispatcher,_c,_id,_a);

    return _id;
}

void *sipQAbstractEventDispatcher::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractEventDispatcher, _clname, &sipCpp) ? sipCpp : QAbstractEventDispatcher::qt_metacast(_clname));
}

void sipQAbstractEventDispatcher::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractEventDispatcher::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractEventDispatcher::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractEventDispatcher::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractEventDispatcher::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractEventDispatcher::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractEventDispatcher::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_26(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractEventDispatcher::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractEventDispatcher::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQAbstractEventDispatcher::remainingTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractEventDispatcher,sipName_remainingTime);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_61(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::closingDown()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_closingDown);

    if (!sipMeth)
    {
        QAbstractEventDispatcher::closingDown();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::startingUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_startingUp);

    if (!sipMeth)
    {
        QAbstractEventDispatcher::startingUp();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::flush()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QAbstractEventDispatcher,sipName_flush);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::interrupt()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_QAbstractEventDispatcher,sipName_interrupt);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::wakeUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QAbstractEventDispatcher,sipName_wakeUp);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

QList<QAbstractEventDispatcher::TimerInfo> sipQAbstractEventDispatcher::registeredTimers(QObject*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_QAbstractEventDispatcher,sipName_registeredTimers);

    if (!sipMeth)
        return QList<QAbstractEventDispatcher::TimerInfo>();

    extern QList<QAbstractEventDispatcher::TimerInfo> sipVH_QtCore_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return sipVH_QtCore_62(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimers(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimers);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return sipVH_QtCore_63(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimer(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimer);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_45(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerTimer(int a0,int a1,Qt::TimerType a2,QObject*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerTimer);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,Qt::TimerType,QObject*);

    sipVH_QtCore_64(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQAbstractEventDispatcher::unregisterSocketNotifier(QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSocketNotifier*);

    sipVH_QtCore_65(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerSocketNotifier(QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSocketNotifier*);

    sipVH_QtCore_65(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::hasPendingEvents()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,sipName_QAbstractEventDispatcher,sipName_hasPendingEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractEventDispatcher::processEvents(QEventLoop::ProcessEventsFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,sipName_QAbstractEventDispatcher,sipName_processEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEventLoop::ProcessEventsFlags);

    return sipVH_QtCore_66(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_instance, "instance(thread: QThread = None) -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QThread* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_thread,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8", sipType_QThread, &a0))
        {
            QAbstractEventDispatcher*sipRes;

            sipRes = QAbstractEventDispatcher::instance(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_instance, doc_QAbstractEventDispatcher_instance);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_processEvents, "processEvents(self, QEventLoop.ProcessEventsFlags) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_processEvents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_processEvents, doc_QAbstractEventDispatcher_processEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_hasPendingEvents, "hasPendingEvents(self) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_hasPendingEvents);
                return NULL;
            }

            sipRes = sipCpp->hasPendingEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_hasPendingEvents, doc_QAbstractEventDispatcher_hasPendingEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerSocketNotifier, "registerSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSocketNotifier* a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier);
                return NULL;
            }

            sipCpp->registerSocketNotifier(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier, doc_QAbstractEventDispatcher_registerSocketNotifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterSocketNotifier, "unregisterSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSocketNotifier* a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier);
                return NULL;
            }

            sipCpp->unregisterSocketNotifier(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier, doc_QAbstractEventDispatcher_unregisterSocketNotifier);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerTimer, "registerTimer(self, int, Qt.TimerType, QObject) -> int\n"
    "registerTimer(self, int, int, Qt.TimerType, QObject)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        Qt::TimerType a1;
        QObject* a2;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, sipType_Qt_TimerType, &a1, sipType_QObject, &a2))
        {
            int sipRes;

            sipRes = sipCpp->registerTimer(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        Qt::TimerType a2;
        QObject* a3;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2, sipType_QObject, &a3))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerTimer);
                return NULL;
            }

            sipCpp->registerTimer(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerTimer, doc_QAbstractEventDispatcher_registerTimer);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimer, "unregisterTimer(self, int) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimer);
                return NULL;
            }

            sipRes = sipCpp->unregisterTimer(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimer, doc_QAbstractEventDispatcher_unregisterTimer);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimers, "unregisterTimers(self, QObject) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QObject* a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimers);
                return NULL;
            }

            sipRes = sipCpp->unregisterTimers(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimers, doc_QAbstractEventDispatcher_unregisterTimers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registeredTimers, "registeredTimers(self, QObject) -> object");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QObject* a0;
        const QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            QList<QAbstractEventDispatcher::TimerInfo>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registeredTimers);
                return NULL;
            }

            sipRes = new QList<QAbstractEventDispatcher::TimerInfo>(sipCpp->registeredTimers(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QAbstractEventDispatcher_TimerInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registeredTimers, doc_QAbstractEventDispatcher_registeredTimers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_wakeUp, "wakeUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_wakeUp);
                return NULL;
            }

            sipCpp->wakeUp();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_wakeUp, doc_QAbstractEventDispatcher_wakeUp);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_interrupt, "interrupt(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_interrupt);
                return NULL;
            }

            sipCpp->interrupt();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_interrupt, doc_QAbstractEventDispatcher_interrupt);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_flush, "flush(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_flush);
                return NULL;
            }

            sipCpp->flush();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_flush, doc_QAbstractEventDispatcher_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_startingUp, "startingUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractEventDispatcher::startingUp() : sipCpp->startingUp());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_startingUp, doc_QAbstractEventDispatcher_startingUp);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_closingDown, "closingDown(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractEventDispatcher::closingDown() : sipCpp->closingDown());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_closingDown, doc_QAbstractEventDispatcher_closingDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_remainingTime, "remainingTime(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_remainingTime);
                return NULL;
            }

            sipRes = sipCpp->remainingTime(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_remainingTime, doc_QAbstractEventDispatcher_remainingTime);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_installNativeEventFilter, "installNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractNativeEventFilter* a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->installNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_installNativeEventFilter, doc_QAbstractEventDispatcher_installNativeEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_removeNativeEventFilter, "removeNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractNativeEventFilter* a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->removeNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_removeNativeEventFilter, doc_QAbstractEventDispatcher_removeNativeEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_filterNativeEvent, "filterNativeEvent(self, QByteArray, sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_filterNativeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_filterNativeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1v", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->filterNativeEvent(*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_filterNativeEvent, doc_QAbstractEventDispatcher_filterNativeEvent);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractEventDispatcher(void *, int);}
static void release_QAbstractEventDispatcher(void *sipCppV,int)
{
    QAbstractEventDispatcher *sipCpp = reinterpret_cast<QAbstractEventDispatcher *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *);}
static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractEventDispatcher *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractEventDispatcher(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractEventDispatcher *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractEventDispatcher(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractEventDispatcher[] = {{142, 255, 1}};


static PyMethodDef methods_QAbstractEventDispatcher[] = {
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QAbstractEventDispatcher_closingDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_closingDown)},
    {SIP_MLNAME_CAST(sipName_filterNativeEvent), meth_QAbstractEventDispatcher_filterNativeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_filterNativeEvent)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractEventDispatcher_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_flush)},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QAbstractEventDispatcher_hasPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_hasPendingEvents)},
    {SIP_MLNAME_CAST(sipName_installNativeEventFilter), meth_QAbstractEventDispatcher_installNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_installNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_instance), (PyCFunction)meth_QAbstractEventDispatcher_instance, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_instance)},
    {SIP_MLNAME_CAST(sipName_interrupt), meth_QAbstractEventDispatcher_interrupt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_interrupt)},
    {SIP_MLNAME_CAST(sipName_processEvents), meth_QAbstractEventDispatcher_processEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_processEvents)},
    {SIP_MLNAME_CAST(sipName_registerSocketNotifier), meth_QAbstractEventDispatcher_registerSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_registerTimer), meth_QAbstractEventDispatcher_registerTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerTimer)},
    {SIP_MLNAME_CAST(sipName_registeredTimers), meth_QAbstractEventDispatcher_registeredTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registeredTimers)},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_QAbstractEventDispatcher_remainingTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_remainingTime)},
    {SIP_MLNAME_CAST(sipName_removeNativeEventFilter), meth_QAbstractEventDispatcher_removeNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_removeNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QAbstractEventDispatcher_startingUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_startingUp)},
    {SIP_MLNAME_CAST(sipName_unregisterSocketNotifier), meth_QAbstractEventDispatcher_unregisterSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_unregisterTimer), meth_QAbstractEventDispatcher_unregisterTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimer)},
    {SIP_MLNAME_CAST(sipName_unregisterTimers), meth_QAbstractEventDispatcher_unregisterTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimers)},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QAbstractEventDispatcher_wakeUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_wakeUp)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractEventDispatcher[] = {
    {"awake()", "\1awake(self)", 0, 0},
    {"aboutToBlock()", "\1aboutToBlock(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractEventDispatcher, "\1QAbstractEventDispatcher(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QAbstractEventDispatcher = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractEventDispatcher,
        {0}
    },
    {
        sipNameNr_QAbstractEventDispatcher,
        {0, 0, 1},
        18, methods_QAbstractEventDispatcher,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractEventDispatcher,
    -1,
    -1,
    supers_QAbstractEventDispatcher,
    0,
    init_type_QAbstractEventDispatcher,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractEventDispatcher,
    0,
    0,
    0,
    release_QAbstractEventDispatcher,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractEventDispatcher::staticMetaObject,
    0,
    signals_QAbstractEventDispatcher,
    0
};
