/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 115 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQEventLoop.cpp"


class sipQEventLoop : public QEventLoop
{
public:
    sipQEventLoop(QObject*);
    virtual ~sipQEventLoop();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEventLoop(const sipQEventLoop &);
    sipQEventLoop &operator = (const sipQEventLoop &);

    char sipPyMethods[7];
};

sipQEventLoop::sipQEventLoop(QObject*a0): QEventLoop(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQEventLoop::~sipQEventLoop()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQEventLoop::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QEventLoop);

    return QEventLoop::metaObject();
}

int sipQEventLoop::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QEventLoop::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QEventLoop,_c,_id,_a);

    return _id;
}

void *sipQEventLoop::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QEventLoop, _clname, &sipCpp) ? sipCpp : QEventLoop::qt_metacast(_clname));
}

void sipQEventLoop::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QEventLoop::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QEventLoop::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QEventLoop::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QEventLoop::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QEventLoop::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQEventLoop::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QEventLoop::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_26(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQEventLoop::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QEventLoop::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QEventLoop_processEvents, "processEvents(self, flags: QEventLoop.ProcessEventsFlags = QEventLoop.AllEvents) -> bool\n"
    "processEvents(self, QEventLoop.ProcessEventsFlags, int)");

extern "C" {static PyObject *meth_QEventLoop_processEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_processEvents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;
        QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;
        QEventLoop *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1i", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->processEvents(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_processEvents, doc_QEventLoop_processEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QEventLoop_exec_, "exec_(self, flags: QEventLoop.ProcessEventsFlags = QEventLoop.AllEvents) -> int");

extern "C" {static PyObject *meth_QEventLoop_exec_(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exec_(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;
        QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_exec_, doc_QEventLoop_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QEventLoop_exec, "exec(self, flags: QEventLoop.ProcessEventsFlags = QEventLoop.AllEvents) -> int");

extern "C" {static PyObject *meth_QEventLoop_exec(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exec(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;
        QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_exec, doc_QEventLoop_exec);

    return NULL;
}


PyDoc_STRVAR(doc_QEventLoop_exit, "exit(self, returnCode: int = 0)");

extern "C" {static PyObject *meth_QEventLoop_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QEventLoop, &sipCpp, &a0))
        {
            sipCpp->exit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_exit, doc_QEventLoop_exit);

    return NULL;
}


PyDoc_STRVAR(doc_QEventLoop_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QEventLoop_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventLoop, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_isRunning, doc_QEventLoop_isRunning);

    return NULL;
}


PyDoc_STRVAR(doc_QEventLoop_wakeUp, "wakeUp(self)");

extern "C" {static PyObject *meth_QEventLoop_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventLoop, &sipCpp))
        {
            sipCpp->wakeUp();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_wakeUp, doc_QEventLoop_wakeUp);

    return NULL;
}


PyDoc_STRVAR(doc_QEventLoop_quit, "quit(self)");

extern "C" {static PyObject *meth_QEventLoop_quit(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_quit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventLoop, &sipCpp))
        {
            sipCpp->quit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_quit, doc_QEventLoop_quit);

    return NULL;
}


PyDoc_STRVAR(doc_QEventLoop_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QEventLoop_event(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QEventLoop::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_event, doc_QEventLoop_event);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEventLoop(void *, int);}
static void release_QEventLoop(void *sipCppV,int)
{
    QEventLoop *sipCpp = reinterpret_cast<QEventLoop *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QEventLoop(sipSimpleWrapper *);}
static void dealloc_QEventLoop(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQEventLoop *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QEventLoop(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QEventLoop(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEventLoop(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQEventLoop *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQEventLoop(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QEventLoop[] = {{142, 255, 1}};


static PyMethodDef methods_QEventLoop[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QEventLoop_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_event)},
    {SIP_MLNAME_CAST(sipName_exec), (PyCFunction)meth_QEventLoop_exec, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), (PyCFunction)meth_QEventLoop_exec_, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_exec_)},
    {SIP_MLNAME_CAST(sipName_exit), (PyCFunction)meth_QEventLoop_exit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_exit)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QEventLoop_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_isRunning)},
    {SIP_MLNAME_CAST(sipName_processEvents), (PyCFunction)meth_QEventLoop_processEvents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_processEvents)},
    {SIP_MLNAME_CAST(sipName_quit), meth_QEventLoop_quit, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_quit)},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QEventLoop_wakeUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_wakeUp)}
};

static sipEnumMemberDef enummembers_QEventLoop[] = {
    {sipName_AllEvents, static_cast<int>(QEventLoop::AllEvents), 49},
    {sipName_ExcludeSocketNotifiers, static_cast<int>(QEventLoop::ExcludeSocketNotifiers), 49},
    {sipName_ExcludeUserInputEvents, static_cast<int>(QEventLoop::ExcludeUserInputEvents), 49},
    {sipName_WaitForMoreEvents, static_cast<int>(QEventLoop::WaitForMoreEvents), 49},
    {sipName_X11ExcludeTimers, static_cast<int>(QEventLoop::X11ExcludeTimers), 49},
};

PyDoc_STRVAR(doc_QEventLoop, "\1QEventLoop(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QEventLoop = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QEventLoop,
        {0}
    },
    {
        sipNameNr_QEventLoop,
        {0, 0, 1},
        8, methods_QEventLoop,
        5, enummembers_QEventLoop,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QEventLoop,
    -1,
    -1,
    supers_QEventLoop,
    0,
    init_type_QEventLoop,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QEventLoop,
    0,
    0,
    0,
    release_QEventLoop,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QEventLoop::staticMetaObject,
    0,
    0,
    0
};
