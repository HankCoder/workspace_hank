/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstractproxymodel.sip"
#include <qabstractproxymodel.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 139 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmap.sip"
#include <qmap.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 133 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 139 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qhash.sip"
#include <qhash.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 70 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 101 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 115 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQAbstractProxyModel.cpp"


class sipQAbstractProxyModel : public QAbstractProxyModel
{
public:
    sipQAbstractProxyModel(QObject*);
    virtual ~sipQAbstractProxyModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool moveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    bool moveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    bool canDropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&) const;
    QHash<int,QByteArray> roleNames() const;
    Qt::DropActions supportedDragActions() const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    int columnCount(const QModelIndex&) const;
    int rowCount(const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    QModelIndex index(int,int,const QModelIndex&) const;
    QModelIndex sibling(int,int,const QModelIndex&) const;
    Qt::DropActions supportedDropActions() const;
    QStringList mimeTypes() const;
    QMimeData* mimeData(const QModelIndexList&) const;
    bool hasChildren(const QModelIndex&) const;
    QSize span(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    void fetchMore(const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    QModelIndex buddy(const QModelIndex&) const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    Qt::ItemFlags flags(const QModelIndex&) const;
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    void revert();
    bool submit();
    QItemSelection mapSelectionFromSource(const QItemSelection&) const;
    QItemSelection mapSelectionToSource(const QItemSelection&) const;
    QModelIndex mapFromSource(const QModelIndex&) const;
    QModelIndex mapToSource(const QModelIndex&) const;
    void setSourceModel(QAbstractItemModel*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractProxyModel(const sipQAbstractProxyModel &);
    sipQAbstractProxyModel &operator = (const sipQAbstractProxyModel &);

    char sipPyMethods[46];
};

sipQAbstractProxyModel::sipQAbstractProxyModel(QObject*a0): QAbstractProxyModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractProxyModel::~sipQAbstractProxyModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractProxyModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractProxyModel);

    return QAbstractProxyModel::metaObject();
}

int sipQAbstractProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractProxyModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractProxyModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractProxyModel, _clname, &sipCpp) ? sipCpp : QAbstractProxyModel::qt_metacast(_clname));
}

void sipQAbstractProxyModel::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractProxyModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractProxyModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractProxyModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractProxyModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractProxyModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractProxyModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_26(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractProxyModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractProxyModel::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::moveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_moveColumns);

    if (!sipMeth)
        return QAbstractProxyModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return sipVH_QtCore_59(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractProxyModel::moveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_moveRows);

    if (!sipMeth)
        return QAbstractProxyModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return sipVH_QtCore_59(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractProxyModel::canDropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_canDropMimeData);

    if (!sipMeth)
        return QAbstractProxyModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return sipVH_QtCore_33(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int,QByteArray> sipQAbstractProxyModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_roleNames);

    if (!sipMeth)
        return QAbstractProxyModel::roleNames();

    extern QHash<int,QByteArray> sipVH_QtCore_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_60(sipGILState, 0, sipPySelf, sipMeth);
}

Qt::DropActions sipQAbstractProxyModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_supportedDragActions);

    if (!sipMeth)
        return QAbstractProxyModel::supportedDragActions();

    extern Qt::DropActions sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth);
}

QModelIndexList sipQAbstractProxyModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QAbstractProxyModel::match(a0,a1,a2,a3,a4);

    extern QList<QModelIndex> sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return sipVH_QtCore_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractProxyModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QAbstractProxyModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QAbstractProxyModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QAbstractProxyModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QAbstractProxyModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_20(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QAbstractProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return sipVH_QtCore_33(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

int sipQAbstractProxyModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,sipName_QAbstractProxyModel,sipName_columnCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQAbstractProxyModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,sipName_QAbstractProxyModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQAbstractProxyModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,sipName_QAbstractProxyModel,sipName_parent);

    if (!sipMeth)
        return QModelIndex();

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQAbstractProxyModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,sipName_QAbstractProxyModel,sipName_index);

    if (!sipMeth)
        return QModelIndex();

    extern QModelIndex sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QModelIndex sipQAbstractProxyModel::sibling(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_sibling);

    if (!sipMeth)
        return QAbstractProxyModel::sibling(a0,a1,a2);

    extern QModelIndex sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return sipVH_QtCore_17(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

Qt::DropActions sipQAbstractProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QAbstractProxyModel::supportedDropActions();

    extern Qt::DropActions sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_18(sipGILState, 0, sipPySelf, sipMeth);
}

QStringList sipQAbstractProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QAbstractProxyModel::mimeTypes();

    extern QStringList sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_27(sipGILState, 0, sipPySelf, sipMeth);
}

QMimeData* sipQAbstractProxyModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QAbstractProxyModel::mimeData(a0);

    extern QMimeData* sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return sipVH_QtCore_34(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return QAbstractProxyModel::hasChildren(a0);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQAbstractProxyModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QAbstractProxyModel::span(a0);

    extern QSize sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QAbstractProxyModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    sipVH_QtCore_19(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractProxyModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QAbstractProxyModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    sipVH_QtCore_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QAbstractProxyModel::canFetchMore(a0);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQAbstractProxyModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QAbstractProxyModel::buddy(a0);

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QAbstractProxyModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return sipVH_QtCore_56(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

Qt::ItemFlags sipQAbstractProxyModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QAbstractProxyModel::flags(a0);

    extern Qt::ItemFlags sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QMap<int,QVariant> sipQAbstractProxyModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QAbstractProxyModel::itemData(a0);

    extern QMap<int,QVariant> sipVH_QtCore_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_57(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QAbstractProxyModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return sipVH_QtCore_35(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QVariant sipQAbstractProxyModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QAbstractProxyModel::headerData(a0,a1,a2);

    extern QVariant sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return sipVH_QtCore_36(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QAbstractProxyModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return sipVH_QtCore_22(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQAbstractProxyModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QAbstractProxyModel::data(a0,a1);

    extern QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QAbstractProxyModel::revert();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_11(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQAbstractProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QAbstractProxyModel::submit();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth);
}

QItemSelection sipQAbstractProxyModel::mapSelectionFromSource(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_mapSelectionFromSource);

    if (!sipMeth)
        return QAbstractProxyModel::mapSelectionFromSource(a0);

    extern QItemSelection sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtCore_39(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QItemSelection sipQAbstractProxyModel::mapSelectionToSource(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_mapSelectionToSource);

    if (!sipMeth)
        return QAbstractProxyModel::mapSelectionToSource(a0);

    extern QItemSelection sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtCore_39(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQAbstractProxyModel::mapFromSource(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,sipName_QAbstractProxyModel,sipName_mapFromSource);

    if (!sipMeth)
        return QModelIndex();

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipQAbstractProxyModel::mapToSource(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,sipName_QAbstractProxyModel,sipName_mapToSource);

    if (!sipMeth)
        return QModelIndex();

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtCore_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::setSourceModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_setSourceModel);

    if (!sipMeth)
    {
        QAbstractProxyModel::setSourceModel(a0);
        return;
    }

    extern void sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    sipVH_QtCore_40(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setSourceModel, "setSourceModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QAbstractProxyModel_setSourceModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setSourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractProxyModel::setSourceModel(a0) : sipCpp->setSourceModel(a0));

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setSourceModel, doc_QAbstractProxyModel_setSourceModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_sourceModel, "sourceModel(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QAbstractProxyModel_sourceModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_sourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            QAbstractItemModel*sipRes;

            sipRes = sipCpp->sourceModel();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_sourceModel, doc_QAbstractProxyModel_sourceModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapToSource, "mapToSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapToSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractProxyModel, sipName_mapToSource);
                return NULL;
            }

            sipRes = new QModelIndex(sipCpp->mapToSource(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapToSource, doc_QAbstractProxyModel_mapToSource);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapFromSource, "mapFromSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapFromSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractProxyModel, sipName_mapFromSource);
                return NULL;
            }

            sipRes = new QModelIndex(sipCpp->mapFromSource(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapFromSource, doc_QAbstractProxyModel_mapFromSource);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapSelectionToSource, "mapSelectionToSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapSelectionToSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapSelectionToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
            QItemSelection*sipRes;

            sipRes = new QItemSelection((sipSelfWasArg ? sipCpp->QAbstractProxyModel::mapSelectionToSource(*a0) : sipCpp->mapSelectionToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapSelectionToSource, doc_QAbstractProxyModel_mapSelectionToSource);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapSelectionFromSource, "mapSelectionFromSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapSelectionFromSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapSelectionFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
            QItemSelection*sipRes;

            sipRes = new QItemSelection((sipSelfWasArg ? sipCpp->QAbstractProxyModel::mapSelectionFromSource(*a0) : sipCpp->mapSelectionFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapSelectionFromSource, doc_QAbstractProxyModel_mapSelectionFromSource);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_submit, "submit(self) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractProxyModel::submit() : sipCpp->submit());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_submit, doc_QAbstractProxyModel_submit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_revert, "revert(self)");

extern "C" {static PyObject *meth_QAbstractProxyModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractProxyModel::revert() : sipCpp->revert());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_revert, doc_QAbstractProxyModel_revert);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QAbstractProxyModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QAbstractProxyModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_data, doc_QAbstractProxyModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setData, "setData(self, QModelIndex, QVariant, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
        QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractProxyModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setData, doc_QAbstractProxyModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_headerData, "headerData(self, int, Qt.Orientation, int) -> QVariant");

extern "C" {static PyObject *meth_QAbstractProxyModel_headerData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEi", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QAbstractProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_headerData, doc_QAbstractProxyModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, QVariant, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        const QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
        QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiEJ1|i", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant, &a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractProxyModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setHeaderData, doc_QAbstractProxyModel_setHeaderData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_itemData, "itemData(self, QModelIndex) -> object");

extern "C" {static PyObject *meth_QAbstractProxyModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QMap<int,QVariant>*sipRes;

            sipRes = new QMap<int,QVariant>((sipSelfWasArg ? sipCpp->QAbstractProxyModel::itemData(*a0) : sipCpp->itemData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_itemData, doc_QAbstractProxyModel_itemData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QAbstractProxyModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Qt::ItemFlags*sipRes;

            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->QAbstractProxyModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_flags, doc_QAbstractProxyModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setItemData, "setItemData(self, QModelIndex, object) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QMap<int,QVariant>* a1;
        int a1State = 0;
        QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QMap_1800_0100QVariant,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractProxyModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            sipReleaseType(const_cast<QMap<int,QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setItemData, doc_QAbstractProxyModel_setItemData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_buddy, "buddy(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QAbstractProxyModel::buddy(*a0) : sipCpp->buddy(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_buddy, doc_QAbstractProxyModel_buddy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_canFetchMore, "canFetchMore(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractProxyModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_canFetchMore, doc_QAbstractProxyModel_canFetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_fetchMore, "fetchMore(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractProxyModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractProxyModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_fetchMore, doc_QAbstractProxyModel_fetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QAbstractProxyModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp->QAbstractProxyModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_sort, doc_QAbstractProxyModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_span, "span(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractProxyModel_span(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QAbstractProxyModel::span(*a0) : sipCpp->span(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_span, doc_QAbstractProxyModel_span);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractProxyModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_hasChildren, doc_QAbstractProxyModel_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mimeData, "mimeData(self, object) -> QMimeData");

extern "C" {static PyObject *meth_QAbstractProxyModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
            QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractProxyModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mimeData, doc_QAbstractProxyModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mimeTypes, "mimeTypes(self) -> object");

extern "C" {static PyObject *meth_QAbstractProxyModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QAbstractProxyModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mimeTypes, doc_QAbstractProxyModel_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QAbstractProxyModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            Qt::DropActions*sipRes;

            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QAbstractProxyModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_supportedDropActions, doc_QAbstractProxyModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex* a2;
        const QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QAbstractProxyModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_sibling, doc_QAbstractProxyModel_sibling);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_resetInternalData, "resetInternalData(self)");

extern "C" {static PyObject *meth_QAbstractProxyModel_resetInternalData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_resetInternalData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            sipCpp->resetInternalData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_resetInternalData, doc_QAbstractProxyModel_resetInternalData);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractProxyModel(void *, int);}
static void release_QAbstractProxyModel(void *sipCppV,int)
{
    QAbstractProxyModel *sipCpp = reinterpret_cast<QAbstractProxyModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractProxyModel(sipSimpleWrapper *);}
static void dealloc_QAbstractProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractProxyModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractProxyModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractProxyModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractProxyModel[] = {{6, 255, 1}};


static PyMethodDef methods_QAbstractProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_buddy), meth_QAbstractProxyModel_buddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_buddy)},
    {SIP_MLNAME_CAST(sipName_canFetchMore), meth_QAbstractProxyModel_canFetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_canFetchMore)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QAbstractProxyModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_data)},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QAbstractProxyModel_fetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QAbstractProxyModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), (PyCFunction)meth_QAbstractProxyModel_hasChildren, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), meth_QAbstractProxyModel_headerData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_headerData)},
    {SIP_MLNAME_CAST(sipName_itemData), meth_QAbstractProxyModel_itemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_itemData)},
    {SIP_MLNAME_CAST(sipName_mapFromSource), meth_QAbstractProxyModel_mapFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionFromSource), meth_QAbstractProxyModel_mapSelectionFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapSelectionFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionToSource), meth_QAbstractProxyModel_mapSelectionToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapSelectionToSource)},
    {SIP_MLNAME_CAST(sipName_mapToSource), meth_QAbstractProxyModel_mapToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapToSource)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QAbstractProxyModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QAbstractProxyModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_resetInternalData), meth_QAbstractProxyModel_resetInternalData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_resetInternalData)},
    {SIP_MLNAME_CAST(sipName_revert), meth_QAbstractProxyModel_revert, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_revert)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QAbstractProxyModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), (PyCFunction)meth_QAbstractProxyModel_setHeaderData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setItemData), meth_QAbstractProxyModel_setItemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setItemData)},
    {SIP_MLNAME_CAST(sipName_setSourceModel), meth_QAbstractProxyModel_setSourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setSourceModel)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QAbstractProxyModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_sibling)},
    {SIP_MLNAME_CAST(sipName_sort), (PyCFunction)meth_QAbstractProxyModel_sort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_sort)},
    {SIP_MLNAME_CAST(sipName_sourceModel), meth_QAbstractProxyModel_sourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_sourceModel)},
    {SIP_MLNAME_CAST(sipName_span), meth_QAbstractProxyModel_span, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_span)},
    {SIP_MLNAME_CAST(sipName_submit), meth_QAbstractProxyModel_submit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_submit)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QAbstractProxyModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_supportedDropActions)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractProxyModel[] = {
    {"sourceModelChanged()", "\1sourceModelChanged(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractProxyModel, "\1QAbstractProxyModel(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QAbstractProxyModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractProxyModel,
        {0}
    },
    {
        sipNameNr_QAbstractProxyModel,
        {0, 0, 1},
        26, methods_QAbstractProxyModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractProxyModel,
    -1,
    -1,
    supers_QAbstractProxyModel,
    0,
    init_type_QAbstractProxyModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractProxyModel,
    0,
    0,
    0,
    release_QAbstractProxyModel,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractProxyModel::staticMetaObject,
    0,
    signals_QAbstractProxyModel,
    0
};
