/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 100 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 115 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQMimeData.cpp"


class sipQMimeData : public QMimeData
{
public:
    sipQMimeData();
    virtual ~sipQMimeData();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QVariant retrieveData(const QString&,QVariant::Type) const;
    QStringList formats() const;
    bool hasFormat(const QString&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMimeData(const sipQMimeData &);
    sipQMimeData &operator = (const sipQMimeData &);

    char sipPyMethods[10];
};

sipQMimeData::sipQMimeData(): QMimeData(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMimeData::~sipQMimeData()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMimeData::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QMimeData);

    return QMimeData::metaObject();
}

int sipQMimeData::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMimeData::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QMimeData,_c,_id,_a);

    return _id;
}

void *sipQMimeData::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QMimeData, _clname, &sipCpp) ? sipCpp : QMimeData::qt_metacast(_clname));
}

void sipQMimeData::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMimeData::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMimeData::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMimeData::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMimeData::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMimeData::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMimeData::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMimeData::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMimeData::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMimeData::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMimeData::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMimeData::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_26(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQMimeData::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMimeData::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQMimeData::retrieveData(const QString& a0,QVariant::Type a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_retrieveData);

    if (!sipMeth)
        return QMimeData::retrieveData(a0,a1);

    extern QVariant sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,QVariant::Type);

    return sipVH_QtCore_48(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QStringList sipQMimeData::formats() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_formats);

    if (!sipMeth)
        return QMimeData::formats();

    extern QStringList sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_27(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQMimeData::hasFormat(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasFormat);

    if (!sipMeth)
        return QMimeData::hasFormat(a0);

    extern bool sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtCore_49(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMimeData_urls, "urls(self) -> object");

extern "C" {static PyObject *meth_QMimeData_urls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_urls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QList<QUrl>*sipRes;

            sipRes = new QList<QUrl>(sipCpp->urls());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_urls, doc_QMimeData_urls);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setUrls, "setUrls(self, object)");

extern "C" {static PyObject *meth_QMimeData_setUrls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QUrl>* a0;
        int a0State = 0;
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            sipCpp->setUrls(*a0);
            sipReleaseType(const_cast<QList<QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setUrls, doc_QMimeData_setUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasUrls, "hasUrls(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasUrls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasUrls();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasUrls, doc_QMimeData_hasUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_text, "text(self) -> object");

extern "C" {static PyObject *meth_QMimeData_text(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_text, doc_QMimeData_text);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setText, "setText(self, object)");

extern "C" {static PyObject *meth_QMimeData_setText(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setText, doc_QMimeData_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasText, "hasText(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasText(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasText, doc_QMimeData_hasText);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_html, "html(self) -> object");

extern "C" {static PyObject *meth_QMimeData_html(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_html(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->html());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_html, doc_QMimeData_html);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setHtml, "setHtml(self, object)");

extern "C" {static PyObject *meth_QMimeData_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHtml(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setHtml, doc_QMimeData_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasHtml, "hasHtml(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasHtml(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasHtml();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasHtml, doc_QMimeData_hasHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_imageData, "imageData(self) -> QVariant");

extern "C" {static PyObject *meth_QMimeData_imageData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_imageData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->imageData());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_imageData, doc_QMimeData_imageData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setImageData, "setImageData(self, QVariant)");

extern "C" {static PyObject *meth_QMimeData_setImageData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setImageData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setImageData(*a0);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setImageData, doc_QMimeData_setImageData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasImage, "hasImage(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasImage(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasImage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasImage, doc_QMimeData_hasImage);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_colorData, "colorData(self) -> QVariant");

extern "C" {static PyObject *meth_QMimeData_colorData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_colorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->colorData());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_colorData, doc_QMimeData_colorData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setColorData, "setColorData(self, QVariant)");

extern "C" {static PyObject *meth_QMimeData_setColorData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setColorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setColorData(*a0);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setColorData, doc_QMimeData_setColorData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasColor, "hasColor(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasColor(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasColor();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasColor, doc_QMimeData_hasColor);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_data, "data(self, object) -> QByteArray");

extern "C" {static PyObject *meth_QMimeData_data(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->data(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_data, doc_QMimeData_data);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_setData, "setData(self, object, QByteArray)");

extern "C" {static PyObject *meth_QMimeData_setData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setData(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setData, doc_QMimeData_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_hasFormat, "hasFormat(self, object) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasFormat(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMimeData::hasFormat(*a0) : sipCpp->hasFormat(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasFormat, doc_QMimeData_hasFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_formats, "formats(self) -> object");

extern "C" {static PyObject *meth_QMimeData_formats(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_formats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QMimeData::formats() : sipCpp->formats()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_formats, doc_QMimeData_formats);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_clear, "clear(self)");

extern "C" {static PyObject *meth_QMimeData_clear(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_clear, doc_QMimeData_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_removeFormat, "removeFormat(self, object)");

extern "C" {static PyObject *meth_QMimeData_removeFormat(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_removeFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeFormat(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_removeFormat, doc_QMimeData_removeFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeData_retrieveData, "retrieveData(self, object, QVariant.Type) -> QVariant");

extern "C" {static PyObject *meth_QMimeData_retrieveData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_retrieveData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QVariant::Type a1;
        const QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1E", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant_Type, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QMimeData::retrieveData(*a0,a1) : sipCpp->retrieveData(*a0,a1)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_retrieveData, doc_QMimeData_retrieveData);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeData(void *, int);}
static void release_QMimeData(void *sipCppV,int)
{
    QMimeData *sipCpp = reinterpret_cast<QMimeData *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMimeData(sipSimpleWrapper *);}
static void dealloc_QMimeData(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMimeData *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMimeData(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMimeData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeData(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMimeData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQMimeData();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMimeData[] = {{142, 255, 1}};


static PyMethodDef methods_QMimeData[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QMimeData_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_clear)},
    {SIP_MLNAME_CAST(sipName_colorData), meth_QMimeData_colorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_colorData)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMimeData_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_data)},
    {SIP_MLNAME_CAST(sipName_formats), meth_QMimeData_formats, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_formats)},
    {SIP_MLNAME_CAST(sipName_hasColor), meth_QMimeData_hasColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasColor)},
    {SIP_MLNAME_CAST(sipName_hasFormat), meth_QMimeData_hasFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasFormat)},
    {SIP_MLNAME_CAST(sipName_hasHtml), meth_QMimeData_hasHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasHtml)},
    {SIP_MLNAME_CAST(sipName_hasImage), meth_QMimeData_hasImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasImage)},
    {SIP_MLNAME_CAST(sipName_hasText), meth_QMimeData_hasText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasText)},
    {SIP_MLNAME_CAST(sipName_hasUrls), meth_QMimeData_hasUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasUrls)},
    {SIP_MLNAME_CAST(sipName_html), meth_QMimeData_html, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_html)},
    {SIP_MLNAME_CAST(sipName_imageData), meth_QMimeData_imageData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_imageData)},
    {SIP_MLNAME_CAST(sipName_removeFormat), meth_QMimeData_removeFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_removeFormat)},
    {SIP_MLNAME_CAST(sipName_retrieveData), meth_QMimeData_retrieveData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_retrieveData)},
    {SIP_MLNAME_CAST(sipName_setColorData), meth_QMimeData_setColorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setColorData)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QMimeData_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setData)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QMimeData_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setHtml)},
    {SIP_MLNAME_CAST(sipName_setImageData), meth_QMimeData_setImageData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setImageData)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMimeData_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setText)},
    {SIP_MLNAME_CAST(sipName_setUrls), meth_QMimeData_setUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setUrls)},
    {SIP_MLNAME_CAST(sipName_text), meth_QMimeData_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_text)},
    {SIP_MLNAME_CAST(sipName_urls), meth_QMimeData_urls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_urls)}
};

PyDoc_STRVAR(doc_QMimeData, "\1QMimeData()");


pyqt5ClassTypeDef sipTypeDef_QtCore_QMimeData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMimeData,
        {0}
    },
    {
        sipNameNr_QMimeData,
        {0, 0, 1},
        22, methods_QMimeData,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMimeData,
    -1,
    -1,
    supers_QMimeData,
    0,
    init_type_QMimeData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMimeData,
    0,
    0,
    0,
    release_QMimeData,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMimeData::staticMetaObject,
    0,
    0,
    0
};
