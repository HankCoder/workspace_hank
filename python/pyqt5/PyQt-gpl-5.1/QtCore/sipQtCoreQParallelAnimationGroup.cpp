/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qparallelanimationgroup.sip"
#include <qparallelanimationgroup.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 115 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQParallelAnimationGroup.cpp"


class sipQParallelAnimationGroup : public QParallelAnimationGroup
{
public:
    sipQParallelAnimationGroup(QObject*);
    virtual ~sipQParallelAnimationGroup();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void updateDirection(QAbstractAnimation::Direction);
    void updateState(QAbstractAnimation::State,QAbstractAnimation::State);
    void updateCurrentTime(int);
    bool event(QEvent*);
    int duration() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQParallelAnimationGroup(const sipQParallelAnimationGroup &);
    sipQParallelAnimationGroup &operator = (const sipQParallelAnimationGroup &);

    char sipPyMethods[11];
};

sipQParallelAnimationGroup::sipQParallelAnimationGroup(QObject*a0): QParallelAnimationGroup(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQParallelAnimationGroup::~sipQParallelAnimationGroup()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQParallelAnimationGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QParallelAnimationGroup);

    return QParallelAnimationGroup::metaObject();
}

int sipQParallelAnimationGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QParallelAnimationGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QParallelAnimationGroup,_c,_id,_a);

    return _id;
}

void *sipQParallelAnimationGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QParallelAnimationGroup, _clname, &sipCpp) ? sipCpp : QParallelAnimationGroup::qt_metacast(_clname));
}

void sipQParallelAnimationGroup::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QParallelAnimationGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QParallelAnimationGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    sipVH_QtCore_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QParallelAnimationGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    sipVH_QtCore_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QParallelAnimationGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    sipVH_QtCore_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QParallelAnimationGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQParallelAnimationGroup::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QParallelAnimationGroup::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return sipVH_QtCore_26(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQParallelAnimationGroup::updateDirection(QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_updateDirection);

    if (!sipMeth)
    {
        QParallelAnimationGroup::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractAnimation::Direction);

    sipVH_QtCore_41(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::updateState(QAbstractAnimation::State a0,QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_updateState);

    if (!sipMeth)
    {
        QParallelAnimationGroup::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractAnimation::State,QAbstractAnimation::State);

    sipVH_QtCore_3(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQParallelAnimationGroup::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_updateCurrentTime);

    if (!sipMeth)
    {
        QParallelAnimationGroup::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQParallelAnimationGroup::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QParallelAnimationGroup::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQParallelAnimationGroup::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_duration);

    if (!sipMeth)
        return QParallelAnimationGroup::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QParallelAnimationGroup_duration(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QParallelAnimationGroup::duration() : sipCpp->duration());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_duration, doc_QParallelAnimationGroup_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QParallelAnimationGroup_event(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QParallelAnimationGroup::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_event, doc_QParallelAnimationGroup_event);

    return NULL;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QParallelAnimationGroup_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QParallelAnimationGroup::updateCurrentTime(a0) : sipCpp->updateCurrentTime(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_updateCurrentTime, doc_QParallelAnimationGroup_updateCurrentTime);

    return NULL;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QParallelAnimationGroup_updateState(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractAnimation::State a0;
        QAbstractAnimation::State a1;
        QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp->QParallelAnimationGroup::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_updateState, doc_QParallelAnimationGroup_updateState);

    return NULL;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QParallelAnimationGroup_updateDirection(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_updateDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractAnimation::Direction a0;
        QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            (sipSelfWasArg ? sipCpp->QParallelAnimationGroup::updateDirection(a0) : sipCpp->updateDirection(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_updateDirection, doc_QParallelAnimationGroup_updateDirection);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QParallelAnimationGroup(void *, int);}
static void release_QParallelAnimationGroup(void *sipCppV,int)
{
    QParallelAnimationGroup *sipCpp = reinterpret_cast<QParallelAnimationGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QParallelAnimationGroup(sipSimpleWrapper *);}
static void dealloc_QParallelAnimationGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQParallelAnimationGroup *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QParallelAnimationGroup(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QParallelAnimationGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QParallelAnimationGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQParallelAnimationGroup *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQParallelAnimationGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QParallelAnimationGroup[] = {{14, 255, 1}};


static PyMethodDef methods_QParallelAnimationGroup[] = {
    {SIP_MLNAME_CAST(sipName_duration), meth_QParallelAnimationGroup_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_duration)},
    {SIP_MLNAME_CAST(sipName_event), meth_QParallelAnimationGroup_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_event)},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), meth_QParallelAnimationGroup_updateCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_updateCurrentTime)},
    {SIP_MLNAME_CAST(sipName_updateDirection), meth_QParallelAnimationGroup_updateDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_updateDirection)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QParallelAnimationGroup_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_updateState)}
};

PyDoc_STRVAR(doc_QParallelAnimationGroup, "\1QParallelAnimationGroup(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QParallelAnimationGroup = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QParallelAnimationGroup,
        {0}
    },
    {
        sipNameNr_QParallelAnimationGroup,
        {0, 0, 1},
        5, methods_QParallelAnimationGroup,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QParallelAnimationGroup,
    -1,
    -1,
    supers_QParallelAnimationGroup,
    0,
    init_type_QParallelAnimationGroup,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QParallelAnimationGroup,
    0,
    0,
    0,
    release_QParallelAnimationGroup,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QParallelAnimationGroup::staticMetaObject,
    0,
    0,
    0
};
