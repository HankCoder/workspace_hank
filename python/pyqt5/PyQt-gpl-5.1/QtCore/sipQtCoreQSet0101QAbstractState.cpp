/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qset.sip"
#include <qset.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQSet0101QAbstractState.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQSet0101QAbstractState.cpp"


extern "C" {static void assign_QSet_0101QAbstractState(void *, SIP_SSIZE_T, const void *);}
static void assign_QSet_0101QAbstractState(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSet<QAbstractState*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSet<QAbstractState*> *>(sipSrc);
}


extern "C" {static void *array_QSet_0101QAbstractState(SIP_SSIZE_T);}
static void *array_QSet_0101QAbstractState(SIP_SSIZE_T sipNrElem)
{
    return new QSet<QAbstractState*>[sipNrElem];
}


extern "C" {static void *copy_QSet_0101QAbstractState(const void *, SIP_SSIZE_T);}
static void *copy_QSet_0101QAbstractState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSet<QAbstractState*>(reinterpret_cast<const QSet<QAbstractState*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QSet_0101QAbstractState(void *, int);}
static void release_QSet_0101QAbstractState(void *ptr, int)
{
    delete reinterpret_cast<QSet<QAbstractState*> *>(ptr);
}



extern "C" {static int convertTo_QSet_0101QAbstractState(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSet_0101QAbstractState(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QSet<QAbstractState*> **sipCppPtr = reinterpret_cast<QSet<QAbstractState*> **>(sipCppPtrV);

#line 62 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qset.sip"
    PyObject *it = PyObject_GetIter(sipPy), *itm;

    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (it == NULL)
            return 0;

        while ((itm = PyIter_Next(it)) != NULL)
        {
            int ok = sipCanConvertToType(itm, sipType_QAbstractState, 0);

            Py_DECREF(itm);

            if (!ok)
            {
                Py_DECREF(it);
                return 0;
            }
        }

        Py_DECREF(it);
        return 1;
    }

    if (it == NULL)
    {
        *sipIsErr = 1;
        return 0;
    }

    QSet<QAbstractState *> *qs = new QSet<QAbstractState *>;

    while ((itm = PyIter_Next(it)) != NULL)
    {
        QAbstractState *t = reinterpret_cast<QAbstractState *>(sipConvertToType(itm, sipType_QAbstractState, sipTransferObj, 0, 0, sipIsErr));

        Py_DECREF(itm);

        if (*sipIsErr)
        {
            delete qs;
            Py_DECREF(it);
            return 0;
        }

        qs->insert(t);
    }

    Py_DECREF(it);

    *sipCppPtr = qs;

    return sipGetState(sipTransferObj);
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQSet0101QAbstractState.cpp"
}


extern "C" {static PyObject *convertFrom_QSet_0101QAbstractState(void *, PyObject *);}
static PyObject *convertFrom_QSet_0101QAbstractState(void *sipCppV, PyObject *sipTransferObj)
{
   QSet<QAbstractState*> *sipCpp = reinterpret_cast<QSet<QAbstractState*> *>(sipCppV);

#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/sip/QtCore/qset.sip"
    // Create the set.
    PyObject *s;

    if ((s = PySet_New(NULL)) == NULL)
        return NULL;

    // Set the set elements.
    QSet<QAbstractState *>::const_iterator it = sipCpp->constBegin();
    QSet<QAbstractState *>::const_iterator end = sipCpp->constEnd();

    while (it != end)
    {
        PyObject *tobj;

        // The explicit (void *) cast allows QAbstractState to be const.
        if ((tobj = sipConvertFromType((void *)*it, sipType_QAbstractState, sipTransferObj)) == NULL)
        {
            Py_DECREF(s);
            return NULL;
        }

        PySet_Add(s, tobj);

        ++it;
    }

    return s;
#line 163 "/home/pythoner/workspace_hank/python/pyqt5/PyQt-gpl-5.1/QtCore/sipQtCoreQSet0101QAbstractState.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QSet_0101QAbstractState = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_7971,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QSet_0101QAbstractState,
    array_QSet_0101QAbstractState,
    copy_QSet_0101QAbstractState,
    release_QSet_0101QAbstractState,
    convertTo_QSet_0101QAbstractState,
    convertFrom_QSet_0101QAbstractState
};
