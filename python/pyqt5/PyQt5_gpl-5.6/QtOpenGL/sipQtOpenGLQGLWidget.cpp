/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 244 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 179 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 380 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 161 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 179 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 491 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 453 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 442 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 549 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 598 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 571 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 587 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 654 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 287 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 464 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 420 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 394 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 366 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 345 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 252 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtOpenGL/sipQtOpenGLQGLWidget.cpp"


class sipQGLWidget : public QGLWidget
{
public:
    sipQGLWidget(QWidget*,const QGLWidget*,Qt::WindowFlags);
    sipQGLWidget(QGLContext*,QWidget*,const QGLWidget*,Qt::WindowFlags);
    sipQGLWidget(const QGLFormat&,QWidget*,const QGLWidget*,Qt::WindowFlags);
    virtual ~sipQGLWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
    void glDraw();
    void glInit();
    void resizeEvent(QResizeEvent*);
    void paintEvent(QPaintEvent*);
    void paintOverlayGL();
    void resizeOverlayGL(int,int);
    void initializeOverlayGL();
    void paintGL();
    void resizeGL(int,int);
    void initializeGL();
    bool event(QEvent*);
    void updateOverlayGL();
    void updateGL();
    QPaintEngine* paintEngine() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGLWidget(const sipQGLWidget &);
    sipQGLWidget &operator = (const sipQGLWidget &);

    char sipPyMethods[56];
};

sipQGLWidget::sipQGLWidget(QWidget*a0,const QGLWidget*a1,Qt::WindowFlags a2): QGLWidget(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLWidget::sipQGLWidget(QGLContext*a0,QWidget*a1,const QGLWidget*a2,Qt::WindowFlags a3): QGLWidget(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLWidget::sipQGLWidget(const QGLFormat& a0,QWidget*a1,const QGLWidget*a2,Qt::WindowFlags a3): QGLWidget(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLWidget::~sipQGLWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGLWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtOpenGL_qt_metaobject(sipPySelf,sipType_QGLWidget);

    return QGLWidget::metaObject();
}

int sipQGLWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGLWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtOpenGL_qt_metacall(sipPySelf,sipType_QGLWidget,_c,_id,_a);

    return _id;
}

void *sipQGLWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtOpenGL_qt_metacast(sipPySelf, sipType_QGLWidget, _clname, &sipCpp) ? sipCpp : QGLWidget::qt_metacast(_clname));
}

void sipQGLWidget::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGLWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGLWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGLWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGLWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGLWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGLWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGLWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGLWidget::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QGLWidget::initPainter(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    ((sipVH_QtWidgets_3)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQGLWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QGLWidget::sharedPainter();

    typedef QPainter* (*sipVH_QtWidgets_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtWidgets_4)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQGLWidget::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QGLWidget::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQGLWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QGLWidget::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQGLWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QGLWidget::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtWidgets_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return ((sipVH_QtWidgets_5)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQGLWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QGLWidget::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtWidgets_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return ((sipVH_QtWidgets_6)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QGLWidget::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    ((sipVH_QtWidgets_7)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQGLWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QGLWidget::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QGLWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QGLWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QGLWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QGLWidget::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    ((sipVH_QtWidgets_8)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QGLWidget::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    ((sipVH_QtWidgets_9)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QGLWidget::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    ((sipVH_QtWidgets_10)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[10]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QGLWidget::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    ((sipVH_QtWidgets_11)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QGLWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    ((sipVH_QtWidgets_12)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QGLWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QGLWidget::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    ((sipVH_QtWidgets_13)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[13]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QGLWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    ((sipVH_QtWidgets_14)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[14]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QGLWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QGLWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QGLWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QGLWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QGLWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QGLWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QGLWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QGLWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QGLWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QGLWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QGLWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QGLWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQGLWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QGLWidget::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQGLWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QGLWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQGLWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QGLWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QGLWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_0)(sipModuleAPI_QtOpenGL_QtWidgets->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQGLWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QGLWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::glDraw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_glDraw);

    if (!sipMeth)
    {
        QGLWidget::glDraw();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::glInit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_glInit);

    if (!sipMeth)
    {
        QGLWidget::glInit();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QGLWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QGLWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::paintOverlayGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_paintOverlayGL);

    if (!sipMeth)
    {
        QGLWidget::paintOverlayGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::resizeOverlayGL(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_resizeOverlayGL);

    if (!sipMeth)
    {
        QGLWidget::resizeOverlayGL(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGLWidget::initializeOverlayGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_initializeOverlayGL);

    if (!sipMeth)
    {
        QGLWidget::initializeOverlayGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::paintGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_paintGL);

    if (!sipMeth)
    {
        QGLWidget::paintGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::resizeGL(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_resizeGL);

    if (!sipMeth)
    {
        QGLWidget::resizeGL(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGLWidget::initializeGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_initializeGL);

    if (!sipMeth)
    {
        QGLWidget::initializeGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQGLWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGLWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGLWidget::updateOverlayGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_updateOverlayGL);

    if (!sipMeth)
    {
        QGLWidget::updateOverlayGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGLWidget::updateGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_updateGL);

    if (!sipMeth)
    {
        QGLWidget::updateGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtOpenGL_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QPaintEngine* sipQGLWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QGLWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtOpenGL_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QGLWidget_qglColor, "qglColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QGLWidget_qglColor(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_qglColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->qglColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_qglColor, doc_QGLWidget_qglColor);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_qglClearColor, "qglClearColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QGLWidget_qglClearColor(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_qglClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->qglClearColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_qglClearColor, doc_QGLWidget_qglClearColor);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_isValid(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_isValid, doc_QGLWidget_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_isSharing, "isSharing(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_isSharing(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_isSharing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSharing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_isSharing, doc_QGLWidget_isSharing);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_makeCurrent, "makeCurrent(self)");

extern "C" {static PyObject *meth_QGLWidget_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->makeCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_makeCurrent, doc_QGLWidget_makeCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_doneCurrent, "doneCurrent(self)");

extern "C" {static PyObject *meth_QGLWidget_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_doneCurrent, doc_QGLWidget_doneCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_doubleBuffer, "doubleBuffer(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_doubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_doubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->doubleBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_doubleBuffer, doc_QGLWidget_doubleBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_swapBuffers, "swapBuffers(self)");

extern "C" {static PyObject *meth_QGLWidget_swapBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_swapBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->swapBuffers();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_swapBuffers, doc_QGLWidget_swapBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_format, "format(self) -> QGLFormat");

extern "C" {static PyObject *meth_QGLWidget_format(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            QGLFormat*sipRes;

            sipRes = new QGLFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_format, doc_QGLWidget_format);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_context, "context(self) -> QGLContext");

extern "C" {static PyObject *meth_QGLWidget_context(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            QGLContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_context, doc_QGLWidget_context);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_setContext, "setContext(self, QGLContext, shareContext: QGLContext = None, deleteOldContext: bool = True)");

extern "C" {static PyObject *meth_QGLWidget_setContext(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_setContext(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QGLContext* a0;
        const QGLContext* a1 = 0;
        bool a2 = 1;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_shareContext,
            sipName_deleteOldContext,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:|J8b", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QGLContext, &a0, sipType_QGLContext, &a1, &a2))
        {
            sipCpp->setContext(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_setContext, doc_QGLWidget_setContext);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_renderPixmap, "renderPixmap(self, width: int = 0, height: int = 0, useContext: bool = False) -> QPixmap");

extern "C" {static PyObject *meth_QGLWidget_renderPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_renderPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        int a1 = 0;
        bool a2 = 0;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
            sipName_useContext,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|iib", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1, &a2))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap(sipCpp->renderPixmap(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_renderPixmap, doc_QGLWidget_renderPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_grabFrameBuffer, "grabFrameBuffer(self, withAlpha: bool = False) -> QImage");

extern "C" {static PyObject *meth_QGLWidget_grabFrameBuffer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_grabFrameBuffer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_withAlpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QGLWidget, &sipCpp, &a0))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->grabFrameBuffer(a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_grabFrameBuffer, doc_QGLWidget_grabFrameBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_makeOverlayCurrent, "makeOverlayCurrent(self)");

extern "C" {static PyObject *meth_QGLWidget_makeOverlayCurrent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_makeOverlayCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            sipCpp->makeOverlayCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_makeOverlayCurrent, doc_QGLWidget_makeOverlayCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_overlayContext, "overlayContext(self) -> QGLContext");

extern "C" {static PyObject *meth_QGLWidget_overlayContext(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_overlayContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            const QGLContext*sipRes;

            sipRes = sipCpp->overlayContext();

            return sipConvertFromType(const_cast<QGLContext *>(sipRes),sipType_QGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_overlayContext, doc_QGLWidget_overlayContext);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_convertToGLFormat, "convertToGLFormat(QImage) -> QImage");

extern "C" {static PyObject *meth_QGLWidget_convertToGLFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_convertToGLFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QImage, &a0))
        {
            QImage*sipRes;

            sipRes = new QImage(QGLWidget::convertToGLFormat(*a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_convertToGLFormat, doc_QGLWidget_convertToGLFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_renderText, "renderText(self, int, int, str, font: QFont = QFont())\n"
    "renderText(self, float, float, float, str, font: QFont = QFont())");

extern "C" {static PyObject *meth_QGLWidget_renderText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_renderText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        const QFont& a3def = QFont();
        const QFont* a3 = &a3def;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiJ1|J9", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State, sipType_QFont, &a3))
        {
            sipCpp->renderText(a0,a1,*a2,*a3);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        double a0;
        double a1;
        double a2;
        const QString* a3;
        int a3State = 0;
        const QFont& a4def = QFont();
        const QFont* a4 = &a4def;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BdddJ1|J9", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1, &a2, sipType_QString,&a3, &a3State, sipType_QFont, &a4))
        {
            sipCpp->renderText(a0,a1,a2,*a3,*a4);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_renderText, doc_QGLWidget_renderText);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QGLWidget_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QGLWidget::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintEngine, doc_QGLWidget_paintEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_bindTexture, "bindTexture(self, QImage, target: int = GL_TEXTURE_2D, format: int = GL_RGBA) -> int\n"
    "bindTexture(self, QPixmap, target: int = GL_TEXTURE_2D, format: int = GL_RGBA) -> int\n"
    "bindTexture(self, str) -> int\n"
    "bindTexture(self, QImage, int, int, Union[QGLContext.BindOptions, QGLContext.BindOption]) -> int\n"
    "bindTexture(self, QPixmap, int, int, Union[QGLContext.BindOptions, QGLContext.BindOption]) -> int");

extern "C" {static PyObject *meth_QGLWidget_bindTexture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_bindTexture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;
        GLenum a1 = GL_TEXTURE_2D;
        GLint a2 = GL_RGBA;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_target,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|ui", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QImage, &a0, &a1, &a2))
        {
            GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const QPixmap* a0;
        GLenum a1 = GL_TEXTURE_2D;
        GLint a2 = GL_RGBA;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_target,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|ui", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPixmap, &a0, &a1, &a2))
        {
            GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QGLWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const QImage* a0;
        GLenum a1;
        GLint a2;
        QGLContext::BindOptions* a3;
        int a3State = 0;
        QGLWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9uiJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QImage, &a0, &a1, &a2, sipType_QGLContext_BindOptions, &a3, &a3State))
        {
            GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_QGLContext_BindOptions,a3State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        const QPixmap* a0;
        GLenum a1;
        GLint a2;
        QGLContext::BindOptions* a3;
        int a3State = 0;
        QGLWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9uiJ1", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPixmap, &a0, &a1, &a2, sipType_QGLContext_BindOptions, &a3, &a3State))
        {
            GLuint sipRes;

            sipRes = sipCpp->bindTexture(*a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_QGLContext_BindOptions,a3State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_bindTexture, doc_QGLWidget_bindTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_drawTexture, "drawTexture(self, QRectF, int, textureTarget: int = GL_TEXTURE_2D)\n"
    "drawTexture(self, Union[QPointF, QPoint], int, textureTarget: int = GL_TEXTURE_2D)");

extern "C" {static PyObject *meth_QGLWidget_drawTexture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_drawTexture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        GLuint a1;
        GLenum a2 = GL_TEXTURE_2D;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_textureTarget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|u", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawTexture(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        GLuint a1;
        GLenum a2 = GL_TEXTURE_2D;
        QGLWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_textureTarget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|u", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPointF, &a0, &a0State, &a1, &a2))
        {
            sipCpp->drawTexture(*a0,a1,a2);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_drawTexture, doc_QGLWidget_drawTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_deleteTexture, "deleteTexture(self, int)");

extern "C" {static PyObject *meth_QGLWidget_deleteTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_deleteTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QGLWidget, &sipCpp, &a0))
        {
            sipCpp->deleteTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_deleteTexture, doc_QGLWidget_deleteTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_updateGL, "updateGL(self)");

extern "C" {static PyObject *meth_QGLWidget_updateGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_updateGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::updateGL() : sipCpp->updateGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_updateGL, doc_QGLWidget_updateGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_updateOverlayGL, "updateOverlayGL(self)");

extern "C" {static PyObject *meth_QGLWidget_updateOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_updateOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::updateOverlayGL() : sipCpp->updateOverlayGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_updateOverlayGL, doc_QGLWidget_updateOverlayGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QGLWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QGLWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_event, doc_QGLWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_initializeGL, "initializeGL(self)");

extern "C" {static PyObject *meth_QGLWidget_initializeGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_initializeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::initializeGL() : sipCpp->initializeGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_initializeGL, doc_QGLWidget_initializeGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_resizeGL, "resizeGL(self, int, int)");

extern "C" {static PyObject *meth_QGLWidget_resizeGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_resizeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::resizeGL(a0,a1) : sipCpp->resizeGL(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_resizeGL, doc_QGLWidget_resizeGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_paintGL, "paintGL(self)");

extern "C" {static PyObject *meth_QGLWidget_paintGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::paintGL() : sipCpp->paintGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintGL, doc_QGLWidget_paintGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_initializeOverlayGL, "initializeOverlayGL(self)");

extern "C" {static PyObject *meth_QGLWidget_initializeOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_initializeOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::initializeOverlayGL() : sipCpp->initializeOverlayGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_initializeOverlayGL, doc_QGLWidget_initializeOverlayGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_resizeOverlayGL, "resizeOverlayGL(self, int, int)");

extern "C" {static PyObject *meth_QGLWidget_resizeOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_resizeOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QGLWidget, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::resizeOverlayGL(a0,a1) : sipCpp->resizeOverlayGL(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_resizeOverlayGL, doc_QGLWidget_resizeOverlayGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_paintOverlayGL, "paintOverlayGL(self)");

extern "C" {static PyObject *meth_QGLWidget_paintOverlayGL(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintOverlayGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::paintOverlayGL() : sipCpp->paintOverlayGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintOverlayGL, doc_QGLWidget_paintOverlayGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_setAutoBufferSwap, "setAutoBufferSwap(self, bool)");

extern "C" {static PyObject *meth_QGLWidget_setAutoBufferSwap(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_setAutoBufferSwap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QGLWidget, &sipCpp, &a0))
        {
            sipCpp->setAutoBufferSwap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_setAutoBufferSwap, doc_QGLWidget_setAutoBufferSwap);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_autoBufferSwap, "autoBufferSwap(self) -> bool");

extern "C" {static PyObject *meth_QGLWidget_autoBufferSwap(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_autoBufferSwap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoBufferSwap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_autoBufferSwap, doc_QGLWidget_autoBufferSwap);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QGLWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_paintEvent, doc_QGLWidget_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QGLWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QGLWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_resizeEvent, doc_QGLWidget_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_glInit, "glInit(self)");

extern "C" {static PyObject *meth_QGLWidget_glInit(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_glInit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::glInit() : sipCpp->glInit());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_glInit, doc_QGLWidget_glInit);

    return NULL;
}


PyDoc_STRVAR(doc_QGLWidget_glDraw, "glDraw(self)");

extern "C" {static PyObject *meth_QGLWidget_glDraw(PyObject *, PyObject *);}
static PyObject *meth_QGLWidget_glDraw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGLWidget, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGLWidget::glDraw() : sipCpp->glDraw());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLWidget, sipName_glDraw, doc_QGLWidget_glDraw);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QGLWidget(void *, const sipTypeDef *);}
static void *cast_QGLWidget(void *sipCppV, const sipTypeDef *targetType)
{
    QGLWidget *sipCpp = reinterpret_cast<QGLWidget *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLWidget(void *, int);}
static void release_QGLWidget(void *sipCppV,int)
{
    QGLWidget *sipCpp = reinterpret_cast<QGLWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGLWidget(sipSimpleWrapper *);}
static void dealloc_QGLWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGLWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGLWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGLWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGLWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGLWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;
        const QGLWidget* a1 = 0;
        Qt::WindowFlags a2def = Qt::WindowFlags();
        Qt::WindowFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_shareWidget,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ8J1", sipType_QWidget, &a0, sipOwner, sipType_QGLWidget, &a1, sipType_Qt_WindowFlags, &a2, &a2State))
        {
            sipCpp = new sipQGLWidget(a0,a1,*a2);
            sipReleaseType(a2,sipType_Qt_WindowFlags,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QGLContext* a0;
        QWidget* a1 = 0;
        const QGLWidget* a2 = 0;
        Qt::WindowFlags a3def = Qt::WindowFlags();
        Qt::WindowFlags* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_shareWidget,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J:|JHJ8J1", sipType_QGLContext, &a0, sipType_QWidget, &a1, sipOwner, sipType_QGLWidget, &a2, sipType_Qt_WindowFlags, &a3, &a3State))
        {
            sipCpp = new sipQGLWidget(a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_Qt_WindowFlags,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QGLFormat* a0;
        QWidget* a1 = 0;
        const QGLWidget* a2 = 0;
        Qt::WindowFlags a3def = Qt::WindowFlags();
        Qt::WindowFlags* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_shareWidget,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JHJ8J1", sipType_QGLFormat, &a0, sipType_QWidget, &a1, sipOwner, sipType_QGLWidget, &a2, sipType_Qt_WindowFlags, &a3, &a3State))
        {
            sipCpp = new sipQGLWidget(*a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_Qt_WindowFlags,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGLWidget[] = {{456, 2, 1}};


static PyMethodDef methods_QGLWidget[] = {
    {SIP_MLNAME_CAST(sipName_autoBufferSwap), meth_QGLWidget_autoBufferSwap, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_autoBufferSwap)},
    {SIP_MLNAME_CAST(sipName_bindTexture), (PyCFunction)meth_QGLWidget_bindTexture, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLWidget_bindTexture)},
    {SIP_MLNAME_CAST(sipName_context), meth_QGLWidget_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_context)},
    {SIP_MLNAME_CAST(sipName_convertToGLFormat), meth_QGLWidget_convertToGLFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_convertToGLFormat)},
    {SIP_MLNAME_CAST(sipName_deleteTexture), meth_QGLWidget_deleteTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_deleteTexture)},
    {SIP_MLNAME_CAST(sipName_doneCurrent), meth_QGLWidget_doneCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_doneCurrent)},
    {SIP_MLNAME_CAST(sipName_doubleBuffer), meth_QGLWidget_doubleBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_doubleBuffer)},
    {SIP_MLNAME_CAST(sipName_drawTexture), (PyCFunction)meth_QGLWidget_drawTexture, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLWidget_drawTexture)},
    {SIP_MLNAME_CAST(sipName_event), meth_QGLWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_event)},
    {SIP_MLNAME_CAST(sipName_format), meth_QGLWidget_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_format)},
    {SIP_MLNAME_CAST(sipName_glDraw), meth_QGLWidget_glDraw, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_glDraw)},
    {SIP_MLNAME_CAST(sipName_glInit), meth_QGLWidget_glInit, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_glInit)},
    {SIP_MLNAME_CAST(sipName_grabFrameBuffer), (PyCFunction)meth_QGLWidget_grabFrameBuffer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLWidget_grabFrameBuffer)},
    {SIP_MLNAME_CAST(sipName_initializeGL), meth_QGLWidget_initializeGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_initializeGL)},
    {SIP_MLNAME_CAST(sipName_initializeOverlayGL), meth_QGLWidget_initializeOverlayGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_initializeOverlayGL)},
    {SIP_MLNAME_CAST(sipName_isSharing), meth_QGLWidget_isSharing, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_isSharing)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QGLWidget_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_isValid)},
    {SIP_MLNAME_CAST(sipName_makeCurrent), meth_QGLWidget_makeCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_makeCurrent)},
    {SIP_MLNAME_CAST(sipName_makeOverlayCurrent), meth_QGLWidget_makeOverlayCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_makeOverlayCurrent)},
    {SIP_MLNAME_CAST(sipName_overlayContext), meth_QGLWidget_overlayContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_overlayContext)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QGLWidget_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_paintEngine)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QGLWidget_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paintGL), meth_QGLWidget_paintGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_paintGL)},
    {SIP_MLNAME_CAST(sipName_paintOverlayGL), meth_QGLWidget_paintOverlayGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_paintOverlayGL)},
    {SIP_MLNAME_CAST(sipName_qglClearColor), meth_QGLWidget_qglClearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_qglClearColor)},
    {SIP_MLNAME_CAST(sipName_qglColor), meth_QGLWidget_qglColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_qglColor)},
    {SIP_MLNAME_CAST(sipName_renderPixmap), (PyCFunction)meth_QGLWidget_renderPixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLWidget_renderPixmap)},
    {SIP_MLNAME_CAST(sipName_renderText), (PyCFunction)meth_QGLWidget_renderText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLWidget_renderText)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QGLWidget_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeGL), meth_QGLWidget_resizeGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_resizeGL)},
    {SIP_MLNAME_CAST(sipName_resizeOverlayGL), meth_QGLWidget_resizeOverlayGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_resizeOverlayGL)},
    {SIP_MLNAME_CAST(sipName_setAutoBufferSwap), meth_QGLWidget_setAutoBufferSwap, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_setAutoBufferSwap)},
    {SIP_MLNAME_CAST(sipName_setContext), (PyCFunction)meth_QGLWidget_setContext, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLWidget_setContext)},
    {SIP_MLNAME_CAST(sipName_swapBuffers), meth_QGLWidget_swapBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_swapBuffers)},
    {SIP_MLNAME_CAST(sipName_updateGL), meth_QGLWidget_updateGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_updateGL)},
    {SIP_MLNAME_CAST(sipName_updateOverlayGL), meth_QGLWidget_updateOverlayGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLWidget_updateOverlayGL)}
};

PyDoc_STRVAR(doc_QGLWidget, "\1QGLWidget(parent: QWidget = None, shareWidget: QGLWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())\n"
    "QGLWidget(QGLContext, parent: QWidget = None, shareWidget: QGLWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())\n"
    "QGLWidget(QGLFormat, parent: QWidget = None, shareWidget: QGLWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())");


pyqt5ClassTypeDef sipTypeDef_QtOpenGL_QGLWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGLWidget,
        {0}
    },
    {
        sipNameNr_QGLWidget,
        {0, 0, 1},
        36, methods_QGLWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGLWidget,
    -1,
    -1,
    supers_QGLWidget,
    0,
    init_type_QGLWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGLWidget,
    0,
    0,
    0,
    release_QGLWidget,
    cast_QGLWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGLWidget::staticMetaObject,
    0,
    0,
    0
};
