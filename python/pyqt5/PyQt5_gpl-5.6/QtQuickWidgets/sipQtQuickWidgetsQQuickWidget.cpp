/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuickWidgets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuickWidgets/qquickwidget.sip"
#include <qquickwidget.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 59 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 549 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 598 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 571 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 587 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 366 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 453 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 442 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 345 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 491 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 654 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 287 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 464 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 420 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 394 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 380 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 252 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 255 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 258 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 261 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuickWidgets/sipQtQuickWidgetsQQuickWidget.cpp"


class sipQQuickWidget : public QQuickWidget
{
public:
    sipQQuickWidget(QWidget*);
    sipQQuickWidget(QQmlEngine*,QWidget*);
    sipQQuickWidget(const QUrl&,QWidget*);
    virtual ~sipQQuickWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    void setVisible(bool);
    int devType() const;
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    bool event(QEvent*);
    void wheelEvent(QWheelEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void timerEvent(QTimerEvent*);
    void resizeEvent(QResizeEvent*);
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickWidget(const sipQQuickWidget &);
    sipQQuickWidget &operator = (const sipQQuickWidget &);

    char sipPyMethods[46];
};

sipQQuickWidget::sipQQuickWidget(QWidget*a0): QQuickWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWidget::sipQQuickWidget(QQmlEngine*a0,QWidget*a1): QQuickWidget(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWidget::sipQQuickWidget(const QUrl& a0,QWidget*a1): QQuickWidget(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWidget::~sipQQuickWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQuickWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuickWidgets_qt_metaobject(sipPySelf,sipType_QQuickWidget);

    return QQuickWidget::metaObject();
}

int sipQQuickWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQuickWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuickWidgets_qt_metacall(sipPySelf,sipType_QQuickWidget,_c,_id,_a);

    return _id;
}

void *sipQQuickWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuickWidgets_qt_metacast(sipPySelf, sipType_QQuickWidget, _clname, &sipCpp) ? sipCpp : QQuickWidget::qt_metacast(_clname));
}

void sipQQuickWidget::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQuickWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQuickWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQuickWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQuickWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQuickWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickWidget::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QQuickWidget::initPainter(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    ((sipVH_QtWidgets_3)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQQuickWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QQuickWidget::sharedPainter();

    typedef QPainter* (*sipVH_QtWidgets_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtWidgets_4)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickWidget::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QQuickWidget::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQQuickWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QQuickWidget::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QQuickWidget::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtWidgets_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return ((sipVH_QtWidgets_5)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQQuickWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QQuickWidget::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtWidgets_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return ((sipVH_QtWidgets_6)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QQuickWidget::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    ((sipVH_QtWidgets_7)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQQuickWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QQuickWidget::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QQuickWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QQuickWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    ((sipVH_QtWidgets_12)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QQuickWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QQuickWidget::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    ((sipVH_QtWidgets_13)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[13]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QQuickWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    ((sipVH_QtWidgets_14)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[14]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QQuickWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QQuickWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QQuickWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QQuickWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQQuickWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QQuickWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQQuickWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QQuickWidget::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQQuickWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QQuickWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QQuickWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_0)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQQuickWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QQuickWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QQuickWidget::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    ((sipVH_QtWidgets_8)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QQuickWidget::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    ((sipVH_QtWidgets_9)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QQuickWidget::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    ((sipVH_QtWidgets_10)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[10]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QQuickWidget::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    ((sipVH_QtWidgets_11)(sipModuleAPI_QtQuickWidgets_QtWidgets->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QQuickWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QQuickWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQuickWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QQuickWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QQuickWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QQuickWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QQuickWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QQuickWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QQuickWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QQuickWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QQuickWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QQuickWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQuickWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuickWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QQuickWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQQuickWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QQuickWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtQuickWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtQuickWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QQuickWidget_source, "source(self) -> QUrl");

extern "C" {static PyObject *meth_QQuickWidget_source(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->source());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_source, doc_QQuickWidget_source);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_engine, "engine(self) -> QQmlEngine");

extern "C" {static PyObject *meth_QQuickWidget_engine(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_engine, doc_QQuickWidget_engine);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_rootContext, "rootContext(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQuickWidget_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QQmlContext*sipRes;

            sipRes = sipCpp->rootContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_rootContext, doc_QQuickWidget_rootContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_rootObject, "rootObject(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWidget_rootObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_rootObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->rootObject();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_rootObject, doc_QQuickWidget_rootObject);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_resizeMode, "resizeMode(self) -> QQuickWidget.ResizeMode");

extern "C" {static PyObject *meth_QQuickWidget_resizeMode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_resizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QQuickWidget::ResizeMode sipRes;

            sipRes = sipCpp->resizeMode();

            return sipConvertFromEnum(sipRes,sipType_QQuickWidget_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_resizeMode, doc_QQuickWidget_resizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_setResizeMode, "setResizeMode(self, QQuickWidget.ResizeMode)");

extern "C" {static PyObject *meth_QQuickWidget_setResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWidget::ResizeMode a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QQuickWidget_ResizeMode, &a0))
        {
            sipCpp->setResizeMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setResizeMode, doc_QQuickWidget_setResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_status, "status(self) -> QQuickWidget.Status");

extern "C" {static PyObject *meth_QQuickWidget_status(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QQuickWidget::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_QQuickWidget_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_status, doc_QQuickWidget_status);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_errors, "errors(self) -> List[QQmlError]");

extern "C" {static PyObject *meth_QQuickWidget_errors(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QList<QQmlError>*sipRes;

            sipRes = new QList<QQmlError>(sipCpp->errors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QQmlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_errors, doc_QQuickWidget_errors);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QQuickWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QQuickWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_sizeHint, doc_QQuickWidget_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_initialSize, "initialSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickWidget_initialSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_initialSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->initialSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_initialSize, doc_QQuickWidget_initialSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QQuickWidget_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setFormat, doc_QQuickWidget_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QQuickWidget_format(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QSurfaceFormat*sipRes;

            sipRes = new QSurfaceFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_format, doc_QQuickWidget_format);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_setSource, "setSource(self, QUrl)");

extern "C" {static PyObject *meth_QQuickWidget_setSource(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setSource(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setSource, doc_QQuickWidget_setSource);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QQuickWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_resizeEvent, doc_QQuickWidget_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QQuickWidget_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_timerEvent, doc_QQuickWidget_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_keyPressEvent, doc_QQuickWidget_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWidget_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_keyReleaseEvent, doc_QQuickWidget_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mousePressEvent, doc_QQuickWidget_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mouseReleaseEvent, doc_QQuickWidget_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mouseMoveEvent, doc_QQuickWidget_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mouseDoubleClickEvent, doc_QQuickWidget_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QQuickWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_showEvent, doc_QQuickWidget_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QQuickWidget_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_hideEvent, doc_QQuickWidget_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QQuickWidget_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_wheelEvent, doc_QQuickWidget_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_event, doc_QQuickWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWidget_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_focusInEvent, doc_QQuickWidget_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWidget_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_focusOutEvent, doc_QQuickWidget_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dragEnterEvent, doc_QQuickWidget_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dragMoveEvent, doc_QQuickWidget_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dragLeaveEvent, doc_QQuickWidget_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWidget::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dropEvent, doc_QQuickWidget_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_grabFramebuffer, "grabFramebuffer(self) -> QImage");

extern "C" {static PyObject *meth_QQuickWidget_grabFramebuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_grabFramebuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->grabFramebuffer());

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_grabFramebuffer, doc_QQuickWidget_grabFramebuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_setClearColor, "setClearColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QQuickWidget_setClearColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setClearColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setClearColor, doc_QQuickWidget_setClearColor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWidget_quickWindow, "quickWindow(self) -> QQuickWindow");

extern "C" {static PyObject *meth_QQuickWidget_quickWindow(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_quickWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QQuickWindow*sipRes;

            sipRes = sipCpp->quickWindow();

            return sipConvertFromType(sipRes,sipType_QQuickWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_quickWindow, doc_QQuickWidget_quickWindow);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QQuickWidget(void *, const sipTypeDef *);}
static void *cast_QQuickWidget(void *sipCppV, const sipTypeDef *targetType)
{
    QQuickWidget *sipCpp = reinterpret_cast<QQuickWidget *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWidget(void *, int);}
static void release_QQuickWidget(void *sipCppV,int)
{
    QQuickWidget *sipCpp = reinterpret_cast<QQuickWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickWidget(sipSimpleWrapper *);}
static void dealloc_QQuickWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQuickWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQuickWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQuickWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQQuickWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QQmlEngine* a0;
        QWidget* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8JH", sipType_QQmlEngine, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQQuickWidget(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QUrl* a0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QUrl, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQQuickWidget(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickWidget[] = {{456, 2, 1}};


static PyMethodDef methods_QQuickWidget[] = {
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QQuickWidget_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QQuickWidget_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QQuickWidget_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QQuickWidget_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dropEvent)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QQuickWidget_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_engine)},
    {SIP_MLNAME_CAST(sipName_errors), meth_QQuickWidget_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_errors)},
    {SIP_MLNAME_CAST(sipName_event), meth_QQuickWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QQuickWidget_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QQuickWidget_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_format), meth_QQuickWidget_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_format)},
    {SIP_MLNAME_CAST(sipName_grabFramebuffer), meth_QQuickWidget_grabFramebuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_grabFramebuffer)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QQuickWidget_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_hideEvent)},
    {SIP_MLNAME_CAST(sipName_initialSize), meth_QQuickWidget_initialSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_initialSize)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QQuickWidget_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QQuickWidget_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QQuickWidget_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QQuickWidget_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QQuickWidget_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QQuickWidget_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_quickWindow), meth_QQuickWidget_quickWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_quickWindow)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QQuickWidget_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeMode), meth_QQuickWidget_resizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_resizeMode)},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QQuickWidget_rootContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_rootContext)},
    {SIP_MLNAME_CAST(sipName_rootObject), meth_QQuickWidget_rootObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_rootObject)},
    {SIP_MLNAME_CAST(sipName_setClearColor), meth_QQuickWidget_setClearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setClearColor)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QQuickWidget_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setFormat)},
    {SIP_MLNAME_CAST(sipName_setResizeMode), meth_QQuickWidget_setResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setResizeMode)},
    {SIP_MLNAME_CAST(sipName_setSource), meth_QQuickWidget_setSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setSource)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QQuickWidget_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QQuickWidget_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_sizeHint)},
    {SIP_MLNAME_CAST(sipName_source), meth_QQuickWidget_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_source)},
    {SIP_MLNAME_CAST(sipName_status), meth_QQuickWidget_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_status)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QQuickWidget_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_timerEvent)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QQuickWidget_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_wheelEvent)}
};

static sipEnumMemberDef enummembers_QQuickWidget[] = {
    {sipName_Error, static_cast<int>(QQuickWidget::Error), 2},
    {sipName_Loading, static_cast<int>(QQuickWidget::Loading), 2},
    {sipName_Null, static_cast<int>(QQuickWidget::Null), 2},
    {sipName_Ready, static_cast<int>(QQuickWidget::Ready), 2},
    {sipName_SizeRootObjectToView, static_cast<int>(QQuickWidget::SizeRootObjectToView), 1},
    {sipName_SizeViewToRootObject, static_cast<int>(QQuickWidget::SizeViewToRootObject), 1},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickWidget[] = {
    {"sceneGraphError(QQuickWindow::SceneGraphError,QString)", "\1sceneGraphError(self, QQuickWindow.SceneGraphError, str)", 0, 0},
    {"statusChanged(QQuickWidget::Status)", "\1statusChanged(self, QQuickWidget.Status)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQuickWidget, "\1QQuickWidget(parent: QWidget = None)\n"
    "QQuickWidget(QQmlEngine, QWidget)\n"
    "QQuickWidget(QUrl, parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtQuickWidgets_QQuickWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuickWidget,
        {0}
    },
    {
        sipNameNr_QQuickWidget,
        {0, 0, 1},
        34, methods_QQuickWidget,
        6, enummembers_QQuickWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickWidget,
    -1,
    -1,
    supers_QQuickWidget,
    0,
    init_type_QQuickWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickWidget,
    0,
    0,
    0,
    release_QQuickWidget,
    cast_QQuickWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQuickWidget::staticMetaObject,
    0,
    signals_QQuickWidget,
    0
};
