/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"

#line 161 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgsimpletexturenode.sip"
#include <qsgsimpletexturenode.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQSGSimpleTextureNode.cpp"


class sipQSGSimpleTextureNode : public QSGSimpleTextureNode
{
public:
    sipQSGSimpleTextureNode();
    virtual ~sipQSGSimpleTextureNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void preprocess();
    bool isSubtreeBlocked() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGSimpleTextureNode(const sipQSGSimpleTextureNode &);
    sipQSGSimpleTextureNode &operator = (const sipQSGSimpleTextureNode &);

    char sipPyMethods[2];
};

sipQSGSimpleTextureNode::sipQSGSimpleTextureNode(): QSGSimpleTextureNode(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGSimpleTextureNode::~sipQSGSimpleTextureNode()
{
    sipCommonDtor(sipPySelf);
}

void sipQSGSimpleTextureNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_preprocess);

    if (!sipMeth)
    {
        QSGSimpleTextureNode::preprocess();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSGSimpleTextureNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return QSGSimpleTextureNode::isSubtreeBlocked();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setRect, "setRect(self, QRectF)\n"
    "setRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setRect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setRect, doc_QSGSimpleTextureNode_setRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_rect, "rect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_rect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_rect, doc_QSGSimpleTextureNode_rect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setTexture, "setTexture(self, QSGTexture)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGTexture* a0;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QSGTexture, &a0))
        {
            sipCpp->setTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setTexture, doc_QSGSimpleTextureNode_setTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_texture, "texture(self) -> QSGTexture");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_texture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->texture();

            return sipConvertFromType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_texture, doc_QSGSimpleTextureNode_texture);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setFiltering, "setFiltering(self, QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGTexture::Filtering a0;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setFiltering, doc_QSGSimpleTextureNode_setFiltering);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_filtering, "filtering(self) -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_filtering(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_filtering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
            QSGTexture::Filtering sipRes;

            sipRes = sipCpp->filtering();

            return sipConvertFromEnum(sipRes,sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_filtering, doc_QSGSimpleTextureNode_filtering);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setTextureCoordinatesTransform, "setTextureCoordinatesTransform(self, QSGSimpleTextureNode.TextureCoordinatesTransformMode)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setTextureCoordinatesTransform(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setTextureCoordinatesTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGSimpleTextureNode::TextureCoordinatesTransformMode* a0;
        int a0State = 0;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode, &a0, &a0State))
        {
            sipCpp->setTextureCoordinatesTransform(*a0);
            sipReleaseType(a0,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setTextureCoordinatesTransform, doc_QSGSimpleTextureNode_setTextureCoordinatesTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_textureCoordinatesTransform, "textureCoordinatesTransform(self) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_textureCoordinatesTransform(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_textureCoordinatesTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
            QSGSimpleTextureNode::TextureCoordinatesTransformMode*sipRes;

            sipRes = new QSGSimpleTextureNode::TextureCoordinatesTransformMode(sipCpp->textureCoordinatesTransform());

            return sipConvertFromNewType(sipRes,sipType_QSGSimpleTextureNode_TextureCoordinatesTransformMode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_textureCoordinatesTransform, doc_QSGSimpleTextureNode_textureCoordinatesTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setOwnsTexture, "setOwnsTexture(self, bool)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setOwnsTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setOwnsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, &a0))
        {
            sipCpp->setOwnsTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setOwnsTexture, doc_QSGSimpleTextureNode_setOwnsTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_ownsTexture, "ownsTexture(self) -> bool");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_ownsTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_ownsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ownsTexture();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_ownsTexture, doc_QSGSimpleTextureNode_ownsTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_setSourceRect, "setSourceRect(self, QRectF)\n"
    "setSourceRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_setSourceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_setSourceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setSourceRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setSourceRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_setSourceRect, doc_QSGSimpleTextureNode_setSourceRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGSimpleTextureNode_sourceRect, "sourceRect(self) -> QRectF");

extern "C" {static PyObject *meth_QSGSimpleTextureNode_sourceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGSimpleTextureNode_sourceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGSimpleTextureNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGSimpleTextureNode, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->sourceRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGSimpleTextureNode, sipName_sourceRect, doc_QSGSimpleTextureNode_sourceRect);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGSimpleTextureNode(void *, int);}
static void release_QSGSimpleTextureNode(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGSimpleTextureNode *>(sipCppV);
    else
        delete reinterpret_cast<QSGSimpleTextureNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGSimpleTextureNode(sipSimpleWrapper *);}
static void dealloc_QSGSimpleTextureNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSGSimpleTextureNode *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSGSimpleTextureNode(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSGSimpleTextureNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGSimpleTextureNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGSimpleTextureNode *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQSGSimpleTextureNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGSimpleTextureNode[] = {{47, 255, 1}};


static PyMethodDef methods_QSGSimpleTextureNode[] = {
    {SIP_MLNAME_CAST(sipName_filtering), meth_QSGSimpleTextureNode_filtering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_filtering)},
    {SIP_MLNAME_CAST(sipName_ownsTexture), meth_QSGSimpleTextureNode_ownsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_ownsTexture)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QSGSimpleTextureNode_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_rect)},
    {SIP_MLNAME_CAST(sipName_setFiltering), meth_QSGSimpleTextureNode_setFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setFiltering)},
    {SIP_MLNAME_CAST(sipName_setOwnsTexture), meth_QSGSimpleTextureNode_setOwnsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setOwnsTexture)},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QSGSimpleTextureNode_setRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setRect)},
    {SIP_MLNAME_CAST(sipName_setSourceRect), meth_QSGSimpleTextureNode_setSourceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setSourceRect)},
    {SIP_MLNAME_CAST(sipName_setTexture), meth_QSGSimpleTextureNode_setTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setTexture)},
    {SIP_MLNAME_CAST(sipName_setTextureCoordinatesTransform), meth_QSGSimpleTextureNode_setTextureCoordinatesTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_setTextureCoordinatesTransform)},
    {SIP_MLNAME_CAST(sipName_sourceRect), meth_QSGSimpleTextureNode_sourceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_sourceRect)},
    {SIP_MLNAME_CAST(sipName_texture), meth_QSGSimpleTextureNode_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_texture)},
    {SIP_MLNAME_CAST(sipName_textureCoordinatesTransform), meth_QSGSimpleTextureNode_textureCoordinatesTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGSimpleTextureNode_textureCoordinatesTransform)}
};

static sipEnumMemberDef enummembers_QSGSimpleTextureNode[] = {
    {sipName_MirrorHorizontally, static_cast<int>(QSGSimpleTextureNode::MirrorHorizontally), 66},
    {sipName_MirrorVertically, static_cast<int>(QSGSimpleTextureNode::MirrorVertically), 66},
    {sipName_NoTransform, static_cast<int>(QSGSimpleTextureNode::NoTransform), 66},
};

PyDoc_STRVAR(doc_QSGSimpleTextureNode, "\1QSGSimpleTextureNode()");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QSGSimpleTextureNode = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSGSimpleTextureNode,
        {0}
    },
    {
        sipNameNr_QSGSimpleTextureNode,
        {0, 0, 1},
        12, methods_QSGSimpleTextureNode,
        3, enummembers_QSGSimpleTextureNode,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSGSimpleTextureNode,
    -1,
    -1,
    supers_QSGSimpleTextureNode,
    0,
    init_type_QSGSimpleTextureNode,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGSimpleTextureNode,
    0,
    0,
    0,
    release_QSGSimpleTextureNode,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
