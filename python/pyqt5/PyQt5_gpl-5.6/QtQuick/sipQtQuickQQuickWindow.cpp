/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"

#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qrunnable.sip"
#include <qrunnable.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 46 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 345 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 366 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 453 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 442 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 762 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 69 "sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 28 "sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 287 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 705 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 394 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQuick/sipQtQuickQQuickWindow.cpp"


class sipQQuickWindow : public QQuickWindow
{
public:
    sipQQuickWindow(QWindow*);
    virtual ~sipQQuickWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void tabletEvent(QTabletEvent*);
    void touchEvent(QTouchEvent*);
    void moveEvent(QMoveEvent*);
    QSize size() const;
    QSurfaceFormat format() const;
    QSurface::SurfaceType surfaceType() const;
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    bool event(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void resizeEvent(QResizeEvent*);
    void exposeEvent(QExposeEvent*);
    QObject* focusObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickWindow(const sipQQuickWindow &);
    sipQQuickWindow &operator = (const sipQQuickWindow &);

    char sipPyMethods[27];
};

sipQQuickWindow::sipQQuickWindow(QWindow*a0): QQuickWindow(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWindow::~sipQQuickWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQuickWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickWindow);

    return QQuickWindow::metaObject();
}

int sipQQuickWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQuickWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickWindow,_c,_id,_a);

    return _id;
}

void *sipQQuickWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickWindow, _clname, &sipCpp) ? sipCpp : QQuickWindow::qt_metacast(_clname));
}

void sipQQuickWindow::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQuickWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQuickWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQuickWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQuickWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQuickWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQuickWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QQuickWindow::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QQuickWindow::touchEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[1]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QQuickWindow::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQQuickWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QQuickWindow::size();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurfaceFormat sipQQuickWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_format);

    if (!sipMeth)
        return QQuickWindow::format();

    typedef QSurfaceFormat (*sipVH_QtGui_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_13)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[13]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurface::SurfaceType sipQQuickWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_surfaceType);

    if (!sipMeth)
        return QQuickWindow::surfaceType();

    typedef QSurface::SurfaceType (*sipVH_QtGui_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_14)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[14]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QQuickWindow::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QQuickWindow::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QQuickWindow::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QQuickWindow::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QQuickWindow::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QQuickWindow::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QQuickWindow::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQuickWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QQuickWindow::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QQuickWindow::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QQuickWindow::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QQuickWindow::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QQuickWindow::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::exposeEvent(QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_exposeEvent);

    if (!sipMeth)
    {
        QQuickWindow::exposeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QExposeEvent*);

    ((sipVH_QtGui_10)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[10]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQQuickWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_focusObject);

    if (!sipMeth)
        return QQuickWindow::focusObject();

    typedef QObject* (*sipVH_QtGui_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_11)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QQuickWindow_contentItem, "contentItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_contentItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_contentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->contentItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_contentItem, doc_QQuickWindow_contentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_activeFocusItem, "activeFocusItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_activeFocusItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_activeFocusItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->activeFocusItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_activeFocusItem, doc_QQuickWindow_activeFocusItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_focusObject, "focusObject(self) -> QObject");

extern "C" {static PyObject *meth_QQuickWindow_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickWindow::focusObject() : sipCpp->focusObject());

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusObject, doc_QQuickWindow_focusObject);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseGrabberItem, "mouseGrabberItem(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_mouseGrabberItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseGrabberItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->mouseGrabberItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseGrabberItem, doc_QQuickWindow_mouseGrabberItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_sendEvent, "sendEvent(self, QQuickItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem* a0;
        QEvent* a1;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QQuickItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sendEvent(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_sendEvent, doc_QQuickWindow_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_grabWindow, "grabWindow(self) -> QImage");

extern "C" {static PyObject *meth_QQuickWindow_grabWindow(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_grabWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->grabWindow());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_grabWindow, doc_QQuickWindow_grabWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setRenderTarget, "setRenderTarget(self, QOpenGLFramebufferObject)\n"
    "setRenderTarget(self, int, QSize)");

extern "C" {static PyObject *meth_QQuickWindow_setRenderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setRenderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFramebufferObject* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QOpenGLFramebufferObject, &a0))
        {
            sipCpp->setRenderTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        uint a0;
        const QSize* a1;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setRenderTarget(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setRenderTarget, doc_QQuickWindow_setRenderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTarget, "renderTarget(self) -> QOpenGLFramebufferObject");

extern "C" {static PyObject *meth_QQuickWindow_renderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QOpenGLFramebufferObject*sipRes;

            sipRes = sipCpp->renderTarget();

            return sipConvertFromType(sipRes,sipType_QOpenGLFramebufferObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTarget, doc_QQuickWindow_renderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTargetId, "renderTargetId(self) -> int");

extern "C" {static PyObject *meth_QQuickWindow_renderTargetId(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTargetId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->renderTargetId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTargetId, doc_QQuickWindow_renderTargetId);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTargetSize, "renderTargetSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickWindow_renderTargetSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTargetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->renderTargetSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTargetSize, doc_QQuickWindow_renderTargetSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_incubationController, "incubationController(self) -> QQmlIncubationController");

extern "C" {static PyObject *meth_QQuickWindow_incubationController(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_incubationController(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQmlIncubationController*sipRes;

            sipRes = sipCpp->incubationController();

            return sipConvertFromType(sipRes,sipType_QQmlIncubationController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_incubationController, doc_QQuickWindow_incubationController);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_createTextureFromImage, "createTextureFromImage(self, QImage) -> QSGTexture\n"
    "createTextureFromImage(self, QImage, Union[QQuickWindow.CreateTextureOptions, QQuickWindow.CreateTextureOption]) -> QSGTexture");

extern "C" {static PyObject *meth_QQuickWindow_createTextureFromImage(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createTextureFromImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QImage, &a0))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    {
        const QImage* a0;
        QQuickWindow::CreateTextureOptions* a1;
        int a1State = 0;
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QImage, &a0, sipType_QQuickWindow_CreateTextureOptions, &a1, &a1State))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0,*a1);
            sipReleaseType(a1,sipType_QQuickWindow_CreateTextureOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createTextureFromImage, doc_QQuickWindow_createTextureFromImage);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_createTextureFromId, "createTextureFromId(self, int, QSize, options: Union[QQuickWindow.CreateTextureOptions, QQuickWindow.CreateTextureOption] = QQuickWindow.CreateTextureOption(0)) -> QSGTexture");

extern "C" {static PyObject *meth_QQuickWindow_createTextureFromId(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createTextureFromId(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        const QSize* a1;
        QQuickWindow::CreateTextureOptions a2def = QQuickWindow::CreateTextureOption(0);
        QQuickWindow::CreateTextureOptions* a2 = &a2def;
        int a2State = 0;
        const QQuickWindow *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ9|J1", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0, sipType_QSize, &a1, sipType_QQuickWindow_CreateTextureOptions, &a2, &a2State))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromId(a0,*a1,*a2);
            sipReleaseType(a2,sipType_QQuickWindow_CreateTextureOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createTextureFromId, doc_QQuickWindow_createTextureFromId);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setClearBeforeRendering, "setClearBeforeRendering(self, bool)");

extern "C" {static PyObject *meth_QQuickWindow_setClearBeforeRendering(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setClearBeforeRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setClearBeforeRendering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setClearBeforeRendering, doc_QQuickWindow_setClearBeforeRendering);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_clearBeforeRendering, "clearBeforeRendering(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_clearBeforeRendering(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_clearBeforeRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->clearBeforeRendering();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_clearBeforeRendering, doc_QQuickWindow_clearBeforeRendering);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setColor, "setColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QQuickWindow_setColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setColor, doc_QQuickWindow_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_color, "color(self) -> QColor");

extern "C" {static PyObject *meth_QQuickWindow_color(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_color, doc_QQuickWindow_color);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setPersistentOpenGLContext, "setPersistentOpenGLContext(self, bool)");

extern "C" {static PyObject *meth_QQuickWindow_setPersistentOpenGLContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setPersistentOpenGLContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setPersistentOpenGLContext(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setPersistentOpenGLContext, doc_QQuickWindow_setPersistentOpenGLContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_isPersistentOpenGLContext, "isPersistentOpenGLContext(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isPersistentOpenGLContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isPersistentOpenGLContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPersistentOpenGLContext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isPersistentOpenGLContext, doc_QQuickWindow_isPersistentOpenGLContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setPersistentSceneGraph, "setPersistentSceneGraph(self, bool)");

extern "C" {static PyObject *meth_QQuickWindow_setPersistentSceneGraph(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setPersistentSceneGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setPersistentSceneGraph(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setPersistentSceneGraph, doc_QQuickWindow_setPersistentSceneGraph);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_isPersistentSceneGraph, "isPersistentSceneGraph(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isPersistentSceneGraph(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isPersistentSceneGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPersistentSceneGraph();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isPersistentSceneGraph, doc_QQuickWindow_isPersistentSceneGraph);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_openglContext, "openglContext(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QQuickWindow_openglContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_openglContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QOpenGLContext*sipRes;

            sipRes = sipCpp->openglContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_openglContext, doc_QQuickWindow_openglContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_update, "update(self)");

extern "C" {static PyObject *meth_QQuickWindow_update(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_update, doc_QQuickWindow_update);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QQuickWindow_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->releaseResources();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_releaseResources, doc_QQuickWindow_releaseResources);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_exposeEvent, "exposeEvent(self, QExposeEvent)");

extern "C" {static PyObject *meth_QQuickWindow_exposeEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QExposeEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::exposeEvent(a0) : sipCpp->exposeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_exposeEvent, doc_QQuickWindow_exposeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QQuickWindow_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_resizeEvent, doc_QQuickWindow_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QQuickWindow_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_showEvent, doc_QQuickWindow_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QQuickWindow_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_hideEvent, doc_QQuickWindow_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWindow_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusInEvent, doc_QQuickWindow_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWindow_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusOutEvent, doc_QQuickWindow_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickWindow::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_event, doc_QQuickWindow_event);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWindow_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_keyPressEvent, doc_QQuickWindow_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWindow_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_keyReleaseEvent, doc_QQuickWindow_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mousePressEvent, doc_QQuickWindow_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseReleaseEvent, doc_QQuickWindow_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseDoubleClickEvent, doc_QQuickWindow_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseMoveEvent, doc_QQuickWindow_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QQuickWindow_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QQuickWindow::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_wheelEvent, doc_QQuickWindow_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_hasDefaultAlphaBuffer, "hasDefaultAlphaBuffer() -> bool");

extern "C" {static PyObject *meth_QQuickWindow_hasDefaultAlphaBuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_hasDefaultAlphaBuffer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QQuickWindow::hasDefaultAlphaBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_hasDefaultAlphaBuffer, doc_QQuickWindow_hasDefaultAlphaBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setDefaultAlphaBuffer, "setDefaultAlphaBuffer(bool)");

extern "C" {static PyObject *meth_QQuickWindow_setDefaultAlphaBuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setDefaultAlphaBuffer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            QQuickWindow::setDefaultAlphaBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setDefaultAlphaBuffer, doc_QQuickWindow_setDefaultAlphaBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_resetOpenGLState, "resetOpenGLState(self)");

extern "C" {static PyObject *meth_QQuickWindow_resetOpenGLState(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_resetOpenGLState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->resetOpenGLState();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_resetOpenGLState, doc_QQuickWindow_resetOpenGLState);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_scheduleRenderJob, "scheduleRenderJob(self, QRunnable, QQuickWindow.RenderStage)");

extern "C" {static PyObject *meth_QQuickWindow_scheduleRenderJob(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_scheduleRenderJob(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRunnable* a0;
        QQuickWindow::RenderStage a1;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:E", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QRunnable, &a0, sipType_QQuickWindow_RenderStage, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scheduleRenderJob(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_scheduleRenderJob, doc_QQuickWindow_scheduleRenderJob);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_effectiveDevicePixelRatio, "effectiveDevicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QQuickWindow_effectiveDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_effectiveDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->effectiveDevicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_effectiveDevicePixelRatio, doc_QQuickWindow_effectiveDevicePixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_isSceneGraphInitialized, "isSceneGraphInitialized(self) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isSceneGraphInitialized(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isSceneGraphInitialized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSceneGraphInitialized();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isSceneGraphInitialized, doc_QQuickWindow_isSceneGraphInitialized);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QQuickWindow(void *, const sipTypeDef *);}
static void *cast_QQuickWindow(void *sipCppV, const sipTypeDef *targetType)
{
    QQuickWindow *sipCpp = reinterpret_cast<QQuickWindow *>(sipCppV);

    if (targetType == sipType_QSurface)
        return static_cast<QSurface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWindow(void *, int);}
static void release_QQuickWindow(void *sipCppV,int)
{
    QQuickWindow *sipCpp = reinterpret_cast<QQuickWindow *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QQuickWindow(sipSimpleWrapper *);}
static void dealloc_QQuickWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQuickWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQuickWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQuickWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickWindow *sipCpp = 0;

    {
        QWindow* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQQuickWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickWindow[] = {{370, 3, 1}};


static PyMethodDef methods_QQuickWindow[] = {
    {SIP_MLNAME_CAST(sipName_activeFocusItem), meth_QQuickWindow_activeFocusItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_activeFocusItem)},
    {SIP_MLNAME_CAST(sipName_clearBeforeRendering), meth_QQuickWindow_clearBeforeRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_clearBeforeRendering)},
    {SIP_MLNAME_CAST(sipName_color), meth_QQuickWindow_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_color)},
    {SIP_MLNAME_CAST(sipName_contentItem), meth_QQuickWindow_contentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_contentItem)},
    {SIP_MLNAME_CAST(sipName_createTextureFromId), (PyCFunction)meth_QQuickWindow_createTextureFromId, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_createTextureFromId)},
    {SIP_MLNAME_CAST(sipName_createTextureFromImage), meth_QQuickWindow_createTextureFromImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_createTextureFromImage)},
    {SIP_MLNAME_CAST(sipName_effectiveDevicePixelRatio), meth_QQuickWindow_effectiveDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_effectiveDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_event), meth_QQuickWindow_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_event)},
    {SIP_MLNAME_CAST(sipName_exposeEvent), meth_QQuickWindow_exposeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_exposeEvent)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QQuickWindow_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusObject), meth_QQuickWindow_focusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_focusObject)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QQuickWindow_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_grabWindow), meth_QQuickWindow_grabWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_grabWindow)},
    {SIP_MLNAME_CAST(sipName_hasDefaultAlphaBuffer), meth_QQuickWindow_hasDefaultAlphaBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_hasDefaultAlphaBuffer)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QQuickWindow_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_hideEvent)},
    {SIP_MLNAME_CAST(sipName_incubationController), meth_QQuickWindow_incubationController, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_incubationController)},
    {SIP_MLNAME_CAST(sipName_isPersistentOpenGLContext), meth_QQuickWindow_isPersistentOpenGLContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isPersistentOpenGLContext)},
    {SIP_MLNAME_CAST(sipName_isPersistentSceneGraph), meth_QQuickWindow_isPersistentSceneGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isPersistentSceneGraph)},
    {SIP_MLNAME_CAST(sipName_isSceneGraphInitialized), meth_QQuickWindow_isSceneGraphInitialized, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isSceneGraphInitialized)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QQuickWindow_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QQuickWindow_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QQuickWindow_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseGrabberItem), meth_QQuickWindow_mouseGrabberItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseGrabberItem)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QQuickWindow_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QQuickWindow_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QQuickWindow_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_openglContext), meth_QQuickWindow_openglContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_openglContext)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickWindow_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_releaseResources)},
    {SIP_MLNAME_CAST(sipName_renderTarget), meth_QQuickWindow_renderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTarget)},
    {SIP_MLNAME_CAST(sipName_renderTargetId), meth_QQuickWindow_renderTargetId, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTargetId)},
    {SIP_MLNAME_CAST(sipName_renderTargetSize), meth_QQuickWindow_renderTargetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTargetSize)},
    {SIP_MLNAME_CAST(sipName_resetOpenGLState), meth_QQuickWindow_resetOpenGLState, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_resetOpenGLState)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QQuickWindow_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_scheduleRenderJob), meth_QQuickWindow_scheduleRenderJob, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_scheduleRenderJob)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QQuickWindow_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_sendEvent)},
    {SIP_MLNAME_CAST(sipName_setClearBeforeRendering), meth_QQuickWindow_setClearBeforeRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setClearBeforeRendering)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QQuickWindow_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setColor)},
    {SIP_MLNAME_CAST(sipName_setDefaultAlphaBuffer), meth_QQuickWindow_setDefaultAlphaBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setDefaultAlphaBuffer)},
    {SIP_MLNAME_CAST(sipName_setPersistentOpenGLContext), meth_QQuickWindow_setPersistentOpenGLContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setPersistentOpenGLContext)},
    {SIP_MLNAME_CAST(sipName_setPersistentSceneGraph), meth_QQuickWindow_setPersistentSceneGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setPersistentSceneGraph)},
    {SIP_MLNAME_CAST(sipName_setRenderTarget), meth_QQuickWindow_setRenderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setRenderTarget)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QQuickWindow_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_showEvent)},
    {SIP_MLNAME_CAST(sipName_update), meth_QQuickWindow_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_update)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QQuickWindow_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_wheelEvent)}
};

static sipEnumMemberDef enummembers_QQuickWindow[] = {
    {sipName_AfterRenderingStage, static_cast<int>(QQuickWindow::AfterRenderingStage), 28},
    {sipName_AfterSwapStage, static_cast<int>(QQuickWindow::AfterSwapStage), 28},
    {sipName_AfterSynchronizingStage, static_cast<int>(QQuickWindow::AfterSynchronizingStage), 28},
    {sipName_BeforeRenderingStage, static_cast<int>(QQuickWindow::BeforeRenderingStage), 28},
    {sipName_BeforeSynchronizingStage, static_cast<int>(QQuickWindow::BeforeSynchronizingStage), 28},
    {sipName_ContextNotAvailable, static_cast<int>(QQuickWindow::ContextNotAvailable), 29},
    {sipName_NoStage, static_cast<int>(QQuickWindow::NoStage), 28},
    {sipName_TextureCanUseAtlas, static_cast<int>(QQuickWindow::TextureCanUseAtlas), 26},
    {sipName_TextureHasAlphaChannel, static_cast<int>(QQuickWindow::TextureHasAlphaChannel), 26},
    {sipName_TextureHasMipmaps, static_cast<int>(QQuickWindow::TextureHasMipmaps), 26},
    {sipName_TextureIsOpaque, static_cast<int>(QQuickWindow::TextureIsOpaque), 26},
    {sipName_TextureOwnsGLTexture, static_cast<int>(QQuickWindow::TextureOwnsGLTexture), 26},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickWindow[] = {
    {"sceneGraphError(QQuickWindow::SceneGraphError,QString)", "\1sceneGraphError(self, QQuickWindow.SceneGraphError, str)", 0, 0},
    {"sceneGraphAboutToStop()", "\1sceneGraphAboutToStop(self)", 0, 0},
    {"afterAnimating()", "\1afterAnimating(self)", 0, 0},
    {"afterSynchronizing()", "\1afterSynchronizing(self)", 0, 0},
    {"openglContextCreated(QOpenGLContext*)", "\1openglContextCreated(self, QOpenGLContext)", 0, 0},
    {"activeFocusItemChanged()", "\1activeFocusItemChanged(self)", 0, 0},
    {"closing(QQuickCloseEvent*)", "\1closing(self, QQuickCloseEvent)", 0, 0},
    {"colorChanged(QColor)", "\1colorChanged(self, Union[QColor, Qt.GlobalColor])", 0, 0},
    {"afterRendering()", "\1afterRendering(self)", 0, 0},
    {"beforeRendering()", "\1beforeRendering(self)", 0, 0},
    {"beforeSynchronizing()", "\1beforeSynchronizing(self)", 0, 0},
    {"sceneGraphInvalidated()", "\1sceneGraphInvalidated(self)", 0, 0},
    {"sceneGraphInitialized()", "\1sceneGraphInitialized(self)", 0, 0},
    {"frameSwapped()", "\1frameSwapped(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQuickWindow, "\1QQuickWindow(parent: QWindow = None)");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QQuickWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuickWindow,
        {0}
    },
    {
        sipNameNr_QQuickWindow,
        {0, 0, 1},
        44, methods_QQuickWindow,
        12, enummembers_QQuickWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickWindow,
    -1,
    -1,
    supers_QQuickWindow,
    0,
    init_type_QQuickWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickWindow,
    0,
    0,
    0,
    release_QQuickWindow,
    cast_QQuickWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQuickWindow::staticMetaObject,
    0,
    signals_QQuickWindow,
    0
};
