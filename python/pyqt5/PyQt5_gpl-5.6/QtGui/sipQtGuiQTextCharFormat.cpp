/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 59 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 535 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 429 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 446 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 509 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 397 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 352 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtGui/sipQtGuiQTextCharFormat.cpp"


PyDoc_STRVAR(doc_QTextCharFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isValid, doc_QTextCharFormat_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFont, "setFont(self, QFont)\n"
    "setFont(self, QFont, QTextCharFormat.FontPropertiesInheritanceBehavior)");

extern "C" {static PyObject *meth_QTextCharFormat_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QFont* a0;
        QTextCharFormat::FontPropertiesInheritanceBehavior a1;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont, &a0, sipType_QTextCharFormat_FontPropertiesInheritanceBehavior, &a1))
        {
            sipCpp->setFont(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFont, doc_QTextCharFormat_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QTextCharFormat_font(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_font, doc_QTextCharFormat_font);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontFamily, "setFontFamily(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFontFamily(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFamily, doc_QTextCharFormat_setFontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontFamily, "fontFamily(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fontFamily());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFamily, doc_QTextCharFormat_fontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontPointSize, "setFontPointSize(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontPointSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontPointSize, doc_QTextCharFormat_setFontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontPointSize, "fontPointSize(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->fontPointSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontPointSize, doc_QTextCharFormat_fontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontWeight, "setFontWeight(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontWeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWeight, doc_QTextCharFormat_setFontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontWeight, "fontWeight(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontWeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWeight, doc_QTextCharFormat_fontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontItalic, "setFontItalic(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontItalic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontItalic, doc_QTextCharFormat_setFontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontItalic, "fontItalic(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontItalic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontItalic, doc_QTextCharFormat_fontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontUnderline, "setFontUnderline(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontUnderline, doc_QTextCharFormat_setFontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontUnderline, "fontUnderline(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontUnderline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontUnderline, doc_QTextCharFormat_fontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontOverline, "setFontOverline(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontOverline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontOverline, doc_QTextCharFormat_setFontOverline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontOverline, "fontOverline(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontOverline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontOverline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontOverline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontOverline, doc_QTextCharFormat_fontOverline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStrikeOut, "setFontStrikeOut(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontStrikeOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStrikeOut, doc_QTextCharFormat_setFontStrikeOut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStrikeOut, "fontStrikeOut(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStrikeOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontStrikeOut();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStrikeOut, doc_QTextCharFormat_fontStrikeOut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setUnderlineColor, "setUnderlineColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setUnderlineColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineColor, doc_QTextCharFormat_setUnderlineColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_underlineColor, "underlineColor(self) -> QColor");

extern "C" {static PyObject *meth_QTextCharFormat_underlineColor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->underlineColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineColor, doc_QTextCharFormat_underlineColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontFixedPitch, "setFontFixedPitch(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontFixedPitch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontFixedPitch, doc_QTextCharFormat_setFontFixedPitch);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontFixedPitch, "fontFixedPitch(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontFixedPitch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontFixedPitch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontFixedPitch, doc_QTextCharFormat_fontFixedPitch);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setVerticalAlignment, "setVerticalAlignment(self, QTextCharFormat.VerticalAlignment)");

extern "C" {static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setVerticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat::VerticalAlignment a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_VerticalAlignment, &a0))
        {
            sipCpp->setVerticalAlignment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setVerticalAlignment, doc_QTextCharFormat_setVerticalAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_verticalAlignment, "verticalAlignment(self) -> QTextCharFormat.VerticalAlignment");

extern "C" {static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_verticalAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QTextCharFormat::VerticalAlignment sipRes;

            sipRes = sipCpp->verticalAlignment();

            return sipConvertFromEnum(sipRes,sipType_QTextCharFormat_VerticalAlignment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_verticalAlignment, doc_QTextCharFormat_verticalAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchor, "setAnchor(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setAnchor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchor, doc_QTextCharFormat_setAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_isAnchor, "isAnchor(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_isAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_isAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnchor();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_isAnchor, doc_QTextCharFormat_isAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchorHref, "setAnchorHref(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAnchorHref(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorHref, doc_QTextCharFormat_setAnchorHref);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_anchorHref, "anchorHref(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_anchorHref(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorHref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->anchorHref());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorHref, doc_QTextCharFormat_anchorHref);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_tableCellRowSpan, "tableCellRowSpan(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tableCellRowSpan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellRowSpan, doc_QTextCharFormat_tableCellRowSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_tableCellColumnSpan, "tableCellColumnSpan(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_tableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tableCellColumnSpan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_tableCellColumnSpan, doc_QTextCharFormat_tableCellColumnSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTableCellRowSpan, "setTableCellRowSpan(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellRowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setTableCellRowSpan(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellRowSpan, doc_QTextCharFormat_setTableCellRowSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTableCellColumnSpan, "setTableCellColumnSpan(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTableCellColumnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setTableCellColumnSpan(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTableCellColumnSpan, doc_QTextCharFormat_setTableCellColumnSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setTextOutline, "setTextOutline(self, Union[QPen, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setTextOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen* a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setTextOutline(*a0);
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setTextOutline, doc_QTextCharFormat_setTextOutline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_textOutline, "textOutline(self) -> QPen");

extern "C" {static PyObject *meth_QTextCharFormat_textOutline(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_textOutline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QPen*sipRes;

            sipRes = new QPen(sipCpp->textOutline());

            return sipConvertFromNewType(sipRes,sipType_QPen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_textOutline, doc_QTextCharFormat_textOutline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setUnderlineStyle, "setUnderlineStyle(self, QTextCharFormat.UnderlineStyle)");

extern "C" {static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setUnderlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCharFormat::UnderlineStyle a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QTextCharFormat_UnderlineStyle, &a0))
        {
            sipCpp->setUnderlineStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setUnderlineStyle, doc_QTextCharFormat_setUnderlineStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_underlineStyle, "underlineStyle(self) -> QTextCharFormat.UnderlineStyle");

extern "C" {static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_underlineStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QTextCharFormat::UnderlineStyle sipRes;

            sipRes = sipCpp->underlineStyle();

            return sipConvertFromEnum(sipRes,sipType_QTextCharFormat_UnderlineStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_underlineStyle, doc_QTextCharFormat_underlineStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setToolTip, "setToolTip(self, str)");

extern "C" {static PyObject *meth_QTextCharFormat_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setToolTip, doc_QTextCharFormat_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_toolTip, "toolTip(self) -> str");

extern "C" {static PyObject *meth_QTextCharFormat_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_toolTip, doc_QTextCharFormat_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setAnchorNames, "setAnchorNames(self, Iterable[str])");

extern "C" {static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setAnchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setAnchorNames(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setAnchorNames, doc_QTextCharFormat_setAnchorNames);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_anchorNames, "anchorNames(self) -> List[str]");

extern "C" {static PyObject *meth_QTextCharFormat_anchorNames(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_anchorNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->anchorNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_anchorNames, doc_QTextCharFormat_anchorNames);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontCapitalization, "setFontCapitalization(self, QFont.Capitalization)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::Capitalization a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_Capitalization, &a0))
        {
            sipCpp->setFontCapitalization(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontCapitalization, doc_QTextCharFormat_setFontCapitalization);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontCapitalization, "fontCapitalization(self) -> QFont.Capitalization");

extern "C" {static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontCapitalization(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::Capitalization sipRes;

            sipRes = sipCpp->fontCapitalization();

            return sipConvertFromEnum(sipRes,sipType_QFont_Capitalization);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontCapitalization, doc_QTextCharFormat_fontCapitalization);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontLetterSpacing, "setFontLetterSpacing(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontLetterSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontLetterSpacing, doc_QTextCharFormat_setFontLetterSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontLetterSpacing, "fontLetterSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontLetterSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->fontLetterSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontLetterSpacing, doc_QTextCharFormat_fontLetterSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontWordSpacing, "setFontWordSpacing(self, float)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontWordSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontWordSpacing, doc_QTextCharFormat_setFontWordSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontWordSpacing, "fontWordSpacing(self) -> float");

extern "C" {static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontWordSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->fontWordSpacing();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontWordSpacing, doc_QTextCharFormat_fontWordSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStyleHint, "setFontStyleHint(self, QFont.StyleHint, strategy: QFont.StyleStrategy = QFont.PreferDefault)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::StyleHint a0;
        QFont::StyleStrategy a1 = QFont::PreferDefault;
        QTextCharFormat *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_strategy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|E", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleHint, &a0, sipType_QFont_StyleStrategy, &a1))
        {
            sipCpp->setFontStyleHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleHint, doc_QTextCharFormat_setFontStyleHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStyleStrategy, "setFontStyleStrategy(self, QFont.StyleStrategy)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::StyleStrategy a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_StyleStrategy, &a0))
        {
            sipCpp->setFontStyleStrategy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStyleStrategy, doc_QTextCharFormat_setFontStyleStrategy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStyleHint, "fontStyleHint(self) -> QFont.StyleHint");

extern "C" {static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::StyleHint sipRes;

            sipRes = sipCpp->fontStyleHint();

            return sipConvertFromEnum(sipRes,sipType_QFont_StyleHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleHint, doc_QTextCharFormat_fontStyleHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStyleStrategy, "fontStyleStrategy(self) -> QFont.StyleStrategy");

extern "C" {static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStyleStrategy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::StyleStrategy sipRes;

            sipRes = sipCpp->fontStyleStrategy();

            return sipConvertFromEnum(sipRes,sipType_QFont_StyleStrategy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStyleStrategy, doc_QTextCharFormat_fontStyleStrategy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontKerning, "setFontKerning(self, bool)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontKerning(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontKerning, doc_QTextCharFormat_setFontKerning);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontKerning, "fontKerning(self) -> bool");

extern "C" {static PyObject *meth_QTextCharFormat_fontKerning(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontKerning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontKerning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontKerning, doc_QTextCharFormat_fontKerning);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontHintingPreference, "setFontHintingPreference(self, QFont.HintingPreference)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::HintingPreference a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_HintingPreference, &a0))
        {
            sipCpp->setFontHintingPreference(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontHintingPreference, doc_QTextCharFormat_setFontHintingPreference);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontHintingPreference, "fontHintingPreference(self) -> QFont.HintingPreference");

extern "C" {static PyObject *meth_QTextCharFormat_fontHintingPreference(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontHintingPreference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::HintingPreference sipRes;

            sipRes = sipCpp->fontHintingPreference();

            return sipConvertFromEnum(sipRes,sipType_QFont_HintingPreference);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontHintingPreference, doc_QTextCharFormat_fontHintingPreference);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontStretch, "fontStretch(self) -> int");

extern "C" {static PyObject *meth_QTextCharFormat_fontStretch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontStretch();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontStretch, doc_QTextCharFormat_fontStretch);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontStretch, "setFontStretch(self, int)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontStretch(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCharFormat, &sipCpp, &a0))
        {
            sipCpp->setFontStretch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontStretch, doc_QTextCharFormat_setFontStretch);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_setFontLetterSpacingType, "setFontLetterSpacingType(self, QFont.SpacingType)");

extern "C" {static PyObject *meth_QTextCharFormat_setFontLetterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_setFontLetterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFont::SpacingType a0;
        QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCharFormat, &sipCpp, sipType_QFont_SpacingType, &a0))
        {
            sipCpp->setFontLetterSpacingType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_setFontLetterSpacingType, doc_QTextCharFormat_setFontLetterSpacingType);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCharFormat_fontLetterSpacingType, "fontLetterSpacingType(self) -> QFont.SpacingType");

extern "C" {static PyObject *meth_QTextCharFormat_fontLetterSpacingType(PyObject *, PyObject *);}
static PyObject *meth_QTextCharFormat_fontLetterSpacingType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCharFormat, &sipCpp))
        {
            QFont::SpacingType sipRes;

            sipRes = sipCpp->fontLetterSpacingType();

            return sipConvertFromEnum(sipRes,sipType_QFont_SpacingType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCharFormat, sipName_fontLetterSpacingType, doc_QTextCharFormat_fontLetterSpacingType);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCharFormat(void *, int);}
static void release_QTextCharFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QTextCharFormat *>(sipCppV);
}


extern "C" {static void assign_QTextCharFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextCharFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextCharFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextCharFormat *>(sipSrc);
}


extern "C" {static void *array_QTextCharFormat(SIP_SSIZE_T);}
static void *array_QTextCharFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextCharFormat[sipNrElem];
}


extern "C" {static void *copy_QTextCharFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextCharFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextCharFormat(reinterpret_cast<const QTextCharFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCharFormat(sipSimpleWrapper *);}
static void dealloc_QTextCharFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextCharFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextCharFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCharFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextCharFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextCharFormat();

            return sipCpp;
        }
    }

    {
        const QTextCharFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextCharFormat, &a0))
        {
            sipCpp = new QTextCharFormat(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextCharFormat[] = {{298, 255, 1}};


static PyMethodDef methods_QTextCharFormat[] = {
    {SIP_MLNAME_CAST(sipName_anchorHref), meth_QTextCharFormat_anchorHref, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_anchorHref)},
    {SIP_MLNAME_CAST(sipName_anchorNames), meth_QTextCharFormat_anchorNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_anchorNames)},
    {SIP_MLNAME_CAST(sipName_font), meth_QTextCharFormat_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_font)},
    {SIP_MLNAME_CAST(sipName_fontCapitalization), meth_QTextCharFormat_fontCapitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontCapitalization)},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QTextCharFormat_fontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontFamily)},
    {SIP_MLNAME_CAST(sipName_fontFixedPitch), meth_QTextCharFormat_fontFixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontFixedPitch)},
    {SIP_MLNAME_CAST(sipName_fontHintingPreference), meth_QTextCharFormat_fontHintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontHintingPreference)},
    {SIP_MLNAME_CAST(sipName_fontItalic), meth_QTextCharFormat_fontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontItalic)},
    {SIP_MLNAME_CAST(sipName_fontKerning), meth_QTextCharFormat_fontKerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontKerning)},
    {SIP_MLNAME_CAST(sipName_fontLetterSpacing), meth_QTextCharFormat_fontLetterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontLetterSpacing)},
    {SIP_MLNAME_CAST(sipName_fontLetterSpacingType), meth_QTextCharFormat_fontLetterSpacingType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontLetterSpacingType)},
    {SIP_MLNAME_CAST(sipName_fontOverline), meth_QTextCharFormat_fontOverline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontOverline)},
    {SIP_MLNAME_CAST(sipName_fontPointSize), meth_QTextCharFormat_fontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontPointSize)},
    {SIP_MLNAME_CAST(sipName_fontStretch), meth_QTextCharFormat_fontStretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStretch)},
    {SIP_MLNAME_CAST(sipName_fontStrikeOut), meth_QTextCharFormat_fontStrikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStrikeOut)},
    {SIP_MLNAME_CAST(sipName_fontStyleHint), meth_QTextCharFormat_fontStyleHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStyleHint)},
    {SIP_MLNAME_CAST(sipName_fontStyleStrategy), meth_QTextCharFormat_fontStyleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontStyleStrategy)},
    {SIP_MLNAME_CAST(sipName_fontUnderline), meth_QTextCharFormat_fontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontUnderline)},
    {SIP_MLNAME_CAST(sipName_fontWeight), meth_QTextCharFormat_fontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontWeight)},
    {SIP_MLNAME_CAST(sipName_fontWordSpacing), meth_QTextCharFormat_fontWordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_fontWordSpacing)},
    {SIP_MLNAME_CAST(sipName_isAnchor), meth_QTextCharFormat_isAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_isAnchor)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextCharFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_setAnchor), meth_QTextCharFormat_setAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setAnchor)},
    {SIP_MLNAME_CAST(sipName_setAnchorHref), meth_QTextCharFormat_setAnchorHref, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setAnchorHref)},
    {SIP_MLNAME_CAST(sipName_setAnchorNames), meth_QTextCharFormat_setAnchorNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setAnchorNames)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTextCharFormat_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFont)},
    {SIP_MLNAME_CAST(sipName_setFontCapitalization), meth_QTextCharFormat_setFontCapitalization, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontCapitalization)},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QTextCharFormat_setFontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontFamily)},
    {SIP_MLNAME_CAST(sipName_setFontFixedPitch), meth_QTextCharFormat_setFontFixedPitch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontFixedPitch)},
    {SIP_MLNAME_CAST(sipName_setFontHintingPreference), meth_QTextCharFormat_setFontHintingPreference, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontHintingPreference)},
    {SIP_MLNAME_CAST(sipName_setFontItalic), meth_QTextCharFormat_setFontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontItalic)},
    {SIP_MLNAME_CAST(sipName_setFontKerning), meth_QTextCharFormat_setFontKerning, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontKerning)},
    {SIP_MLNAME_CAST(sipName_setFontLetterSpacing), meth_QTextCharFormat_setFontLetterSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontLetterSpacing)},
    {SIP_MLNAME_CAST(sipName_setFontLetterSpacingType), meth_QTextCharFormat_setFontLetterSpacingType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontLetterSpacingType)},
    {SIP_MLNAME_CAST(sipName_setFontOverline), meth_QTextCharFormat_setFontOverline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontOverline)},
    {SIP_MLNAME_CAST(sipName_setFontPointSize), meth_QTextCharFormat_setFontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontPointSize)},
    {SIP_MLNAME_CAST(sipName_setFontStretch), meth_QTextCharFormat_setFontStretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStretch)},
    {SIP_MLNAME_CAST(sipName_setFontStrikeOut), meth_QTextCharFormat_setFontStrikeOut, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStrikeOut)},
    {SIP_MLNAME_CAST(sipName_setFontStyleHint), (PyCFunction)meth_QTextCharFormat_setFontStyleHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStyleHint)},
    {SIP_MLNAME_CAST(sipName_setFontStyleStrategy), meth_QTextCharFormat_setFontStyleStrategy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontStyleStrategy)},
    {SIP_MLNAME_CAST(sipName_setFontUnderline), meth_QTextCharFormat_setFontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontUnderline)},
    {SIP_MLNAME_CAST(sipName_setFontWeight), meth_QTextCharFormat_setFontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontWeight)},
    {SIP_MLNAME_CAST(sipName_setFontWordSpacing), meth_QTextCharFormat_setFontWordSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setFontWordSpacing)},
    {SIP_MLNAME_CAST(sipName_setTableCellColumnSpan), meth_QTextCharFormat_setTableCellColumnSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setTableCellColumnSpan)},
    {SIP_MLNAME_CAST(sipName_setTableCellRowSpan), meth_QTextCharFormat_setTableCellRowSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setTableCellRowSpan)},
    {SIP_MLNAME_CAST(sipName_setTextOutline), meth_QTextCharFormat_setTextOutline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setTextOutline)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QTextCharFormat_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setUnderlineColor), meth_QTextCharFormat_setUnderlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setUnderlineColor)},
    {SIP_MLNAME_CAST(sipName_setUnderlineStyle), meth_QTextCharFormat_setUnderlineStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setUnderlineStyle)},
    {SIP_MLNAME_CAST(sipName_setVerticalAlignment), meth_QTextCharFormat_setVerticalAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_setVerticalAlignment)},
    {SIP_MLNAME_CAST(sipName_tableCellColumnSpan), meth_QTextCharFormat_tableCellColumnSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_tableCellColumnSpan)},
    {SIP_MLNAME_CAST(sipName_tableCellRowSpan), meth_QTextCharFormat_tableCellRowSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_tableCellRowSpan)},
    {SIP_MLNAME_CAST(sipName_textOutline), meth_QTextCharFormat_textOutline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_textOutline)},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QTextCharFormat_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_toolTip)},
    {SIP_MLNAME_CAST(sipName_underlineColor), meth_QTextCharFormat_underlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_underlineColor)},
    {SIP_MLNAME_CAST(sipName_underlineStyle), meth_QTextCharFormat_underlineStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_underlineStyle)},
    {SIP_MLNAME_CAST(sipName_verticalAlignment), meth_QTextCharFormat_verticalAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCharFormat_verticalAlignment)}
};

static sipEnumMemberDef enummembers_QTextCharFormat[] = {
    {sipName_AlignBaseline, static_cast<int>(QTextCharFormat::AlignBaseline), 285},
    {sipName_AlignBottom, static_cast<int>(QTextCharFormat::AlignBottom), 285},
    {sipName_AlignMiddle, static_cast<int>(QTextCharFormat::AlignMiddle), 285},
    {sipName_AlignNormal, static_cast<int>(QTextCharFormat::AlignNormal), 285},
    {sipName_AlignSubScript, static_cast<int>(QTextCharFormat::AlignSubScript), 285},
    {sipName_AlignSuperScript, static_cast<int>(QTextCharFormat::AlignSuperScript), 285},
    {sipName_AlignTop, static_cast<int>(QTextCharFormat::AlignTop), 285},
    {sipName_DashDotDotLine, static_cast<int>(QTextCharFormat::DashDotDotLine), 284},
    {sipName_DashDotLine, static_cast<int>(QTextCharFormat::DashDotLine), 284},
    {sipName_DashUnderline, static_cast<int>(QTextCharFormat::DashUnderline), 284},
    {sipName_DotLine, static_cast<int>(QTextCharFormat::DotLine), 284},
    {sipName_FontPropertiesAll, static_cast<int>(QTextCharFormat::FontPropertiesAll), 283},
    {sipName_FontPropertiesSpecifiedOnly, static_cast<int>(QTextCharFormat::FontPropertiesSpecifiedOnly), 283},
    {sipName_NoUnderline, static_cast<int>(QTextCharFormat::NoUnderline), 284},
    {sipName_SingleUnderline, static_cast<int>(QTextCharFormat::SingleUnderline), 284},
    {sipName_SpellCheckUnderline, static_cast<int>(QTextCharFormat::SpellCheckUnderline), 284},
    {sipName_WaveUnderline, static_cast<int>(QTextCharFormat::WaveUnderline), 284},
};

PyDoc_STRVAR(doc_QTextCharFormat, "\1QTextCharFormat()\n"
    "QTextCharFormat(QTextCharFormat)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextCharFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextCharFormat,
        {0}
    },
    {
        sipNameNr_QTextCharFormat,
        {0, 0, 1},
        57, methods_QTextCharFormat,
        17, enummembers_QTextCharFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextCharFormat,
    -1,
    -1,
    supers_QTextCharFormat,
    0,
    init_type_QTextCharFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextCharFormat,
    assign_QTextCharFormat,
    array_QTextCharFormat,
    copy_QTextCharFormat,
    release_QTextCharFormat,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
