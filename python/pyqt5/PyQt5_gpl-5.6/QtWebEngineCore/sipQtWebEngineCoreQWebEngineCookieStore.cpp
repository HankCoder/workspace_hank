/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineCore.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineCore/qwebenginecookiestore.sip"
#include <qwebenginecookiestore.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtNetwork/qnetworkcookie.sip"
#include <qnetworkcookie.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineCookieStore.cpp"


PyDoc_STRVAR(doc_QWebEngineCookieStore_setCookie, "setCookie(self, QNetworkCookie, origin: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebEngineCookieStore_setCookie(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEngineCookieStore_setCookie(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkCookie* a0;
        const QUrl& a1def = QUrl();
        const QUrl* a1 = &a1def;
        QWebEngineCookieStore *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_origin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J9", &sipSelf, sipType_QWebEngineCookieStore, &sipCpp, sipType_QNetworkCookie, &a0, sipType_QUrl, &a1))
        {
            sipCpp->setCookie(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineCookieStore, sipName_setCookie, doc_QWebEngineCookieStore_setCookie);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineCookieStore_deleteCookie, "deleteCookie(self, QNetworkCookie, origin: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebEngineCookieStore_deleteCookie(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEngineCookieStore_deleteCookie(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkCookie* a0;
        const QUrl& a1def = QUrl();
        const QUrl* a1 = &a1def;
        QWebEngineCookieStore *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_origin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J9", &sipSelf, sipType_QWebEngineCookieStore, &sipCpp, sipType_QNetworkCookie, &a0, sipType_QUrl, &a1))
        {
            sipCpp->deleteCookie(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineCookieStore, sipName_deleteCookie, doc_QWebEngineCookieStore_deleteCookie);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineCookieStore_deleteSessionCookies, "deleteSessionCookies(self)");

extern "C" {static PyObject *meth_QWebEngineCookieStore_deleteSessionCookies(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineCookieStore_deleteSessionCookies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineCookieStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineCookieStore, &sipCpp))
        {
            sipCpp->deleteSessionCookies();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineCookieStore, sipName_deleteSessionCookies, doc_QWebEngineCookieStore_deleteSessionCookies);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineCookieStore_deleteAllCookies, "deleteAllCookies(self)");

extern "C" {static PyObject *meth_QWebEngineCookieStore_deleteAllCookies(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineCookieStore_deleteAllCookies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineCookieStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineCookieStore, &sipCpp))
        {
            sipCpp->deleteAllCookies();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineCookieStore, sipName_deleteAllCookies, doc_QWebEngineCookieStore_deleteAllCookies);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineCookieStore_loadAllCookies, "loadAllCookies(self)");

extern "C" {static PyObject *meth_QWebEngineCookieStore_loadAllCookies(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineCookieStore_loadAllCookies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineCookieStore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineCookieStore, &sipCpp))
        {
            sipCpp->loadAllCookies();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineCookieStore, sipName_loadAllCookies, doc_QWebEngineCookieStore_loadAllCookies);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineCookieStore(void *, int);}
static void release_QWebEngineCookieStore(void *sipCppV,int)
{
    QWebEngineCookieStore *sipCpp = reinterpret_cast<QWebEngineCookieStore *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEngineCookieStore(sipSimpleWrapper *);}
static void dealloc_QWebEngineCookieStore(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineCookieStore(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEngineCookieStore[] = {{164, 0, 1}};


static PyMethodDef methods_QWebEngineCookieStore[] = {
    {SIP_MLNAME_CAST(sipName_deleteAllCookies), meth_QWebEngineCookieStore_deleteAllCookies, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineCookieStore_deleteAllCookies)},
    {SIP_MLNAME_CAST(sipName_deleteCookie), (PyCFunction)meth_QWebEngineCookieStore_deleteCookie, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEngineCookieStore_deleteCookie)},
    {SIP_MLNAME_CAST(sipName_deleteSessionCookies), meth_QWebEngineCookieStore_deleteSessionCookies, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineCookieStore_deleteSessionCookies)},
    {SIP_MLNAME_CAST(sipName_loadAllCookies), meth_QWebEngineCookieStore_loadAllCookies, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineCookieStore_loadAllCookies)},
    {SIP_MLNAME_CAST(sipName_setCookie), (PyCFunction)meth_QWebEngineCookieStore_setCookie, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEngineCookieStore_setCookie)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebEngineCookieStore[] = {
    {"cookieRemoved(QNetworkCookie)", "\1cookieRemoved(self, QNetworkCookie)", 0, 0},
    {"cookieAdded(QNetworkCookie)", "\1cookieAdded(self, QNetworkCookie)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtWebEngineCore_QWebEngineCookieStore = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineCookieStore,
        {0}
    },
    {
        sipNameNr_QWebEngineCookieStore,
        {0, 0, 1},
        5, methods_QWebEngineCookieStore,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWebEngineCookieStore,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineCookieStore,
    0,
    0,
    0,
    release_QWebEngineCookieStore,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebEngineCookieStore::staticMetaObject,
    0,
    signals_QWebEngineCookieStore,
    0
};
