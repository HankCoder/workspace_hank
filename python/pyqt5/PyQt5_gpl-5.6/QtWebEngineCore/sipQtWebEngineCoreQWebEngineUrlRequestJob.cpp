/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineCore.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineCore/qwebengineurlrequestjob.sip"
#include <qwebengineurlrequestjob.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestJob.cpp"


PyDoc_STRVAR(doc_QWebEngineUrlRequestJob_requestUrl, "requestUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineUrlRequestJob_requestUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestJob_requestUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineUrlRequestJob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineUrlRequestJob, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->requestUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestJob, sipName_requestUrl, doc_QWebEngineUrlRequestJob_requestUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestJob_requestMethod, "requestMethod(self) -> QByteArray");

extern "C" {static PyObject *meth_QWebEngineUrlRequestJob_requestMethod(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestJob_requestMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineUrlRequestJob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineUrlRequestJob, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->requestMethod());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestJob, sipName_requestMethod, doc_QWebEngineUrlRequestJob_requestMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestJob_reply, "reply(self, Union[QByteArray, bytes, bytearray], QIODevice)");

extern "C" {static PyObject *meth_QWebEngineUrlRequestJob_reply(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestJob_reply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QIODevice* a1;
        QWebEngineUrlRequestJob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QWebEngineUrlRequestJob, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QIODevice, &a1))
        {
            sipCpp->reply(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestJob, sipName_reply, doc_QWebEngineUrlRequestJob_reply);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestJob_fail, "fail(self, QWebEngineUrlRequestJob.Error)");

extern "C" {static PyObject *meth_QWebEngineUrlRequestJob_fail(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestJob_fail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineUrlRequestJob::Error a0;
        QWebEngineUrlRequestJob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEngineUrlRequestJob, &sipCpp, sipType_QWebEngineUrlRequestJob_Error, &a0))
        {
            sipCpp->fail(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestJob, sipName_fail, doc_QWebEngineUrlRequestJob_fail);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestJob_redirect, "redirect(self, QUrl)");

extern "C" {static PyObject *meth_QWebEngineUrlRequestJob_redirect(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestJob_redirect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebEngineUrlRequestJob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineUrlRequestJob, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->redirect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestJob, sipName_redirect, doc_QWebEngineUrlRequestJob_redirect);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineUrlRequestJob(void *, int);}
static void release_QWebEngineUrlRequestJob(void *sipCppV,int)
{
    QWebEngineUrlRequestJob *sipCpp = reinterpret_cast<QWebEngineUrlRequestJob *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEngineUrlRequestJob(sipSimpleWrapper *);}
static void dealloc_QWebEngineUrlRequestJob(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineUrlRequestJob(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEngineUrlRequestJob[] = {{164, 0, 1}};


static PyMethodDef methods_QWebEngineUrlRequestJob[] = {
    {SIP_MLNAME_CAST(sipName_fail), meth_QWebEngineUrlRequestJob_fail, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestJob_fail)},
    {SIP_MLNAME_CAST(sipName_redirect), meth_QWebEngineUrlRequestJob_redirect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestJob_redirect)},
    {SIP_MLNAME_CAST(sipName_reply), meth_QWebEngineUrlRequestJob_reply, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestJob_reply)},
    {SIP_MLNAME_CAST(sipName_requestMethod), meth_QWebEngineUrlRequestJob_requestMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestJob_requestMethod)},
    {SIP_MLNAME_CAST(sipName_requestUrl), meth_QWebEngineUrlRequestJob_requestUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestJob_requestUrl)}
};

static sipEnumMemberDef enummembers_QWebEngineUrlRequestJob[] = {
    {sipName_NoError, static_cast<int>(QWebEngineUrlRequestJob::NoError), 6},
    {sipName_RequestAborted, static_cast<int>(QWebEngineUrlRequestJob::RequestAborted), 6},
    {sipName_RequestDenied, static_cast<int>(QWebEngineUrlRequestJob::RequestDenied), 6},
    {sipName_RequestFailed, static_cast<int>(QWebEngineUrlRequestJob::RequestFailed), 6},
    {sipName_UrlInvalid, static_cast<int>(QWebEngineUrlRequestJob::UrlInvalid), 6},
    {sipName_UrlNotFound, static_cast<int>(QWebEngineUrlRequestJob::UrlNotFound), 6},
};


pyqt5ClassTypeDef sipTypeDef_QtWebEngineCore_QWebEngineUrlRequestJob = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineUrlRequestJob,
        {0}
    },
    {
        sipNameNr_QWebEngineUrlRequestJob,
        {0, 0, 1},
        5, methods_QWebEngineUrlRequestJob,
        6, enummembers_QWebEngineUrlRequestJob,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWebEngineUrlRequestJob,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineUrlRequestJob,
    0,
    0,
    0,
    release_QWebEngineUrlRequestJob,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebEngineUrlRequestJob::staticMetaObject,
    0,
    0,
    0
};
