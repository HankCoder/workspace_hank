/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 31 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraFrameRateRange.cpp"



extern "C" {static PyObject *slot_QCamera_FrameRateRange___eq__(PyObject *,PyObject *);}
static PyObject *slot_QCamera_FrameRateRange___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QCamera::FrameRateRange *sipCpp = reinterpret_cast<QCamera::FrameRateRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCamera_FrameRateRange));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QCamera::FrameRateRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QCamera_FrameRateRange, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,eq_slot,sipType_QCamera_FrameRateRange,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QCamera_FrameRateRange___ne__(PyObject *,PyObject *);}
static PyObject *slot_QCamera_FrameRateRange___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QCamera::FrameRateRange *sipCpp = reinterpret_cast<QCamera::FrameRateRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCamera_FrameRateRange));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QCamera::FrameRateRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QCamera_FrameRateRange, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,ne_slot,sipType_QCamera_FrameRateRange,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QCamera_FrameRateRange(void *, int);}
static void release_QCamera_FrameRateRange(void *sipCppV,int)
{
    delete reinterpret_cast<QCamera::FrameRateRange *>(sipCppV);
}


extern "C" {static void assign_QCamera_FrameRateRange(void *, SIP_SSIZE_T, const void *);}
static void assign_QCamera_FrameRateRange(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QCamera::FrameRateRange *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QCamera::FrameRateRange *>(sipSrc);
}


extern "C" {static void *array_QCamera_FrameRateRange(SIP_SSIZE_T);}
static void *array_QCamera_FrameRateRange(SIP_SSIZE_T sipNrElem)
{
    return new QCamera::FrameRateRange[sipNrElem];
}


extern "C" {static void *copy_QCamera_FrameRateRange(const void *, SIP_SSIZE_T);}
static void *copy_QCamera_FrameRateRange(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QCamera::FrameRateRange(reinterpret_cast<const QCamera::FrameRateRange *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QCamera_FrameRateRange(sipSimpleWrapper *);}
static void dealloc_QCamera_FrameRateRange(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QCamera_FrameRateRange(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QCamera_FrameRateRange(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCamera_FrameRateRange(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QCamera::FrameRateRange *sipCpp = 0;

    {
        qreal a0;
        qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dd", &a0, &a1))
        {
            sipCpp = new QCamera::FrameRateRange(a0,a1);

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QCamera::FrameRateRange();

            return sipCpp;
        }
    }

    {
        const QCamera::FrameRateRange* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QCamera_FrameRateRange, &a0))
        {
            sipCpp = new QCamera::FrameRateRange(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QCamera_FrameRateRange[] = {
    {(void *)slot_QCamera_FrameRateRange___eq__, eq_slot},
    {(void *)slot_QCamera_FrameRateRange___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


extern "C" {static PyObject *varget_QCamera_FrameRateRange_maximumFrameRate(void *, PyObject *, PyObject *);}
static PyObject *varget_QCamera_FrameRateRange_maximumFrameRate(void *sipSelf, PyObject *, PyObject *)
{
    qreal sipVal;
    QCamera::FrameRateRange *sipCpp = reinterpret_cast<QCamera::FrameRateRange *>(sipSelf);

    sipVal = sipCpp->maximumFrameRate;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QCamera_FrameRateRange_maximumFrameRate(void *, PyObject *, PyObject *);}
static int varset_QCamera_FrameRateRange_maximumFrameRate(void *sipSelf, PyObject *sipPy, PyObject *)
{
    qreal sipVal;
    QCamera::FrameRateRange *sipCpp = reinterpret_cast<QCamera::FrameRateRange *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->maximumFrameRate = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QCamera_FrameRateRange_minimumFrameRate(void *, PyObject *, PyObject *);}
static PyObject *varget_QCamera_FrameRateRange_minimumFrameRate(void *sipSelf, PyObject *, PyObject *)
{
    qreal sipVal;
    QCamera::FrameRateRange *sipCpp = reinterpret_cast<QCamera::FrameRateRange *>(sipSelf);

    sipVal = sipCpp->minimumFrameRate;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_QCamera_FrameRateRange_minimumFrameRate(void *, PyObject *, PyObject *);}
static int varset_QCamera_FrameRateRange_minimumFrameRate(void *sipSelf, PyObject *sipPy, PyObject *)
{
    qreal sipVal;
    QCamera::FrameRateRange *sipCpp = reinterpret_cast<QCamera::FrameRateRange *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->minimumFrameRate = sipVal;

    return 0;
}

sipVariableDef variables_QCamera_FrameRateRange[] = {
    {InstanceVariable, sipName_maximumFrameRate, (PyMethodDef *)varget_QCamera_FrameRateRange_maximumFrameRate, (PyMethodDef *)varset_QCamera_FrameRateRange_maximumFrameRate, NULL, NULL},
    {InstanceVariable, sipName_minimumFrameRate, (PyMethodDef *)varget_QCamera_FrameRateRange_minimumFrameRate, (PyMethodDef *)varset_QCamera_FrameRateRange_minimumFrameRate, NULL, NULL},
};

PyDoc_STRVAR(doc_QCamera_FrameRateRange, "\1QCamera.FrameRateRange(float, float)\n"
    "QCamera.FrameRateRange()\n"
    "QCamera.FrameRateRange(QCamera.FrameRateRange)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QCamera_FrameRateRange = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCamera__FrameRateRange,
        {0}
    },
    {
        sipNameNr_FrameRateRange,
        {24, 255, 0},
        0, 0,
        0, 0,
        2, variables_QCamera_FrameRateRange,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCamera_FrameRateRange,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QCamera_FrameRateRange,
    init_type_QCamera_FrameRateRange,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCamera_FrameRateRange,
    assign_QCamera_FrameRateRange,
    array_QCamera_FrameRateRange,
    copy_QCamera_FrameRateRange,
    release_QCamera_FrameRateRange,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
