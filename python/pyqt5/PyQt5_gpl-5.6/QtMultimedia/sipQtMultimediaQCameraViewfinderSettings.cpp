/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qcameraviewfindersettings.sip"
#include <qcameraviewfindersettings.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraViewfinderSettings.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraViewfinderSettings.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qvideoframe.sip"
#include <qvideoframe.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraViewfinderSettings.cpp"


PyDoc_STRVAR(doc_QCameraViewfinderSettings_swap, "swap(self, QCameraViewfinderSettings)");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_swap(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraViewfinderSettings* a0;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, sipType_QCameraViewfinderSettings, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_swap, doc_QCameraViewfinderSettings_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_isNull(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_isNull, doc_QCameraViewfinderSettings_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_resolution, "resolution(self) -> QSize");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_resolution(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->resolution());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_resolution, doc_QCameraViewfinderSettings_resolution);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_setResolution, "setResolution(self, QSize)\n"
    "setResolution(self, int, int)");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_setResolution(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_setResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setResolution(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, &a0, &a1))
        {
            sipCpp->setResolution(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_setResolution, doc_QCameraViewfinderSettings_setResolution);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_minimumFrameRate, "minimumFrameRate(self) -> float");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_minimumFrameRate(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_minimumFrameRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->minimumFrameRate();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_minimumFrameRate, doc_QCameraViewfinderSettings_minimumFrameRate);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_setMinimumFrameRate, "setMinimumFrameRate(self, float)");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_setMinimumFrameRate(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_setMinimumFrameRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, &a0))
        {
            sipCpp->setMinimumFrameRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_setMinimumFrameRate, doc_QCameraViewfinderSettings_setMinimumFrameRate);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_maximumFrameRate, "maximumFrameRate(self) -> float");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_maximumFrameRate(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_maximumFrameRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->maximumFrameRate();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_maximumFrameRate, doc_QCameraViewfinderSettings_maximumFrameRate);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_setMaximumFrameRate, "setMaximumFrameRate(self, float)");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_setMaximumFrameRate(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_setMaximumFrameRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, &a0))
        {
            sipCpp->setMaximumFrameRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_setMaximumFrameRate, doc_QCameraViewfinderSettings_setMaximumFrameRate);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_pixelFormat, "pixelFormat(self) -> QVideoFrame.PixelFormat");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_pixelFormat(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_pixelFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp))
        {
            QVideoFrame::PixelFormat sipRes;

            sipRes = sipCpp->pixelFormat();

            return sipConvertFromEnum(sipRes,sipType_QVideoFrame_PixelFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_pixelFormat, doc_QCameraViewfinderSettings_pixelFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_setPixelFormat, "setPixelFormat(self, QVideoFrame.PixelFormat)");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_setPixelFormat(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_setPixelFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVideoFrame::PixelFormat a0;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, sipType_QVideoFrame_PixelFormat, &a0))
        {
            sipCpp->setPixelFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_setPixelFormat, doc_QCameraViewfinderSettings_setPixelFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_pixelAspectRatio, "pixelAspectRatio(self) -> QSize");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_pixelAspectRatio(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_pixelAspectRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->pixelAspectRatio());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_pixelAspectRatio, doc_QCameraViewfinderSettings_pixelAspectRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraViewfinderSettings_setPixelAspectRatio, "setPixelAspectRatio(self, QSize)\n"
    "setPixelAspectRatio(self, int, int)");

extern "C" {static PyObject *meth_QCameraViewfinderSettings_setPixelAspectRatio(PyObject *, PyObject *);}
static PyObject *meth_QCameraViewfinderSettings_setPixelAspectRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setPixelAspectRatio(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QCameraViewfinderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QCameraViewfinderSettings, &sipCpp, &a0, &a1))
        {
            sipCpp->setPixelAspectRatio(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraViewfinderSettings, sipName_setPixelAspectRatio, doc_QCameraViewfinderSettings_setPixelAspectRatio);

    return NULL;
}


extern "C" {static PyObject *slot_QCameraViewfinderSettings___eq__(PyObject *,PyObject *);}
static PyObject *slot_QCameraViewfinderSettings___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QCameraViewfinderSettings *sipCpp = reinterpret_cast<QCameraViewfinderSettings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCameraViewfinderSettings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QCameraViewfinderSettings, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,eq_slot,sipType_QCameraViewfinderSettings,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QCameraViewfinderSettings___ne__(PyObject *,PyObject *);}
static PyObject *slot_QCameraViewfinderSettings___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QCameraViewfinderSettings *sipCpp = reinterpret_cast<QCameraViewfinderSettings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCameraViewfinderSettings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QCameraViewfinderSettings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QCameraViewfinderSettings, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,ne_slot,sipType_QCameraViewfinderSettings,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QCameraViewfinderSettings(void *, int);}
static void release_QCameraViewfinderSettings(void *sipCppV,int)
{
    delete reinterpret_cast<QCameraViewfinderSettings *>(sipCppV);
}


extern "C" {static void assign_QCameraViewfinderSettings(void *, SIP_SSIZE_T, const void *);}
static void assign_QCameraViewfinderSettings(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QCameraViewfinderSettings *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QCameraViewfinderSettings *>(sipSrc);
}


extern "C" {static void *array_QCameraViewfinderSettings(SIP_SSIZE_T);}
static void *array_QCameraViewfinderSettings(SIP_SSIZE_T sipNrElem)
{
    return new QCameraViewfinderSettings[sipNrElem];
}


extern "C" {static void *copy_QCameraViewfinderSettings(const void *, SIP_SSIZE_T);}
static void *copy_QCameraViewfinderSettings(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QCameraViewfinderSettings(reinterpret_cast<const QCameraViewfinderSettings *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QCameraViewfinderSettings(sipSimpleWrapper *);}
static void dealloc_QCameraViewfinderSettings(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QCameraViewfinderSettings(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QCameraViewfinderSettings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCameraViewfinderSettings(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QCameraViewfinderSettings *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QCameraViewfinderSettings();

            return sipCpp;
        }
    }

    {
        const QCameraViewfinderSettings* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QCameraViewfinderSettings, &a0))
        {
            sipCpp = new QCameraViewfinderSettings(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QCameraViewfinderSettings[] = {
    {(void *)slot_QCameraViewfinderSettings___eq__, eq_slot},
    {(void *)slot_QCameraViewfinderSettings___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QCameraViewfinderSettings[] = {
    {SIP_MLNAME_CAST(sipName_isNull), meth_QCameraViewfinderSettings_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_isNull)},
    {SIP_MLNAME_CAST(sipName_maximumFrameRate), meth_QCameraViewfinderSettings_maximumFrameRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_maximumFrameRate)},
    {SIP_MLNAME_CAST(sipName_minimumFrameRate), meth_QCameraViewfinderSettings_minimumFrameRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_minimumFrameRate)},
    {SIP_MLNAME_CAST(sipName_pixelAspectRatio), meth_QCameraViewfinderSettings_pixelAspectRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_pixelAspectRatio)},
    {SIP_MLNAME_CAST(sipName_pixelFormat), meth_QCameraViewfinderSettings_pixelFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_pixelFormat)},
    {SIP_MLNAME_CAST(sipName_resolution), meth_QCameraViewfinderSettings_resolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_resolution)},
    {SIP_MLNAME_CAST(sipName_setMaximumFrameRate), meth_QCameraViewfinderSettings_setMaximumFrameRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_setMaximumFrameRate)},
    {SIP_MLNAME_CAST(sipName_setMinimumFrameRate), meth_QCameraViewfinderSettings_setMinimumFrameRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_setMinimumFrameRate)},
    {SIP_MLNAME_CAST(sipName_setPixelAspectRatio), meth_QCameraViewfinderSettings_setPixelAspectRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_setPixelAspectRatio)},
    {SIP_MLNAME_CAST(sipName_setPixelFormat), meth_QCameraViewfinderSettings_setPixelFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_setPixelFormat)},
    {SIP_MLNAME_CAST(sipName_setResolution), meth_QCameraViewfinderSettings_setResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_setResolution)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QCameraViewfinderSettings_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraViewfinderSettings_swap)}
};

PyDoc_STRVAR(doc_QCameraViewfinderSettings, "\1QCameraViewfinderSettings()\n"
    "QCameraViewfinderSettings(QCameraViewfinderSettings)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QCameraViewfinderSettings = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCameraViewfinderSettings,
        {0}
    },
    {
        sipNameNr_QCameraViewfinderSettings,
        {0, 0, 1},
        12, methods_QCameraViewfinderSettings,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCameraViewfinderSettings,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QCameraViewfinderSettings,
    init_type_QCameraViewfinderSettings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCameraViewfinderSettings,
    assign_QCameraViewfinderSettings,
    array_QCameraViewfinderSettings,
    copy_QCameraViewfinderSettings,
    release_QCameraViewfinderSettings,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
