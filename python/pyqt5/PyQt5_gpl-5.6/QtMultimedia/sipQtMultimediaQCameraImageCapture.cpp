/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qcameraimagecapture.sip"
#include <qcameraimagecapture.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qmediaobject.sip"
#include <qmediaobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qvideoframe.sip"
#include <qvideoframe.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qcameraimagecapture.sip"
#include <qcameraimagecapture.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qpymultimedia_qlist.sip"
#include <qvideoframe.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 89 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qmediaencodersettings.sip"
#include <qmediaencodersettings.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQCameraImageCapture.cpp"


class sipQCameraImageCapture : public QCameraImageCapture
{
public:
    sipQCameraImageCapture(QMediaObject*,QObject*);
    virtual ~sipQCameraImageCapture();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool setMediaObject(QMediaObject*);
    QMediaObject* mediaObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCameraImageCapture(const sipQCameraImageCapture &);
    sipQCameraImageCapture &operator = (const sipQCameraImageCapture &);

    char sipPyMethods[9];
};

sipQCameraImageCapture::sipQCameraImageCapture(QMediaObject*a0,QObject*a1): QCameraImageCapture(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCameraImageCapture::~sipQCameraImageCapture()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCameraImageCapture::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QCameraImageCapture);

    return QCameraImageCapture::metaObject();
}

int sipQCameraImageCapture::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCameraImageCapture::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QCameraImageCapture,_c,_id,_a);

    return _id;
}

void *sipQCameraImageCapture::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QCameraImageCapture, _clname, &sipCpp) ? sipCpp : QCameraImageCapture::qt_metacast(_clname));
}

void sipQCameraImageCapture::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCameraImageCapture::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCameraImageCapture::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCameraImageCapture::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCameraImageCapture::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCameraImageCapture::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCameraImageCapture::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCameraImageCapture::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCameraImageCapture::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCameraImageCapture::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQCameraImageCapture::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCameraImageCapture::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQCameraImageCapture::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCameraImageCapture::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQCameraImageCapture::setMediaObject(QMediaObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setMediaObject);

    if (!sipMeth)
        return QCameraImageCapture::setMediaObject(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMediaObject*);

    return sipVH_QtMultimedia_1(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaObject* sipQCameraImageCapture::mediaObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_mediaObject);

    if (!sipMeth)
        return QCameraImageCapture::mediaObject();

    extern QMediaObject* sipVH_QtMultimedia_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_2(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QCameraImageCapture_isAvailable, "isAvailable(self) -> bool");

extern "C" {static PyObject *meth_QCameraImageCapture_isAvailable(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_isAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_isAvailable, doc_QCameraImageCapture_isAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_availability, "availability(self) -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QCameraImageCapture_availability(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = sipCpp->availability();

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_availability, doc_QCameraImageCapture_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_mediaObject, "mediaObject(self) -> QMediaObject");

extern "C" {static PyObject *meth_QCameraImageCapture_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QMediaObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCameraImageCapture::mediaObject() : sipCpp->mediaObject());

            return sipConvertFromType(sipRes,sipType_QMediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_mediaObject, doc_QCameraImageCapture_mediaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_error, "error(self) -> QCameraImageCapture.Error");

extern "C" {static PyObject *meth_QCameraImageCapture_error(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QCameraImageCapture::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QCameraImageCapture_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_error, doc_QCameraImageCapture_error);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QCameraImageCapture_errorString(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_errorString, doc_QCameraImageCapture_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_isReadyForCapture, "isReadyForCapture(self) -> bool");

extern "C" {static PyObject *meth_QCameraImageCapture_isReadyForCapture(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_isReadyForCapture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadyForCapture();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_isReadyForCapture, doc_QCameraImageCapture_isReadyForCapture);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_supportedImageCodecs, "supportedImageCodecs(self) -> List[str]");

extern "C" {static PyObject *meth_QCameraImageCapture_supportedImageCodecs(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_supportedImageCodecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedImageCodecs());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_supportedImageCodecs, doc_QCameraImageCapture_supportedImageCodecs);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_imageCodecDescription, "imageCodecDescription(self, str) -> str");

extern "C" {static PyObject *meth_QCameraImageCapture_imageCodecDescription(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_imageCodecDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->imageCodecDescription(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_imageCodecDescription, doc_QCameraImageCapture_imageCodecDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_supportedResolutions, "supportedResolutions(self, settings: QImageEncoderSettings = QImageEncoderSettings()) -> Tuple[List[QSize], bool]");

extern "C" {static PyObject *meth_QCameraImageCapture_supportedResolutions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_supportedResolutions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageEncoderSettings& a0def = QImageEncoderSettings();
        const QImageEncoderSettings* a0 = &a0def;
        bool a1;
        const QCameraImageCapture *sipCpp;

        static const char *sipKwdList[] = {
            sipName_settings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QImageEncoderSettings, &a0))
        {
            QList<QSize>*sipRes;

            sipRes = new QList<QSize>(sipCpp->supportedResolutions(*a0,&a1));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_0100QSize,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_supportedResolutions, doc_QCameraImageCapture_supportedResolutions);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_encodingSettings, "encodingSettings(self) -> QImageEncoderSettings");

extern "C" {static PyObject *meth_QCameraImageCapture_encodingSettings(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_encodingSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QImageEncoderSettings*sipRes;

            sipRes = new QImageEncoderSettings(sipCpp->encodingSettings());

            return sipConvertFromNewType(sipRes,sipType_QImageEncoderSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_encodingSettings, doc_QCameraImageCapture_encodingSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_setEncodingSettings, "setEncodingSettings(self, QImageEncoderSettings)");

extern "C" {static PyObject *meth_QCameraImageCapture_setEncodingSettings(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_setEncodingSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageEncoderSettings* a0;
        QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QImageEncoderSettings, &a0))
        {
            sipCpp->setEncodingSettings(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_setEncodingSettings, doc_QCameraImageCapture_setEncodingSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_supportedBufferFormats, "supportedBufferFormats(self) -> List[QVideoFrame.PixelFormat]");

extern "C" {static PyObject *meth_QCameraImageCapture_supportedBufferFormats(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_supportedBufferFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QList<QVideoFrame::PixelFormat>*sipRes;

            sipRes = new QList<QVideoFrame::PixelFormat>(sipCpp->supportedBufferFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVideoFrame_PixelFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_supportedBufferFormats, doc_QCameraImageCapture_supportedBufferFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_bufferFormat, "bufferFormat(self) -> QVideoFrame.PixelFormat");

extern "C" {static PyObject *meth_QCameraImageCapture_bufferFormat(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_bufferFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QVideoFrame::PixelFormat sipRes;

            sipRes = sipCpp->bufferFormat();

            return sipConvertFromEnum(sipRes,sipType_QVideoFrame_PixelFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_bufferFormat, doc_QCameraImageCapture_bufferFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_setBufferFormat, "setBufferFormat(self, QVideoFrame.PixelFormat)");

extern "C" {static PyObject *meth_QCameraImageCapture_setBufferFormat(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_setBufferFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVideoFrame::PixelFormat a0;
        QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QVideoFrame_PixelFormat, &a0))
        {
            sipCpp->setBufferFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_setBufferFormat, doc_QCameraImageCapture_setBufferFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_isCaptureDestinationSupported, "isCaptureDestinationSupported(self, QCameraImageCapture.CaptureDestinations) -> bool");

extern "C" {static PyObject *meth_QCameraImageCapture_isCaptureDestinationSupported(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_isCaptureDestinationSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraImageCapture::CaptureDestinations* a0;
        int a0State = 0;
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QCameraImageCapture_CaptureDestinations, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isCaptureDestinationSupported(*a0);
            sipReleaseType(a0,sipType_QCameraImageCapture_CaptureDestinations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_isCaptureDestinationSupported, doc_QCameraImageCapture_isCaptureDestinationSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_captureDestination, "captureDestination(self) -> QCameraImageCapture.CaptureDestinations");

extern "C" {static PyObject *meth_QCameraImageCapture_captureDestination(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_captureDestination(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            QCameraImageCapture::CaptureDestinations*sipRes;

            sipRes = new QCameraImageCapture::CaptureDestinations(sipCpp->captureDestination());

            return sipConvertFromNewType(sipRes,sipType_QCameraImageCapture_CaptureDestinations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_captureDestination, doc_QCameraImageCapture_captureDestination);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_setCaptureDestination, "setCaptureDestination(self, QCameraImageCapture.CaptureDestinations)");

extern "C" {static PyObject *meth_QCameraImageCapture_setCaptureDestination(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_setCaptureDestination(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraImageCapture::CaptureDestinations* a0;
        int a0State = 0;
        QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QCameraImageCapture_CaptureDestinations, &a0, &a0State))
        {
            sipCpp->setCaptureDestination(*a0);
            sipReleaseType(a0,sipType_QCameraImageCapture_CaptureDestinations,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_setCaptureDestination, doc_QCameraImageCapture_setCaptureDestination);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_capture, "capture(self, file: str = '') -> int");

extern "C" {static PyObject *meth_QCameraImageCapture_capture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_capture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        QCameraImageCapture *sipCpp;

        static const char *sipKwdList[] = {
            sipName_file,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->capture(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_capture, doc_QCameraImageCapture_capture);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_cancelCapture, "cancelCapture(self)");

extern "C" {static PyObject *meth_QCameraImageCapture_cancelCapture(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_cancelCapture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraImageCapture, &sipCpp))
        {
            sipCpp->cancelCapture();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_cancelCapture, doc_QCameraImageCapture_cancelCapture);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraImageCapture_setMediaObject, "setMediaObject(self, QMediaObject) -> bool");

extern "C" {static PyObject *meth_QCameraImageCapture_setMediaObject(PyObject *, PyObject *);}
static PyObject *meth_QCameraImageCapture_setMediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMediaObject* a0;
        QCameraImageCapture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCameraImageCapture, &sipCpp, sipType_QMediaObject, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCameraImageCapture::setMediaObject(a0) : sipCpp->setMediaObject(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraImageCapture, sipName_setMediaObject, doc_QCameraImageCapture_setMediaObject);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QCameraImageCapture(void *, const sipTypeDef *);}
static void *cast_QCameraImageCapture(void *sipCppV, const sipTypeDef *targetType)
{
    QCameraImageCapture *sipCpp = reinterpret_cast<QCameraImageCapture *>(sipCppV);

    if (targetType == sipType_QMediaBindableInterface)
        return static_cast<QMediaBindableInterface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCameraImageCapture(void *, int);}
static void release_QCameraImageCapture(void *sipCppV,int)
{
    QCameraImageCapture *sipCpp = reinterpret_cast<QCameraImageCapture *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCameraImageCapture(sipSimpleWrapper *);}
static void dealloc_QCameraImageCapture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCameraImageCapture *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCameraImageCapture(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCameraImageCapture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCameraImageCapture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCameraImageCapture *sipCpp = 0;

    {
        QMediaObject* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QMediaObject, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCameraImageCapture(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCameraImageCapture[] = {{164, 0, 0}, {71, 255, 1}};


static PyMethodDef methods_QCameraImageCapture[] = {
    {SIP_MLNAME_CAST(sipName_availability), meth_QCameraImageCapture_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_availability)},
    {SIP_MLNAME_CAST(sipName_bufferFormat), meth_QCameraImageCapture_bufferFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_bufferFormat)},
    {SIP_MLNAME_CAST(sipName_cancelCapture), meth_QCameraImageCapture_cancelCapture, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_cancelCapture)},
    {SIP_MLNAME_CAST(sipName_capture), (PyCFunction)meth_QCameraImageCapture_capture, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCameraImageCapture_capture)},
    {SIP_MLNAME_CAST(sipName_captureDestination), meth_QCameraImageCapture_captureDestination, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_captureDestination)},
    {SIP_MLNAME_CAST(sipName_encodingSettings), meth_QCameraImageCapture_encodingSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_encodingSettings)},
    {SIP_MLNAME_CAST(sipName_error), meth_QCameraImageCapture_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QCameraImageCapture_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_errorString)},
    {SIP_MLNAME_CAST(sipName_imageCodecDescription), meth_QCameraImageCapture_imageCodecDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_imageCodecDescription)},
    {SIP_MLNAME_CAST(sipName_isAvailable), meth_QCameraImageCapture_isAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_isAvailable)},
    {SIP_MLNAME_CAST(sipName_isCaptureDestinationSupported), meth_QCameraImageCapture_isCaptureDestinationSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_isCaptureDestinationSupported)},
    {SIP_MLNAME_CAST(sipName_isReadyForCapture), meth_QCameraImageCapture_isReadyForCapture, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_isReadyForCapture)},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_QCameraImageCapture_mediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_mediaObject)},
    {SIP_MLNAME_CAST(sipName_setBufferFormat), meth_QCameraImageCapture_setBufferFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_setBufferFormat)},
    {SIP_MLNAME_CAST(sipName_setCaptureDestination), meth_QCameraImageCapture_setCaptureDestination, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_setCaptureDestination)},
    {SIP_MLNAME_CAST(sipName_setEncodingSettings), meth_QCameraImageCapture_setEncodingSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_setEncodingSettings)},
    {SIP_MLNAME_CAST(sipName_setMediaObject), meth_QCameraImageCapture_setMediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_setMediaObject)},
    {SIP_MLNAME_CAST(sipName_supportedBufferFormats), meth_QCameraImageCapture_supportedBufferFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_supportedBufferFormats)},
    {SIP_MLNAME_CAST(sipName_supportedImageCodecs), meth_QCameraImageCapture_supportedImageCodecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraImageCapture_supportedImageCodecs)},
    {SIP_MLNAME_CAST(sipName_supportedResolutions), (PyCFunction)meth_QCameraImageCapture_supportedResolutions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCameraImageCapture_supportedResolutions)}
};

static sipEnumMemberDef enummembers_QCameraImageCapture[] = {
    {sipName_CaptureToBuffer, static_cast<int>(QCameraImageCapture::CaptureToBuffer), 48},
    {sipName_CaptureToFile, static_cast<int>(QCameraImageCapture::CaptureToFile), 48},
    {sipName_FormatError, static_cast<int>(QCameraImageCapture::FormatError), 51},
    {sipName_NoError, static_cast<int>(QCameraImageCapture::NoError), 51},
    {sipName_NotReadyError, static_cast<int>(QCameraImageCapture::NotReadyError), 51},
    {sipName_NotSupportedFeatureError, static_cast<int>(QCameraImageCapture::NotSupportedFeatureError), 51},
    {sipName_OutOfSpaceError, static_cast<int>(QCameraImageCapture::OutOfSpaceError), 51},
    {sipName_ResourceError, static_cast<int>(QCameraImageCapture::ResourceError), 51},
    {sipName_SingleImageCapture, static_cast<int>(QCameraImageCapture::SingleImageCapture), 50},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCameraImageCapture[] = {
    {"imageSaved(int,QString)", "\1imageSaved(self, int, str)", 0, 0},
    {"imageAvailable(int,QVideoFrame)", "\1imageAvailable(self, int, QVideoFrame)", 0, 0},
    {"imageMetadataAvailable(int,QString,QVariant)", "\1imageMetadataAvailable(self, int, str, Any)", 0, 0},
    {"imageCaptured(int,QImage)", "\1imageCaptured(self, int, QImage)", 0, 0},
    {"imageExposed(int)", "\1imageExposed(self, int)", 0, 0},
    {"captureDestinationChanged(QCameraImageCapture::CaptureDestinations)", "\1captureDestinationChanged(self, QCameraImageCapture.CaptureDestinations)", 0, 0},
    {"bufferFormatChanged(QVideoFrame::PixelFormat)", "\1bufferFormatChanged(self, QVideoFrame.PixelFormat)", 0, 0},
    {"readyForCaptureChanged(bool)", "\1readyForCaptureChanged(self, bool)", 0, 0},
    {"error(int,QCameraImageCapture::Error,QString)", "\1error(self, int, QCameraImageCapture.Error, str)", &methods_QCameraImageCapture[6], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QCameraImageCapture, "\1QCameraImageCapture(QMediaObject, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QCameraImageCapture = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCameraImageCapture,
        {0}
    },
    {
        sipNameNr_QCameraImageCapture,
        {0, 0, 1},
        20, methods_QCameraImageCapture,
        9, enummembers_QCameraImageCapture,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCameraImageCapture,
    -1,
    -1,
    supers_QCameraImageCapture,
    0,
    init_type_QCameraImageCapture,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCameraImageCapture,
    0,
    0,
    0,
    release_QCameraImageCapture,
    cast_QCameraImageCapture,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCameraImageCapture::staticMetaObject,
    0,
    signals_QCameraImageCapture,
    0
};
