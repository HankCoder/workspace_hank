/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qaudiodecoder.sip"
#include <qaudiodecoder.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qaudioformat.sip"
#include <qaudioformat.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qaudiobuffer.sip"
#include <qaudiobuffer.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtMultimedia/qmediaservice.sip"
#include <qmediaservice.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtMultimedia/sipQtMultimediaQAudioDecoder.cpp"


class sipQAudioDecoder : public QAudioDecoder
{
public:
    sipQAudioDecoder(QObject*);
    virtual ~sipQAudioDecoder();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QMediaService* service() const;
    QMultimedia::AvailabilityStatus availability() const;
    bool isAvailable() const;
    void unbind(QObject*);
    bool bind(QObject*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAudioDecoder(const sipQAudioDecoder &);
    sipQAudioDecoder &operator = (const sipQAudioDecoder &);

    char sipPyMethods[12];
};

sipQAudioDecoder::sipQAudioDecoder(QObject*a0): QAudioDecoder(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAudioDecoder::~sipQAudioDecoder()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAudioDecoder::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QAudioDecoder);

    return QAudioDecoder::metaObject();
}

int sipQAudioDecoder::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAudioDecoder::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QAudioDecoder,_c,_id,_a);

    return _id;
}

void *sipQAudioDecoder::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QAudioDecoder, _clname, &sipCpp) ? sipCpp : QAudioDecoder::qt_metacast(_clname));
}

void sipQAudioDecoder::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAudioDecoder::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAudioDecoder::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAudioDecoder::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAudioDecoder::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAudioDecoder::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAudioDecoder::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAudioDecoder::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAudioDecoder::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAudioDecoder::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAudioDecoder::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAudioDecoder::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQAudioDecoder::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAudioDecoder::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaService* sipQAudioDecoder::service() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_service);

    if (!sipMeth)
        return QAudioDecoder::service();

    extern QMediaService* sipVH_QtMultimedia_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_6(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QMultimedia::AvailabilityStatus sipQAudioDecoder::availability() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_availability);

    if (!sipMeth)
        return QAudioDecoder::availability();

    extern QMultimedia::AvailabilityStatus sipVH_QtMultimedia_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_0(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAudioDecoder::isAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_isAvailable);

    if (!sipMeth)
        return QAudioDecoder::isAvailable();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAudioDecoder::unbind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_unbind);

    if (!sipMeth)
    {
        QAudioDecoder::unbind(a0);
        return;
    }

    extern void sipVH_QtMultimedia_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtMultimedia_5(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAudioDecoder::bind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_bind);

    if (!sipMeth)
        return QAudioDecoder::bind(a0);

    typedef bool (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAudioDecoder_hasSupport, "hasSupport(str, codecs: Iterable[str] = []) -> QMultimedia.SupportEstimate");

extern "C" {static PyObject *meth_QAudioDecoder_hasSupport(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_hasSupport(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList& a1def = QStringList();
        const QStringList* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_codecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            QMultimedia::SupportEstimate sipRes;

            sipRes = QAudioDecoder::hasSupport(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_SupportEstimate);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_hasSupport, doc_QAudioDecoder_hasSupport);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_state, "state(self) -> QAudioDecoder.State");

extern "C" {static PyObject *meth_QAudioDecoder_state(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            QAudioDecoder::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QAudioDecoder_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_state, doc_QAudioDecoder_state);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_sourceFilename, "sourceFilename(self) -> str");

extern "C" {static PyObject *meth_QAudioDecoder_sourceFilename(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_sourceFilename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sourceFilename());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_sourceFilename, doc_QAudioDecoder_sourceFilename);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_setSourceFilename, "setSourceFilename(self, str)");

extern "C" {static PyObject *meth_QAudioDecoder_setSourceFilename(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_setSourceFilename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAudioDecoder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setSourceFilename(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_setSourceFilename, doc_QAudioDecoder_setSourceFilename);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_sourceDevice, "sourceDevice(self) -> QIODevice");

extern "C" {static PyObject *meth_QAudioDecoder_sourceDevice(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_sourceDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            QIODevice*sipRes;

            sipRes = sipCpp->sourceDevice();

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_sourceDevice, doc_QAudioDecoder_sourceDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_setSourceDevice, "setSourceDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QAudioDecoder_setSourceDevice(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_setSourceDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAudioDecoder, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setSourceDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_setSourceDevice, doc_QAudioDecoder_setSourceDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_audioFormat, "audioFormat(self) -> QAudioFormat");

extern "C" {static PyObject *meth_QAudioDecoder_audioFormat(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_audioFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            QAudioFormat*sipRes;

            sipRes = new QAudioFormat(sipCpp->audioFormat());

            return sipConvertFromNewType(sipRes,sipType_QAudioFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_audioFormat, doc_QAudioDecoder_audioFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_setAudioFormat, "setAudioFormat(self, QAudioFormat)");

extern "C" {static PyObject *meth_QAudioDecoder_setAudioFormat(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_setAudioFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioFormat* a0;
        QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAudioDecoder, &sipCpp, sipType_QAudioFormat, &a0))
        {
            sipCpp->setAudioFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_setAudioFormat, doc_QAudioDecoder_setAudioFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_error, "error(self) -> QAudioDecoder.Error");

extern "C" {static PyObject *meth_QAudioDecoder_error(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            QAudioDecoder::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QAudioDecoder_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_error, doc_QAudioDecoder_error);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QAudioDecoder_errorString(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_errorString, doc_QAudioDecoder_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_read, "read(self) -> QAudioBuffer");

extern "C" {static PyObject *meth_QAudioDecoder_read(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            QAudioBuffer*sipRes;

            sipRes = new QAudioBuffer(sipCpp->read());

            return sipConvertFromNewType(sipRes,sipType_QAudioBuffer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_read, doc_QAudioDecoder_read);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_bufferAvailable, "bufferAvailable(self) -> bool");

extern "C" {static PyObject *meth_QAudioDecoder_bufferAvailable(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_bufferAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->bufferAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_bufferAvailable, doc_QAudioDecoder_bufferAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_position, "position(self) -> int");

extern "C" {static PyObject *meth_QAudioDecoder_position(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->position();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_position, doc_QAudioDecoder_position);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QAudioDecoder_duration(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->duration();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_duration, doc_QAudioDecoder_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_start, "start(self)");

extern "C" {static PyObject *meth_QAudioDecoder_start(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_start, doc_QAudioDecoder_start);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_stop, "stop(self)");

extern "C" {static PyObject *meth_QAudioDecoder_stop(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioDecoder, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_stop, doc_QAudioDecoder_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_bind, "bind(self, QObject) -> bool");

extern "C" {static PyObject *meth_QAudioDecoder_bind(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAudioDecoder, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAudioDecoder::bind(a0) : sipCpp->bind(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_bind, doc_QAudioDecoder_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioDecoder_unbind, "unbind(self, QObject)");

extern "C" {static PyObject *meth_QAudioDecoder_unbind(PyObject *, PyObject *);}
static PyObject *meth_QAudioDecoder_unbind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QAudioDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAudioDecoder, &sipCpp, sipType_QObject, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAudioDecoder::unbind(a0) : sipCpp->unbind(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioDecoder, sipName_unbind, doc_QAudioDecoder_unbind);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAudioDecoder(void *, int);}
static void release_QAudioDecoder(void *sipCppV,int)
{
    QAudioDecoder *sipCpp = reinterpret_cast<QAudioDecoder *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAudioDecoder(sipSimpleWrapper *);}
static void dealloc_QAudioDecoder(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAudioDecoder *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAudioDecoder(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAudioDecoder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAudioDecoder(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAudioDecoder *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAudioDecoder(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAudioDecoder[] = {{75, 255, 1}};


static PyMethodDef methods_QAudioDecoder[] = {
    {SIP_MLNAME_CAST(sipName_audioFormat), meth_QAudioDecoder_audioFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_audioFormat)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QAudioDecoder_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_bind)},
    {SIP_MLNAME_CAST(sipName_bufferAvailable), meth_QAudioDecoder_bufferAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_bufferAvailable)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QAudioDecoder_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_duration)},
    {SIP_MLNAME_CAST(sipName_error), meth_QAudioDecoder_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QAudioDecoder_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_errorString)},
    {SIP_MLNAME_CAST(sipName_hasSupport), (PyCFunction)meth_QAudioDecoder_hasSupport, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAudioDecoder_hasSupport)},
    {SIP_MLNAME_CAST(sipName_position), meth_QAudioDecoder_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_position)},
    {SIP_MLNAME_CAST(sipName_read), meth_QAudioDecoder_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_read)},
    {SIP_MLNAME_CAST(sipName_setAudioFormat), meth_QAudioDecoder_setAudioFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_setAudioFormat)},
    {SIP_MLNAME_CAST(sipName_setSourceDevice), meth_QAudioDecoder_setSourceDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_setSourceDevice)},
    {SIP_MLNAME_CAST(sipName_setSourceFilename), meth_QAudioDecoder_setSourceFilename, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_setSourceFilename)},
    {SIP_MLNAME_CAST(sipName_sourceDevice), meth_QAudioDecoder_sourceDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_sourceDevice)},
    {SIP_MLNAME_CAST(sipName_sourceFilename), meth_QAudioDecoder_sourceFilename, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_sourceFilename)},
    {SIP_MLNAME_CAST(sipName_start), meth_QAudioDecoder_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_start)},
    {SIP_MLNAME_CAST(sipName_state), meth_QAudioDecoder_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QAudioDecoder_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_stop)},
    {SIP_MLNAME_CAST(sipName_unbind), meth_QAudioDecoder_unbind, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioDecoder_unbind)}
};

static sipEnumMemberDef enummembers_QAudioDecoder[] = {
    {sipName_AccessDeniedError, static_cast<int>(QAudioDecoder::AccessDeniedError), 13},
    {sipName_DecodingState, static_cast<int>(QAudioDecoder::DecodingState), 14},
    {sipName_FormatError, static_cast<int>(QAudioDecoder::FormatError), 13},
    {sipName_NoError, static_cast<int>(QAudioDecoder::NoError), 13},
    {sipName_ResourceError, static_cast<int>(QAudioDecoder::ResourceError), 13},
    {sipName_ServiceMissingError, static_cast<int>(QAudioDecoder::ServiceMissingError), 13},
    {sipName_StoppedState, static_cast<int>(QAudioDecoder::StoppedState), 14},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAudioDecoder[] = {
    {"durationChanged(qint64)", "\1durationChanged(self, int)", 0, 0},
    {"positionChanged(qint64)", "\1positionChanged(self, int)", 0, 0},
    {"sourceChanged()", "\1sourceChanged(self)", 0, 0},
    {"formatChanged(QAudioFormat)", "\1formatChanged(self, QAudioFormat)", 0, 0},
    {"stateChanged(QAudioDecoder::State)", "\1stateChanged(self, QAudioDecoder.State)", 0, 0},
    {"finished()", "\1finished(self)", 0, 0},
    {"bufferReady()", "\1bufferReady(self)", 0, 0},
    {"bufferAvailableChanged(bool)", "\1bufferAvailableChanged(self, bool)", 0, 0},
    {"error(QAudioDecoder::Error)", "\1error(self, QAudioDecoder.Error)", &methods_QAudioDecoder[4], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAudioDecoder, "\1QAudioDecoder(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QAudioDecoder = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAudioDecoder,
        {0}
    },
    {
        sipNameNr_QAudioDecoder,
        {0, 0, 1},
        18, methods_QAudioDecoder,
        7, enummembers_QAudioDecoder,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAudioDecoder,
    -1,
    -1,
    supers_QAudioDecoder,
    0,
    init_type_QAudioDecoder,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAudioDecoder,
    0,
    0,
    0,
    release_QAudioDecoder,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAudioDecoder::staticMetaObject,
    0,
    signals_QAudioDecoder,
    0
};
