/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNfc.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 31 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilterRecord.cpp"

#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 35 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilterRecord.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefrecord.sip"
#include <qndefrecord.h>
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilterRecord.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QNdefFilter_Record(void *, int);}
static void release_QNdefFilter_Record(void *sipCppV,int)
{
    delete reinterpret_cast<QNdefFilter::Record *>(sipCppV);
}


extern "C" {static void assign_QNdefFilter_Record(void *, SIP_SSIZE_T, const void *);}
static void assign_QNdefFilter_Record(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QNdefFilter::Record *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QNdefFilter::Record *>(sipSrc);
}


extern "C" {static void *array_QNdefFilter_Record(SIP_SSIZE_T);}
static void *array_QNdefFilter_Record(SIP_SSIZE_T sipNrElem)
{
    return new QNdefFilter::Record[sipNrElem];
}


extern "C" {static void *copy_QNdefFilter_Record(const void *, SIP_SSIZE_T);}
static void *copy_QNdefFilter_Record(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QNdefFilter::Record(reinterpret_cast<const QNdefFilter::Record *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNdefFilter_Record(sipSimpleWrapper *);}
static void dealloc_QNdefFilter_Record(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QNdefFilter_Record(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QNdefFilter_Record(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNdefFilter_Record(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QNdefFilter::Record *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QNdefFilter::Record();

            return sipCpp;
        }
    }

    {
        const QNdefFilter::Record* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QNdefFilter_Record, &a0))
        {
            sipCpp = new QNdefFilter::Record(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_QNdefFilter_Record_maximum(void *, PyObject *, PyObject *);}
static PyObject *varget_QNdefFilter_Record_maximum(void *sipSelf, PyObject *, PyObject *)
{
    uint sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    sipVal = sipCpp->maximum;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static int varset_QNdefFilter_Record_maximum(void *, PyObject *, PyObject *);}
static int varset_QNdefFilter_Record_maximum(void *sipSelf, PyObject *sipPy, PyObject *)
{
    uint sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    sipVal = (uint)sipLong_AsUnsignedLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->maximum = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QNdefFilter_Record_minimum(void *, PyObject *, PyObject *);}
static PyObject *varget_QNdefFilter_Record_minimum(void *sipSelf, PyObject *, PyObject *)
{
    uint sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    sipVal = sipCpp->minimum;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static int varset_QNdefFilter_Record_minimum(void *, PyObject *, PyObject *);}
static int varset_QNdefFilter_Record_minimum(void *sipSelf, PyObject *sipPy, PyObject *)
{
    uint sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    sipVal = (uint)sipLong_AsUnsignedLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->minimum = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QNdefFilter_Record_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QNdefFilter_Record_type(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    QByteArray*sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -1);
    if (sipPy)
        return sipPy;

    sipVal = &sipCpp->type;

    sipPy = sipConvertFromType(sipVal, sipType_QByteArray, NULL);
    sipKeepReference(sipPySelf, -1, sipPy);

    return sipPy;
}


extern "C" {static int varset_QNdefFilter_Record_type(void *, PyObject *, PyObject *);}
static int varset_QNdefFilter_Record_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QByteArray*sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QByteArray *>(sipForceConvertToType(sipPy,sipType_QByteArray,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->type = *sipVal;

    sipReleaseType(sipVal, sipType_QByteArray, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QNdefFilter_Record_typeNameFormat(void *, PyObject *, PyObject *);}
static PyObject *varget_QNdefFilter_Record_typeNameFormat(void *sipSelf, PyObject *, PyObject *)
{
    QNdefRecord::TypeNameFormat sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    sipVal = sipCpp->typeNameFormat;

    return sipConvertFromEnum(sipVal, sipType_QNdefRecord_TypeNameFormat);
}


extern "C" {static int varset_QNdefFilter_Record_typeNameFormat(void *, PyObject *, PyObject *);}
static int varset_QNdefFilter_Record_typeNameFormat(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QNdefRecord::TypeNameFormat sipVal;
    QNdefFilter::Record *sipCpp = reinterpret_cast<QNdefFilter::Record *>(sipSelf);

    sipVal = (QNdefRecord::TypeNameFormat)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->typeNameFormat = sipVal;

    return 0;
}

sipVariableDef variables_QNdefFilter_Record[] = {
    {InstanceVariable, sipName_maximum, (PyMethodDef *)varget_QNdefFilter_Record_maximum, (PyMethodDef *)varset_QNdefFilter_Record_maximum, NULL, NULL},
    {InstanceVariable, sipName_minimum, (PyMethodDef *)varget_QNdefFilter_Record_minimum, (PyMethodDef *)varset_QNdefFilter_Record_minimum, NULL, NULL},
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QNdefFilter_Record_type, (PyMethodDef *)varset_QNdefFilter_Record_type, NULL, NULL},
    {InstanceVariable, sipName_typeNameFormat, (PyMethodDef *)varget_QNdefFilter_Record_typeNameFormat, (PyMethodDef *)varset_QNdefFilter_Record_typeNameFormat, NULL, NULL},
};

PyDoc_STRVAR(doc_QNdefFilter_Record, "\1QNdefFilter.Record()\n"
    "QNdefFilter.Record(QNdefFilter.Record)");


pyqt5ClassTypeDef sipTypeDef_QtNfc_QNdefFilter_Record = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNdefFilter__Record,
        {0}
    },
    {
        sipNameNr_Record,
        {4, 255, 0},
        0, 0,
        0, 0,
        4, variables_QNdefFilter_Record,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNdefFilter_Record,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QNdefFilter_Record,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNdefFilter_Record,
    assign_QNdefFilter_Record,
    array_QNdefFilter_Record,
    copy_QNdefFilter_Record,
    release_QNdefFilter_Record,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
