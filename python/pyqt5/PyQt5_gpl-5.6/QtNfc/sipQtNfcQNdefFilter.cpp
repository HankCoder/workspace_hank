/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNfc.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilter.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 35 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilter.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefrecord.sip"
#include <qndefrecord.h>
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilter.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilter.cpp"


PyDoc_STRVAR(doc_QNdefFilter_clear, "clear(self)");

extern "C" {static PyObject *meth_QNdefFilter_clear(PyObject *, PyObject *);}
static PyObject *meth_QNdefFilter_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNdefFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNdefFilter, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefFilter, sipName_clear, doc_QNdefFilter_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QNdefFilter_setOrderMatch, "setOrderMatch(self, bool)");

extern "C" {static PyObject *meth_QNdefFilter_setOrderMatch(PyObject *, PyObject *);}
static PyObject *meth_QNdefFilter_setOrderMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QNdefFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNdefFilter, &sipCpp, &a0))
        {
            sipCpp->setOrderMatch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefFilter, sipName_setOrderMatch, doc_QNdefFilter_setOrderMatch);

    return NULL;
}


PyDoc_STRVAR(doc_QNdefFilter_orderMatch, "orderMatch(self) -> bool");

extern "C" {static PyObject *meth_QNdefFilter_orderMatch(PyObject *, PyObject *);}
static PyObject *meth_QNdefFilter_orderMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNdefFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNdefFilter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->orderMatch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefFilter, sipName_orderMatch, doc_QNdefFilter_orderMatch);

    return NULL;
}


PyDoc_STRVAR(doc_QNdefFilter_appendRecord, "appendRecord(self, QNdefRecord.TypeNameFormat, Union[QByteArray, bytes, bytearray], min: int = 1, max: int = 1)\n"
    "appendRecord(self, QNdefFilter.Record)");

extern "C" {static PyObject *meth_QNdefFilter_appendRecord(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNdefFilter_appendRecord(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QNdefRecord::TypeNameFormat a0;
        const QByteArray* a1;
        int a1State = 0;
        uint a2 = 1;
        uint a3 = 1;
        QNdefFilter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_min,
            sipName_max,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1|uu", &sipSelf, sipType_QNdefFilter, &sipCpp, sipType_QNdefRecord_TypeNameFormat, &a0, sipType_QByteArray, &a1, &a1State, &a2, &a3))
        {
            sipCpp->appendRecord(a0,*a1,a2,a3);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QNdefFilter::Record* a0;
        QNdefFilter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNdefFilter, &sipCpp, sipType_QNdefFilter_Record, &a0))
        {
            sipCpp->appendRecord(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefFilter, sipName_appendRecord, doc_QNdefFilter_appendRecord);

    return NULL;
}


PyDoc_STRVAR(doc_QNdefFilter_recordCount, "recordCount(self) -> int");

extern "C" {static PyObject *meth_QNdefFilter_recordCount(PyObject *, PyObject *);}
static PyObject *meth_QNdefFilter_recordCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNdefFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNdefFilter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->recordCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefFilter, sipName_recordCount, doc_QNdefFilter_recordCount);

    return NULL;
}


PyDoc_STRVAR(doc_QNdefFilter_recordAt, "recordAt(self, int) -> QNdefFilter.Record");

extern "C" {static PyObject *meth_QNdefFilter_recordAt(PyObject *, PyObject *);}
static PyObject *meth_QNdefFilter_recordAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QNdefFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNdefFilter, &sipCpp, &a0))
        {
            QNdefFilter::Record*sipRes;

            sipRes = new QNdefFilter::Record(sipCpp->recordAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QNdefFilter_Record,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefFilter, sipName_recordAt, doc_QNdefFilter_recordAt);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QNdefFilter___len__(PyObject *);}
static SIP_SSIZE_T slot_QNdefFilter___len__(PyObject *sipSelf)
{
    QNdefFilter *sipCpp = reinterpret_cast<QNdefFilter *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNdefFilter));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->recordCount();
#line 254 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNdefFilter.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNdefFilter(void *, int);}
static void release_QNdefFilter(void *sipCppV,int)
{
    delete reinterpret_cast<QNdefFilter *>(sipCppV);
}


extern "C" {static void assign_QNdefFilter(void *, SIP_SSIZE_T, const void *);}
static void assign_QNdefFilter(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QNdefFilter *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QNdefFilter *>(sipSrc);
}


extern "C" {static void *array_QNdefFilter(SIP_SSIZE_T);}
static void *array_QNdefFilter(SIP_SSIZE_T sipNrElem)
{
    return new QNdefFilter[sipNrElem];
}


extern "C" {static void *copy_QNdefFilter(const void *, SIP_SSIZE_T);}
static void *copy_QNdefFilter(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QNdefFilter(reinterpret_cast<const QNdefFilter *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNdefFilter(sipSimpleWrapper *);}
static void dealloc_QNdefFilter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QNdefFilter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QNdefFilter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNdefFilter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QNdefFilter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QNdefFilter();

            return sipCpp;
        }
    }

    {
        const QNdefFilter* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QNdefFilter, &a0))
        {
            sipCpp = new QNdefFilter(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNdefFilter[] = {
    {(void *)slot_QNdefFilter___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNdefFilter[] = {
    {SIP_MLNAME_CAST(sipName_appendRecord), (PyCFunction)meth_QNdefFilter_appendRecord, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNdefFilter_appendRecord)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QNdefFilter_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QNdefFilter_clear)},
    {SIP_MLNAME_CAST(sipName_orderMatch), meth_QNdefFilter_orderMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QNdefFilter_orderMatch)},
    {SIP_MLNAME_CAST(sipName_recordAt), meth_QNdefFilter_recordAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QNdefFilter_recordAt)},
    {SIP_MLNAME_CAST(sipName_recordCount), meth_QNdefFilter_recordCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QNdefFilter_recordCount)},
    {SIP_MLNAME_CAST(sipName_setOrderMatch), meth_QNdefFilter_setOrderMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QNdefFilter_setOrderMatch)}
};

PyDoc_STRVAR(doc_QNdefFilter, "\1QNdefFilter()\n"
    "QNdefFilter(QNdefFilter)");


pyqt5ClassTypeDef sipTypeDef_QtNfc_QNdefFilter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNdefFilter,
        {0}
    },
    {
        sipNameNr_QNdefFilter,
        {0, 0, 1},
        6, methods_QNdefFilter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNdefFilter,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QNdefFilter,
    init_type_QNdefFilter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNdefFilter,
    assign_QNdefFilter,
    array_QNdefFilter,
    copy_QNdefFilter,
    release_QNdefFilter,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
