/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNfc.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
#include <qnearfieldmanager.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefrecord.sip"
#include <qndefrecord.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
#include <qnearfieldmanager.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"


class sipQNearFieldManager : public QNearFieldManager
{
public:
    sipQNearFieldManager(QObject*);
    virtual ~sipQNearFieldManager();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNearFieldManager(const sipQNearFieldManager &);
    sipQNearFieldManager &operator = (const sipQNearFieldManager &);

    char sipPyMethods[7];
};

sipQNearFieldManager::sipQNearFieldManager(QObject*a0): QNearFieldManager(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNearFieldManager::~sipQNearFieldManager()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNearFieldManager::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNfc_qt_metaobject(sipPySelf,sipType_QNearFieldManager);

    return QNearFieldManager::metaObject();
}

int sipQNearFieldManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNearFieldManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNfc_qt_metacall(sipPySelf,sipType_QNearFieldManager,_c,_id,_a);

    return _id;
}

void *sipQNearFieldManager::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNfc_qt_metacast(sipPySelf, sipType_QNearFieldManager, _clname, &sipCpp) ? sipCpp : QNearFieldManager::qt_metacast(_clname));
}

void sipQNearFieldManager::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNearFieldManager::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNfc_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNfc_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNearFieldManager::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNearFieldManager::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNfc_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNfc_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNearFieldManager::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNearFieldManager::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNfc_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNfc_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNearFieldManager::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNearFieldManager::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNfc_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNfc_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNearFieldManager::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNearFieldManager::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNfc_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNfc_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQNearFieldManager::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNearFieldManager::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNfc_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNfc_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQNearFieldManager::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNearFieldManager::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNfc_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNfc_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNearFieldManager_isAvailable, "isAvailable(self) -> bool");

extern "C" {static PyObject *meth_QNearFieldManager_isAvailable(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldManager_isAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldManager, sipName_isAvailable, doc_QNearFieldManager_isAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldManager_setTargetAccessModes, "setTargetAccessModes(self, QNearFieldManager.TargetAccessModes)");

extern "C" {static PyObject *meth_QNearFieldManager_setTargetAccessModes(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldManager_setTargetAccessModes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNearFieldManager::TargetAccessModes* a0;
        int a0State = 0;
        QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNearFieldManager, &sipCpp, sipType_QNearFieldManager_TargetAccessModes, &a0, &a0State))
        {
            sipCpp->setTargetAccessModes(*a0);
            sipReleaseType(a0,sipType_QNearFieldManager_TargetAccessModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldManager, sipName_setTargetAccessModes, doc_QNearFieldManager_setTargetAccessModes);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldManager_targetAccessModes, "targetAccessModes(self) -> QNearFieldManager.TargetAccessModes");

extern "C" {static PyObject *meth_QNearFieldManager_targetAccessModes(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldManager_targetAccessModes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldManager, &sipCpp))
        {
            QNearFieldManager::TargetAccessModes*sipRes;

            sipRes = new QNearFieldManager::TargetAccessModes(sipCpp->targetAccessModes());

            return sipConvertFromNewType(sipRes,sipType_QNearFieldManager_TargetAccessModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldManager, sipName_targetAccessModes, doc_QNearFieldManager_targetAccessModes);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldManager_startTargetDetection, "startTargetDetection(self) -> bool");

extern "C" {static PyObject *meth_QNearFieldManager_startTargetDetection(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldManager_startTargetDetection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->startTargetDetection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldManager, sipName_startTargetDetection, doc_QNearFieldManager_startTargetDetection);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldManager_stopTargetDetection, "stopTargetDetection(self)");

extern "C" {static PyObject *meth_QNearFieldManager_stopTargetDetection(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldManager_stopTargetDetection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldManager, &sipCpp))
        {
            sipCpp->stopTargetDetection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldManager, sipName_stopTargetDetection, doc_QNearFieldManager_stopTargetDetection);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldManager_registerNdefMessageHandler, "registerNdefMessageHandler(self, PYQT_SLOT) -> int\n"
    "registerNdefMessageHandler(self, QNdefRecord.TypeNameFormat, Union[QByteArray, bytes, bytearray], PYQT_SLOT) -> int\n"
    "registerNdefMessageHandler(self, QNdefFilter, PYQT_SLOT) -> int");

extern "C" {static PyObject *meth_QNearFieldManager_registerNdefMessageHandler(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldManager_registerNdefMessageHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QNearFieldManager, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 82 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtnfc_get_pyqtslot_parts(a0, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->registerNdefMessageHandler(receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 456 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        QNdefRecord::TypeNameFormat a0;
        const QByteArray* a1;
        int a1State = 0;
        PyObject * a2;
        QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1P0", &sipSelf, sipType_QNearFieldManager, &sipCpp, sipType_QNdefRecord_TypeNameFormat, &a0, sipType_QByteArray, &a1, &a1State, &a2))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 97 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtnfc_get_pyqtslot_parts(a2, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->registerNdefMessageHandler(a0, *a1, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(2, a2);
        }
#line 494 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const QNdefFilter* a0;
        PyObject * a1;
        QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9P0", &sipSelf, sipType_QNearFieldManager, &sipCpp, sipType_QNdefFilter, &a0, &a1))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 112 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtnfc_get_pyqtslot_parts(a1, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->registerNdefMessageHandler(*a0, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(1, a1);
        }
#line 531 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldManager.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldManager, sipName_registerNdefMessageHandler, doc_QNearFieldManager_registerNdefMessageHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldManager_unregisterNdefMessageHandler, "unregisterNdefMessageHandler(self, int) -> bool");

extern "C" {static PyObject *meth_QNearFieldManager_unregisterNdefMessageHandler(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldManager_unregisterNdefMessageHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QNearFieldManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNearFieldManager, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->unregisterNdefMessageHandler(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldManager, sipName_unregisterNdefMessageHandler, doc_QNearFieldManager_unregisterNdefMessageHandler);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNearFieldManager(void *, int);}
static void release_QNearFieldManager(void *sipCppV,int)
{
    QNearFieldManager *sipCpp = reinterpret_cast<QNearFieldManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNearFieldManager(sipSimpleWrapper *);}
static void dealloc_QNearFieldManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNearFieldManager *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNearFieldManager(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNearFieldManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNearFieldManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNearFieldManager *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNearFieldManager(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNearFieldManager[] = {{164, 0, 1}};


static PyMethodDef methods_QNearFieldManager[] = {
    {SIP_MLNAME_CAST(sipName_isAvailable), meth_QNearFieldManager_isAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldManager_isAvailable)},
    {SIP_MLNAME_CAST(sipName_registerNdefMessageHandler), meth_QNearFieldManager_registerNdefMessageHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldManager_registerNdefMessageHandler)},
    {SIP_MLNAME_CAST(sipName_setTargetAccessModes), meth_QNearFieldManager_setTargetAccessModes, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldManager_setTargetAccessModes)},
    {SIP_MLNAME_CAST(sipName_startTargetDetection), meth_QNearFieldManager_startTargetDetection, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldManager_startTargetDetection)},
    {SIP_MLNAME_CAST(sipName_stopTargetDetection), meth_QNearFieldManager_stopTargetDetection, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldManager_stopTargetDetection)},
    {SIP_MLNAME_CAST(sipName_targetAccessModes), meth_QNearFieldManager_targetAccessModes, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldManager_targetAccessModes)},
    {SIP_MLNAME_CAST(sipName_unregisterNdefMessageHandler), meth_QNearFieldManager_unregisterNdefMessageHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldManager_unregisterNdefMessageHandler)}
};

static sipEnumMemberDef enummembers_QNearFieldManager[] = {
    {sipName_NdefReadTargetAccess, static_cast<int>(QNearFieldManager::NdefReadTargetAccess), 16},
    {sipName_NdefWriteTargetAccess, static_cast<int>(QNearFieldManager::NdefWriteTargetAccess), 16},
    {sipName_NoTargetAccess, static_cast<int>(QNearFieldManager::NoTargetAccess), 16},
    {sipName_TagTypeSpecificTargetAccess, static_cast<int>(QNearFieldManager::TagTypeSpecificTargetAccess), 16},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNearFieldManager[] = {
    {"targetLost(QNearFieldTarget*)", "\1targetLost(self, QNearFieldTarget)", 0, 0},
    {"targetDetected(QNearFieldTarget*)", "\1targetDetected(self, QNearFieldTarget)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QNearFieldManager, "\1QNearFieldManager(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtNfc_QNearFieldManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNearFieldManager,
        {0}
    },
    {
        sipNameNr_QNearFieldManager,
        {0, 0, 1},
        7, methods_QNearFieldManager,
        4, enummembers_QNearFieldManager,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNearFieldManager,
    -1,
    -1,
    supers_QNearFieldManager,
    0,
    init_type_QNearFieldManager,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNearFieldManager,
    0,
    0,
    0,
    release_QNearFieldManager,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNearFieldManager::staticMetaObject,
    0,
    signals_QNearFieldManager,
    0
};
