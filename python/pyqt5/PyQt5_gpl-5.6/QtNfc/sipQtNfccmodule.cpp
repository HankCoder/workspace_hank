/*
 * Module code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNfc.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefrecord.sip"
#include <qndefrecord.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
#include <qnearfieldmanager.h>
#line 35 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldsharemanager.sip"
#include <qnearfieldsharemanager.h>
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 41 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 68 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 46 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 49 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 52 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 55 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefmessage.sip"
#include <qndefmessage.h>
#line 58 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldtarget.sip"
#include <qnearfieldtarget.h>
#line 61 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 64 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 67 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndeffilter.sip"
#include <qndeffilter.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefnfcsmartposterrecord.sip"
#include <qndefnfcsmartposterrecord.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 44 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefnfcsmartposterrecord.sip"
#include <qndefnfcsmartposterrecord.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefnfctextrecord.sip"
#include <qndefnfctextrecord.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefnfcurirecord.sip"
#include <qndefnfcurirecord.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
#include <qnearfieldmanager.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldsharemanager.sip"
#include <qnearfieldsharemanager.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtNfc[] = {
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'M', 'a', 'n', 'a', 'g', 'e', 'r', ':', ':', 'T', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 's', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'M', 'a', 'n', 'a', 'g', 'e', 'r', ':', ':', 'T', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'S', 'h', 'a', 'r', 'e', 'M', 'a', 'n', 'a', 'g', 'e', 'r', ':', ':', 'S', 'h', 'a', 'r', 'e', 'M', 'o', 'd', 'e', 's', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'S', 'h', 'a', 'r', 'e', 'M', 'a', 'n', 'a', 'g', 'e', 'r', ':', ':', 'S', 'h', 'a', 'r', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'S', 'h', 'a', 'r', 'e', 'M', 'a', 'n', 'a', 'g', 'e', 'r', ':', ':', 'S', 'h', 'a', 'r', 'e', 'M', 'o', 'd', 'e', 0,
    'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'S', 'm', 'a', 'r', 't', 'P', 'o', 's', 't', 'e', 'r', 'R', 'e', 'c', 'o', 'r', 'd', ':', ':', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'T', 'a', 'r', 'g', 'e', 't', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'Q', 'Q', 'm', 'l', 'N', 'd', 'e', 'f', 'R', 'e', 'c', 'o', 'r', 'd', ':', ':', 'T', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'T', 'a', 'r', 'g', 'e', 't', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'N', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'T', 'e', 'x', 't', 'R', 'e', 'c', 'o', 'r', 'd', ':', ':', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'T', 'a', 'r', 'g', 'e', 't', ':', ':', 'R', 'e', 'q', 'u', 'e', 's', 't', 'I', 'd', 0,
    'S', 'h', 'a', 'r', 'e', 'A', 'l', 'r', 'e', 'a', 'd', 'y', 'I', 'n', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'T', 'a', 'g', 'T', 'y', 'p', 'e', 'S', 'p', 'e', 'c', 'i', 'f', 'i', 'c', 'T', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 0,
    'Q', 'N', 'd', 'e', 'f', 'R', 'e', 'c', 'o', 'r', 'd', ':', ':', 'T', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'S', 'h', 'a', 'r', 'e', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'D', 'e', 'n', 'i', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'I', 'c', 'o', 'n', 'R', 'e', 'c', 'o', 'r', 'd', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'T', 'e', 'x', 't', 'R', 'e', 'c', 'o', 'r', 'd', '>', 0,
    'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'S', 'h', 'a', 'r', 'e', 'M', 'o', 'd', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'S', 'm', 'a', 'r', 't', 'P', 'o', 's', 't', 'e', 'r', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'n', 't', 'e', 'n', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'd', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'T', 'a', 'r', 'g', 'e', 't', ':', ':', 'E', 'r', 'r', 'o', 'r', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'T', 'a', 'r', 'g', 'e', 't', ':', ':', 'T', 'y', 'p', 'e', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'S', 'h', 'a', 'r', 'e', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    't', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 'F', 'o', 'r', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'C', 'h', 'e', 'c', 'k', 's', 'u', 'm', 'M', 'i', 's', 'm', 'a', 't', 'c', 'h', 'E', 'r', 'r', 'o', 'r', 0,
    'T', 'a', 'r', 'g', 'e', 't', 'O', 'u', 't', 'O', 'f', 'R', 'a', 'n', 'g', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'T', 'a', 'g', 'T', 'y', 'p', 'e', 'S', 'p', 'e', 'c', 'i', 'f', 'i', 'c', 'A', 'c', 'c', 'e', 's', 's', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'S', 'h', 'a', 'r', 'e', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'S', 'h', 'a', 'r', 'e', 'I', 'n', 't', 'e', 'r', 'r', 'u', 'p', 't', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'N', 'd', 'e', 'f', 'W', 'r', 'i', 't', 'e', 'T', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 0,
    'e', 'm', 'i', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'd', 0,
    's', 't', 'a', 'r', 't', 'T', 'a', 'r', 'g', 'e', 't', 'D', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 's', 0,
    'N', 'd', 'e', 'f', 'R', 'e', 'a', 'd', 'T', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'N', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', '>', 0,
    'n', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', 's', 'W', 'r', 'i', 't', 't', 'e', 'n', 0,
    'i', 's', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'S', 'h', 'a', 'r', 'e', 'M', 'o', 'd', 'e', 's', 0,
    's', 't', 'o', 'p', 'T', 'a', 'r', 'g', 'e', 't', 'D', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'N', 'd', 'e', 'f', 'F', 'i', 'l', 't', 'e', 'r', ':', ':', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'N', 'd', 'e', 'f', 'R', 'e', 'c', 'o', 'r', 'd', '>', 0,
    'S', 'h', 'a', 'r', 'e', 'R', 'e', 'j', 'e', 'c', 't', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'S', 'h', 'a', 'r', 'e', 'C', 'a', 'n', 'c', 'e', 'l', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'T', 'e', 'x', 't', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'I', 'c', 'o', 'n', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'w', 'r', 'i', 't', 'e', 'N', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', 's', 0,
    'i', 's', 'S', 'h', 'a', 'r', 'e', 'I', 'n', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    's', 'h', 'a', 'r', 'e', 'M', 'o', 'd', 'e', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    't', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 's', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    's', 'e', 't', 'T', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'N', 'd', 'e', 'f', 'N', 'f', 'c', 'U', 'r', 'i', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 'A', 'c', 't', 'i', 'o', 'n', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'd', 0,
    'r', 'e', 'a', 'd', 'N', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', 's', 0,
    'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'N', 'e', 'a', 'r', 'F', 'i', 'e', 'l', 'd', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'n', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', 'R', 'e', 'a', 'd', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 0,
    'N', 'o', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'Q', 'm', 'l', 'N', 'd', 'e', 'f', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 0,
    'h', 'a', 's', 'N', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'N', 'd', 'e', 'f', 'W', 'r', 'i', 't', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'P', 'r', 'o', 'p', 'r', 'i', 'e', 't', 'a', 'r', 'y', 'T', 'a', 'g', 0,
    't', 'a', 'r', 'g', 'e', 't', 'D', 'e', 't', 'e', 'c', 't', 'e', 'd', 0,
    'N', 'o', 'T', 'a', 'r', 'g', 'e', 't', 'A', 'c', 'c', 'e', 's', 's', 0,
    't', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'r', 'e', 'c', 'o', 'r', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'a', 'c', 'c', 'e', 's', 's', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'N', 'd', 'e', 'f', 'R', 'e', 'a', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'A', 'c', 'c', 'e', 's', 's', 0,
    's', 'h', 'a', 'r', 'e', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    's', 'e', 't', 'S', 'h', 'a', 'r', 'e', 'M', 'o', 'd', 'e', 's', 0,
    'f', 'r', 'o', 'm', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    's', 'e', 't', 'O', 'r', 'd', 'e', 'r', 'M', 'a', 't', 'c', 'h', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 's', 0,
    't', 'i', 't', 'l', 'e', 'R', 'e', 'c', 'o', 'r', 'd', 's', 0,
    'Q', 'N', 'd', 'e', 'f', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    't', 'y', 'p', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 0,
    'N', 'f', 'c', 'T', 'a', 'g', 'T', 'y', 'p', 'e', '4', 0,
    'N', 'f', 'c', 'T', 'a', 'g', 'T', 'y', 'p', 'e', '3', 0,
    'N', 'f', 'c', 'T', 'a', 'g', 'T', 'y', 'p', 'e', '2', 0,
    'N', 'f', 'c', 'T', 'a', 'g', 'T', 'y', 'p', 'e', '1', 0,
    'i', 's', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'E', 'x', 't', 'e', 'r', 'n', 'a', 'l', 'R', 't', 'd', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'T', 'y', 'p', 'e', 'I', 'n', 'f', 'o', 0,
    'i', 'c', 'o', 'n', 'R', 'e', 'c', 'o', 'r', 'd', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'T', 'i', 't', 'l', 'e', 0,
    't', 'i', 't', 'l', 'e', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'h', 'a', 's', 'T', 'y', 'p', 'e', 'I', 'n', 'f', 'o', 0,
    'Q', 'N', 'd', 'e', 'f', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'r', 'e', 'c', 'o', 'r', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'N', 'd', 'e', 'f', 'F', 'i', 'l', 't', 'e', 'r', 0,
    't', 'o', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    '_', '_', 'd', 'e', 'l', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 's', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'N', 'f', 'c', 0,
    'L', 'l', 'c', 'p', 'A', 'c', 'c', 'e', 's', 's', 0,
    'N', 'd', 'e', 'f', 'A', 'c', 'c', 'e', 's', 's', 0,
    's', 'h', 'a', 'r', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'h', 'a', 'r', 'e', 'M', 'o', 'd', 'e', 's', 0,
    't', 'a', 'r', 'g', 'e', 't', 'L', 'o', 's', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'I', 'c', 'o', 'n', 0,
    'i', 'c', 'o', 'n', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    't', 'i', 't', 'l', 'e', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'P', 'a', 'y', 'l', 'o', 'a', 'd', 0,
    'E', 'd', 'i', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'a', 'v', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'o', 'r', 'd', 'e', 'r', 'M', 'a', 't', 'c', 'h', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    's', 'e', 't', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'M', 'i', 'f', 'a', 'r', 'e', 'T', 'a', 'g', 0,
    'F', 'i', 'l', 'e', 'S', 'h', 'a', 'r', 'e', 0,
    'N', 'd', 'e', 'f', 'S', 'h', 'a', 'r', 'e', 0,
    'i', 'c', 'o', 'n', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'u', 'r', 'i', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    's', 'e', 't', 'T', 'i', 't', 'l', 'e', 's', 0,
    'h', 'a', 's', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    's', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'r', 'e', 'f', 'C', 'o', 'u', 'n', 't', 0,
    't', 'y', 'p', 'e', 'I', 'n', 'f', 'o', 0,
    's', 'e', 't', 'I', 'c', 'o', 'n', 's', 0,
    'e', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'a', 'd', 'd', 'T', 'i', 't', 'l', 'e', 0,
    'h', 'a', 's', 'T', 'i', 't', 'l', 'e', 0,
    'D', 'o', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'c', 'o', 'r', 'd', 'A', 't', 0,
    'n', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'm', 'i', 'm', 'e', 't', 'y', 'p', 'e', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'N', 'o', 'S', 'h', 'a', 'r', 'e', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    'a', 'd', 'd', 'I', 'c', 'o', 'n', 0,
    'h', 'a', 's', 'S', 'i', 'z', 'e', 0,
    'h', 'a', 's', 'I', 'c', 'o', 'n', 0,
    'p', 'a', 'y', 'l', 'o', 'a', 'd', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 0,
    's', 'e', 't', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 0,
    'N', 'o', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'T', 'y', 'p', 'e', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    's', 'e', 't', 'D', 'a', 't', 'a', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    'N', 'f', 'c', 'R', 't', 'd', 0,
    's', 'e', 't', 'U', 'r', 'i', 0,
    'r', 'e', 'c', 'o', 'r', 'd', 0,
    'c', 'a', 'n', 'c', 'e', 'l', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', '9', 0,
    'v', 'a', 'l', 'u', 'e', '8', 0,
    'v', 'a', 'l', 'u', 'e', '7', 0,
    'v', 'a', 'l', 'u', 'e', '6', 0,
    'v', 'a', 'l', 'u', 'e', '5', 0,
    'v', 'a', 'l', 'u', 'e', '4', 0,
    'v', 'a', 'l', 'u', 'e', '3', 0,
    'v', 'a', 'l', 'u', 'e', '2', 0,
    'v', 'a', 'l', 'u', 'e', '1', 0,
    'v', 'a', 'l', 'u', 'e', '0', 0,
    's', 'y', 'm', 'b', 'o', 'l', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    '_', '_', 'g', 'e', '_', '_', 0,
    'a', 'c', 't', 'i', 'o', 'n', 0,
    '_', '_', 'l', 't', '_', '_', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    's', 'h', 'a', 'r', 'e', 0,
    's', 'e', 't', 'I', 'd', 0,
    'U', 't', 'f', '1', '6', 0,
    't', 'i', 't', 'l', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'm', 's', 'e', 'c', 's', 0,
    'M', 'i', 'm', 'e', 0,
    'U', 't', 'f', '8', 0,
    'i', 'c', 'o', 'n', 0,
    't', 'e', 'x', 't', 0,
    'm', 'o', 'd', 'e', 0,
    'n', 'a', 'm', 'e', 0,
    'b', 'a', 's', 'e', 0,
    's', 'i', 'z', 'e', 0,
    'f', 'r', 'o', 'm', 0,
    's', 'o', 'r', 't', 0,
    'd', 'a', 't', 'a', 0,
    'u', 'i', 'd', 0,
    'u', 'r', 'i', 0,
    'm', 'a', 'x', 0,
    'm', 'i', 'n', 0,
    'u', 'r', 'l', 0,
};
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
// Imports from QtCore.
pyqt5_qtnfc_get_pyqtslot_parts_t pyqt5_qtnfc_get_pyqtslot_parts;
#line 325 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"

bool sipVH_QtNfc_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QNearFieldTarget::RequestId& a0,const QByteArray& a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "NN",new QNearFieldTarget::RequestId(a0),sipType_QNearFieldTarget_RequestId,NULL,new QByteArray(a1),sipType_QByteArray,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtNfc_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QNearFieldTarget::RequestId& a0,int a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "Ni",new QNearFieldTarget::RequestId(a0),sipType_QNearFieldTarget_RequestId,NULL,a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

QNearFieldTarget::RequestId sipVH_QtNfc_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QList<QByteArray>& a0)
{
    QNearFieldTarget::RequestId sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N",new QList<QByteArray>(a0),sipType_QList_0100QByteArray,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QNearFieldTarget_RequestId, &sipRes);

    return sipRes;
}

QNearFieldTarget::RequestId sipVH_QtNfc_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QByteArray& a0)
{
    QNearFieldTarget::RequestId sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N",new QByteArray(a0),sipType_QByteArray,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QNearFieldTarget_RequestId, &sipRes);

    return sipRes;
}

QNearFieldTarget::RequestId sipVH_QtNfc_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QList<QNdefMessage>& a0)
{
    QNearFieldTarget::RequestId sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N",new QList<QNdefMessage>(a0),sipType_QList_0100QNdefMessage,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QNearFieldTarget_RequestId, &sipRes);

    return sipRes;
}

QNearFieldTarget::RequestId sipVH_QtNfc_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QNearFieldTarget::RequestId sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QNearFieldTarget_RequestId, &sipRes);

    return sipRes;
}

QNearFieldTarget::AccessMethods sipVH_QtNfc_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QNearFieldTarget::AccessMethods sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QNearFieldTarget_AccessMethods, &sipRes);

    return sipRes;
}

QNearFieldTarget::Type sipVH_QtNfc_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QNearFieldTarget::Type sipRes = (QNearFieldTarget::Type)0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QNearFieldTarget_Type, &sipRes);

    return sipRes;
}

QUrl sipVH_QtNfc_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QUrl sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QUrl, &sipRes);

    return sipRes;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QNdefRecord(void **);}
static const sipTypeDef *sipSubClass_QNdefRecord(void **sipCppRet)
{
    QNdefRecord *sipCpp = reinterpret_cast<QNdefRecord *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefrecord.sip"
    QByteArray ndef_type = sipCpp->type();
    
    switch (sipCpp->typeNameFormat())
    {
    case QNdefRecord::NfcRtd:
        if (ndef_type == "Sp")
            sipType = sipType_QNdefNfcSmartPosterRecord;
        else if (ndef_type == "T")
            sipType = sipType_QNdefNfcTextRecord;
        else if (ndef_type == "U")
            sipType = sipType_QNdefNfcUriRecord;
        else
            sipType = 0;
        
        break;
    
    case QNdefRecord::Mime:
        if (ndef_type == "")
            sipType = sipType_QNdefNfcIconRecord;
        else
            sipType = 0;
        
        break;
        
    default:
        sipType = 0;
    }
#line 453 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QNearFieldManager(void **);}
static const sipTypeDef *sipSubClass_QNearFieldManager(void **sipCppRet)
{
    QObject *sipCpp = reinterpret_cast<QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QNearFieldManager, &sipType_QNearFieldManager, -1, 1},
        {sipName_QNearFieldTarget, &sipType_QNearFieldTarget, -1, 2},
        {sipName_QNearFieldShareManager, &sipType_QNearFieldShareManager, -1, 3},
        {sipName_QQmlNdefRecord, &sipType_QQmlNdefRecord, -1, 4},
        {sipName_QNearFieldShareTarget, &sipType_QNearFieldShareTarget, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 496 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"

    return sipType;
}


extern "C" {static PyObject *slot_QNearFieldTarget_AccessMethod___or__(PyObject *,PyObject *);}
static PyObject *slot_QNearFieldTarget_AccessMethod___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QNearFieldTarget::AccessMethod a0;
        QNearFieldTarget::AccessMethods* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QNearFieldTarget_AccessMethod, &a0, sipType_QNearFieldTarget_AccessMethods, &a1, &a1State))
        {
            QNearFieldTarget::AccessMethods*sipRes;

            sipRes = new QNearFieldTarget::AccessMethods((a0 | *a1));
            sipReleaseType(a1,sipType_QNearFieldTarget_AccessMethods,a1State);

            return sipConvertFromNewType(sipRes,sipType_QNearFieldTarget_AccessMethods,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QNearFieldTarget_AccessMethod[] = {
    {(void *)slot_QNearFieldTarget_AccessMethod___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QNearFieldShareManager_ShareMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QNearFieldShareManager_ShareMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QNearFieldShareManager::ShareMode a0;
        QNearFieldShareManager::ShareModes* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QNearFieldShareManager_ShareMode, &a0, sipType_QNearFieldShareManager_ShareModes, &a1, &a1State))
        {
            QNearFieldShareManager::ShareModes*sipRes;

            sipRes = new QNearFieldShareManager::ShareModes((a0 | *a1));
            sipReleaseType(a1,sipType_QNearFieldShareManager_ShareModes,a1State);

            return sipConvertFromNewType(sipRes,sipType_QNearFieldShareManager_ShareModes,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QNearFieldShareManager_ShareMode[] = {
    {(void *)slot_QNearFieldShareManager_ShareMode___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QNearFieldManager_TargetAccessMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QNearFieldManager_TargetAccessMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QNearFieldManager::TargetAccessMode a0;
        QNearFieldManager::TargetAccessModes* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QNearFieldManager_TargetAccessMode, &a0, sipType_QNearFieldManager_TargetAccessModes, &a1, &a1State))
        {
            QNearFieldManager::TargetAccessModes*sipRes;

            sipRes = new QNearFieldManager::TargetAccessModes((a0 | *a1));
            sipReleaseType(a1,sipType_QNearFieldManager_TargetAccessModes,a1State);

            return sipConvertFromNewType(sipRes,sipType_QNearFieldManager_TargetAccessModes,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QNearFieldManager_TargetAccessMode[] = {
    {(void *)slot_QNearFieldManager_TargetAccessMode___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlNdefRecord__TypeNameFormat, {0}}, sipNameNr_TypeNameFormat, 29, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNearFieldTarget__Error, {0}}, sipNameNr_Error, 23, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNearFieldTarget__AccessMethod, {0}}, sipNameNr_AccessMethod, 23, slots_QNearFieldTarget_AccessMethod},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNearFieldTarget__Type, {0}}, sipNameNr_Type, 23, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNearFieldShareManager__ShareMode, {0}}, sipNameNr_ShareMode, 18, slots_QNearFieldShareManager_ShareMode},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNearFieldShareManager__ShareError, {0}}, sipNameNr_ShareError, 18, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNearFieldManager__TargetAccessMode, {0}}, sipNameNr_TargetAccessMode, 15, slots_QNearFieldManager_TargetAccessMode},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNdefRecord__TypeNameFormat, {0}}, sipNameNr_TypeNameFormat, 13, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNdefNfcTextRecord__Encoding, {0}}, sipNameNr_Encoding, 10, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNdefNfcSmartPosterRecord__Action, {0}}, sipNameNr_Action, 8, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtNfc_QList_0100QNdefMessage.mtd_base,
    &sipTypeDef_QtNfc_QList_0100QNdefNfcIconRecord.mtd_base,
    &sipTypeDef_QtNfc_QList_0100QNdefNfcTextRecord.mtd_base,
    &sipTypeDef_QtNfc_QList_0100QNdefRecord.mtd_base,
    &sipTypeDef_QtNfc_QNdefFilter.super.ctd_base,
    &sipTypeDef_QtNfc_QNdefFilter_Record.super.ctd_base,
    &sipTypeDef_QtNfc_QNdefMessage.super.ctd_base,
    &sipTypeDef_QtNfc_QNdefNfcIconRecord.super.ctd_base,
    &sipTypeDef_QtNfc_QNdefNfcSmartPosterRecord.super.ctd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef_QtNfc_QNdefNfcTextRecord.super.ctd_base,
    &enumTypes[8].etd_base,
    &sipTypeDef_QtNfc_QNdefNfcUriRecord.super.ctd_base,
    &sipTypeDef_QtNfc_QNdefRecord.super.ctd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtNfc_QNearFieldManager.super.ctd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef_QtNfc_QNearFieldManager_TargetAccessModes.super.ctd_base,
    &sipTypeDef_QtNfc_QNearFieldShareManager.super.ctd_base,
    &enumTypes[5].etd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtNfc_QNearFieldShareManager_ShareModes.super.ctd_base,
    &sipTypeDef_QtNfc_QNearFieldShareTarget.super.ctd_base,
    &sipTypeDef_QtNfc_QNearFieldTarget.super.ctd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtNfc_QNearFieldTarget_AccessMethods.super.ctd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_QtNfc_QNearFieldTarget_RequestId.super.ctd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_QtNfc_QQmlNdefRecord.super.ctd_base,
    &enumTypes[0].etd_base,
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_QtNfc_0,
    (sipVirtHandlerFunc)sipVH_QtNfc_1,
    (sipVirtHandlerFunc)sipVH_QtNfc_2,
    (sipVirtHandlerFunc)sipVH_QtNfc_3,
    (sipVirtHandlerFunc)sipVH_QtNfc_4,
    (sipVirtHandlerFunc)sipVH_QtNfc_5,
    (sipVirtHandlerFunc)sipVH_QtNfc_6,
    (sipVirtHandlerFunc)sipVH_QtNfc_7,
    (sipVirtHandlerFunc)sipVH_QtNfc_8,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", 1, NULL},
    {NULL, -1, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QNdefRecord, {13, 255, 0}, NULL},
    {sipSubClass_QNearFieldManager, {164, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtNfc = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtNfc,
    0,
    -1,
    sipStrings_QtNfc,
    importsTable,
    NULL,
    31,
    typesTable,
    NULL,
    0,
    NULL,
    0,
    NULL,
    virtHandlersTable,
    NULL,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtNfc;
const sipExportedModuleDef *sipModuleAPI_QtNfc_QtCore;

sip_qt_metaobject_func sip_QtNfc_qt_metaobject;
sip_qt_metacall_func sip_QtNfc_qt_metacall;
sip_qt_metacast_func sip_QtNfc_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtNfc
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtNfc
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtNfc",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtNfc, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtNfc), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtNfc = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_QtNfc = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtNfc == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtNfc,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtNfc_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtNfc_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtNfc_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtNfc_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtNfc,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_QtNfc_QtCore = sipModuleAPI_QtNfc.em_imports[0].im_module;
#line 149 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldmanager.sip"
// Imports from QtCore.
pyqt5_qtnfc_get_pyqtslot_parts = (pyqt5_qtnfc_get_pyqtslot_parts_t)sipImportSymbol("pyqt5_get_pyqtslot_parts");
Q_ASSERT(pyqt5_qtnfc_get_pyqtslot_parts);
#line 857 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfccmodule.cpp"

    SIP_MODULE_RETURN(sipModule);
}
