/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNfc.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldsharetarget.sip"
#include <qnearfieldsharetarget.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldsharemanager.sip"
#include <qnearfieldsharemanager.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qndefmessage.sip"
#include <qndefmessage.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNfc/qnearfieldsharemanager.sip"
#include <qnearfieldsharemanager.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNfc/sipQtNfcQNearFieldShareTarget.cpp"


PyDoc_STRVAR(doc_QNearFieldShareTarget_shareModes, "shareModes(self) -> QNearFieldShareManager.ShareModes");

extern "C" {static PyObject *meth_QNearFieldShareTarget_shareModes(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldShareTarget_shareModes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNearFieldShareTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldShareTarget, &sipCpp))
        {
            QNearFieldShareManager::ShareModes*sipRes;

            sipRes = new QNearFieldShareManager::ShareModes(sipCpp->shareModes());

            return sipConvertFromNewType(sipRes,sipType_QNearFieldShareManager_ShareModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldShareTarget, sipName_shareModes, doc_QNearFieldShareTarget_shareModes);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldShareTarget_share, "share(self, QNdefMessage) -> bool\n"
    "share(self, Iterable[QFileInfo]) -> bool");

extern "C" {static PyObject *meth_QNearFieldShareTarget_share(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldShareTarget_share(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNdefMessage* a0;
        QNearFieldShareTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNearFieldShareTarget, &sipCpp, sipType_QNdefMessage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->share(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QList<QFileInfo>* a0;
        int a0State = 0;
        QNearFieldShareTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNearFieldShareTarget, &sipCpp, sipType_QList_0100QFileInfo,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->share(*a0);
            sipReleaseType(const_cast<QList<QFileInfo> *>(a0),sipType_QList_0100QFileInfo,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldShareTarget, sipName_share, doc_QNearFieldShareTarget_share);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldShareTarget_cancel, "cancel(self)");

extern "C" {static PyObject *meth_QNearFieldShareTarget_cancel(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldShareTarget_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNearFieldShareTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldShareTarget, &sipCpp))
        {
            sipCpp->cancel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldShareTarget, sipName_cancel, doc_QNearFieldShareTarget_cancel);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldShareTarget_isShareInProgress, "isShareInProgress(self) -> bool");

extern "C" {static PyObject *meth_QNearFieldShareTarget_isShareInProgress(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldShareTarget_isShareInProgress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNearFieldShareTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldShareTarget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isShareInProgress();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldShareTarget, sipName_isShareInProgress, doc_QNearFieldShareTarget_isShareInProgress);

    return NULL;
}


PyDoc_STRVAR(doc_QNearFieldShareTarget_shareError, "shareError(self) -> QNearFieldShareManager.ShareError");

extern "C" {static PyObject *meth_QNearFieldShareTarget_shareError(PyObject *, PyObject *);}
static PyObject *meth_QNearFieldShareTarget_shareError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNearFieldShareTarget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNearFieldShareTarget, &sipCpp))
        {
            QNearFieldShareManager::ShareError sipRes;

            sipRes = sipCpp->shareError();

            return sipConvertFromEnum(sipRes,sipType_QNearFieldShareManager_ShareError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNearFieldShareTarget, sipName_shareError, doc_QNearFieldShareTarget_shareError);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNearFieldShareTarget(void *, int);}
static void release_QNearFieldShareTarget(void *sipCppV,int)
{
    QNearFieldShareTarget *sipCpp = reinterpret_cast<QNearFieldShareTarget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNearFieldShareTarget(sipSimpleWrapper *);}
static void dealloc_QNearFieldShareTarget(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QNearFieldShareTarget(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNearFieldShareTarget[] = {{164, 0, 1}};


static PyMethodDef methods_QNearFieldShareTarget[] = {
    {SIP_MLNAME_CAST(sipName_cancel), meth_QNearFieldShareTarget_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldShareTarget_cancel)},
    {SIP_MLNAME_CAST(sipName_isShareInProgress), meth_QNearFieldShareTarget_isShareInProgress, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldShareTarget_isShareInProgress)},
    {SIP_MLNAME_CAST(sipName_share), meth_QNearFieldShareTarget_share, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldShareTarget_share)},
    {SIP_MLNAME_CAST(sipName_shareError), meth_QNearFieldShareTarget_shareError, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldShareTarget_shareError)},
    {SIP_MLNAME_CAST(sipName_shareModes), meth_QNearFieldShareTarget_shareModes, METH_VARARGS, SIP_MLDOC_CAST(doc_QNearFieldShareTarget_shareModes)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNearFieldShareTarget[] = {
    {"shareFinished()", "\1shareFinished(self)", 0, 0},
    {"error(QNearFieldShareManager::ShareError)", "\1error(self, QNearFieldShareManager.ShareError)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtNfc_QNearFieldShareTarget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNearFieldShareTarget,
        {0}
    },
    {
        sipNameNr_QNearFieldShareTarget,
        {0, 0, 1},
        5, methods_QNearFieldShareTarget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QNearFieldShareTarget,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNearFieldShareTarget,
    0,
    0,
    0,
    release_QNearFieldShareTarget,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNearFieldShareTarget::staticMetaObject,
    0,
    signals_QNearFieldShareTarget,
    0
};
