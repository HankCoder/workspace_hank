/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplacedetailsreply.sip"
#include <qplacedetailsreply.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplace.sip"
#include <qplace.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplacereply.sip"
#include <qplacereply.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceDetailsReply.cpp"


class sipQPlaceDetailsReply : public QPlaceDetailsReply
{
public:
    sipQPlaceDetailsReply(QObject*);
    virtual ~sipQPlaceDetailsReply();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void abort();
    QPlaceReply::Type type() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceDetailsReply(const sipQPlaceDetailsReply &);
    sipQPlaceDetailsReply &operator = (const sipQPlaceDetailsReply &);

    char sipPyMethods[9];
};

sipQPlaceDetailsReply::sipQPlaceDetailsReply(QObject*a0): QPlaceDetailsReply(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlaceDetailsReply::~sipQPlaceDetailsReply()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlaceDetailsReply::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QPlaceDetailsReply);

    return QPlaceDetailsReply::metaObject();
}

int sipQPlaceDetailsReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPlaceDetailsReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QPlaceDetailsReply,_c,_id,_a);

    return _id;
}

void *sipQPlaceDetailsReply::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QPlaceDetailsReply, _clname, &sipCpp) ? sipCpp : QPlaceDetailsReply::qt_metacast(_clname));
}

void sipQPlaceDetailsReply::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QPlaceDetailsReply::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceDetailsReply::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QPlaceDetailsReply::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceDetailsReply::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QPlaceDetailsReply::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceDetailsReply::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QPlaceDetailsReply::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceDetailsReply::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QPlaceDetailsReply::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQPlaceDetailsReply::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QPlaceDetailsReply::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQPlaceDetailsReply::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QPlaceDetailsReply::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceDetailsReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_abort);

    if (!sipMeth)
    {
        QPlaceDetailsReply::abort();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QPlaceReply::Type sipQPlaceDetailsReply::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return QPlaceDetailsReply::type();

    extern QPlaceReply::Type sipVH_QtLocation_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtLocation_0(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QPlaceDetailsReply_type, "type(self) -> QPlaceReply.Type");

extern "C" {static PyObject *meth_QPlaceDetailsReply_type(PyObject *, PyObject *);}
static PyObject *meth_QPlaceDetailsReply_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceDetailsReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceDetailsReply, &sipCpp))
        {
            QPlaceReply::Type sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceDetailsReply::type() : sipCpp->type());

            return sipConvertFromEnum(sipRes,sipType_QPlaceReply_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceDetailsReply, sipName_type, doc_QPlaceDetailsReply_type);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceDetailsReply_place, "place(self) -> QPlace");

extern "C" {static PyObject *meth_QPlaceDetailsReply_place(PyObject *, PyObject *);}
static PyObject *meth_QPlaceDetailsReply_place(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceDetailsReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceDetailsReply, &sipCpp))
        {
            QPlace*sipRes;

            sipRes = new QPlace(sipCpp->place());

            return sipConvertFromNewType(sipRes,sipType_QPlace,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceDetailsReply, sipName_place, doc_QPlaceDetailsReply_place);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceDetailsReply_setPlace, "setPlace(self, QPlace)");

extern "C" {static PyObject *meth_QPlaceDetailsReply_setPlace(PyObject *, PyObject *);}
static PyObject *meth_QPlaceDetailsReply_setPlace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace* a0;
        QPlaceDetailsReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QPlaceDetailsReply, &sipCpp, sipType_QPlace, &a0))
        {
            sipCpp->setPlace(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceDetailsReply, sipName_setPlace, doc_QPlaceDetailsReply_setPlace);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceDetailsReply(void *, int);}
static void release_QPlaceDetailsReply(void *sipCppV,int)
{
    QPlaceDetailsReply *sipCpp = reinterpret_cast<QPlaceDetailsReply *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPlaceDetailsReply(sipSimpleWrapper *);}
static void dealloc_QPlaceDetailsReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceDetailsReply *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceDetailsReply(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceDetailsReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceDetailsReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPlaceDetailsReply *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQPlaceDetailsReply(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlaceDetailsReply[] = {{67, 255, 1}};


static PyMethodDef methods_QPlaceDetailsReply[] = {
    {SIP_MLNAME_CAST(sipName_place), meth_QPlaceDetailsReply_place, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceDetailsReply_place)},
    {SIP_MLNAME_CAST(sipName_setPlace), meth_QPlaceDetailsReply_setPlace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceDetailsReply_setPlace)},
    {SIP_MLNAME_CAST(sipName_type), meth_QPlaceDetailsReply_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceDetailsReply_type)}
};

PyDoc_STRVAR(doc_QPlaceDetailsReply, "\1QPlaceDetailsReply(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceDetailsReply = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceDetailsReply,
        {0}
    },
    {
        sipNameNr_QPlaceDetailsReply,
        {0, 0, 1},
        3, methods_QPlaceDetailsReply,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceDetailsReply,
    -1,
    -1,
    supers_QPlaceDetailsReply,
    0,
    init_type_QPlaceDetailsReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceDetailsReply,
    0,
    0,
    0,
    release_QPlaceDetailsReply,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QPlaceDetailsReply::staticMetaObject,
    0,
    0,
    0
};
