/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplaceratings.sip"
#include <qplaceratings.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceRatings.cpp"



PyDoc_STRVAR(doc_QPlaceRatings_average, "average(self) -> float");

extern "C" {static PyObject *meth_QPlaceRatings_average(PyObject *, PyObject *);}
static PyObject *meth_QPlaceRatings_average(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceRatings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceRatings, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->average();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceRatings, sipName_average, doc_QPlaceRatings_average);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceRatings_setAverage, "setAverage(self, float)");

extern "C" {static PyObject *meth_QPlaceRatings_setAverage(PyObject *, PyObject *);}
static PyObject *meth_QPlaceRatings_setAverage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPlaceRatings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPlaceRatings, &sipCpp, &a0))
        {
            sipCpp->setAverage(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceRatings, sipName_setAverage, doc_QPlaceRatings_setAverage);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceRatings_count, "count(self) -> int");

extern "C" {static PyObject *meth_QPlaceRatings_count(PyObject *, PyObject *);}
static PyObject *meth_QPlaceRatings_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceRatings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceRatings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceRatings, sipName_count, doc_QPlaceRatings_count);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceRatings_setCount, "setCount(self, int)");

extern "C" {static PyObject *meth_QPlaceRatings_setCount(PyObject *, PyObject *);}
static PyObject *meth_QPlaceRatings_setCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPlaceRatings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlaceRatings, &sipCpp, &a0))
        {
            sipCpp->setCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceRatings, sipName_setCount, doc_QPlaceRatings_setCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceRatings_maximum, "maximum(self) -> float");

extern "C" {static PyObject *meth_QPlaceRatings_maximum(PyObject *, PyObject *);}
static PyObject *meth_QPlaceRatings_maximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceRatings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceRatings, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->maximum();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceRatings, sipName_maximum, doc_QPlaceRatings_maximum);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceRatings_setMaximum, "setMaximum(self, float)");

extern "C" {static PyObject *meth_QPlaceRatings_setMaximum(PyObject *, PyObject *);}
static PyObject *meth_QPlaceRatings_setMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPlaceRatings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPlaceRatings, &sipCpp, &a0))
        {
            sipCpp->setMaximum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceRatings, sipName_setMaximum, doc_QPlaceRatings_setMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceRatings_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPlaceRatings_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPlaceRatings_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceRatings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceRatings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceRatings, sipName_isEmpty, doc_QPlaceRatings_isEmpty);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceRatings___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceRatings___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceRatings *sipCpp = reinterpret_cast<QPlaceRatings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceRatings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceRatings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceRatings, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceRatings::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceRatings,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceRatings___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceRatings___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceRatings *sipCpp = reinterpret_cast<QPlaceRatings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceRatings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceRatings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceRatings, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceRatings::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceRatings,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceRatings(void *, int);}
static void release_QPlaceRatings(void *sipCppV,int)
{
    delete reinterpret_cast<QPlaceRatings *>(sipCppV);
}


extern "C" {static void assign_QPlaceRatings(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceRatings(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceRatings *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceRatings *>(sipSrc);
}


extern "C" {static void *array_QPlaceRatings(SIP_SSIZE_T);}
static void *array_QPlaceRatings(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceRatings[sipNrElem];
}


extern "C" {static void *copy_QPlaceRatings(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceRatings(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceRatings(reinterpret_cast<const QPlaceRatings *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceRatings(sipSimpleWrapper *);}
static void dealloc_QPlaceRatings(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceRatings(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPlaceRatings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceRatings(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPlaceRatings *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPlaceRatings();

            return sipCpp;
        }
    }

    {
        const QPlaceRatings* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceRatings, &a0))
        {
            sipCpp = new QPlaceRatings(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceRatings[] = {
    {(void *)slot_QPlaceRatings___ne__, ne_slot},
    {(void *)slot_QPlaceRatings___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceRatings[] = {
    {SIP_MLNAME_CAST(sipName_average), meth_QPlaceRatings_average, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceRatings_average)},
    {SIP_MLNAME_CAST(sipName_count), meth_QPlaceRatings_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceRatings_count)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPlaceRatings_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceRatings_isEmpty)},
    {SIP_MLNAME_CAST(sipName_maximum), meth_QPlaceRatings_maximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceRatings_maximum)},
    {SIP_MLNAME_CAST(sipName_setAverage), meth_QPlaceRatings_setAverage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceRatings_setAverage)},
    {SIP_MLNAME_CAST(sipName_setCount), meth_QPlaceRatings_setCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceRatings_setCount)},
    {SIP_MLNAME_CAST(sipName_setMaximum), meth_QPlaceRatings_setMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceRatings_setMaximum)}
};

PyDoc_STRVAR(doc_QPlaceRatings, "\1QPlaceRatings()\n"
    "QPlaceRatings(QPlaceRatings)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceRatings = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceRatings,
        {0}
    },
    {
        sipNameNr_QPlaceRatings,
        {0, 0, 1},
        7, methods_QPlaceRatings,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceRatings,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceRatings,
    init_type_QPlaceRatings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceRatings,
    assign_QPlaceRatings,
    array_QPlaceRatings,
    copy_QPlaceRatings,
    release_QPlaceRatings,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
