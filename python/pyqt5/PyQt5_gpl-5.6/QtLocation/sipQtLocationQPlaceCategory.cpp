/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplacecategory.sip"
#include <qplacecategory.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceCategory.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplaceicon.sip"
#include <qplaceicon.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceCategory.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qlocation.sip"
#include <qlocation.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceCategory.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceCategory.cpp"


class sipQPlaceCategory : public QPlaceCategory
{
public:
    sipQPlaceCategory();
    sipQPlaceCategory(const QPlaceCategory&);
    ~sipQPlaceCategory();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceCategory(const sipQPlaceCategory &);
    sipQPlaceCategory &operator = (const sipQPlaceCategory &);
};

sipQPlaceCategory::sipQPlaceCategory(): QPlaceCategory(), sipPySelf(0)
{
}

sipQPlaceCategory::sipQPlaceCategory(const QPlaceCategory& a0): QPlaceCategory(a0), sipPySelf(0)
{
}

sipQPlaceCategory::~sipQPlaceCategory()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QPlaceCategory_categoryId, "categoryId(self) -> str");

extern "C" {static PyObject *meth_QPlaceCategory_categoryId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_categoryId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceCategory, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->categoryId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_categoryId, doc_QPlaceCategory_categoryId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_setCategoryId, "setCategoryId(self, str)");

extern "C" {static PyObject *meth_QPlaceCategory_setCategoryId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_setCategoryId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceCategory, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCategoryId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_setCategoryId, doc_QPlaceCategory_setCategoryId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_name, "name(self) -> str");

extern "C" {static PyObject *meth_QPlaceCategory_name(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceCategory, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_name, doc_QPlaceCategory_name);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QPlaceCategory_setName(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceCategory, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_setName, doc_QPlaceCategory_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_visibility, "visibility(self) -> QLocation.Visibility");

extern "C" {static PyObject *meth_QPlaceCategory_visibility(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_visibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceCategory, &sipCpp))
        {
            QLocation::Visibility sipRes;

            sipRes = sipCpp->visibility();

            return sipConvertFromEnum(sipRes,sipType_QLocation_Visibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_visibility, doc_QPlaceCategory_visibility);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_setVisibility, "setVisibility(self, QLocation.Visibility)");

extern "C" {static PyObject *meth_QPlaceCategory_setVisibility(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_setVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocation::Visibility a0;
        QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlaceCategory, &sipCpp, sipType_QLocation_Visibility, &a0))
        {
            sipCpp->setVisibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_setVisibility, doc_QPlaceCategory_setVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_icon, "icon(self) -> QPlaceIcon");

extern "C" {static PyObject *meth_QPlaceCategory_icon(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceCategory, &sipCpp))
        {
            QPlaceIcon*sipRes;

            sipRes = new QPlaceIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QPlaceIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_icon, doc_QPlaceCategory_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_setIcon, "setIcon(self, QPlaceIcon)");

extern "C" {static PyObject *meth_QPlaceCategory_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceIcon* a0;
        QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceCategory, &sipCpp, sipType_QPlaceIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_setIcon, doc_QPlaceCategory_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceCategory_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPlaceCategory_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPlaceCategory_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceCategory, sipName_isEmpty, doc_QPlaceCategory_isEmpty);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceCategory___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceCategory___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceCategory *sipCpp = reinterpret_cast<QPlaceCategory *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceCategory));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceCategory, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceCategory::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceCategory,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceCategory___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceCategory___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceCategory *sipCpp = reinterpret_cast<QPlaceCategory *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceCategory));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceCategory, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceCategory::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceCategory,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceCategory(void *, int);}
static void release_QPlaceCategory(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlaceCategory *>(sipCppV);
    else
        delete reinterpret_cast<QPlaceCategory *>(sipCppV);
}


extern "C" {static void assign_QPlaceCategory(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceCategory(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceCategory *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceCategory *>(sipSrc);
}


extern "C" {static void *array_QPlaceCategory(SIP_SSIZE_T);}
static void *array_QPlaceCategory(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceCategory[sipNrElem];
}


extern "C" {static void *copy_QPlaceCategory(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceCategory(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceCategory(reinterpret_cast<const QPlaceCategory *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceCategory(sipSimpleWrapper *);}
static void dealloc_QPlaceCategory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceCategory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceCategory(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceCategory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceCategory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlaceCategory *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQPlaceCategory();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPlaceCategory* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceCategory, &a0))
        {
            sipCpp = new sipQPlaceCategory(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceCategory[] = {
    {(void *)slot_QPlaceCategory___ne__, ne_slot},
    {(void *)slot_QPlaceCategory___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceCategory[] = {
    {SIP_MLNAME_CAST(sipName_categoryId), meth_QPlaceCategory_categoryId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_categoryId)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QPlaceCategory_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_icon)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPlaceCategory_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_isEmpty)},
    {SIP_MLNAME_CAST(sipName_name), meth_QPlaceCategory_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_name)},
    {SIP_MLNAME_CAST(sipName_setCategoryId), meth_QPlaceCategory_setCategoryId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_setCategoryId)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QPlaceCategory_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_setIcon)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QPlaceCategory_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_setName)},
    {SIP_MLNAME_CAST(sipName_setVisibility), meth_QPlaceCategory_setVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_setVisibility)},
    {SIP_MLNAME_CAST(sipName_visibility), meth_QPlaceCategory_visibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceCategory_visibility)}
};

PyDoc_STRVAR(doc_QPlaceCategory, "\1QPlaceCategory()\n"
    "QPlaceCategory(QPlaceCategory)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceCategory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceCategory,
        {0}
    },
    {
        sipNameNr_QPlaceCategory,
        {0, 0, 1},
        9, methods_QPlaceCategory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceCategory,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceCategory,
    init_type_QPlaceCategory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceCategory,
    assign_QPlaceCategory,
    array_QPlaceCategory,
    copy_QPlaceCategory,
    release_QPlaceCategory,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
