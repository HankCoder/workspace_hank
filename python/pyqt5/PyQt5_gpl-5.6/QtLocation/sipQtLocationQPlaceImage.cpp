/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplaceimage.sip"
#include <qplaceimage.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceImage.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplacecontent.sip"
#include <qplacecontent.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceImage.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceImage.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceImage.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplaceuser.sip"
#include <qplaceuser.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceImage.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtLocation/qplacesupplier.sip"
#include <qplacesupplier.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtLocation/sipQtLocationQPlaceImage.cpp"


class sipQPlaceImage : public QPlaceImage
{
public:
    sipQPlaceImage();
    sipQPlaceImage(const QPlaceContent&);
    sipQPlaceImage(const QPlaceImage&);
    ~sipQPlaceImage();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceImage(const sipQPlaceImage &);
    sipQPlaceImage &operator = (const sipQPlaceImage &);
};

sipQPlaceImage::sipQPlaceImage(): QPlaceImage(), sipPySelf(0)
{
}

sipQPlaceImage::sipQPlaceImage(const QPlaceContent& a0): QPlaceImage(a0), sipPySelf(0)
{
}

sipQPlaceImage::sipQPlaceImage(const QPlaceImage& a0): QPlaceImage(a0), sipPySelf(0)
{
}

sipQPlaceImage::~sipQPlaceImage()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QPlaceImage_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QPlaceImage_url(PyObject *, PyObject *);}
static PyObject *meth_QPlaceImage_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceImage, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceImage, sipName_url, doc_QPlaceImage_url);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceImage_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QPlaceImage_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QPlaceImage_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QPlaceImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceImage, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceImage, sipName_setUrl, doc_QPlaceImage_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceImage_imageId, "imageId(self) -> str");

extern "C" {static PyObject *meth_QPlaceImage_imageId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceImage_imageId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceImage, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->imageId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceImage, sipName_imageId, doc_QPlaceImage_imageId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceImage_setImageId, "setImageId(self, str)");

extern "C" {static PyObject *meth_QPlaceImage_setImageId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceImage_setImageId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceImage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setImageId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceImage, sipName_setImageId, doc_QPlaceImage_setImageId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceImage_mimeType, "mimeType(self) -> str");

extern "C" {static PyObject *meth_QPlaceImage_mimeType(PyObject *, PyObject *);}
static PyObject *meth_QPlaceImage_mimeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceImage, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->mimeType());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceImage, sipName_mimeType, doc_QPlaceImage_mimeType);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceImage_setMimeType, "setMimeType(self, str)");

extern "C" {static PyObject *meth_QPlaceImage_setMimeType(PyObject *, PyObject *);}
static PyObject *meth_QPlaceImage_setMimeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceImage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setMimeType(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceImage, sipName_setMimeType, doc_QPlaceImage_setMimeType);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceImage(void *, int);}
static void release_QPlaceImage(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlaceImage *>(sipCppV);
    else
        delete reinterpret_cast<QPlaceImage *>(sipCppV);
}


extern "C" {static void assign_QPlaceImage(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceImage(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceImage *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceImage *>(sipSrc);
}


extern "C" {static void *array_QPlaceImage(SIP_SSIZE_T);}
static void *array_QPlaceImage(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceImage[sipNrElem];
}


extern "C" {static void *copy_QPlaceImage(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceImage(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceImage(reinterpret_cast<const QPlaceImage *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceImage(sipSimpleWrapper *);}
static void dealloc_QPlaceImage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceImage *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceImage(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceImage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceImage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlaceImage *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQPlaceImage();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPlaceContent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceContent, &a0))
        {
            sipCpp = new sipQPlaceImage(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPlaceImage* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceImage, &a0))
        {
            sipCpp = new sipQPlaceImage(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlaceImage[] = {{51, 255, 1}};


static PyMethodDef methods_QPlaceImage[] = {
    {SIP_MLNAME_CAST(sipName_imageId), meth_QPlaceImage_imageId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceImage_imageId)},
    {SIP_MLNAME_CAST(sipName_mimeType), meth_QPlaceImage_mimeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceImage_mimeType)},
    {SIP_MLNAME_CAST(sipName_setImageId), meth_QPlaceImage_setImageId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceImage_setImageId)},
    {SIP_MLNAME_CAST(sipName_setMimeType), meth_QPlaceImage_setMimeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceImage_setMimeType)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QPlaceImage_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceImage_setUrl)},
    {SIP_MLNAME_CAST(sipName_url), meth_QPlaceImage_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceImage_url)}
};

PyDoc_STRVAR(doc_QPlaceImage, "\1QPlaceImage()\n"
    "QPlaceImage(QPlaceContent)\n"
    "QPlaceImage(QPlaceImage)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceImage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceImage,
        {0}
    },
    {
        sipNameNr_QPlaceImage,
        {0, 0, 1},
        6, methods_QPlaceImage,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceImage,
    -1,
    -1,
    supers_QPlaceImage,
    0,
    init_type_QPlaceImage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceImage,
    assign_QPlaceImage,
    array_QPlaceImage,
    copy_QPlaceImage,
    release_QPlaceImage,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
