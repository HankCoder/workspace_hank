/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 67 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"

#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 67 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 244 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 232 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 148 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQItemSelectionModel.cpp"


class sipQItemSelectionModel : public QItemSelectionModel
{
public:
    sipQItemSelectionModel(QAbstractItemModel*);
    sipQItemSelectionModel(QAbstractItemModel*,QObject*);
    virtual ~sipQItemSelectionModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void clearCurrentIndex();
    void setCurrentIndex(const QModelIndex&,QItemSelectionModel::SelectionFlags);
    void select(const QItemSelection&,QItemSelectionModel::SelectionFlags);
    void select(const QModelIndex&,QItemSelectionModel::SelectionFlags);
    void reset();
    void clear();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQItemSelectionModel(const sipQItemSelectionModel &);
    sipQItemSelectionModel &operator = (const sipQItemSelectionModel &);

    char sipPyMethods[13];
};

sipQItemSelectionModel::sipQItemSelectionModel(QAbstractItemModel*a0): QItemSelectionModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::sipQItemSelectionModel(QAbstractItemModel*a0,QObject*a1): QItemSelectionModel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::~sipQItemSelectionModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQItemSelectionModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QItemSelectionModel);

    return QItemSelectionModel::metaObject();
}

int sipQItemSelectionModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QItemSelectionModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QItemSelectionModel,_c,_id,_a);

    return _id;
}

void *sipQItemSelectionModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QItemSelectionModel, _clname, &sipCpp) ? sipCpp : QItemSelectionModel::qt_metacast(_clname));
}

void sipQItemSelectionModel::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QItemSelectionModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QItemSelectionModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QItemSelectionModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QItemSelectionModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QItemSelectionModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQItemSelectionModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QItemSelectionModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQItemSelectionModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QItemSelectionModel::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::clearCurrentIndex()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_clearCurrentIndex);

    if (!sipMeth)
    {
        QItemSelectionModel::clearCurrentIndex();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQItemSelectionModel::setCurrentIndex(const QModelIndex& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setCurrentIndex);

    if (!sipMeth)
    {
        QItemSelectionModel::setCurrentIndex(a0,a1);
        return;
    }

    extern void sipVH_QtCore_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QItemSelectionModel::SelectionFlags);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_50(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::select(const QItemSelection& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_select);

    if (!sipMeth)
    {
        QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtCore_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,QItemSelectionModel::SelectionFlags);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_51(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::select(const QModelIndex& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_select);

    if (!sipMeth)
    {
        QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtCore_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QItemSelectionModel::SelectionFlags);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_50(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QItemSelectionModel::reset();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQItemSelectionModel::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QItemSelectionModel::clear();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QItemSelectionModel_currentIndex, "currentIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->currentIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_currentIndex, doc_QItemSelectionModel_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isSelected, "isSelected(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSelected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isSelected, doc_QItemSelectionModel_isSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isRowSelected, "isRowSelected(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isRowSelected(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isRowSelected, doc_QItemSelectionModel_isRowSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isColumnSelected, "isColumnSelected(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isColumnSelected(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isColumnSelected, doc_QItemSelectionModel_isColumnSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_rowIntersectsSelection, "rowIntersectsSelection(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->rowIntersectsSelection(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_rowIntersectsSelection, doc_QItemSelectionModel_rowIntersectsSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_columnIntersectsSelection, "columnIntersectsSelection(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->columnIntersectsSelection(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_columnIntersectsSelection, doc_QItemSelectionModel_columnIntersectsSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedIndexes, "selectedIndexes(self) -> object");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->selectedIndexes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedIndexes, doc_QItemSelectionModel_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selection, "selection(self) -> QItemSelection");

extern "C" {static PyObject *meth_QItemSelectionModel_selection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            QItemSelection*sipRes;

            sipRes = new QItemSelection(sipCpp->selection());

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selection, doc_QItemSelectionModel_selection);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QItemSelectionModel_model(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_model, doc_QItemSelectionModel_model);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clear, "clear(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clear, doc_QItemSelectionModel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clearSelection, "clearSelection(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clearSelection, doc_QItemSelectionModel_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_reset, "reset(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_reset(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_reset, doc_QItemSelectionModel_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_select, "select(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])\n"
    "select(self, QItemSelection, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QItemSelectionModel_select(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QItemSelection* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_select, doc_QItemSelectionModel_select);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_setCurrentIndex, "setCurrentIndex(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::setCurrentIndex(*a0,*a1) : sipCpp->setCurrentIndex(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_setCurrentIndex, doc_QItemSelectionModel_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clearCurrentIndex, "clearCurrentIndex(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clearCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clearCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::clearCurrentIndex() : sipCpp->clearCurrentIndex());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clearCurrentIndex, doc_QItemSelectionModel_clearCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_emitSelectionChanged, "emitSelectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->emitSelectionChanged(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_emitSelectionChanged, doc_QItemSelectionModel_emitSelectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_hasSelection, doc_QItemSelectionModel_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedRows, "selectedRows(self, column: int = 0) -> object");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const QItemSelectionModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->selectedRows(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedRows, doc_QItemSelectionModel_selectedRows);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedColumns, "selectedColumns(self, row: int = 0) -> object");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const QItemSelectionModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->selectedColumns(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedColumns, doc_QItemSelectionModel_selectedColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelectionModel_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QItemSelectionModel_setModel(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemModel* a0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QAbstractItemModel, &a0))
        {
            sipCpp->setModel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_setModel, doc_QItemSelectionModel_setModel);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelectionModel(void *, int);}
static void release_QItemSelectionModel(void *sipCppV,int)
{
    QItemSelectionModel *sipCpp = reinterpret_cast<QItemSelectionModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QItemSelectionModel(sipSimpleWrapper *);}
static void dealloc_QItemSelectionModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQItemSelectionModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QItemSelectionModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QItemSelectionModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemSelectionModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQItemSelectionModel *sipCpp = 0;

    {
        QAbstractItemModel* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_model,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QAbstractItemModel, &a0, sipOwner))
        {
            sipCpp = new sipQItemSelectionModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QAbstractItemModel* a0;
        QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8JH", sipType_QAbstractItemModel, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQItemSelectionModel(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QItemSelectionModel[] = {{164, 255, 1}};


static PyMethodDef methods_QItemSelectionModel[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QItemSelectionModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_clear)},
    {SIP_MLNAME_CAST(sipName_clearCurrentIndex), meth_QItemSelectionModel_clearCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_clearCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QItemSelectionModel_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_clearSelection)},
    {SIP_MLNAME_CAST(sipName_columnIntersectsSelection), meth_QItemSelectionModel_columnIntersectsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_columnIntersectsSelection)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QItemSelectionModel_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_currentIndex)},
    {SIP_MLNAME_CAST(sipName_emitSelectionChanged), meth_QItemSelectionModel_emitSelectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_emitSelectionChanged)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QItemSelectionModel_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_hasSelection)},
    {SIP_MLNAME_CAST(sipName_isColumnSelected), meth_QItemSelectionModel_isColumnSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_isColumnSelected)},
    {SIP_MLNAME_CAST(sipName_isRowSelected), meth_QItemSelectionModel_isRowSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_isRowSelected)},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QItemSelectionModel_isSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_isSelected)},
    {SIP_MLNAME_CAST(sipName_model), meth_QItemSelectionModel_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_model)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QItemSelectionModel_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_reset)},
    {SIP_MLNAME_CAST(sipName_rowIntersectsSelection), meth_QItemSelectionModel_rowIntersectsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_rowIntersectsSelection)},
    {SIP_MLNAME_CAST(sipName_select), meth_QItemSelectionModel_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_select)},
    {SIP_MLNAME_CAST(sipName_selectedColumns), (PyCFunction)meth_QItemSelectionModel_selectedColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selectedColumns)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QItemSelectionModel_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectedRows), (PyCFunction)meth_QItemSelectionModel_selectedRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selectedRows)},
    {SIP_MLNAME_CAST(sipName_selection), meth_QItemSelectionModel_selection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selection)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QItemSelectionModel_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QItemSelectionModel_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_setModel)}
};

static sipEnumMemberDef enummembers_QItemSelectionModel[] = {
    {sipName_Clear, static_cast<int>(QItemSelectionModel::Clear), 86},
    {sipName_ClearAndSelect, static_cast<int>(QItemSelectionModel::ClearAndSelect), 86},
    {sipName_Columns, static_cast<int>(QItemSelectionModel::Columns), 86},
    {sipName_Current, static_cast<int>(QItemSelectionModel::Current), 86},
    {sipName_Deselect, static_cast<int>(QItemSelectionModel::Deselect), 86},
    {sipName_NoUpdate, static_cast<int>(QItemSelectionModel::NoUpdate), 86},
    {sipName_Rows, static_cast<int>(QItemSelectionModel::Rows), 86},
    {sipName_Select, static_cast<int>(QItemSelectionModel::Select), 86},
    {sipName_SelectCurrent, static_cast<int>(QItemSelectionModel::SelectCurrent), 86},
    {sipName_Toggle, static_cast<int>(QItemSelectionModel::Toggle), 86},
    {sipName_ToggleCurrent, static_cast<int>(QItemSelectionModel::ToggleCurrent), 86},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QItemSelectionModel[] = {
    {"modelChanged(QAbstractItemModel*)", "\1modelChanged(self, QAbstractItemModel)", 0, 0},
    {"currentColumnChanged(QModelIndex,QModelIndex)", "\1currentColumnChanged(self, QModelIndex, QModelIndex)", 0, 0},
    {"currentRowChanged(QModelIndex,QModelIndex)", "\1currentRowChanged(self, QModelIndex, QModelIndex)", 0, 0},
    {"currentChanged(QModelIndex,QModelIndex)", "\1currentChanged(self, QModelIndex, QModelIndex)", 0, 0},
    {"selectionChanged(QItemSelection,QItemSelection)", "\1selectionChanged(self, QItemSelection, QItemSelection)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QItemSelectionModel, "\1QItemSelectionModel(model: QAbstractItemModel = None)\n"
    "QItemSelectionModel(QAbstractItemModel, QObject)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QItemSelectionModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QItemSelectionModel,
        {0}
    },
    {
        sipNameNr_QItemSelectionModel,
        {0, 0, 1},
        20, methods_QItemSelectionModel,
        11, enummembers_QItemSelectionModel,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QItemSelectionModel,
    -1,
    -1,
    supers_QItemSelectionModel,
    0,
    init_type_QItemSelectionModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QItemSelectionModel,
    0,
    0,
    0,
    release_QItemSelectionModel,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QItemSelectionModel::staticMetaObject,
    0,
    signals_QItemSelectionModel,
    0
};
