/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qjsonvalue.sip"
#include <qjsonvalue.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQJsonValue.cpp"

#line 25 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qjsonobject.sip"
#include <qjsonobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQJsonValue.cpp"
#line 31 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qjsonarray.sip"
#include <qjsonarray.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQJsonValue.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQJsonValue.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQJsonValue.cpp"


PyDoc_STRVAR(doc_QJsonValue_fromVariant, "fromVariant(Any) -> QJsonValue");

extern "C" {static PyObject *meth_QJsonValue_fromVariant(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_fromVariant(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QVariant, &a0, &a0State))
        {
            QJsonValue*sipRes;

            sipRes = new QJsonValue(QJsonValue::fromVariant(*a0));
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_fromVariant, doc_QJsonValue_fromVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_toVariant, "toVariant(self) -> Any");

extern "C" {static PyObject *meth_QJsonValue_toVariant(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->toVariant());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toVariant, doc_QJsonValue_toVariant);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_type, "type(self) -> QJsonValue.Type");

extern "C" {static PyObject *meth_QJsonValue_type(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            QJsonValue::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_QJsonValue_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_type, doc_QJsonValue_type);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isNull(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isNull, doc_QJsonValue_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_isBool, "isBool(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isBool(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBool();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isBool, doc_QJsonValue_isBool);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_isDouble, "isDouble(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isDouble(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDouble();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isDouble, doc_QJsonValue_isDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_isString, "isString(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isString(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isString();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isString, doc_QJsonValue_isString);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_isArray, "isArray(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isArray(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isArray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isArray, doc_QJsonValue_isArray);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_isObject, "isObject(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isObject(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isObject();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isObject, doc_QJsonValue_isObject);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_isUndefined, "isUndefined(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isUndefined(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isUndefined(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndefined();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isUndefined, doc_QJsonValue_isUndefined);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_toBool, "toBool(self, defaultValue: bool = False) -> bool");

extern "C" {static PyObject *meth_QJsonValue_toBool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toBool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        const QJsonValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QJsonValue, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->toBool(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toBool, doc_QJsonValue_toBool);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_toInt, "toInt(self, defaultValue: int = 0) -> int");

extern "C" {static PyObject *meth_QJsonValue_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const QJsonValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QJsonValue, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->toInt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toInt, doc_QJsonValue_toInt);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_toDouble, "toDouble(self, defaultValue: float = 0) -> float");

extern "C" {static PyObject *meth_QJsonValue_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        double a0 = 0;
        const QJsonValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|d", &sipSelf, sipType_QJsonValue, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->toDouble(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toDouble, doc_QJsonValue_toDouble);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_toString, "toString(self, defaultValue: str = '') -> str");

extern "C" {static PyObject *meth_QJsonValue_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QJsonValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QJsonValue, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toString(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toString, doc_QJsonValue_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_toArray, "toArray(self) -> List[QJsonValue]\n"
    "toArray(self, Iterable[Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]]) -> List[QJsonValue]");

extern "C" {static PyObject *meth_QJsonValue_toArray(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            QJsonArray*sipRes;

            sipRes = new QJsonArray(sipCpp->toArray());

            return sipConvertFromNewType(sipRes,sipType_QJsonArray,NULL);
        }
    }

    {
        const QJsonArray* a0;
        int a0State = 0;
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJsonValue, &sipCpp, sipType_QJsonArray,&a0, &a0State))
        {
            QJsonArray*sipRes;

            sipRes = new QJsonArray(sipCpp->toArray(*a0));
            sipReleaseType(const_cast<QJsonArray *>(a0),sipType_QJsonArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toArray, doc_QJsonValue_toArray);

    return NULL;
}


PyDoc_STRVAR(doc_QJsonValue_toObject, "toObject(self) -> Dict[str, QJsonValue]\n"
    "toObject(self, Dict[str, QJsonValue]) -> Dict[str, QJsonValue]");

extern "C" {static PyObject *meth_QJsonValue_toObject(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            QJsonObject*sipRes;

            sipRes = new QJsonObject(sipCpp->toObject());

            return sipConvertFromNewType(sipRes,sipType_QJsonObject,NULL);
        }
    }

    {
        const QJsonObject* a0;
        int a0State = 0;
        const QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJsonValue, &sipCpp, sipType_QJsonObject,&a0, &a0State))
        {
            QJsonObject*sipRes;

            sipRes = new QJsonObject(sipCpp->toObject(*a0));
            sipReleaseType(const_cast<QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toObject, doc_QJsonValue_toObject);

    return NULL;
}


extern "C" {static PyObject *slot_QJsonValue___ne__(PyObject *,PyObject *);}
static PyObject *slot_QJsonValue___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QJsonValue *sipCpp = reinterpret_cast<QJsonValue *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonValue));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QJsonValue* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QJsonValue, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QJsonValue::operator!=(*a0);
            sipReleaseType(const_cast<QJsonValue *>(a0),sipType_QJsonValue,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QJsonValue,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QJsonValue___eq__(PyObject *,PyObject *);}
static PyObject *slot_QJsonValue___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QJsonValue *sipCpp = reinterpret_cast<QJsonValue *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonValue));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QJsonValue* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QJsonValue, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QJsonValue::operator==(*a0);
            sipReleaseType(const_cast<QJsonValue *>(a0),sipType_QJsonValue,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QJsonValue,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QJsonValue(void *, int);}
static void release_QJsonValue(void *sipCppV,int)
{
    delete reinterpret_cast<QJsonValue *>(sipCppV);
}


extern "C" {static void assign_QJsonValue(void *, SIP_SSIZE_T, const void *);}
static void assign_QJsonValue(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QJsonValue *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QJsonValue *>(sipSrc);
}


extern "C" {static void *array_QJsonValue(SIP_SSIZE_T);}
static void *array_QJsonValue(SIP_SSIZE_T sipNrElem)
{
    return new QJsonValue[sipNrElem];
}


extern "C" {static void *copy_QJsonValue(const void *, SIP_SSIZE_T);}
static void *copy_QJsonValue(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QJsonValue(reinterpret_cast<const QJsonValue *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QJsonValue(sipSimpleWrapper *);}
static void dealloc_QJsonValue(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QJsonValue(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QJsonValue(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJsonValue(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QJsonValue *sipCpp = 0;

    {
        QJsonValue::Type a0 = QJsonValue::Null;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|XE", sipType_QJsonValue_Type, &a0))
        {
            sipCpp = new QJsonValue(a0);

            return sipCpp;
        }
    }

    {
        const QJsonValue* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QJsonValue, &a0, &a0State))
        {
            sipCpp = new QJsonValue(*a0);
            sipReleaseType(const_cast<QJsonValue *>(a0),sipType_QJsonValue,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QJsonValue(PyObject *, void **, int *, PyObject *);}
static int convertTo_QJsonValue(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QJsonValue **sipCppPtr = reinterpret_cast<QJsonValue **>(sipCppPtrV);

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qjsonvalue.sip"
if (!sipIsErr)
    return qpycore_canConvertTo_QJsonValue(sipPy);

return qpycore_convertTo_QJsonValue(sipPy, sipTransferObj, sipCppPtr, sipIsErr);
#line 708 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQJsonValue.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QJsonValue[] = {
    {(void *)slot_QJsonValue___ne__, ne_slot},
    {(void *)slot_QJsonValue___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QJsonValue[] = {
    {SIP_MLNAME_CAST(sipName_fromVariant), meth_QJsonValue_fromVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_fromVariant)},
    {SIP_MLNAME_CAST(sipName_isArray), meth_QJsonValue_isArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isArray)},
    {SIP_MLNAME_CAST(sipName_isBool), meth_QJsonValue_isBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isBool)},
    {SIP_MLNAME_CAST(sipName_isDouble), meth_QJsonValue_isDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isDouble)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QJsonValue_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isNull)},
    {SIP_MLNAME_CAST(sipName_isObject), meth_QJsonValue_isObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isObject)},
    {SIP_MLNAME_CAST(sipName_isString), meth_QJsonValue_isString, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isString)},
    {SIP_MLNAME_CAST(sipName_isUndefined), meth_QJsonValue_isUndefined, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isUndefined)},
    {SIP_MLNAME_CAST(sipName_toArray), meth_QJsonValue_toArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_toArray)},
    {SIP_MLNAME_CAST(sipName_toBool), (PyCFunction)meth_QJsonValue_toBool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonValue_toBool)},
    {SIP_MLNAME_CAST(sipName_toDouble), (PyCFunction)meth_QJsonValue_toDouble, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonValue_toDouble)},
    {SIP_MLNAME_CAST(sipName_toInt), (PyCFunction)meth_QJsonValue_toInt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonValue_toInt)},
    {SIP_MLNAME_CAST(sipName_toObject), meth_QJsonValue_toObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_toObject)},
    {SIP_MLNAME_CAST(sipName_toString), (PyCFunction)meth_QJsonValue_toString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonValue_toString)},
    {SIP_MLNAME_CAST(sipName_toVariant), meth_QJsonValue_toVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_toVariant)},
    {SIP_MLNAME_CAST(sipName_type), meth_QJsonValue_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_type)}
};

static sipEnumMemberDef enummembers_QJsonValue[] = {
    {sipName_Array, static_cast<int>(QJsonValue::Array), 97},
    {sipName_Bool, static_cast<int>(QJsonValue::Bool), 97},
    {sipName_Double, static_cast<int>(QJsonValue::Double), 97},
    {sipName_Null, static_cast<int>(QJsonValue::Null), 97},
    {sipName_Object, static_cast<int>(QJsonValue::Object), 97},
    {sipName_String, static_cast<int>(QJsonValue::String), 97},
    {sipName_Undefined, static_cast<int>(QJsonValue::Undefined), 97},
};

PyDoc_STRVAR(doc_QJsonValue, "\1QJsonValue(type: QJsonValue.Type = QJsonValue.Null)\n"
    "QJsonValue(Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str])");


pyqt5ClassTypeDef sipTypeDef_QtCore_QJsonValue = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QJsonValue,
        {0}
    },
    {
        sipNameNr_QJsonValue,
        {0, 0, 1},
        16, methods_QJsonValue,
        7, enummembers_QJsonValue,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QJsonValue,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QJsonValue,
    init_type_QJsonValue,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QJsonValue,
    assign_QJsonValue,
    array_QJsonValue,
    copy_QJsonValue,
    release_QJsonValue,
    0,
    convertTo_QJsonValue,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
