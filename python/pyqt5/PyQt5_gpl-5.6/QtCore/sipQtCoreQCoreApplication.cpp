/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 244 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 232 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 148 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"


class sipQCoreApplication : public QCoreApplication
{
public:
    sipQCoreApplication(int&,char**);
    virtual ~sipQCoreApplication();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool notify(QObject*,QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCoreApplication(const sipQCoreApplication &);
    sipQCoreApplication &operator = (const sipQCoreApplication &);

    char sipPyMethods[8];
};

sipQCoreApplication::sipQCoreApplication(int& a0,char**a1): QCoreApplication(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCoreApplication::~sipQCoreApplication()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCoreApplication::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QCoreApplication);

    return QCoreApplication::metaObject();
}

int sipQCoreApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCoreApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QCoreApplication,_c,_id,_a);

    return _id;
}

void *sipQCoreApplication::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QCoreApplication, _clname, &sipCpp) ? sipCpp : QCoreApplication::qt_metacast(_clname));
}

void sipQCoreApplication::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCoreApplication::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCoreApplication::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCoreApplication::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCoreApplication::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCoreApplication::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQCoreApplication::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCoreApplication::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQCoreApplication::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCoreApplication::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQCoreApplication::notify(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_notify);

    if (!sipMeth)
        return QCoreApplication::notify(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationDomain, "setOrganizationDomain(str)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QCoreApplication::setOrganizationDomain(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationDomain, doc_QCoreApplication_setOrganizationDomain);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationDomain, "organizationDomain() -> str");

extern "C" {static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QCoreApplication::organizationDomain());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationDomain, doc_QCoreApplication_organizationDomain);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationName, "setOrganizationName(str)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QCoreApplication::setOrganizationName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationName, doc_QCoreApplication_setOrganizationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationName, "organizationName() -> str");

extern "C" {static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QCoreApplication::organizationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationName, doc_QCoreApplication_organizationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationName, "setApplicationName(str)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QCoreApplication::setApplicationName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationName, doc_QCoreApplication_setApplicationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationName, "applicationName() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QCoreApplication::applicationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationName, doc_QCoreApplication_applicationName);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_arguments, "arguments() -> List[str]");

extern "C" {static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QCoreApplication::arguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_arguments, doc_QCoreApplication_arguments);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_instance, "instance() -> QCoreApplication");

extern "C" {static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QCoreApplication*sipRes;

            sipRes = QCoreApplication::instance();

            return sipConvertFromType(sipRes,sipType_QCoreApplication,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_instance, doc_QCoreApplication_instance);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_exec_, "exec_() -> int");

extern "C" {static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exec_, doc_QCoreApplication_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_exec, "exec() -> int");

extern "C" {static PyObject *meth_QCoreApplication_exec(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exec, doc_QCoreApplication_exec);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_processEvents, "processEvents(flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents)\n"
    "processEvents(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int)");

extern "C" {static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J1", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1i", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::processEvents(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_processEvents, doc_QCoreApplication_processEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_exit, "exit(returnCode: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|i", &a0))
        {
            QCoreApplication::exit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exit, doc_QCoreApplication_exit);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_sendEvent, "sendEvent(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        QEvent* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::sendEvent(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendEvent, doc_QCoreApplication_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_postEvent, "postEvent(QObject, QEvent, priority: int = Qt.NormalEventPriority)");

extern "C" {static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        QEvent* a1;
        int a2 = Qt::NormalEventPriority;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J:|i", sipType_QObject, &a0, sipType_QEvent, &a1, &a2))
        {
            QCoreApplication::postEvent(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_postEvent, doc_QCoreApplication_postEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_sendPostedEvents, "sendPostedEvents(receiver: QObject = None, eventType: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0 = 0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            sipName_receiver,
            sipName_eventType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8i", sipType_QObject, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::sendPostedEvents(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendPostedEvents, doc_QCoreApplication_sendPostedEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_removePostedEvents, "removePostedEvents(QObject, eventType: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_eventType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|i", sipType_QObject, &a0, &a1))
        {
            QCoreApplication::removePostedEvents(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removePostedEvents, doc_QCoreApplication_removePostedEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_hasPendingEvents, "hasPendingEvents() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QCoreApplication::hasPendingEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_hasPendingEvents, doc_QCoreApplication_hasPendingEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_notify, "notify(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QCoreApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_notify, doc_QCoreApplication_notify);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_startingUp, "startingUp() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QCoreApplication::startingUp();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_startingUp, doc_QCoreApplication_startingUp);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_closingDown, "closingDown() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QCoreApplication::closingDown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_closingDown, doc_QCoreApplication_closingDown);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationDirPath, "applicationDirPath() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QCoreApplication::applicationDirPath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationDirPath, doc_QCoreApplication_applicationDirPath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationFilePath, "applicationFilePath() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QCoreApplication::applicationFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationFilePath, doc_QCoreApplication_applicationFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setLibraryPaths, "setLibraryPaths(Iterable[str])");

extern "C" {static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
            QCoreApplication::setLibraryPaths(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setLibraryPaths, doc_QCoreApplication_setLibraryPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_libraryPaths, "libraryPaths() -> List[str]");

extern "C" {static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QCoreApplication::libraryPaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_libraryPaths, doc_QCoreApplication_libraryPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_addLibraryPath, "addLibraryPath(str)");

extern "C" {static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QCoreApplication::addLibraryPath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_addLibraryPath, doc_QCoreApplication_addLibraryPath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_removeLibraryPath, "removeLibraryPath(str)");

extern "C" {static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QCoreApplication::removeLibraryPath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeLibraryPath, doc_QCoreApplication_removeLibraryPath);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_installTranslator, "installTranslator(QTranslator) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            bool sipRes;

            sipRes = QCoreApplication::installTranslator(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_installTranslator, doc_QCoreApplication_installTranslator);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_removeTranslator, "removeTranslator(QTranslator) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            bool sipRes;

            sipRes = QCoreApplication::removeTranslator(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeTranslator, doc_QCoreApplication_removeTranslator);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_translate, "translate(str, str, disambiguation: str = None, n: int = -1) -> str");

extern "C" {static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_disambiguation,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "AAA8|AAi", &a0Keep, &a0, &a1Keep, &a1, &a2Keep, &a2, &a3))
        {
            QString*sipRes;

            sipRes = new QString(QCoreApplication::translate(a0,a1,a2,a3));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);
            Py_XDECREF(a2Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_translate, doc_QCoreApplication_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_flush, "flush()");

extern "C" {static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_flush, doc_QCoreApplication_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setAttribute, "setAttribute(Qt.ApplicationAttribute, on: bool = True)");

extern "C" {static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ApplicationAttribute a0;
        bool a1 = 1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "E|b", sipType_Qt_ApplicationAttribute, &a0, &a1))
        {
            QCoreApplication::setAttribute(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setAttribute, doc_QCoreApplication_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_testAttribute, "testAttribute(Qt.ApplicationAttribute) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ApplicationAttribute a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_ApplicationAttribute, &a0))
        {
            bool sipRes;

            sipRes = QCoreApplication::testAttribute(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_testAttribute, doc_QCoreApplication_testAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_quit, "quit()");

extern "C" {static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QCoreApplication::quit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_quit, doc_QCoreApplication_quit);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCoreApplication::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_event, doc_QCoreApplication_event);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationVersion, "setApplicationVersion(str)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QCoreApplication::setApplicationVersion(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationVersion, doc_QCoreApplication_setApplicationVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationVersion, "applicationVersion() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QCoreApplication::applicationVersion());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationVersion, doc_QCoreApplication_applicationVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationPid, "applicationPid() -> int");

extern "C" {static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            qint64 sipRes;

            sipRes = QCoreApplication::applicationPid();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationPid, doc_QCoreApplication_applicationPid);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_eventDispatcher, "eventDispatcher() -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QCoreApplication_eventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_eventDispatcher(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QAbstractEventDispatcher*sipRes;

            sipRes = QCoreApplication::eventDispatcher();

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_eventDispatcher, doc_QCoreApplication_eventDispatcher);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setEventDispatcher, "setEventDispatcher(QAbstractEventDispatcher)");

extern "C" {static PyObject *meth_QCoreApplication_setEventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setEventDispatcher(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractEventDispatcher* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_QAbstractEventDispatcher, &a0))
        {
            QCoreApplication::setEventDispatcher(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setEventDispatcher, doc_QCoreApplication_setEventDispatcher);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_isQuitLockEnabled, "isQuitLockEnabled() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_isQuitLockEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_isQuitLockEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QCoreApplication::isQuitLockEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_isQuitLockEnabled, doc_QCoreApplication_isQuitLockEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setQuitLockEnabled, "setQuitLockEnabled(bool)");

extern "C" {static PyObject *meth_QCoreApplication_setQuitLockEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setQuitLockEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            QCoreApplication::setQuitLockEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setQuitLockEnabled, doc_QCoreApplication_setQuitLockEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_installNativeEventFilter, "installNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QCoreApplication_installNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractNativeEventFilter* a0;
        QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->installNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_installNativeEventFilter, doc_QCoreApplication_installNativeEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_removeNativeEventFilter, "removeNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QCoreApplication_removeNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractNativeEventFilter* a0;
        QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->removeNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeNativeEventFilter, doc_QCoreApplication_removeNativeEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_setSetuidAllowed, "setSetuidAllowed(bool)");

extern "C" {static PyObject *meth_QCoreApplication_setSetuidAllowed(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setSetuidAllowed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            QCoreApplication::setSetuidAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setSetuidAllowed, doc_QCoreApplication_setSetuidAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_QCoreApplication_isSetuidAllowed, "isSetuidAllowed() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_isSetuidAllowed(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_isSetuidAllowed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QCoreApplication::isSetuidAllowed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_isSetuidAllowed, doc_QCoreApplication_isSetuidAllowed);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCoreApplication(void *, int);}
static void release_QCoreApplication(void *sipCppV,int)
{
    QCoreApplication *sipCpp = reinterpret_cast<QCoreApplication *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QCoreApplication(sipSimpleWrapper *);}
static void dealloc_QCoreApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCoreApplication *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCoreApplication(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCoreApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCoreApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQCoreApplication *sipCpp = 0;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtCore/qcoreapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCoreApplication(nargc, argv);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_update_argv_list(a0, argc, argv);
        }
#line 1689 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtCore/sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCoreApplication[] = {{164, 255, 1}};


static PyMethodDef methods_QCoreApplication[] = {
    {SIP_MLNAME_CAST(sipName_addLibraryPath), meth_QCoreApplication_addLibraryPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_addLibraryPath)},
    {SIP_MLNAME_CAST(sipName_applicationDirPath), meth_QCoreApplication_applicationDirPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationDirPath)},
    {SIP_MLNAME_CAST(sipName_applicationFilePath), meth_QCoreApplication_applicationFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationFilePath)},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QCoreApplication_applicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationName)},
    {SIP_MLNAME_CAST(sipName_applicationPid), meth_QCoreApplication_applicationPid, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationPid)},
    {SIP_MLNAME_CAST(sipName_applicationVersion), meth_QCoreApplication_applicationVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationVersion)},
    {SIP_MLNAME_CAST(sipName_arguments), meth_QCoreApplication_arguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_arguments)},
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QCoreApplication_closingDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_closingDown)},
    {SIP_MLNAME_CAST(sipName_event), meth_QCoreApplication_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_event)},
    {SIP_MLNAME_CAST(sipName_eventDispatcher), meth_QCoreApplication_eventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_eventDispatcher)},
    {SIP_MLNAME_CAST(sipName_exec), meth_QCoreApplication_exec, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QCoreApplication_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_exec_)},
    {SIP_MLNAME_CAST(sipName_exit), (PyCFunction)meth_QCoreApplication_exit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_exit)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QCoreApplication_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_flush)},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QCoreApplication_hasPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_hasPendingEvents)},
    {SIP_MLNAME_CAST(sipName_installNativeEventFilter), meth_QCoreApplication_installNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_installNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_installTranslator), meth_QCoreApplication_installTranslator, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_installTranslator)},
    {SIP_MLNAME_CAST(sipName_instance), meth_QCoreApplication_instance, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_instance)},
    {SIP_MLNAME_CAST(sipName_isQuitLockEnabled), meth_QCoreApplication_isQuitLockEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_isQuitLockEnabled)},
    {SIP_MLNAME_CAST(sipName_isSetuidAllowed), meth_QCoreApplication_isSetuidAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_isSetuidAllowed)},
    {SIP_MLNAME_CAST(sipName_libraryPaths), meth_QCoreApplication_libraryPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_libraryPaths)},
    {SIP_MLNAME_CAST(sipName_notify), meth_QCoreApplication_notify, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_notify)},
    {SIP_MLNAME_CAST(sipName_organizationDomain), meth_QCoreApplication_organizationDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_organizationDomain)},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QCoreApplication_organizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_organizationName)},
    {SIP_MLNAME_CAST(sipName_postEvent), (PyCFunction)meth_QCoreApplication_postEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_postEvent)},
    {SIP_MLNAME_CAST(sipName_processEvents), (PyCFunction)meth_QCoreApplication_processEvents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_processEvents)},
    {SIP_MLNAME_CAST(sipName_quit), meth_QCoreApplication_quit, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_quit)},
    {SIP_MLNAME_CAST(sipName_removeLibraryPath), meth_QCoreApplication_removeLibraryPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeLibraryPath)},
    {SIP_MLNAME_CAST(sipName_removeNativeEventFilter), meth_QCoreApplication_removeNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_removePostedEvents), (PyCFunction)meth_QCoreApplication_removePostedEvents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_removePostedEvents)},
    {SIP_MLNAME_CAST(sipName_removeTranslator), meth_QCoreApplication_removeTranslator, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeTranslator)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QCoreApplication_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_sendEvent)},
    {SIP_MLNAME_CAST(sipName_sendPostedEvents), (PyCFunction)meth_QCoreApplication_sendPostedEvents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_sendPostedEvents)},
    {SIP_MLNAME_CAST(sipName_setApplicationName), meth_QCoreApplication_setApplicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setApplicationName)},
    {SIP_MLNAME_CAST(sipName_setApplicationVersion), meth_QCoreApplication_setApplicationVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setApplicationVersion)},
    {SIP_MLNAME_CAST(sipName_setAttribute), (PyCFunction)meth_QCoreApplication_setAttribute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setEventDispatcher), meth_QCoreApplication_setEventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setEventDispatcher)},
    {SIP_MLNAME_CAST(sipName_setLibraryPaths), meth_QCoreApplication_setLibraryPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setLibraryPaths)},
    {SIP_MLNAME_CAST(sipName_setOrganizationDomain), meth_QCoreApplication_setOrganizationDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setOrganizationDomain)},
    {SIP_MLNAME_CAST(sipName_setOrganizationName), meth_QCoreApplication_setOrganizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setOrganizationName)},
    {SIP_MLNAME_CAST(sipName_setQuitLockEnabled), meth_QCoreApplication_setQuitLockEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setQuitLockEnabled)},
    {SIP_MLNAME_CAST(sipName_setSetuidAllowed), meth_QCoreApplication_setSetuidAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setSetuidAllowed)},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QCoreApplication_startingUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_startingUp)},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QCoreApplication_testAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_testAttribute)},
    {SIP_MLNAME_CAST(sipName_translate), (PyCFunction)meth_QCoreApplication_translate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_translate)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCoreApplication[] = {
    {"aboutToQuit()", "\1aboutToQuit(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QCoreApplication, "\1QCoreApplication(List[str])");


pyqt5ClassTypeDef sipTypeDef_QtCore_QCoreApplication = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCoreApplication,
        {0}
    },
    {
        sipNameNr_QCoreApplication,
        {0, 0, 1},
        45, methods_QCoreApplication,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCoreApplication,
    -1,
    -1,
    supers_QCoreApplication,
    0,
    init_type_QCoreApplication,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCoreApplication,
    0,
    0,
    0,
    release_QCoreApplication,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCoreApplication::staticMetaObject,
    0,
    signals_QCoreApplication,
    0
};
