/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSerialPort.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtSerialPort/qserialport.sip"
#include <qserialport.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtSerialPort/qserialportinfo.sip"
#include <qserialportinfo.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtSerialPort/qserialport.sip"
#include <qserialport.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtSerialPort/qserialport.sip"
#include <qserialport.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"


class sipQSerialPort : public QSerialPort
{
public:
    sipQSerialPort(QObject*);
    sipQSerialPort(const QString&,QObject*);
    sipQSerialPort(const QSerialPortInfo&,QObject*);
    virtual ~sipQSerialPort();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool isSequential() const;
    bool atEnd() const;
    void close();
    bool open(QIODevice::OpenMode);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSerialPort(const sipQSerialPort &);
    sipQSerialPort &operator = (const sipQSerialPort &);

    char sipPyMethods[23];
};

sipQSerialPort::sipQSerialPort(QObject*a0): QSerialPort(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSerialPort::sipQSerialPort(const QString& a0,QObject*a1): QSerialPort(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSerialPort::sipQSerialPort(const QSerialPortInfo& a0,QObject*a1): QSerialPort(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSerialPort::~sipQSerialPort()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSerialPort::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSerialPort_qt_metaobject(sipPySelf,sipType_QSerialPort);

    return QSerialPort::metaObject();
}

int sipQSerialPort::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSerialPort::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSerialPort_qt_metacall(sipPySelf,sipType_QSerialPort,_c,_id,_a);

    return _id;
}

void *sipQSerialPort::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSerialPort_qt_metacast(sipPySelf, sipType_QSerialPort, _clname, &sipCpp) ? sipCpp : QSerialPort::qt_metacast(_clname));
}

void sipQSerialPort::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSerialPort::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSerialPort::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSerialPort::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSerialPort::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSerialPort::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSerialPort::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSerialPort::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSerialPort::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSerialPort::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSerialPort::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSerialPort::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSerialPort::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSerialPort::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSerialPort::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QSerialPort::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSerialPort::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QSerialPort::seek(a0);

    typedef bool (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQSerialPort::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QSerialPort::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQSerialPort::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QSerialPort::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQSerialPort::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QSerialPort::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[42]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQSerialPort::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QSerialPort::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQSerialPort::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QSerialPort::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSerialPort::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QSerialPort::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSerialPort::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QSerialPort::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSerialPort::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QSerialPort::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQSerialPort::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QSerialPort::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQSerialPort::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QSerialPort::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSerialPort::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QSerialPort::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSerialPort::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QSerialPort::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSerialPort::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QSerialPort::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSerialPort::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QSerialPort::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtSerialPort_QtCore->em_virthandlers[15]))(sipGILState, sipModuleAPI_QtSerialPort_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSerialPort_setPortName, "setPortName(self, str)");

extern "C" {static PyObject *meth_QSerialPort_setPortName(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setPortName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPortName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setPortName, doc_QSerialPort_setPortName);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_portName, "portName(self) -> str");

extern "C" {static PyObject *meth_QSerialPort_portName(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_portName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->portName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_portName, doc_QSerialPort_portName);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setPort, "setPort(self, QSerialPortInfo)");

extern "C" {static PyObject *meth_QSerialPort_setPort(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPortInfo* a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPortInfo, &a0))
        {
            sipCpp->setPort(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setPort, doc_QSerialPort_setPort);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_open, "open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool");

extern "C" {static PyObject *meth_QSerialPort_open(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::open(*a0) : sipCpp->open(*a0));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_open, doc_QSerialPort_open);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_close, "close(self)");

extern "C" {static PyObject *meth_QSerialPort_close(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSerialPort::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_close, doc_QSerialPort_close);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setSettingsRestoredOnClose, "setSettingsRestoredOnClose(self, bool)");

extern "C" {static PyObject *meth_QSerialPort_setSettingsRestoredOnClose(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setSettingsRestoredOnClose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            sipCpp->setSettingsRestoredOnClose(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setSettingsRestoredOnClose, doc_QSerialPort_setSettingsRestoredOnClose);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_settingsRestoredOnClose, "settingsRestoredOnClose(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_settingsRestoredOnClose(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_settingsRestoredOnClose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->settingsRestoredOnClose();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_settingsRestoredOnClose, doc_QSerialPort_settingsRestoredOnClose);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setBaudRate, "setBaudRate(self, int, dir: Union[QSerialPort.Directions, QSerialPort.Direction] = QSerialPort.AllDirections) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setBaudRate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setBaudRate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint32 a0;
        QSerialPort::Directions a1def = QSerialPort::AllDirections;
        QSerialPort::Directions* a1 = &a1def;
        int a1State = 0;
        QSerialPort *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J1", &sipSelf, sipType_QSerialPort, &sipCpp, &a0, sipType_QSerialPort_Directions, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->setBaudRate(a0,*a1);
            sipReleaseType(a1,sipType_QSerialPort_Directions,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setBaudRate, doc_QSerialPort_setBaudRate);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_baudRate, "baudRate(self, dir: Union[QSerialPort.Directions, QSerialPort.Direction] = QSerialPort.AllDirections) -> int");

extern "C" {static PyObject *meth_QSerialPort_baudRate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_baudRate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort::Directions a0def = QSerialPort::AllDirections;
        QSerialPort::Directions* a0 = &a0def;
        int a0State = 0;
        const QSerialPort *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPort_Directions, &a0, &a0State))
        {
            qint32 sipRes;

            sipRes = sipCpp->baudRate(*a0);
            sipReleaseType(a0,sipType_QSerialPort_Directions,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_baudRate, doc_QSerialPort_baudRate);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setDataBits, "setDataBits(self, QSerialPort.DataBits) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setDataBits(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setDataBits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort::DataBits a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPort_DataBits, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setDataBits(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setDataBits, doc_QSerialPort_setDataBits);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_dataBits, "dataBits(self) -> QSerialPort.DataBits");

extern "C" {static PyObject *meth_QSerialPort_dataBits(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_dataBits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QSerialPort::DataBits sipRes;

            sipRes = sipCpp->dataBits();

            return sipConvertFromEnum(sipRes,sipType_QSerialPort_DataBits);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_dataBits, doc_QSerialPort_dataBits);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setParity, "setParity(self, QSerialPort.Parity) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setParity(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setParity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort::Parity a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPort_Parity, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setParity(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setParity, doc_QSerialPort_setParity);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_parity, "parity(self) -> QSerialPort.Parity");

extern "C" {static PyObject *meth_QSerialPort_parity(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_parity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QSerialPort::Parity sipRes;

            sipRes = sipCpp->parity();

            return sipConvertFromEnum(sipRes,sipType_QSerialPort_Parity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_parity, doc_QSerialPort_parity);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setStopBits, "setStopBits(self, QSerialPort.StopBits) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setStopBits(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setStopBits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort::StopBits a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPort_StopBits, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setStopBits(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setStopBits, doc_QSerialPort_setStopBits);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_stopBits, "stopBits(self) -> QSerialPort.StopBits");

extern "C" {static PyObject *meth_QSerialPort_stopBits(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_stopBits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QSerialPort::StopBits sipRes;

            sipRes = sipCpp->stopBits();

            return sipConvertFromEnum(sipRes,sipType_QSerialPort_StopBits);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_stopBits, doc_QSerialPort_stopBits);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setFlowControl, "setFlowControl(self, QSerialPort.FlowControl) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setFlowControl(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setFlowControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort::FlowControl a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPort_FlowControl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setFlowControl(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setFlowControl, doc_QSerialPort_setFlowControl);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_flowControl, "flowControl(self) -> QSerialPort.FlowControl");

extern "C" {static PyObject *meth_QSerialPort_flowControl(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_flowControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QSerialPort::FlowControl sipRes;

            sipRes = sipCpp->flowControl();

            return sipConvertFromEnum(sipRes,sipType_QSerialPort_FlowControl);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_flowControl, doc_QSerialPort_flowControl);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setDataTerminalReady, "setDataTerminalReady(self, bool) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setDataTerminalReady(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setDataTerminalReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setDataTerminalReady(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setDataTerminalReady, doc_QSerialPort_setDataTerminalReady);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_isDataTerminalReady, "isDataTerminalReady(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_isDataTerminalReady(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_isDataTerminalReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDataTerminalReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_isDataTerminalReady, doc_QSerialPort_isDataTerminalReady);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setRequestToSend, "setRequestToSend(self, bool) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setRequestToSend(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setRequestToSend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setRequestToSend(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setRequestToSend, doc_QSerialPort_setRequestToSend);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_isRequestToSend, "isRequestToSend(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_isRequestToSend(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_isRequestToSend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRequestToSend();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_isRequestToSend, doc_QSerialPort_isRequestToSend);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_pinoutSignals, "pinoutSignals(self) -> QSerialPort.PinoutSignals");

extern "C" {static PyObject *meth_QSerialPort_pinoutSignals(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_pinoutSignals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QSerialPort::PinoutSignals*sipRes;

            sipRes = new QSerialPort::PinoutSignals(sipCpp->pinoutSignals());

            return sipConvertFromNewType(sipRes,sipType_QSerialPort_PinoutSignals,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_pinoutSignals, doc_QSerialPort_pinoutSignals);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_flush(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_flush, doc_QSerialPort_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_clear, "clear(self, dir: Union[QSerialPort.Directions, QSerialPort.Direction] = QSerialPort.AllDirections) -> bool");

extern "C" {static PyObject *meth_QSerialPort_clear(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_clear(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort::Directions a0def = QSerialPort::AllDirections;
        QSerialPort::Directions* a0 = &a0def;
        int a0State = 0;
        QSerialPort *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPort_Directions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->clear(*a0);
            sipReleaseType(a0,sipType_QSerialPort_Directions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_clear, doc_QSerialPort_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_atEnd, doc_QSerialPort_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setDataErrorPolicy, "setDataErrorPolicy(self, policy: QSerialPort.DataErrorPolicy = QSerialPort.IgnorePolicy) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setDataErrorPolicy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setDataErrorPolicy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort::DataErrorPolicy a0 = QSerialPort::IgnorePolicy;
        QSerialPort *sipCpp;

        static const char *sipKwdList[] = {
            sipName_policy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QSerialPort, &sipCpp, sipType_QSerialPort_DataErrorPolicy, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setDataErrorPolicy(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setDataErrorPolicy, doc_QSerialPort_setDataErrorPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_dataErrorPolicy, "dataErrorPolicy(self) -> QSerialPort.DataErrorPolicy");

extern "C" {static PyObject *meth_QSerialPort_dataErrorPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_dataErrorPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QSerialPort::DataErrorPolicy sipRes;

            sipRes = sipCpp->dataErrorPolicy();

            return sipConvertFromEnum(sipRes,sipType_QSerialPort_DataErrorPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_dataErrorPolicy, doc_QSerialPort_dataErrorPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_error, "error(self) -> QSerialPort.SerialPortError");

extern "C" {static PyObject *meth_QSerialPort_error(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            QSerialPort::SerialPortError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QSerialPort_SerialPortError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_error, doc_QSerialPort_error);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_clearError, "clearError(self)");

extern "C" {static PyObject *meth_QSerialPort_clearError(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_clearError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            sipCpp->clearError();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_clearError, doc_QSerialPort_clearError);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QSerialPort_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_readBufferSize, doc_QSerialPort_readBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QSerialPort_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            sipCpp->setReadBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setReadBufferSize, doc_QSerialPort_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_isSequential, doc_QSerialPort_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QSerialPort_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_bytesAvailable, doc_QSerialPort_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QSerialPort_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_bytesToWrite, doc_QSerialPort_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_canReadLine, doc_QSerialPort_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_waitForReadyRead, "waitForReadyRead(self, int) -> bool");

extern "C" {static PyObject *meth_QSerialPort_waitForReadyRead(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_waitForReadyRead, doc_QSerialPort_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_waitForBytesWritten, "waitForBytesWritten(self, int) -> bool");

extern "C" {static PyObject *meth_QSerialPort_waitForBytesWritten(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_waitForBytesWritten, doc_QSerialPort_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_sendBreak, "sendBreak(self, duration: int = 0) -> bool");

extern "C" {static PyObject *meth_QSerialPort_sendBreak(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_sendBreak(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        QSerialPort *sipCpp;

        static const char *sipKwdList[] = {
            sipName_duration,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendBreak(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_sendBreak, doc_QSerialPort_sendBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_setBreakEnabled, "setBreakEnabled(self, enabled: bool = True) -> bool");

extern "C" {static PyObject *meth_QSerialPort_setBreakEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_setBreakEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        QSerialPort *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setBreakEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_setBreakEnabled, doc_QSerialPort_setBreakEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QSerialPort_readData(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 224 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtSerialPort/qserialport.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QSerialPort::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1769 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_readData, doc_QSerialPort_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_readLineData, "readLineData(self, int) -> bytes");

extern "C" {static PyObject *meth_QSerialPort_readLineData(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_readLineData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QSerialPort, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 262 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtSerialPort/qserialport.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QSerialPort::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1838 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtSerialPort/sipQtSerialPortQSerialPort.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_readLineData, doc_QSerialPort_readLineData);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QSerialPort_writeData(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QSerialPort, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSerialPort::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_writeData, doc_QSerialPort_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_handle, "handle(self) -> int");

extern "C" {static PyObject *meth_QSerialPort_handle(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->handle();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_handle, doc_QSerialPort_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QSerialPort_isBreakEnabled, "isBreakEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSerialPort_isBreakEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSerialPort_isBreakEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSerialPort *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSerialPort, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBreakEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSerialPort, sipName_isBreakEnabled, doc_QSerialPort_isBreakEnabled);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSerialPort(void *, int);}
static void release_QSerialPort(void *sipCppV,int)
{
    QSerialPort *sipCpp = reinterpret_cast<QSerialPort *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSerialPort(sipSimpleWrapper *);}
static void dealloc_QSerialPort(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSerialPort *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSerialPort(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSerialPort(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSerialPort(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSerialPort *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSerialPort(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQSerialPort(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QSerialPortInfo* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QSerialPortInfo, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQSerialPort(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSerialPort[] = {{80, 0, 1}};


static PyMethodDef methods_QSerialPort[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QSerialPort_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_atEnd)},
    {SIP_MLNAME_CAST(sipName_baudRate), (PyCFunction)meth_QSerialPort_baudRate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSerialPort_baudRate)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QSerialPort_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QSerialPort_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QSerialPort_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_canReadLine)},
    {SIP_MLNAME_CAST(sipName_clear), (PyCFunction)meth_QSerialPort_clear, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSerialPort_clear)},
    {SIP_MLNAME_CAST(sipName_clearError), meth_QSerialPort_clearError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_clearError)},
    {SIP_MLNAME_CAST(sipName_close), meth_QSerialPort_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_close)},
    {SIP_MLNAME_CAST(sipName_dataBits), meth_QSerialPort_dataBits, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_dataBits)},
    {SIP_MLNAME_CAST(sipName_dataErrorPolicy), meth_QSerialPort_dataErrorPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_dataErrorPolicy)},
    {SIP_MLNAME_CAST(sipName_error), meth_QSerialPort_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_error)},
    {SIP_MLNAME_CAST(sipName_flowControl), meth_QSerialPort_flowControl, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_flowControl)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QSerialPort_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_flush)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSerialPort_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_handle)},
    {SIP_MLNAME_CAST(sipName_isBreakEnabled), meth_QSerialPort_isBreakEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_isBreakEnabled)},
    {SIP_MLNAME_CAST(sipName_isDataTerminalReady), meth_QSerialPort_isDataTerminalReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_isDataTerminalReady)},
    {SIP_MLNAME_CAST(sipName_isRequestToSend), meth_QSerialPort_isRequestToSend, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_isRequestToSend)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QSerialPort_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_isSequential)},
    {SIP_MLNAME_CAST(sipName_open), meth_QSerialPort_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_open)},
    {SIP_MLNAME_CAST(sipName_parity), meth_QSerialPort_parity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_parity)},
    {SIP_MLNAME_CAST(sipName_pinoutSignals), meth_QSerialPort_pinoutSignals, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_pinoutSignals)},
    {SIP_MLNAME_CAST(sipName_portName), meth_QSerialPort_portName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_portName)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QSerialPort_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QSerialPort_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_readData)},
    {SIP_MLNAME_CAST(sipName_readLineData), meth_QSerialPort_readLineData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_readLineData)},
    {SIP_MLNAME_CAST(sipName_sendBreak), (PyCFunction)meth_QSerialPort_sendBreak, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSerialPort_sendBreak)},
    {SIP_MLNAME_CAST(sipName_setBaudRate), (PyCFunction)meth_QSerialPort_setBaudRate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSerialPort_setBaudRate)},
    {SIP_MLNAME_CAST(sipName_setBreakEnabled), (PyCFunction)meth_QSerialPort_setBreakEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSerialPort_setBreakEnabled)},
    {SIP_MLNAME_CAST(sipName_setDataBits), meth_QSerialPort_setDataBits, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setDataBits)},
    {SIP_MLNAME_CAST(sipName_setDataErrorPolicy), (PyCFunction)meth_QSerialPort_setDataErrorPolicy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSerialPort_setDataErrorPolicy)},
    {SIP_MLNAME_CAST(sipName_setDataTerminalReady), meth_QSerialPort_setDataTerminalReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setDataTerminalReady)},
    {SIP_MLNAME_CAST(sipName_setFlowControl), meth_QSerialPort_setFlowControl, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setFlowControl)},
    {SIP_MLNAME_CAST(sipName_setParity), meth_QSerialPort_setParity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setParity)},
    {SIP_MLNAME_CAST(sipName_setPort), meth_QSerialPort_setPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setPort)},
    {SIP_MLNAME_CAST(sipName_setPortName), meth_QSerialPort_setPortName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setPortName)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QSerialPort_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setRequestToSend), meth_QSerialPort_setRequestToSend, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setRequestToSend)},
    {SIP_MLNAME_CAST(sipName_setSettingsRestoredOnClose), meth_QSerialPort_setSettingsRestoredOnClose, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setSettingsRestoredOnClose)},
    {SIP_MLNAME_CAST(sipName_setStopBits), meth_QSerialPort_setStopBits, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_setStopBits)},
    {SIP_MLNAME_CAST(sipName_settingsRestoredOnClose), meth_QSerialPort_settingsRestoredOnClose, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_settingsRestoredOnClose)},
    {SIP_MLNAME_CAST(sipName_stopBits), meth_QSerialPort_stopBits, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_stopBits)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), meth_QSerialPort_waitForBytesWritten, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), meth_QSerialPort_waitForReadyRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QSerialPort_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSerialPort_writeData)}
};

static sipEnumMemberDef enummembers_QSerialPort[] = {
    {sipName_AllDirections, static_cast<int>(QSerialPort::AllDirections), 5},
    {sipName_Baud115200, static_cast<int>(QSerialPort::Baud115200), 2},
    {sipName_Baud1200, static_cast<int>(QSerialPort::Baud1200), 2},
    {sipName_Baud19200, static_cast<int>(QSerialPort::Baud19200), 2},
    {sipName_Baud2400, static_cast<int>(QSerialPort::Baud2400), 2},
    {sipName_Baud38400, static_cast<int>(QSerialPort::Baud38400), 2},
    {sipName_Baud4800, static_cast<int>(QSerialPort::Baud4800), 2},
    {sipName_Baud57600, static_cast<int>(QSerialPort::Baud57600), 2},
    {sipName_Baud9600, static_cast<int>(QSerialPort::Baud9600), 2},
    {sipName_BreakConditionError, static_cast<int>(QSerialPort::BreakConditionError), 11},
    {sipName_ClearToSendSignal, static_cast<int>(QSerialPort::ClearToSendSignal), 9},
    {sipName_Data5, static_cast<int>(QSerialPort::Data5), 3},
    {sipName_Data6, static_cast<int>(QSerialPort::Data6), 3},
    {sipName_Data7, static_cast<int>(QSerialPort::Data7), 3},
    {sipName_Data8, static_cast<int>(QSerialPort::Data8), 3},
    {sipName_DataCarrierDetectSignal, static_cast<int>(QSerialPort::DataCarrierDetectSignal), 9},
    {sipName_DataSetReadySignal, static_cast<int>(QSerialPort::DataSetReadySignal), 9},
    {sipName_DataTerminalReadySignal, static_cast<int>(QSerialPort::DataTerminalReadySignal), 9},
    {sipName_DeviceNotFoundError, static_cast<int>(QSerialPort::DeviceNotFoundError), 11},
    {sipName_EvenParity, static_cast<int>(QSerialPort::EvenParity), 8},
    {sipName_FramingError, static_cast<int>(QSerialPort::FramingError), 11},
    {sipName_HardwareControl, static_cast<int>(QSerialPort::HardwareControl), 7},
    {sipName_IgnorePolicy, static_cast<int>(QSerialPort::IgnorePolicy), 4},
    {sipName_Input, static_cast<int>(QSerialPort::Input), 5},
    {sipName_MarkParity, static_cast<int>(QSerialPort::MarkParity), 8},
    {sipName_NoError, static_cast<int>(QSerialPort::NoError), 11},
    {sipName_NoFlowControl, static_cast<int>(QSerialPort::NoFlowControl), 7},
    {sipName_NoParity, static_cast<int>(QSerialPort::NoParity), 8},
    {sipName_NoSignal, static_cast<int>(QSerialPort::NoSignal), 9},
    {sipName_NotOpenError, static_cast<int>(QSerialPort::NotOpenError), 11},
    {sipName_OddParity, static_cast<int>(QSerialPort::OddParity), 8},
    {sipName_OneAndHalfStop, static_cast<int>(QSerialPort::OneAndHalfStop), 12},
    {sipName_OneStop, static_cast<int>(QSerialPort::OneStop), 12},
    {sipName_OpenError, static_cast<int>(QSerialPort::OpenError), 11},
    {sipName_Output, static_cast<int>(QSerialPort::Output), 5},
    {sipName_ParityError, static_cast<int>(QSerialPort::ParityError), 11},
    {sipName_PassZeroPolicy, static_cast<int>(QSerialPort::PassZeroPolicy), 4},
    {sipName_PermissionError, static_cast<int>(QSerialPort::PermissionError), 11},
    {sipName_ReadError, static_cast<int>(QSerialPort::ReadError), 11},
    {sipName_ReceivedDataSignal, static_cast<int>(QSerialPort::ReceivedDataSignal), 9},
    {sipName_RequestToSendSignal, static_cast<int>(QSerialPort::RequestToSendSignal), 9},
    {sipName_ResourceError, static_cast<int>(QSerialPort::ResourceError), 11},
    {sipName_RingIndicatorSignal, static_cast<int>(QSerialPort::RingIndicatorSignal), 9},
    {sipName_SecondaryReceivedDataSignal, static_cast<int>(QSerialPort::SecondaryReceivedDataSignal), 9},
    {sipName_SecondaryTransmittedDataSignal, static_cast<int>(QSerialPort::SecondaryTransmittedDataSignal), 9},
    {sipName_SkipPolicy, static_cast<int>(QSerialPort::SkipPolicy), 4},
    {sipName_SoftwareControl, static_cast<int>(QSerialPort::SoftwareControl), 7},
    {sipName_SpaceParity, static_cast<int>(QSerialPort::SpaceParity), 8},
    {sipName_StopReceivingPolicy, static_cast<int>(QSerialPort::StopReceivingPolicy), 4},
    {sipName_TimeoutError, static_cast<int>(QSerialPort::TimeoutError), 11},
    {sipName_TransmittedDataSignal, static_cast<int>(QSerialPort::TransmittedDataSignal), 9},
    {sipName_TwoStop, static_cast<int>(QSerialPort::TwoStop), 12},
    {sipName_UnknownBaud, static_cast<int>(QSerialPort::UnknownBaud), 2},
    {sipName_UnknownDataBits, static_cast<int>(QSerialPort::UnknownDataBits), 3},
    {sipName_UnknownError, static_cast<int>(QSerialPort::UnknownError), 11},
    {sipName_UnknownFlowControl, static_cast<int>(QSerialPort::UnknownFlowControl), 7},
    {sipName_UnknownParity, static_cast<int>(QSerialPort::UnknownParity), 8},
    {sipName_UnknownPolicy, static_cast<int>(QSerialPort::UnknownPolicy), 4},
    {sipName_UnknownStopBits, static_cast<int>(QSerialPort::UnknownStopBits), 12},
    {sipName_UnsupportedOperationError, static_cast<int>(QSerialPort::UnsupportedOperationError), 11},
    {sipName_WriteError, static_cast<int>(QSerialPort::WriteError), 11},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSerialPort[] = {
    {"breakEnabledChanged(bool)", "\1breakEnabledChanged(self, bool)", 0, 0},
    {"settingsRestoredOnCloseChanged(bool)", "\1settingsRestoredOnCloseChanged(self, bool)", 0, 0},
    {"requestToSendChanged(bool)", "\1requestToSendChanged(self, bool)", 0, 0},
    {"dataTerminalReadyChanged(bool)", "\1dataTerminalReadyChanged(self, bool)", 0, 0},
    {"dataErrorPolicyChanged(QSerialPort::DataErrorPolicy)", "\1dataErrorPolicyChanged(self, QSerialPort.DataErrorPolicy)", 0, 0},
    {"flowControlChanged(QSerialPort::FlowControl)", "\1flowControlChanged(self, QSerialPort.FlowControl)", 0, 0},
    {"stopBitsChanged(QSerialPort::StopBits)", "\1stopBitsChanged(self, QSerialPort.StopBits)", 0, 0},
    {"parityChanged(QSerialPort::Parity)", "\1parityChanged(self, QSerialPort.Parity)", 0, 0},
    {"dataBitsChanged(QSerialPort::DataBits)", "\1dataBitsChanged(self, QSerialPort.DataBits)", 0, 0},
    {"baudRateChanged(qint32,QSerialPort::Directions)", "\1baudRateChanged(self, int, Union[QSerialPort.Directions, QSerialPort.Direction])", 0, 0},
    {"error(QSerialPort::SerialPortError)", "\1error(self, QSerialPort.SerialPortError)", &methods_QSerialPort[10], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QSerialPort, "\1QSerialPort(parent: QObject = None)\n"
    "QSerialPort(str, parent: QObject = None)\n"
    "QSerialPort(QSerialPortInfo, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtSerialPort_QSerialPort = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSerialPort,
        {0}
    },
    {
        sipNameNr_QSerialPort,
        {0, 0, 1},
        44, methods_QSerialPort,
        61, enummembers_QSerialPort,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSerialPort,
    -1,
    -1,
    supers_QSerialPort,
    0,
    init_type_QSerialPort,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSerialPort,
    0,
    0,
    0,
    release_QSerialPort,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSerialPort::staticMetaObject,
    0,
    signals_QSerialPort,
    0
};
