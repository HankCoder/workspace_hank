/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineWidgets/qwebenginedownloaditem.sip"
#include <qwebenginedownloaditem.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineDownloadItem.cpp"


PyDoc_STRVAR(doc_QWebEngineDownloadItem_id, "id(self) -> int");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_id(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            quint32 sipRes;

            sipRes = sipCpp->id();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_id, doc_QWebEngineDownloadItem_id);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_state, "state(self) -> QWebEngineDownloadItem.DownloadState");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_state(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            QWebEngineDownloadItem::DownloadState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QWebEngineDownloadItem_DownloadState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_state, doc_QWebEngineDownloadItem_state);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_totalBytes, "totalBytes(self) -> int");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_totalBytes(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_totalBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->totalBytes();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_totalBytes, doc_QWebEngineDownloadItem_totalBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_receivedBytes, "receivedBytes(self) -> int");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_receivedBytes(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_receivedBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->receivedBytes();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_receivedBytes, doc_QWebEngineDownloadItem_receivedBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_url(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_url, doc_QWebEngineDownloadItem_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_path, "path(self) -> str");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_path(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_path, doc_QWebEngineDownloadItem_path);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_setPath, "setPath(self, str)");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_setPath(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString* a0;
        int a0State = 0;
        QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_setPath, doc_QWebEngineDownloadItem_setPath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_isFinished, doc_QWebEngineDownloadItem_isFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_accept, "accept(self)");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_accept(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            sipCpp->accept();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_accept, doc_QWebEngineDownloadItem_accept);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_cancel, "cancel(self)");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_cancel(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            sipCpp->cancel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_cancel, doc_QWebEngineDownloadItem_cancel);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineDownloadItem_mimeType, "mimeType(self) -> str");

extern "C" {static PyObject *meth_QWebEngineDownloadItem_mimeType(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineDownloadItem_mimeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineDownloadItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineDownloadItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->mimeType());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineDownloadItem, sipName_mimeType, doc_QWebEngineDownloadItem_mimeType);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineDownloadItem(void *, int);}
static void release_QWebEngineDownloadItem(void *sipCppV,int)
{
    QWebEngineDownloadItem *sipCpp = reinterpret_cast<QWebEngineDownloadItem *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEngineDownloadItem(sipSimpleWrapper *);}
static void dealloc_QWebEngineDownloadItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineDownloadItem(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEngineDownloadItem[] = {{164, 0, 1}};


static PyMethodDef methods_QWebEngineDownloadItem[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QWebEngineDownloadItem_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_accept)},
    {SIP_MLNAME_CAST(sipName_cancel), meth_QWebEngineDownloadItem_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_cancel)},
    {SIP_MLNAME_CAST(sipName_id), meth_QWebEngineDownloadItem_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_id)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QWebEngineDownloadItem_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_isFinished)},
    {SIP_MLNAME_CAST(sipName_mimeType), meth_QWebEngineDownloadItem_mimeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_mimeType)},
    {SIP_MLNAME_CAST(sipName_path), meth_QWebEngineDownloadItem_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_path)},
    {SIP_MLNAME_CAST(sipName_receivedBytes), meth_QWebEngineDownloadItem_receivedBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_receivedBytes)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QWebEngineDownloadItem_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_setPath)},
    {SIP_MLNAME_CAST(sipName_state), meth_QWebEngineDownloadItem_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_state)},
    {SIP_MLNAME_CAST(sipName_totalBytes), meth_QWebEngineDownloadItem_totalBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_totalBytes)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebEngineDownloadItem_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineDownloadItem_url)}
};

static sipEnumMemberDef enummembers_QWebEngineDownloadItem[] = {
    {sipName_DownloadCancelled, static_cast<int>(QWebEngineDownloadItem::DownloadCancelled), 5},
    {sipName_DownloadCompleted, static_cast<int>(QWebEngineDownloadItem::DownloadCompleted), 5},
    {sipName_DownloadInProgress, static_cast<int>(QWebEngineDownloadItem::DownloadInProgress), 5},
    {sipName_DownloadInterrupted, static_cast<int>(QWebEngineDownloadItem::DownloadInterrupted), 5},
    {sipName_DownloadRequested, static_cast<int>(QWebEngineDownloadItem::DownloadRequested), 5},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebEngineDownloadItem[] = {
    {"downloadProgress(qint64,qint64)", "\1downloadProgress(self, int, int)", 0, 0},
    {"stateChanged(QWebEngineDownloadItem::DownloadState)", "\1stateChanged(self, QWebEngineDownloadItem.DownloadState)", 0, 0},
    {"finished()", "\1finished(self)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEngineDownloadItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineDownloadItem,
        {0}
    },
    {
        sipNameNr_QWebEngineDownloadItem,
        {0, 0, 1},
        11, methods_QWebEngineDownloadItem,
        5, enummembers_QWebEngineDownloadItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWebEngineDownloadItem,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineDownloadItem,
    0,
    0,
    0,
    release_QWebEngineDownloadItem,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebEngineDownloadItem::staticMetaObject,
    0,
    signals_QWebEngineDownloadItem,
    0
};
