/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineWidgets/qwebenginehistory.sip"
#include <qwebenginehistory.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineHistoryItem.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineHistoryItem.cpp"
#line 295 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineHistoryItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineHistoryItem.cpp"


PyDoc_STRVAR(doc_QWebEngineHistoryItem_originalUrl, "originalUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineHistoryItem_originalUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHistoryItem_originalUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineHistoryItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHistoryItem, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->originalUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHistoryItem, sipName_originalUrl, doc_QWebEngineHistoryItem_originalUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHistoryItem_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineHistoryItem_url(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHistoryItem_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineHistoryItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHistoryItem, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHistoryItem, sipName_url, doc_QWebEngineHistoryItem_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHistoryItem_title, "title(self) -> str");

extern "C" {static PyObject *meth_QWebEngineHistoryItem_title(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHistoryItem_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineHistoryItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHistoryItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHistoryItem, sipName_title, doc_QWebEngineHistoryItem_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHistoryItem_lastVisited, "lastVisited(self) -> QDateTime");

extern "C" {static PyObject *meth_QWebEngineHistoryItem_lastVisited(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHistoryItem_lastVisited(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineHistoryItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHistoryItem, &sipCpp))
        {
            QDateTime*sipRes;

            sipRes = new QDateTime(sipCpp->lastVisited());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHistoryItem, sipName_lastVisited, doc_QWebEngineHistoryItem_lastVisited);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHistoryItem_iconUrl, "iconUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineHistoryItem_iconUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHistoryItem_iconUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineHistoryItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHistoryItem, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->iconUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHistoryItem, sipName_iconUrl, doc_QWebEngineHistoryItem_iconUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHistoryItem_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineHistoryItem_isValid(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHistoryItem_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineHistoryItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineHistoryItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHistoryItem, sipName_isValid, doc_QWebEngineHistoryItem_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineHistoryItem_swap, "swap(self, QWebEngineHistoryItem)");

extern "C" {static PyObject *meth_QWebEngineHistoryItem_swap(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineHistoryItem_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineHistoryItem* a0;
        QWebEngineHistoryItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineHistoryItem, &sipCpp, sipType_QWebEngineHistoryItem, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineHistoryItem, sipName_swap, doc_QWebEngineHistoryItem_swap);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineHistoryItem(void *, int);}
static void release_QWebEngineHistoryItem(void *sipCppV,int)
{
    delete reinterpret_cast<QWebEngineHistoryItem *>(sipCppV);
}


extern "C" {static void dealloc_QWebEngineHistoryItem(sipSimpleWrapper *);}
static void dealloc_QWebEngineHistoryItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineHistoryItem(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QWebEngineHistoryItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineHistoryItem(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWebEngineHistoryItem *sipCpp = 0;

    {
        const QWebEngineHistoryItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebEngineHistoryItem, &a0))
        {
            sipCpp = new QWebEngineHistoryItem(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QWebEngineHistoryItem[] = {
    {SIP_MLNAME_CAST(sipName_iconUrl), meth_QWebEngineHistoryItem_iconUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHistoryItem_iconUrl)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QWebEngineHistoryItem_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHistoryItem_isValid)},
    {SIP_MLNAME_CAST(sipName_lastVisited), meth_QWebEngineHistoryItem_lastVisited, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHistoryItem_lastVisited)},
    {SIP_MLNAME_CAST(sipName_originalUrl), meth_QWebEngineHistoryItem_originalUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHistoryItem_originalUrl)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QWebEngineHistoryItem_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHistoryItem_swap)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebEngineHistoryItem_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHistoryItem_title)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebEngineHistoryItem_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineHistoryItem_url)}
};

PyDoc_STRVAR(doc_QWebEngineHistoryItem, "\1QWebEngineHistoryItem(QWebEngineHistoryItem)");


pyqt5ClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEngineHistoryItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineHistoryItem,
        {0}
    },
    {
        sipNameNr_QWebEngineHistoryItem,
        {0, 0, 1},
        7, methods_QWebEngineHistoryItem,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineHistoryItem,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QWebEngineHistoryItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineHistoryItem,
    0,
    0,
    0,
    release_QWebEngineHistoryItem,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
