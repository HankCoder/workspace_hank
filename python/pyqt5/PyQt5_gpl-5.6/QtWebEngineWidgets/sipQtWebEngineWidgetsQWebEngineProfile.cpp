/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineWidgets/qwebengineprofile.sip"
#include <qwebengineprofile.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 28 "sip/QtWebEngineCore/qwebengineurlschemehandler.sip"
#include <qwebengineurlschemehandler.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 28 "sip/QtWebEngineCore/qwebengineurlrequestinterceptor.sip"
#include <qwebengineurlrequestinterceptor.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 28 "sip/QtWebEngineCore/qwebenginecookiestore.sip"
#include <qwebenginecookiestore.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineWidgets/qwebenginedownloaditem.sip"
#include <qwebenginedownloaditem.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineWidgets/qwebenginescriptcollection.sip"
#include <qwebenginescriptcollection.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWebEngineWidgets/qwebenginesettings.sip"
#include <qwebenginesettings.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineProfile.cpp"


class sipQWebEngineProfile : public QWebEngineProfile
{
public:
    sipQWebEngineProfile(QObject*);
    sipQWebEngineProfile(const QString&,QObject*);
    virtual ~sipQWebEngineProfile();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebEngineProfile(const sipQWebEngineProfile &);
    sipQWebEngineProfile &operator = (const sipQWebEngineProfile &);

    char sipPyMethods[7];
};

sipQWebEngineProfile::sipQWebEngineProfile(QObject*a0): QWebEngineProfile(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebEngineProfile::sipQWebEngineProfile(const QString& a0,QObject*a1): QWebEngineProfile(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebEngineProfile::~sipQWebEngineProfile()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebEngineProfile::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebEngineWidgets_qt_metaobject(sipPySelf,sipType_QWebEngineProfile);

    return QWebEngineProfile::metaObject();
}

int sipQWebEngineProfile::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebEngineProfile::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebEngineWidgets_qt_metacall(sipPySelf,sipType_QWebEngineProfile,_c,_id,_a);

    return _id;
}

void *sipQWebEngineProfile::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebEngineWidgets_qt_metacast(sipPySelf, sipType_QWebEngineProfile, _clname, &sipCpp) ? sipCpp : QWebEngineProfile::qt_metacast(_clname));
}

void sipQWebEngineProfile::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebEngineProfile::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineProfile::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebEngineProfile::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineProfile::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebEngineProfile::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineProfile::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebEngineProfile::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineProfile::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebEngineProfile::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebEngineProfile::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebEngineProfile::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebEngineProfile::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebEngineProfile::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWebEngineProfile_storageName, "storageName(self) -> str");

extern "C" {static PyObject *meth_QWebEngineProfile_storageName(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_storageName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->storageName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_storageName, doc_QWebEngineProfile_storageName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_isOffTheRecord, "isOffTheRecord(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineProfile_isOffTheRecord(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_isOffTheRecord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOffTheRecord();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_isOffTheRecord, doc_QWebEngineProfile_isOffTheRecord);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_persistentStoragePath, "persistentStoragePath(self) -> str");

extern "C" {static PyObject *meth_QWebEngineProfile_persistentStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_persistentStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->persistentStoragePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_persistentStoragePath, doc_QWebEngineProfile_persistentStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setPersistentStoragePath, "setPersistentStoragePath(self, str)");

extern "C" {static PyObject *meth_QWebEngineProfile_setPersistentStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setPersistentStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPersistentStoragePath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setPersistentStoragePath, doc_QWebEngineProfile_setPersistentStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_cachePath, "cachePath(self) -> str");

extern "C" {static PyObject *meth_QWebEngineProfile_cachePath(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_cachePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->cachePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_cachePath, doc_QWebEngineProfile_cachePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setCachePath, "setCachePath(self, str)");

extern "C" {static PyObject *meth_QWebEngineProfile_setCachePath(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setCachePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCachePath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setCachePath, doc_QWebEngineProfile_setCachePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_httpUserAgent, "httpUserAgent(self) -> str");

extern "C" {static PyObject *meth_QWebEngineProfile_httpUserAgent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_httpUserAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->httpUserAgent());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_httpUserAgent, doc_QWebEngineProfile_httpUserAgent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setHttpUserAgent, "setHttpUserAgent(self, str)");

extern "C" {static PyObject *meth_QWebEngineProfile_setHttpUserAgent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setHttpUserAgent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHttpUserAgent(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setHttpUserAgent, doc_QWebEngineProfile_setHttpUserAgent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_httpCacheType, "httpCacheType(self) -> QWebEngineProfile.HttpCacheType");

extern "C" {static PyObject *meth_QWebEngineProfile_httpCacheType(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_httpCacheType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QWebEngineProfile::HttpCacheType sipRes;

            sipRes = sipCpp->httpCacheType();

            return sipConvertFromEnum(sipRes,sipType_QWebEngineProfile_HttpCacheType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_httpCacheType, doc_QWebEngineProfile_httpCacheType);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setHttpCacheType, "setHttpCacheType(self, QWebEngineProfile.HttpCacheType)");

extern "C" {static PyObject *meth_QWebEngineProfile_setHttpCacheType(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setHttpCacheType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineProfile::HttpCacheType a0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QWebEngineProfile_HttpCacheType, &a0))
        {
            sipCpp->setHttpCacheType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setHttpCacheType, doc_QWebEngineProfile_setHttpCacheType);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_persistentCookiesPolicy, "persistentCookiesPolicy(self) -> QWebEngineProfile.PersistentCookiesPolicy");

extern "C" {static PyObject *meth_QWebEngineProfile_persistentCookiesPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_persistentCookiesPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QWebEngineProfile::PersistentCookiesPolicy sipRes;

            sipRes = sipCpp->persistentCookiesPolicy();

            return sipConvertFromEnum(sipRes,sipType_QWebEngineProfile_PersistentCookiesPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_persistentCookiesPolicy, doc_QWebEngineProfile_persistentCookiesPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setPersistentCookiesPolicy, "setPersistentCookiesPolicy(self, QWebEngineProfile.PersistentCookiesPolicy)");

extern "C" {static PyObject *meth_QWebEngineProfile_setPersistentCookiesPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setPersistentCookiesPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineProfile::PersistentCookiesPolicy a0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QWebEngineProfile_PersistentCookiesPolicy, &a0))
        {
            sipCpp->setPersistentCookiesPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setPersistentCookiesPolicy, doc_QWebEngineProfile_setPersistentCookiesPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_httpCacheMaximumSize, "httpCacheMaximumSize(self) -> int");

extern "C" {static PyObject *meth_QWebEngineProfile_httpCacheMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_httpCacheMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->httpCacheMaximumSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_httpCacheMaximumSize, doc_QWebEngineProfile_httpCacheMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setHttpCacheMaximumSize, "setHttpCacheMaximumSize(self, int)");

extern "C" {static PyObject *meth_QWebEngineProfile_setHttpCacheMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setHttpCacheMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebEngineProfile, &sipCpp, &a0))
        {
            sipCpp->setHttpCacheMaximumSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setHttpCacheMaximumSize, doc_QWebEngineProfile_setHttpCacheMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_clearAllVisitedLinks, "clearAllVisitedLinks(self)");

extern "C" {static PyObject *meth_QWebEngineProfile_clearAllVisitedLinks(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_clearAllVisitedLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            sipCpp->clearAllVisitedLinks();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_clearAllVisitedLinks, doc_QWebEngineProfile_clearAllVisitedLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_clearVisitedLinks, "clearVisitedLinks(self, Iterable[QUrl])");

extern "C" {static PyObject *meth_QWebEngineProfile_clearVisitedLinks(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_clearVisitedLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QUrl>* a0;
        int a0State = 0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            sipCpp->clearVisitedLinks(*a0);
            sipReleaseType(const_cast<QList<QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_clearVisitedLinks, doc_QWebEngineProfile_clearVisitedLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_visitedLinksContainsUrl, "visitedLinksContainsUrl(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QWebEngineProfile_visitedLinksContainsUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_visitedLinksContainsUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->visitedLinksContainsUrl(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_visitedLinksContainsUrl, doc_QWebEngineProfile_visitedLinksContainsUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_settings, "settings(self) -> QWebEngineSettings");

extern "C" {static PyObject *meth_QWebEngineProfile_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QWebEngineSettings*sipRes;

            sipRes = sipCpp->settings();

            return sipConvertFromType(sipRes,sipType_QWebEngineSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_settings, doc_QWebEngineProfile_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_scripts, "scripts(self) -> QWebEngineScriptCollection");

extern "C" {static PyObject *meth_QWebEngineProfile_scripts(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_scripts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QWebEngineScriptCollection*sipRes;

            sipRes = sipCpp->scripts();

            return sipConvertFromType(sipRes,sipType_QWebEngineScriptCollection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_scripts, doc_QWebEngineProfile_scripts);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_defaultProfile, "defaultProfile() -> QWebEngineProfile");

extern "C" {static PyObject *meth_QWebEngineProfile_defaultProfile(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_defaultProfile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWebEngineProfile*sipRes;

            sipRes = QWebEngineProfile::defaultProfile();

            return sipConvertFromType(sipRes,sipType_QWebEngineProfile,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_defaultProfile, doc_QWebEngineProfile_defaultProfile);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setHttpAcceptLanguage, "setHttpAcceptLanguage(self, str)");

extern "C" {static PyObject *meth_QWebEngineProfile_setHttpAcceptLanguage(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setHttpAcceptLanguage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHttpAcceptLanguage(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setHttpAcceptLanguage, doc_QWebEngineProfile_setHttpAcceptLanguage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_httpAcceptLanguage, "httpAcceptLanguage(self) -> str");

extern "C" {static PyObject *meth_QWebEngineProfile_httpAcceptLanguage(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_httpAcceptLanguage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->httpAcceptLanguage());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_httpAcceptLanguage, doc_QWebEngineProfile_httpAcceptLanguage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_cookieStore, "cookieStore(self) -> QWebEngineCookieStore");

extern "C" {static PyObject *meth_QWebEngineProfile_cookieStore(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_cookieStore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            QWebEngineCookieStore*sipRes;

            sipRes = sipCpp->cookieStore();

            return sipConvertFromType(sipRes,sipType_QWebEngineCookieStore,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_cookieStore, doc_QWebEngineProfile_cookieStore);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_setRequestInterceptor, "setRequestInterceptor(self, QWebEngineUrlRequestInterceptor)");

extern "C" {static PyObject *meth_QWebEngineProfile_setRequestInterceptor(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_setRequestInterceptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineUrlRequestInterceptor* a0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QWebEngineUrlRequestInterceptor, &a0))
        {
            sipCpp->setRequestInterceptor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_setRequestInterceptor, doc_QWebEngineProfile_setRequestInterceptor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_urlSchemeHandler, "urlSchemeHandler(self, Union[QByteArray, bytes, bytearray]) -> QWebEngineUrlSchemeHandler");

extern "C" {static PyObject *meth_QWebEngineProfile_urlSchemeHandler(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_urlSchemeHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            const QWebEngineUrlSchemeHandler*sipRes;

            sipRes = sipCpp->urlSchemeHandler(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(const_cast<QWebEngineUrlSchemeHandler *>(sipRes),sipType_QWebEngineUrlSchemeHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_urlSchemeHandler, doc_QWebEngineProfile_urlSchemeHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_installUrlSchemeHandler, "installUrlSchemeHandler(self, Union[QByteArray, bytes, bytearray], QWebEngineUrlSchemeHandler)");

extern "C" {static PyObject *meth_QWebEngineProfile_installUrlSchemeHandler(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_installUrlSchemeHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QWebEngineUrlSchemeHandler* a1;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QWebEngineUrlSchemeHandler, &a1))
        {
            sipCpp->installUrlSchemeHandler(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_installUrlSchemeHandler, doc_QWebEngineProfile_installUrlSchemeHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_removeUrlScheme, "removeUrlScheme(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QWebEngineProfile_removeUrlScheme(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_removeUrlScheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->removeUrlScheme(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_removeUrlScheme, doc_QWebEngineProfile_removeUrlScheme);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_removeUrlSchemeHandler, "removeUrlSchemeHandler(self, QWebEngineUrlSchemeHandler)");

extern "C" {static PyObject *meth_QWebEngineProfile_removeUrlSchemeHandler(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_removeUrlSchemeHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineUrlSchemeHandler* a0;
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEngineProfile, &sipCpp, sipType_QWebEngineUrlSchemeHandler, &a0))
        {
            sipCpp->removeUrlSchemeHandler(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_removeUrlSchemeHandler, doc_QWebEngineProfile_removeUrlSchemeHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineProfile_removeAllUrlSchemeHandlers, "removeAllUrlSchemeHandlers(self)");

extern "C" {static PyObject *meth_QWebEngineProfile_removeAllUrlSchemeHandlers(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineProfile_removeAllUrlSchemeHandlers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineProfile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineProfile, &sipCpp))
        {
            sipCpp->removeAllUrlSchemeHandlers();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineProfile, sipName_removeAllUrlSchemeHandlers, doc_QWebEngineProfile_removeAllUrlSchemeHandlers);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineProfile(void *, int);}
static void release_QWebEngineProfile(void *sipCppV,int)
{
    QWebEngineProfile *sipCpp = reinterpret_cast<QWebEngineProfile *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEngineProfile(sipSimpleWrapper *);}
static void dealloc_QWebEngineProfile(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebEngineProfile *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineProfile(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebEngineProfile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineProfile(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebEngineProfile *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQWebEngineProfile(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQWebEngineProfile(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEngineProfile[] = {{164, 0, 1}};


static PyMethodDef methods_QWebEngineProfile[] = {
    {SIP_MLNAME_CAST(sipName_cachePath), meth_QWebEngineProfile_cachePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_cachePath)},
    {SIP_MLNAME_CAST(sipName_clearAllVisitedLinks), meth_QWebEngineProfile_clearAllVisitedLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_clearAllVisitedLinks)},
    {SIP_MLNAME_CAST(sipName_clearVisitedLinks), meth_QWebEngineProfile_clearVisitedLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_clearVisitedLinks)},
    {SIP_MLNAME_CAST(sipName_cookieStore), meth_QWebEngineProfile_cookieStore, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_cookieStore)},
    {SIP_MLNAME_CAST(sipName_defaultProfile), meth_QWebEngineProfile_defaultProfile, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_defaultProfile)},
    {SIP_MLNAME_CAST(sipName_httpAcceptLanguage), meth_QWebEngineProfile_httpAcceptLanguage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_httpAcceptLanguage)},
    {SIP_MLNAME_CAST(sipName_httpCacheMaximumSize), meth_QWebEngineProfile_httpCacheMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_httpCacheMaximumSize)},
    {SIP_MLNAME_CAST(sipName_httpCacheType), meth_QWebEngineProfile_httpCacheType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_httpCacheType)},
    {SIP_MLNAME_CAST(sipName_httpUserAgent), meth_QWebEngineProfile_httpUserAgent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_httpUserAgent)},
    {SIP_MLNAME_CAST(sipName_installUrlSchemeHandler), meth_QWebEngineProfile_installUrlSchemeHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_installUrlSchemeHandler)},
    {SIP_MLNAME_CAST(sipName_isOffTheRecord), meth_QWebEngineProfile_isOffTheRecord, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_isOffTheRecord)},
    {SIP_MLNAME_CAST(sipName_persistentCookiesPolicy), meth_QWebEngineProfile_persistentCookiesPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_persistentCookiesPolicy)},
    {SIP_MLNAME_CAST(sipName_persistentStoragePath), meth_QWebEngineProfile_persistentStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_persistentStoragePath)},
    {SIP_MLNAME_CAST(sipName_removeAllUrlSchemeHandlers), meth_QWebEngineProfile_removeAllUrlSchemeHandlers, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_removeAllUrlSchemeHandlers)},
    {SIP_MLNAME_CAST(sipName_removeUrlScheme), meth_QWebEngineProfile_removeUrlScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_removeUrlScheme)},
    {SIP_MLNAME_CAST(sipName_removeUrlSchemeHandler), meth_QWebEngineProfile_removeUrlSchemeHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_removeUrlSchemeHandler)},
    {SIP_MLNAME_CAST(sipName_scripts), meth_QWebEngineProfile_scripts, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_scripts)},
    {SIP_MLNAME_CAST(sipName_setCachePath), meth_QWebEngineProfile_setCachePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setCachePath)},
    {SIP_MLNAME_CAST(sipName_setHttpAcceptLanguage), meth_QWebEngineProfile_setHttpAcceptLanguage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setHttpAcceptLanguage)},
    {SIP_MLNAME_CAST(sipName_setHttpCacheMaximumSize), meth_QWebEngineProfile_setHttpCacheMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setHttpCacheMaximumSize)},
    {SIP_MLNAME_CAST(sipName_setHttpCacheType), meth_QWebEngineProfile_setHttpCacheType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setHttpCacheType)},
    {SIP_MLNAME_CAST(sipName_setHttpUserAgent), meth_QWebEngineProfile_setHttpUserAgent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setHttpUserAgent)},
    {SIP_MLNAME_CAST(sipName_setPersistentCookiesPolicy), meth_QWebEngineProfile_setPersistentCookiesPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setPersistentCookiesPolicy)},
    {SIP_MLNAME_CAST(sipName_setPersistentStoragePath), meth_QWebEngineProfile_setPersistentStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setPersistentStoragePath)},
    {SIP_MLNAME_CAST(sipName_setRequestInterceptor), meth_QWebEngineProfile_setRequestInterceptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_setRequestInterceptor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebEngineProfile_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_settings)},
    {SIP_MLNAME_CAST(sipName_storageName), meth_QWebEngineProfile_storageName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_storageName)},
    {SIP_MLNAME_CAST(sipName_urlSchemeHandler), meth_QWebEngineProfile_urlSchemeHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_urlSchemeHandler)},
    {SIP_MLNAME_CAST(sipName_visitedLinksContainsUrl), meth_QWebEngineProfile_visitedLinksContainsUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineProfile_visitedLinksContainsUrl)}
};

static sipEnumMemberDef enummembers_QWebEngineProfile[] = {
    {sipName_AllowPersistentCookies, static_cast<int>(QWebEngineProfile::AllowPersistentCookies), 22},
    {sipName_DiskHttpCache, static_cast<int>(QWebEngineProfile::DiskHttpCache), 21},
    {sipName_ForcePersistentCookies, static_cast<int>(QWebEngineProfile::ForcePersistentCookies), 22},
    {sipName_MemoryHttpCache, static_cast<int>(QWebEngineProfile::MemoryHttpCache), 21},
    {sipName_NoPersistentCookies, static_cast<int>(QWebEngineProfile::NoPersistentCookies), 22},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebEngineProfile[] = {
    {"downloadRequested(QWebEngineDownloadItem*)", "\1downloadRequested(self, QWebEngineDownloadItem)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebEngineProfile, "\1QWebEngineProfile(parent: QObject = None)\n"
    "QWebEngineProfile(str, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEngineProfile = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineProfile,
        {0}
    },
    {
        sipNameNr_QWebEngineProfile,
        {0, 0, 1},
        29, methods_QWebEngineProfile,
        5, enummembers_QWebEngineProfile,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineProfile,
    -1,
    -1,
    supers_QWebEngineProfile,
    0,
    init_type_QWebEngineProfile,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineProfile,
    0,
    0,
    0,
    release_QWebEngineProfile,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebEngineProfile::staticMetaObject,
    0,
    signals_QWebEngineProfile,
    0
};
