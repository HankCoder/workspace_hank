/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothserver.sip"
#include <qbluetoothserver.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothsocket.sip"
#include <qbluetoothsocket.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothServer.cpp"


class sipQBluetoothServer : public QBluetoothServer
{
public:
    sipQBluetoothServer(QBluetoothServiceInfo::Protocol,QObject*);
    virtual ~sipQBluetoothServer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothServer(const sipQBluetoothServer &);
    sipQBluetoothServer &operator = (const sipQBluetoothServer &);

    char sipPyMethods[7];
};

sipQBluetoothServer::sipQBluetoothServer(QBluetoothServiceInfo::Protocol a0,QObject*a1): QBluetoothServer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothServer::~sipQBluetoothServer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQBluetoothServer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothServer);

    return QBluetoothServer::metaObject();
}

int sipQBluetoothServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QBluetoothServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothServer,_c,_id,_a);

    return _id;
}

void *sipQBluetoothServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothServer, _clname, &sipCpp) ? sipCpp : QBluetoothServer::qt_metacast(_clname));
}

void sipQBluetoothServer::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QBluetoothServer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QBluetoothServer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QBluetoothServer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QBluetoothServer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QBluetoothServer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBluetoothServer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QBluetoothServer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQBluetoothServer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QBluetoothServer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothServer_close, "close(self)");

extern "C" {static PyObject *meth_QBluetoothServer_close(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_close, doc_QBluetoothServer_close);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_listen, "listen(self, address: QBluetoothAddress = QBluetoothAddress(), port: int = 0) -> bool\n"
    "listen(self, QBluetoothUuid, serviceName: str = '') -> QBluetoothServiceInfo");

extern "C" {static PyObject *meth_QBluetoothServer_listen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_listen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothAddress& a0def = QBluetoothAddress();
        const QBluetoothAddress* a0 = &a0def;
        quint16 a1 = 0;
        QBluetoothServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_address,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9t", &sipSelf, sipType_QBluetoothServer, &sipCpp, sipType_QBluetoothAddress, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->listen(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QBluetoothUuid* a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QBluetoothServer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_serviceName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QBluetoothServer, &sipCpp, sipType_QBluetoothUuid, &a0, sipType_QString,&a1, &a1State))
        {
            QBluetoothServiceInfo*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBluetoothServiceInfo(sipCpp->listen(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothServiceInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_listen, doc_QBluetoothServer_listen);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_isListening, "isListening(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_isListening, doc_QBluetoothServer_isListening);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_setMaxPendingConnections, "setMaxPendingConnections(self, int)");

extern "C" {static PyObject *meth_QBluetoothServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBluetoothServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_setMaxPendingConnections, doc_QBluetoothServer_setMaxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_maxPendingConnections, "maxPendingConnections(self) -> int");

extern "C" {static PyObject *meth_QBluetoothServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_maxPendingConnections, doc_QBluetoothServer_maxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_hasPendingConnections, "hasPendingConnections(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasPendingConnections();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_hasPendingConnections, doc_QBluetoothServer_hasPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_nextPendingConnection, "nextPendingConnection(self) -> QBluetoothSocket");

extern "C" {static PyObject *meth_QBluetoothServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            QBluetoothSocket*sipRes;

            sipRes = sipCpp->nextPendingConnection();

            return sipConvertFromNewType(sipRes,sipType_QBluetoothSocket,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_nextPendingConnection, doc_QBluetoothServer_nextPendingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_serverAddress, "serverAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            QBluetoothAddress*sipRes;

            sipRes = new QBluetoothAddress(sipCpp->serverAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_serverAddress, doc_QBluetoothServer_serverAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_serverPort, "serverPort(self) -> int");

extern "C" {static PyObject *meth_QBluetoothServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->serverPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_serverPort, doc_QBluetoothServer_serverPort);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_setSecurityFlags, "setSecurityFlags(self, Union[QBluetooth.SecurityFlags, QBluetooth.Security])");

extern "C" {static PyObject *meth_QBluetoothServer_setSecurityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_setSecurityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetooth::SecurityFlags* a0;
        int a0State = 0;
        QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServer, &sipCpp, sipType_QBluetooth_SecurityFlags, &a0, &a0State))
        {
            sipCpp->setSecurityFlags(*a0);
            sipReleaseType(a0,sipType_QBluetooth_SecurityFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_setSecurityFlags, doc_QBluetoothServer_setSecurityFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_securityFlags, "securityFlags(self) -> QBluetooth.SecurityFlags");

extern "C" {static PyObject *meth_QBluetoothServer_securityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_securityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            QBluetooth::SecurityFlags*sipRes;

            sipRes = new QBluetooth::SecurityFlags(sipCpp->securityFlags());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_securityFlags, doc_QBluetoothServer_securityFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_serverType, "serverType(self) -> QBluetoothServiceInfo.Protocol");

extern "C" {static PyObject *meth_QBluetoothServer_serverType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_serverType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            QBluetoothServiceInfo::Protocol sipRes;

            sipRes = sipCpp->serverType();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothServiceInfo_Protocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_serverType, doc_QBluetoothServer_serverType);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServer_error, "error(self) -> QBluetoothServer.Error");

extern "C" {static PyObject *meth_QBluetoothServer_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            QBluetoothServer::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothServer_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_error, doc_QBluetoothServer_error);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothServer(void *, int);}
static void release_QBluetoothServer(void *sipCppV,int)
{
    QBluetoothServer *sipCpp = reinterpret_cast<QBluetoothServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothServer(sipSimpleWrapper *);}
static void dealloc_QBluetoothServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQBluetoothServer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QBluetoothServer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QBluetoothServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothServer *sipCpp = 0;

    {
        QBluetoothServiceInfo::Protocol a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QBluetoothServiceInfo_Protocol, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothServer(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothServer[] = {{164, 0, 1}};


static PyMethodDef methods_QBluetoothServer[] = {
    {SIP_MLNAME_CAST(sipName_close), meth_QBluetoothServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_close)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothServer_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_error)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QBluetoothServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QBluetoothServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_isListening)},
    {SIP_MLNAME_CAST(sipName_listen), (PyCFunction)meth_QBluetoothServer_listen, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QBluetoothServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QBluetoothServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_securityFlags), meth_QBluetoothServer_securityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_securityFlags)},
    {SIP_MLNAME_CAST(sipName_serverAddress), meth_QBluetoothServer_serverAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_serverAddress)},
    {SIP_MLNAME_CAST(sipName_serverPort), meth_QBluetoothServer_serverPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_serverPort)},
    {SIP_MLNAME_CAST(sipName_serverType), meth_QBluetoothServer_serverType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_serverType)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QBluetoothServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setSecurityFlags), meth_QBluetoothServer_setSecurityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_setSecurityFlags)}
};

static sipEnumMemberDef enummembers_QBluetoothServer[] = {
    {sipName_InputOutputError, static_cast<int>(QBluetoothServer::InputOutputError), 30},
    {sipName_NoError, static_cast<int>(QBluetoothServer::NoError), 30},
    {sipName_PoweredOffError, static_cast<int>(QBluetoothServer::PoweredOffError), 30},
    {sipName_ServiceAlreadyRegisteredError, static_cast<int>(QBluetoothServer::ServiceAlreadyRegisteredError), 30},
    {sipName_UnknownError, static_cast<int>(QBluetoothServer::UnknownError), 30},
    {sipName_UnsupportedProtocolError, static_cast<int>(QBluetoothServer::UnsupportedProtocolError), 30},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothServer[] = {
    {"newConnection()", "\1newConnection(self)", 0, 0},
    {"error(QBluetoothServer::Error)", "\1error(self, QBluetoothServer.Error)", &methods_QBluetoothServer[1], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QBluetoothServer, "\1QBluetoothServer(QBluetoothServiceInfo.Protocol, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QBluetoothServer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothServer,
        {0}
    },
    {
        sipNameNr_QBluetoothServer,
        {0, 0, 1},
        13, methods_QBluetoothServer,
        6, enummembers_QBluetoothServer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBluetoothServer,
    -1,
    -1,
    supers_QBluetoothServer,
    0,
    init_type_QBluetoothServer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBluetoothServer,
    0,
    0,
    0,
    release_QBluetoothServer,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QBluetoothServer::staticMetaObject,
    0,
    signals_QBluetoothServer,
    0
};
