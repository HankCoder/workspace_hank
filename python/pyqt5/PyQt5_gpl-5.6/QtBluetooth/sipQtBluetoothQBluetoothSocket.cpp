/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothsocket.sip"
#include <qbluetoothsocket.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"


class sipQBluetoothSocket : public QBluetoothSocket
{
public:
    sipQBluetoothSocket(QBluetoothServiceInfo::Protocol,QObject*);
    sipQBluetoothSocket(QObject*);
    virtual ~sipQBluetoothSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    qint64 readLineData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool reset();
    bool atEnd() const;
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readData(char*,qint64);
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool isSequential() const;
    void close();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothSocket(const sipQBluetoothSocket &);
    sipQBluetoothSocket &operator = (const sipQBluetoothSocket &);

    char sipPyMethods[23];
};

sipQBluetoothSocket::sipQBluetoothSocket(QBluetoothServiceInfo::Protocol a0,QObject*a1): QBluetoothSocket(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothSocket::sipQBluetoothSocket(QObject*a0): QBluetoothSocket(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothSocket::~sipQBluetoothSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQBluetoothSocket::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothSocket);

    return QBluetoothSocket::metaObject();
}

int sipQBluetoothSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QBluetoothSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothSocket,_c,_id,_a);

    return _id;
}

void *sipQBluetoothSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothSocket, _clname, &sipCpp) ? sipCpp : QBluetoothSocket::qt_metacast(_clname));
}

void sipQBluetoothSocket::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QBluetoothSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QBluetoothSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QBluetoothSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QBluetoothSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QBluetoothSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBluetoothSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QBluetoothSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQBluetoothSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QBluetoothSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQBluetoothSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QBluetoothSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQBluetoothSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QBluetoothSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBluetoothSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QBluetoothSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBluetoothSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QBluetoothSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QBluetoothSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QBluetoothSocket::seek(a0);

    typedef bool (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQBluetoothSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QBluetoothSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQBluetoothSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QBluetoothSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QBluetoothSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[15]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQBluetoothSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QBluetoothSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[42]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQBluetoothSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QBluetoothSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQBluetoothSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QBluetoothSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQBluetoothSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QBluetoothSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQBluetoothSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QBluetoothSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QBluetoothSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQBluetoothSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QBluetoothSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QBluetoothSocket_abort, "abort(self)");

extern "C" {static PyObject *meth_QBluetoothSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_abort, doc_QBluetoothSocket_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_close, "close(self)");

extern "C" {static PyObject *meth_QBluetoothSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QBluetoothSocket::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_close, doc_QBluetoothSocket_close);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothSocket_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBluetoothSocket::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_isSequential, doc_QBluetoothSocket_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBluetoothSocket::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_bytesAvailable, doc_QBluetoothSocket_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBluetoothSocket::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_bytesToWrite, doc_QBluetoothSocket_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBluetoothSocket::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_canReadLine, doc_QBluetoothSocket_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_connectToService, "connectToService(self, QBluetoothServiceInfo, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
    "connectToService(self, QBluetoothAddress, QBluetoothUuid, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
    "connectToService(self, QBluetoothAddress, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QBluetoothSocket_connectToService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_connectToService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo* a0;
        QIODevice::OpenMode a1def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
        QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothServiceInfo, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToService(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QBluetoothAddress* a0;
        const QBluetoothUuid* a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothAddress, &a0, sipType_QBluetoothUuid, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToService(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QBluetoothAddress* a0;
        quint16 a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9t|J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothAddress, &a0, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToService(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_connectToService, doc_QBluetoothSocket_connectToService);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_disconnectFromService, "disconnectFromService(self)");

extern "C" {static PyObject *meth_QBluetoothSocket_disconnectFromService(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_disconnectFromService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromService();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_disconnectFromService, doc_QBluetoothSocket_disconnectFromService);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_localName, "localName(self) -> str");

extern "C" {static PyObject *meth_QBluetoothSocket_localName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_localName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->localName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_localName, doc_QBluetoothSocket_localName);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_localAddress, "localAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothSocket_localAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_localAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QBluetoothAddress*sipRes;

            sipRes = new QBluetoothAddress(sipCpp->localAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_localAddress, doc_QBluetoothSocket_localAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_localPort, "localPort(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_localPort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_localPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->localPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_localPort, doc_QBluetoothSocket_localPort);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_peerName, "peerName(self) -> str");

extern "C" {static PyObject *meth_QBluetoothSocket_peerName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_peerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->peerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_peerName, doc_QBluetoothSocket_peerName);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_peerAddress, "peerAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothSocket_peerAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_peerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QBluetoothAddress*sipRes;

            sipRes = new QBluetoothAddress(sipCpp->peerAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_peerAddress, doc_QBluetoothSocket_peerAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_peerPort, "peerPort(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_peerPort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_peerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->peerPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_peerPort, doc_QBluetoothSocket_peerPort);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setSocketDescriptor, "setSocketDescriptor(self, int, QBluetoothServiceInfo.Protocol, state: QBluetoothSocket.SocketState = QBluetoothSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QBluetoothSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QBluetoothServiceInfo::Protocol a1;
        QBluetoothSocket::SocketState a2 = QBluetoothSocket::ConnectedState;
        QIODevice::OpenMode a3def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a3 = &a3def;
        int a3State = 0;
        QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|EJ1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, &a0, sipType_QBluetoothServiceInfo_Protocol, &a1, sipType_QBluetoothSocket_SocketState, &a2, sipType_QIODevice_OpenMode, &a3, &a3State))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_QIODevice_OpenMode,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setSocketDescriptor, doc_QBluetoothSocket_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_socketDescriptor, "socketDescriptor(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->socketDescriptor();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_socketDescriptor, doc_QBluetoothSocket_socketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_socketType, "socketType(self) -> QBluetoothServiceInfo.Protocol");

extern "C" {static PyObject *meth_QBluetoothSocket_socketType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_socketType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QBluetoothServiceInfo::Protocol sipRes;

            sipRes = sipCpp->socketType();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothServiceInfo_Protocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_socketType, doc_QBluetoothSocket_socketType);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_state, "state(self) -> QBluetoothSocket.SocketState");

extern "C" {static PyObject *meth_QBluetoothSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QBluetoothSocket::SocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothSocket_SocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_state, doc_QBluetoothSocket_state);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_error, "error(self) -> QBluetoothSocket.SocketError");

extern "C" {static PyObject *meth_QBluetoothSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QBluetoothSocket::SocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_error, doc_QBluetoothSocket_error);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothSocket_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_errorString, doc_QBluetoothSocket_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QBluetoothSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QBluetoothSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 91 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtBluetooth/qbluetoothsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QBluetoothSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1258 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtBluetooth/sipQtBluetoothQBluetoothSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_readData, doc_QBluetoothSocket_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QBluetoothSocket, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBluetoothSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_writeData, doc_QBluetoothSocket_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setSocketState, "setSocketState(self, QBluetoothSocket.SocketState)");

extern "C" {static PyObject *meth_QBluetoothSocket_setSocketState(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setSocketState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothSocket::SocketState a0;
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothSocket_SocketState, &a0))
        {
            sipCpp->setSocketState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setSocketState, doc_QBluetoothSocket_setSocketState);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setSocketError, "setSocketError(self, QBluetoothSocket.SocketError)");

extern "C" {static PyObject *meth_QBluetoothSocket_setSocketError(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setSocketError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothSocket::SocketError a0;
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothSocket_SocketError, &a0))
        {
            sipCpp->setSocketError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setSocketError, doc_QBluetoothSocket_setSocketError);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_doDeviceDiscovery, "doDeviceDiscovery(self, QBluetoothServiceInfo, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])");

extern "C" {static PyObject *meth_QBluetoothSocket_doDeviceDiscovery(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_doDeviceDiscovery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo* a0;
        QIODevice::OpenMode* a1;
        int a1State = 0;
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothServiceInfo, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->doDeviceDiscovery(*a0,*a1);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_doDeviceDiscovery, doc_QBluetoothSocket_doDeviceDiscovery);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setPreferredSecurityFlags, "setPreferredSecurityFlags(self, Union[QBluetooth.SecurityFlags, QBluetooth.Security])");

extern "C" {static PyObject *meth_QBluetoothSocket_setPreferredSecurityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setPreferredSecurityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetooth::SecurityFlags* a0;
        int a0State = 0;
        QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetooth_SecurityFlags, &a0, &a0State))
        {
            sipCpp->setPreferredSecurityFlags(*a0);
            sipReleaseType(a0,sipType_QBluetooth_SecurityFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setPreferredSecurityFlags, doc_QBluetoothSocket_setPreferredSecurityFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothSocket_preferredSecurityFlags, "preferredSecurityFlags(self) -> QBluetooth.SecurityFlags");

extern "C" {static PyObject *meth_QBluetoothSocket_preferredSecurityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_preferredSecurityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            QBluetooth::SecurityFlags*sipRes;

            sipRes = new QBluetooth::SecurityFlags(sipCpp->preferredSecurityFlags());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_preferredSecurityFlags, doc_QBluetoothSocket_preferredSecurityFlags);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothSocket(void *, int);}
static void release_QBluetoothSocket(void *sipCppV,int)
{
    QBluetoothSocket *sipCpp = reinterpret_cast<QBluetoothSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothSocket(sipSimpleWrapper *);}
static void dealloc_QBluetoothSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQBluetoothSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QBluetoothSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QBluetoothSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothSocket *sipCpp = 0;

    {
        QBluetoothServiceInfo::Protocol a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QBluetoothServiceInfo_Protocol, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothSocket(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothSocket(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothSocket[] = {{80, 0, 1}};


static PyMethodDef methods_QBluetoothSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QBluetoothSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_abort)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QBluetoothSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QBluetoothSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QBluetoothSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QBluetoothSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectToService), (PyCFunction)meth_QBluetoothSocket_connectToService, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothSocket_connectToService)},
    {SIP_MLNAME_CAST(sipName_disconnectFromService), meth_QBluetoothSocket_disconnectFromService, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_disconnectFromService)},
    {SIP_MLNAME_CAST(sipName_doDeviceDiscovery), meth_QBluetoothSocket_doDeviceDiscovery, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_doDeviceDiscovery)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothSocket_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_errorString)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QBluetoothSocket_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_isSequential)},
    {SIP_MLNAME_CAST(sipName_localAddress), meth_QBluetoothSocket_localAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_localAddress)},
    {SIP_MLNAME_CAST(sipName_localName), meth_QBluetoothSocket_localName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_localName)},
    {SIP_MLNAME_CAST(sipName_localPort), meth_QBluetoothSocket_localPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_localPort)},
    {SIP_MLNAME_CAST(sipName_peerAddress), meth_QBluetoothSocket_peerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_peerAddress)},
    {SIP_MLNAME_CAST(sipName_peerName), meth_QBluetoothSocket_peerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_peerName)},
    {SIP_MLNAME_CAST(sipName_peerPort), meth_QBluetoothSocket_peerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_peerPort)},
    {SIP_MLNAME_CAST(sipName_preferredSecurityFlags), meth_QBluetoothSocket_preferredSecurityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_preferredSecurityFlags)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QBluetoothSocket_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_readData)},
    {SIP_MLNAME_CAST(sipName_setPreferredSecurityFlags), meth_QBluetoothSocket_setPreferredSecurityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setPreferredSecurityFlags)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), (PyCFunction)meth_QBluetoothSocket_setSocketDescriptor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSocketError), meth_QBluetoothSocket_setSocketError, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setSocketError)},
    {SIP_MLNAME_CAST(sipName_setSocketState), meth_QBluetoothSocket_setSocketState, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setSocketState)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QBluetoothSocket_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketType), meth_QBluetoothSocket_socketType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_socketType)},
    {SIP_MLNAME_CAST(sipName_state), meth_QBluetoothSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_state)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QBluetoothSocket_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_writeData)}
};

static sipEnumMemberDef enummembers_QBluetoothSocket[] = {
    {sipName_BoundState, static_cast<int>(QBluetoothSocket::BoundState), 40},
    {sipName_ClosingState, static_cast<int>(QBluetoothSocket::ClosingState), 40},
    {sipName_ConnectedState, static_cast<int>(QBluetoothSocket::ConnectedState), 40},
    {sipName_ConnectingState, static_cast<int>(QBluetoothSocket::ConnectingState), 40},
    {sipName_HostNotFoundError, static_cast<int>(QBluetoothSocket::HostNotFoundError), 39},
    {sipName_ListeningState, static_cast<int>(QBluetoothSocket::ListeningState), 40},
    {sipName_NetworkError, static_cast<int>(QBluetoothSocket::NetworkError), 39},
    {sipName_NoSocketError, static_cast<int>(QBluetoothSocket::NoSocketError), 39},
    {sipName_OperationError, static_cast<int>(QBluetoothSocket::OperationError), 39},
    {sipName_ServiceLookupState, static_cast<int>(QBluetoothSocket::ServiceLookupState), 40},
    {sipName_ServiceNotFoundError, static_cast<int>(QBluetoothSocket::ServiceNotFoundError), 39},
    {sipName_UnconnectedState, static_cast<int>(QBluetoothSocket::UnconnectedState), 40},
    {sipName_UnknownSocketError, static_cast<int>(QBluetoothSocket::UnknownSocketError), 39},
    {sipName_UnsupportedProtocolError, static_cast<int>(QBluetoothSocket::UnsupportedProtocolError), 39},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothSocket[] = {
    {"stateChanged(QBluetoothSocket::SocketState)", "\1stateChanged(self, QBluetoothSocket.SocketState)", 0, 0},
    {"disconnected()", "\1disconnected(self)", 0, 0},
    {"connected()", "\1connected(self)", 0, 0},
    {"error(QBluetoothSocket::SocketError)", "\1error(self, QBluetoothSocket.SocketError)", &methods_QBluetoothSocket[8], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QBluetoothSocket, "\1QBluetoothSocket(QBluetoothServiceInfo.Protocol, parent: QObject = None)\n"
    "QBluetoothSocket(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QBluetoothSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothSocket,
        {0}
    },
    {
        sipNameNr_QBluetoothSocket,
        {0, 0, 1},
        27, methods_QBluetoothSocket,
        14, enummembers_QBluetoothSocket,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBluetoothSocket,
    -1,
    -1,
    supers_QBluetoothSocket,
    0,
    init_type_QBluetoothSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBluetoothSocket,
    0,
    0,
    0,
    release_QBluetoothSocket,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QBluetoothSocket::staticMetaObject,
    0,
    signals_QBluetoothSocket,
    0
};
