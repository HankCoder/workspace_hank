/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNetwork/sipQtNetworkQSslError.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNetwork/sipQtNetworkQSslError.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNetwork/sipQtNetworkQSslError.cpp"


PyDoc_STRVAR(doc_QSslError_error, "error(self) -> QSslError.SslError");

extern "C" {static PyObject *meth_QSslError_error(PyObject *, PyObject *);}
static PyObject *meth_QSslError_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslError, &sipCpp))
        {
            QSslError::SslError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QSslError_SslError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslError, sipName_error, doc_QSslError_error);

    return NULL;
}


PyDoc_STRVAR(doc_QSslError_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QSslError_errorString(PyObject *, PyObject *);}
static PyObject *meth_QSslError_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslError, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslError, sipName_errorString, doc_QSslError_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QSslError_certificate, "certificate(self) -> QSslCertificate");

extern "C" {static PyObject *meth_QSslError_certificate(PyObject *, PyObject *);}
static PyObject *meth_QSslError_certificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslError, &sipCpp))
        {
            QSslCertificate*sipRes;

            sipRes = new QSslCertificate(sipCpp->certificate());

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslError, sipName_certificate, doc_QSslError_certificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslError_swap, "swap(self, QSslError)");

extern "C" {static PyObject *meth_QSslError_swap(PyObject *, PyObject *);}
static PyObject *meth_QSslError_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslError* a0;
        QSslError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslError, &sipCpp, sipType_QSslError, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslError, sipName_swap, doc_QSslError_swap);

    return NULL;
}


extern "C" {static long slot_QSslError___hash__(PyObject *);}
static long slot_QSslError___hash__(PyObject *sipSelf)
{
    QSslError *sipCpp = reinterpret_cast<QSslError *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslError));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 76 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNetwork/qsslerror.sip"
        sipRes = qHash(*sipCpp);
#line 166 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNetwork/sipQtNetworkQSslError.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSslError___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSslError___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslError *sipCpp = reinterpret_cast<QSslError *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslError));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslError* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslError, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QSslError::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,ne_slot,sipType_QSslError,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QSslError___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSslError___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslError *sipCpp = reinterpret_cast<QSslError *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslError));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslError* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslError, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QSslError::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,eq_slot,sipType_QSslError,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslError(void *, int);}
static void release_QSslError(void *sipCppV,int)
{
    delete reinterpret_cast<QSslError *>(sipCppV);
}


extern "C" {static void assign_QSslError(void *, SIP_SSIZE_T, const void *);}
static void assign_QSslError(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSslError *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSslError *>(sipSrc);
}


extern "C" {static void *array_QSslError(SIP_SSIZE_T);}
static void *array_QSslError(SIP_SSIZE_T sipNrElem)
{
    return new QSslError[sipNrElem];
}


extern "C" {static void *copy_QSslError(const void *, SIP_SSIZE_T);}
static void *copy_QSslError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSslError(reinterpret_cast<const QSslError *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslError(sipSimpleWrapper *);}
static void dealloc_QSslError(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSslError(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSslError(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslError(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSslError *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QSslError();

            return sipCpp;
        }
    }

    {
        QSslError::SslError a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "E", sipType_QSslError_SslError, &a0))
        {
            sipCpp = new QSslError(a0);

            return sipCpp;
        }
    }

    {
        QSslError::SslError a0;
        const QSslCertificate* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "EJ9", sipType_QSslError_SslError, &a0, sipType_QSslCertificate, &a1))
        {
            sipCpp = new QSslError(a0,*a1);

            return sipCpp;
        }
    }

    {
        const QSslError* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSslError, &a0))
        {
            sipCpp = new QSslError(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSslError[] = {
    {(void *)slot_QSslError___hash__, hash_slot},
    {(void *)slot_QSslError___ne__, ne_slot},
    {(void *)slot_QSslError___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSslError[] = {
    {SIP_MLNAME_CAST(sipName_certificate), meth_QSslError_certificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslError_certificate)},
    {SIP_MLNAME_CAST(sipName_error), meth_QSslError_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslError_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QSslError_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslError_errorString)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QSslError_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslError_swap)}
};

static sipEnumMemberDef enummembers_QSslError[] = {
    {sipName_AuthorityIssuerSerialNumberMismatch, static_cast<int>(QSslError::AuthorityIssuerSerialNumberMismatch), 109},
    {sipName_CertificateBlacklisted, static_cast<int>(QSslError::CertificateBlacklisted), 109},
    {sipName_CertificateExpired, static_cast<int>(QSslError::CertificateExpired), 109},
    {sipName_CertificateNotYetValid, static_cast<int>(QSslError::CertificateNotYetValid), 109},
    {sipName_CertificateRejected, static_cast<int>(QSslError::CertificateRejected), 109},
    {sipName_CertificateRevoked, static_cast<int>(QSslError::CertificateRevoked), 109},
    {sipName_CertificateSignatureFailed, static_cast<int>(QSslError::CertificateSignatureFailed), 109},
    {sipName_CertificateUntrusted, static_cast<int>(QSslError::CertificateUntrusted), 109},
    {sipName_HostNameMismatch, static_cast<int>(QSslError::HostNameMismatch), 109},
    {sipName_InvalidCaCertificate, static_cast<int>(QSslError::InvalidCaCertificate), 109},
    {sipName_InvalidNotAfterField, static_cast<int>(QSslError::InvalidNotAfterField), 109},
    {sipName_InvalidNotBeforeField, static_cast<int>(QSslError::InvalidNotBeforeField), 109},
    {sipName_InvalidPurpose, static_cast<int>(QSslError::InvalidPurpose), 109},
    {sipName_NoError, static_cast<int>(QSslError::NoError), 109},
    {sipName_NoPeerCertificate, static_cast<int>(QSslError::NoPeerCertificate), 109},
    {sipName_NoSslSupport, static_cast<int>(QSslError::NoSslSupport), 109},
    {sipName_PathLengthExceeded, static_cast<int>(QSslError::PathLengthExceeded), 109},
    {sipName_SelfSignedCertificate, static_cast<int>(QSslError::SelfSignedCertificate), 109},
    {sipName_SelfSignedCertificateInChain, static_cast<int>(QSslError::SelfSignedCertificateInChain), 109},
    {sipName_SubjectIssuerMismatch, static_cast<int>(QSslError::SubjectIssuerMismatch), 109},
    {sipName_UnableToDecodeIssuerPublicKey, static_cast<int>(QSslError::UnableToDecodeIssuerPublicKey), 109},
    {sipName_UnableToDecryptCertificateSignature, static_cast<int>(QSslError::UnableToDecryptCertificateSignature), 109},
    {sipName_UnableToGetIssuerCertificate, static_cast<int>(QSslError::UnableToGetIssuerCertificate), 109},
    {sipName_UnableToGetLocalIssuerCertificate, static_cast<int>(QSslError::UnableToGetLocalIssuerCertificate), 109},
    {sipName_UnableToVerifyFirstCertificate, static_cast<int>(QSslError::UnableToVerifyFirstCertificate), 109},
    {sipName_UnspecifiedError, static_cast<int>(QSslError::UnspecifiedError), 109},
};

PyDoc_STRVAR(doc_QSslError, "\1QSslError()\n"
    "QSslError(QSslError.SslError)\n"
    "QSslError(QSslError.SslError, QSslCertificate)\n"
    "QSslError(QSslError)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QSslError = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSslError,
        {0}
    },
    {
        sipNameNr_QSslError,
        {0, 0, 1},
        4, methods_QSslError,
        26, enummembers_QSslError,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSslError,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QSslError,
    init_type_QSslError,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslError,
    assign_QSslError,
    array_QSslError,
    copy_QSslError,
    release_QSslError,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
