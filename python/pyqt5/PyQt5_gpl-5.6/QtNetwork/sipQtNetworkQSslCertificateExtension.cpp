/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtNetwork/qsslcertificateextension.sip"
#include <qsslcertificateextension.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNetwork/sipQtNetworkQSslCertificateExtension.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNetwork/sipQtNetworkQSslCertificateExtension.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtNetwork/sipQtNetworkQSslCertificateExtension.cpp"


PyDoc_STRVAR(doc_QSslCertificateExtension_swap, "swap(self, QSslCertificateExtension)");

extern "C" {static PyObject *meth_QSslCertificateExtension_swap(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificateExtension_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslCertificateExtension* a0;
        QSslCertificateExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslCertificateExtension, &sipCpp, sipType_QSslCertificateExtension, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificateExtension, sipName_swap, doc_QSslCertificateExtension_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificateExtension_oid, "oid(self) -> str");

extern "C" {static PyObject *meth_QSslCertificateExtension_oid(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificateExtension_oid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificateExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificateExtension, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->oid());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificateExtension, sipName_oid, doc_QSslCertificateExtension_oid);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificateExtension_name, "name(self) -> str");

extern "C" {static PyObject *meth_QSslCertificateExtension_name(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificateExtension_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificateExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificateExtension, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificateExtension, sipName_name, doc_QSslCertificateExtension_name);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificateExtension_value, "value(self) -> Any");

extern "C" {static PyObject *meth_QSslCertificateExtension_value(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificateExtension_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificateExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificateExtension, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificateExtension, sipName_value, doc_QSslCertificateExtension_value);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificateExtension_isCritical, "isCritical(self) -> bool");

extern "C" {static PyObject *meth_QSslCertificateExtension_isCritical(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificateExtension_isCritical(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificateExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificateExtension, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCritical();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificateExtension, sipName_isCritical, doc_QSslCertificateExtension_isCritical);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificateExtension_isSupported, "isSupported(self) -> bool");

extern "C" {static PyObject *meth_QSslCertificateExtension_isSupported(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificateExtension_isSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificateExtension *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificateExtension, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSupported();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificateExtension, sipName_isSupported, doc_QSslCertificateExtension_isSupported);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslCertificateExtension(void *, int);}
static void release_QSslCertificateExtension(void *sipCppV,int)
{
    delete reinterpret_cast<QSslCertificateExtension *>(sipCppV);
}


extern "C" {static void assign_QSslCertificateExtension(void *, SIP_SSIZE_T, const void *);}
static void assign_QSslCertificateExtension(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSslCertificateExtension *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSslCertificateExtension *>(sipSrc);
}


extern "C" {static void *array_QSslCertificateExtension(SIP_SSIZE_T);}
static void *array_QSslCertificateExtension(SIP_SSIZE_T sipNrElem)
{
    return new QSslCertificateExtension[sipNrElem];
}


extern "C" {static void *copy_QSslCertificateExtension(const void *, SIP_SSIZE_T);}
static void *copy_QSslCertificateExtension(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSslCertificateExtension(reinterpret_cast<const QSslCertificateExtension *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslCertificateExtension(sipSimpleWrapper *);}
static void dealloc_QSslCertificateExtension(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSslCertificateExtension(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSslCertificateExtension(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslCertificateExtension(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSslCertificateExtension *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QSslCertificateExtension();

            return sipCpp;
        }
    }

    {
        const QSslCertificateExtension* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSslCertificateExtension, &a0))
        {
            sipCpp = new QSslCertificateExtension(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSslCertificateExtension[] = {
    {SIP_MLNAME_CAST(sipName_isCritical), meth_QSslCertificateExtension_isCritical, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificateExtension_isCritical)},
    {SIP_MLNAME_CAST(sipName_isSupported), meth_QSslCertificateExtension_isSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificateExtension_isSupported)},
    {SIP_MLNAME_CAST(sipName_name), meth_QSslCertificateExtension_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificateExtension_name)},
    {SIP_MLNAME_CAST(sipName_oid), meth_QSslCertificateExtension_oid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificateExtension_oid)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QSslCertificateExtension_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificateExtension_swap)},
    {SIP_MLNAME_CAST(sipName_value), meth_QSslCertificateExtension_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificateExtension_value)}
};

PyDoc_STRVAR(doc_QSslCertificateExtension, "\1QSslCertificateExtension()\n"
    "QSslCertificateExtension(QSslCertificateExtension)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QSslCertificateExtension = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSslCertificateExtension,
        {0}
    },
    {
        sipNameNr_QSslCertificateExtension,
        {0, 0, 1},
        6, methods_QSslCertificateExtension,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSslCertificateExtension,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QSslCertificateExtension,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslCertificateExtension,
    assign_QSslCertificateExtension,
    array_QSslCertificateExtension,
    copy_QSslCertificateExtension,
    release_QSslCertificateExtension,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
