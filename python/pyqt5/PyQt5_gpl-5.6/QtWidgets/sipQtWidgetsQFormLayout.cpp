/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qformlayout.sip"
#include <qformlayout.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"
#line 71 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQFormLayout.cpp"


class sipQFormLayout : public QFormLayout
{
public:
    sipQFormLayout(QWidget*);
    virtual ~sipQFormLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSpacerItem* spacerItem();
    QWidget* widget();
    int minimumHeightForWidth(int) const;
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QSizePolicy::ControlTypes controlTypes() const;
    void childEvent(QChildEvent*);
    QLayout* layout();
    bool isEmpty() const;
    int indexOf(QWidget*) const;
    QSize maximumSize() const;
    QRect geometry() const;
    int count() const;
    Qt::Orientations expandingDirections() const;
    int heightForWidth(int) const;
    bool hasHeightForWidth() const;
    void invalidate();
    QSize sizeHint() const;
    QSize minimumSize() const;
    void setGeometry(const QRect&);
    QLayoutItem* takeAt(int);
    QLayoutItem* itemAt(int) const;
    void addItem(QLayoutItem*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFormLayout(const sipQFormLayout &);
    sipQFormLayout &operator = (const sipQFormLayout &);

    char sipPyMethods[27];
};

sipQFormLayout::sipQFormLayout(QWidget*a0): QFormLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFormLayout::~sipQFormLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFormLayout::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QFormLayout);

    return QFormLayout::metaObject();
}

int sipQFormLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QFormLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QFormLayout,_c,_id,_a);

    return _id;
}

void *sipQFormLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QFormLayout, _clname, &sipCpp) ? sipCpp : QFormLayout::qt_metacast(_clname));
}

QSpacerItem* sipQFormLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return QFormLayout::spacerItem();

    extern QSpacerItem* sipVH_QtWidgets_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_94(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QWidget* sipQFormLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return QFormLayout::widget();

    extern QWidget* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_79(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQFormLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return QFormLayout::minimumHeightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFormLayout::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QFormLayout::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFormLayout::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QFormLayout::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFormLayout::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QFormLayout::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFormLayout::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QFormLayout::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFormLayout::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QFormLayout::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQFormLayout::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QFormLayout::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSizePolicy::ControlTypes sipQFormLayout::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_controlTypes);

    if (!sipMeth)
        return QFormLayout::controlTypes();

    extern QSizePolicy::ControlTypes sipVH_QtWidgets_92(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_92(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFormLayout::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QFormLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayout* sipQFormLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return QFormLayout::layout();

    extern QLayout* sipVH_QtWidgets_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_95(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQFormLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return QFormLayout::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQFormLayout::indexOf(QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_indexOf);

    if (!sipMeth)
        return QFormLayout::indexOf(a0);

    extern int sipVH_QtWidgets_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    return sipVH_QtWidgets_96(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQFormLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return QFormLayout::maximumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRect sipQFormLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return QFormLayout::geometry();

    typedef QRect (*sipVH_QtGui_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_53)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQFormLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_count);

    if (!sipMeth)
        return QFormLayout::count();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

Qt::Orientations sipQFormLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return QFormLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtWidgets_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_93(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQFormLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QFormLayout::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFormLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QFormLayout::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFormLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
        QFormLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQFormLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QFormLayout::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQFormLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return QFormLayout::minimumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFormLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QFormLayout::setGeometry(a0);
        return;
    }

    typedef void (*sipVH_QtGui_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&);

    ((sipVH_QtGui_44)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQFormLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_takeAt);

    if (!sipMeth)
        return QFormLayout::takeAt(a0);

    extern QLayoutItem* sipVH_QtWidgets_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_76(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQFormLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_itemAt);

    if (!sipMeth)
        return QFormLayout::itemAt(a0);

    extern QLayoutItem* sipVH_QtWidgets_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_77(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFormLayout::addItem(QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_addItem);

    if (!sipMeth)
    {
        QFormLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtWidgets_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QLayoutItem*);

    sipVH_QtWidgets_78(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QFormLayout_setFieldGrowthPolicy, "setFieldGrowthPolicy(self, QFormLayout.FieldGrowthPolicy)");

extern "C" {static PyObject *meth_QFormLayout_setFieldGrowthPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setFieldGrowthPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout::FieldGrowthPolicy a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QFormLayout_FieldGrowthPolicy, &a0))
        {
            sipCpp->setFieldGrowthPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setFieldGrowthPolicy, doc_QFormLayout_setFieldGrowthPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_fieldGrowthPolicy, "fieldGrowthPolicy(self) -> QFormLayout.FieldGrowthPolicy");

extern "C" {static PyObject *meth_QFormLayout_fieldGrowthPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_fieldGrowthPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QFormLayout::FieldGrowthPolicy sipRes;

            sipRes = sipCpp->fieldGrowthPolicy();

            return sipConvertFromEnum(sipRes,sipType_QFormLayout_FieldGrowthPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_fieldGrowthPolicy, doc_QFormLayout_fieldGrowthPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setRowWrapPolicy, "setRowWrapPolicy(self, QFormLayout.RowWrapPolicy)");

extern "C" {static PyObject *meth_QFormLayout_setRowWrapPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setRowWrapPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFormLayout::RowWrapPolicy a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QFormLayout_RowWrapPolicy, &a0))
        {
            sipCpp->setRowWrapPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setRowWrapPolicy, doc_QFormLayout_setRowWrapPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_rowWrapPolicy, "rowWrapPolicy(self) -> QFormLayout.RowWrapPolicy");

extern "C" {static PyObject *meth_QFormLayout_rowWrapPolicy(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_rowWrapPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QFormLayout::RowWrapPolicy sipRes;

            sipRes = sipCpp->rowWrapPolicy();

            return sipConvertFromEnum(sipRes,sipType_QFormLayout_RowWrapPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_rowWrapPolicy, doc_QFormLayout_rowWrapPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setLabelAlignment, "setLabelAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QFormLayout_setLabelAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setLabelAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setLabelAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setLabelAlignment, doc_QFormLayout_setLabelAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_labelAlignment, "labelAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QFormLayout_labelAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_labelAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->labelAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_labelAlignment, doc_QFormLayout_labelAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setFormAlignment, "setFormAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QFormLayout_setFormAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setFormAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setFormAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setFormAlignment, doc_QFormLayout_setFormAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_formAlignment, "formAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QFormLayout_formAlignment(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_formAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->formAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_formAlignment, doc_QFormLayout_formAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setHorizontalSpacing, "setHorizontalSpacing(self, int)");

extern "C" {static PyObject *meth_QFormLayout_setHorizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setHorizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->setHorizontalSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setHorizontalSpacing, doc_QFormLayout_setHorizontalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_horizontalSpacing, "horizontalSpacing(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_horizontalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_horizontalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->horizontalSpacing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_horizontalSpacing, doc_QFormLayout_horizontalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setVerticalSpacing, "setVerticalSpacing(self, int)");

extern "C" {static PyObject *meth_QFormLayout_setVerticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->setVerticalSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setVerticalSpacing, doc_QFormLayout_setVerticalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_verticalSpacing, "verticalSpacing(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_verticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_verticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->verticalSpacing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_verticalSpacing, doc_QFormLayout_verticalSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_spacing, "spacing(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->spacing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_spacing, doc_QFormLayout_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setSpacing, "setSpacing(self, int)");

extern "C" {static PyObject *meth_QFormLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setSpacing, doc_QFormLayout_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_addRow, "addRow(self, QWidget, QWidget)\n"
    "addRow(self, QWidget, QLayout)\n"
    "addRow(self, str, QWidget)\n"
    "addRow(self, str, QLayout)\n"
    "addRow(self, QWidget)\n"
    "addRow(self, QLayout)");

extern "C" {static PyObject *meth_QFormLayout_addRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QWidget* a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0, sipType_QWidget, &a1))
        {
            sipCpp->addRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWidget* a0;
        QLayout* a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0, sipType_QLayout, &a1))
        {
            sipCpp->addRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QWidget* a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWidget, &a1))
        {
            sipCpp->addRow(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QLayout* a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLayout, &a1))
        {
            sipCpp->addRow(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWidget* a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->addRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QLayout* a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            sipCpp->addRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addRow, doc_QFormLayout_addRow);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_insertRow, "insertRow(self, int, QWidget, QWidget)\n"
    "insertRow(self, int, QWidget, QLayout)\n"
    "insertRow(self, int, str, QWidget)\n"
    "insertRow(self, int, str, QLayout)\n"
    "insertRow(self, int, QWidget)\n"
    "insertRow(self, int, QLayout)");

extern "C" {static PyObject *meth_QFormLayout_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget* a1;
        QWidget* a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QWidget, &a2))
        {
            sipCpp->insertRow(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QWidget* a1;
        QLayout* a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QLayout, &a2))
        {
            sipCpp->insertRow(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QWidget* a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QWidget, &a2))
        {
            sipCpp->insertRow(a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QLayout* a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QLayout, &a2))
        {
            sipCpp->insertRow(a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QWidget* a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QWidget, &a1))
        {
            sipCpp->insertRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QLayout* a1;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QLayout, &a1))
        {
            sipCpp->insertRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_insertRow, doc_QFormLayout_insertRow);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setItem, "setItem(self, int, QFormLayout.ItemRole, QLayoutItem)");

extern "C" {static PyObject *meth_QFormLayout_setItem(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout::ItemRole a1;
        QLayoutItem* a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QLayoutItem, &a2))
        {
            sipCpp->setItem(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setItem, doc_QFormLayout_setItem);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setWidget, "setWidget(self, int, QFormLayout.ItemRole, QWidget)");

extern "C" {static PyObject *meth_QFormLayout_setWidget(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout::ItemRole a1;
        QWidget* a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QWidget, &a2))
        {
            sipCpp->setWidget(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setWidget, doc_QFormLayout_setWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setLayout, "setLayout(self, int, QFormLayout.ItemRole, QLayout)");

extern "C" {static PyObject *meth_QFormLayout_setLayout(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QFormLayout::ItemRole a1;
        QLayout* a2;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ:", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1, sipType_QLayout, &a2))
        {
            sipCpp->setLayout(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setLayout, doc_QFormLayout_setLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_itemAt, "itemAt(self, int, QFormLayout.ItemRole) -> QLayoutItem\n"
    "itemAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QFormLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QFormLayout::ItemRole a1;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QFormLayout, &sipCpp, &a0, sipType_QFormLayout_ItemRole, &a1))
        {
            QLayoutItem*sipRes;

            sipRes = sipCpp->itemAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    {
        int a0;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::itemAt(a0) : sipCpp->itemAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_itemAt, doc_QFormLayout_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_getItemPosition, "getItemPosition(self, int) -> Tuple[int, QFormLayout.ItemRole]");

extern "C" {static PyObject *meth_QFormLayout_getItemPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getItemPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QFormLayout::ItemRole a2;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            sipCpp->getItemPosition(a0,&a1,&a2);

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getItemPosition, doc_QFormLayout_getItemPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_getWidgetPosition, "getWidgetPosition(self, QWidget) -> Tuple[int, QFormLayout.ItemRole]");

extern "C" {static PyObject *meth_QFormLayout_getWidgetPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getWidgetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        int a1;
        QFormLayout::ItemRole a2;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->getWidgetPosition(a0,&a1,&a2);

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getWidgetPosition, doc_QFormLayout_getWidgetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_getLayoutPosition, "getLayoutPosition(self, QLayout) -> Tuple[int, QFormLayout.ItemRole]");

extern "C" {static PyObject *meth_QFormLayout_getLayoutPosition(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_getLayoutPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout* a0;
        int a1;
        QFormLayout::ItemRole a2;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            sipCpp->getLayoutPosition(a0,&a1,&a2);

            return sipBuildResult(0,"(iF)",a1,a2,sipType_QFormLayout_ItemRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_getLayoutPosition, doc_QFormLayout_getLayoutPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_labelForField, "labelForField(self, QWidget) -> QWidget\n"
    "labelForField(self, QLayout) -> QWidget");

extern "C" {static PyObject *meth_QFormLayout_labelForField(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_labelForField(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QWidget, &a0))
        {
            QWidget*sipRes;

            sipRes = sipCpp->labelForField(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        QLayout* a0;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayout, &a0))
        {
            QWidget*sipRes;

            sipRes = sipCpp->labelForField(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_labelForField, doc_QFormLayout_labelForField);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_addItem, "addItem(self, QLayoutItem)");

extern "C" {static PyObject *meth_QFormLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayoutItem* a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            (sipSelfWasArg ? sipCpp->QFormLayout::addItem(a0) : sipCpp->addItem(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_addItem, doc_QFormLayout_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_takeAt, "takeAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QFormLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::takeAt(a0) : sipCpp->takeAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_takeAt, doc_QFormLayout_takeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_setGeometry, "setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QFormLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFormLayout, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp->QFormLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_setGeometry, doc_QFormLayout_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QFormLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QFormLayout::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_minimumSize, doc_QFormLayout_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QFormLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QFormLayout::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_sizeHint, doc_QFormLayout_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QFormLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QFormLayout::invalidate() : sipCpp->invalidate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_invalidate, doc_QFormLayout_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_hasHeightForWidth, "hasHeightForWidth(self) -> bool");

extern "C" {static PyObject *meth_QFormLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_hasHeightForWidth, doc_QFormLayout_hasHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QFormLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QFormLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_heightForWidth, doc_QFormLayout_heightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_expandingDirections, "expandingDirections(self) -> Qt.Orientations");

extern "C" {static PyObject *meth_QFormLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            Qt::Orientations*sipRes;

            sipRes = new Qt::Orientations((sipSelfWasArg ? sipCpp->QFormLayout::expandingDirections() : sipCpp->expandingDirections()));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_expandingDirections, doc_QFormLayout_expandingDirections);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_count, "count(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFormLayout::count() : sipCpp->count());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_count, doc_QFormLayout_count);

    return NULL;
}


PyDoc_STRVAR(doc_QFormLayout_rowCount, "rowCount(self) -> int");

extern "C" {static PyObject *meth_QFormLayout_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QFormLayout_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFormLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFormLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFormLayout, sipName_rowCount, doc_QFormLayout_rowCount);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QFormLayout(void *, const sipTypeDef *);}
static void *cast_QFormLayout(void *sipCppV, const sipTypeDef *targetType)
{
    QFormLayout *sipCpp = reinterpret_cast<QFormLayout *>(sipCppV);

    if (targetType == sipType_QLayoutItem)
        return static_cast<QLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFormLayout(void *, int);}
static void release_QFormLayout(void *sipCppV,int)
{
    QFormLayout *sipCpp = reinterpret_cast<QFormLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFormLayout(sipSimpleWrapper *);}
static void dealloc_QFormLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFormLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFormLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QFormLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFormLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFormLayout *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQFormLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFormLayout[] = {{186, 255, 1}};


static PyMethodDef methods_QFormLayout[] = {
    {SIP_MLNAME_CAST(sipName_addItem), meth_QFormLayout_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_addItem)},
    {SIP_MLNAME_CAST(sipName_addRow), meth_QFormLayout_addRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_addRow)},
    {SIP_MLNAME_CAST(sipName_count), meth_QFormLayout_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_count)},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QFormLayout_expandingDirections, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_expandingDirections)},
    {SIP_MLNAME_CAST(sipName_fieldGrowthPolicy), meth_QFormLayout_fieldGrowthPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_fieldGrowthPolicy)},
    {SIP_MLNAME_CAST(sipName_formAlignment), meth_QFormLayout_formAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_formAlignment)},
    {SIP_MLNAME_CAST(sipName_getItemPosition), meth_QFormLayout_getItemPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_getItemPosition)},
    {SIP_MLNAME_CAST(sipName_getLayoutPosition), meth_QFormLayout_getLayoutPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_getLayoutPosition)},
    {SIP_MLNAME_CAST(sipName_getWidgetPosition), meth_QFormLayout_getWidgetPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_getWidgetPosition)},
    {SIP_MLNAME_CAST(sipName_hasHeightForWidth), meth_QFormLayout_hasHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_hasHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QFormLayout_heightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_heightForWidth)},
    {SIP_MLNAME_CAST(sipName_horizontalSpacing), meth_QFormLayout_horizontalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_horizontalSpacing)},
    {SIP_MLNAME_CAST(sipName_insertRow), meth_QFormLayout_insertRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_insertRow)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QFormLayout_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_invalidate)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QFormLayout_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_itemAt)},
    {SIP_MLNAME_CAST(sipName_labelAlignment), meth_QFormLayout_labelAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_labelAlignment)},
    {SIP_MLNAME_CAST(sipName_labelForField), meth_QFormLayout_labelForField, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_labelForField)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QFormLayout_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_minimumSize)},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QFormLayout_rowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_rowCount)},
    {SIP_MLNAME_CAST(sipName_rowWrapPolicy), meth_QFormLayout_rowWrapPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_rowWrapPolicy)},
    {SIP_MLNAME_CAST(sipName_setFieldGrowthPolicy), meth_QFormLayout_setFieldGrowthPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setFieldGrowthPolicy)},
    {SIP_MLNAME_CAST(sipName_setFormAlignment), meth_QFormLayout_setFormAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setFormAlignment)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QFormLayout_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setHorizontalSpacing), meth_QFormLayout_setHorizontalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setHorizontalSpacing)},
    {SIP_MLNAME_CAST(sipName_setItem), meth_QFormLayout_setItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setItem)},
    {SIP_MLNAME_CAST(sipName_setLabelAlignment), meth_QFormLayout_setLabelAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setLabelAlignment)},
    {SIP_MLNAME_CAST(sipName_setLayout), meth_QFormLayout_setLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setLayout)},
    {SIP_MLNAME_CAST(sipName_setRowWrapPolicy), meth_QFormLayout_setRowWrapPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setRowWrapPolicy)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QFormLayout_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setSpacing)},
    {SIP_MLNAME_CAST(sipName_setVerticalSpacing), meth_QFormLayout_setVerticalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setVerticalSpacing)},
    {SIP_MLNAME_CAST(sipName_setWidget), meth_QFormLayout_setWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_setWidget)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QFormLayout_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_sizeHint)},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QFormLayout_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_spacing)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QFormLayout_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_takeAt)},
    {SIP_MLNAME_CAST(sipName_verticalSpacing), meth_QFormLayout_verticalSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QFormLayout_verticalSpacing)}
};

static sipEnumMemberDef enummembers_QFormLayout[] = {
    {sipName_AllNonFixedFieldsGrow, static_cast<int>(QFormLayout::AllNonFixedFieldsGrow), 95},
    {sipName_DontWrapRows, static_cast<int>(QFormLayout::DontWrapRows), 97},
    {sipName_ExpandingFieldsGrow, static_cast<int>(QFormLayout::ExpandingFieldsGrow), 95},
    {sipName_FieldRole, static_cast<int>(QFormLayout::FieldRole), 96},
    {sipName_FieldsStayAtSizeHint, static_cast<int>(QFormLayout::FieldsStayAtSizeHint), 95},
    {sipName_LabelRole, static_cast<int>(QFormLayout::LabelRole), 96},
    {sipName_SpanningRole, static_cast<int>(QFormLayout::SpanningRole), 96},
    {sipName_WrapAllRows, static_cast<int>(QFormLayout::WrapAllRows), 97},
    {sipName_WrapLongRows, static_cast<int>(QFormLayout::WrapLongRows), 97},
};

PyDoc_STRVAR(doc_QFormLayout, "\1QFormLayout(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QFormLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QFormLayout,
        {0}
    },
    {
        sipNameNr_QFormLayout,
        {0, 0, 1},
        35, methods_QFormLayout,
        9, enummembers_QFormLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFormLayout,
    -1,
    -1,
    supers_QFormLayout,
    0,
    init_type_QFormLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFormLayout,
    0,
    0,
    0,
    release_QFormLayout,
    cast_QFormLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QFormLayout::staticMetaObject,
    0,
    0,
    0
};
