/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qproxystyle.sip"
#include <qproxystyle.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qapplication.sip"
#include <qapplication.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 867 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 693 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQProxyStyle.cpp"


class sipQProxyStyle : public QProxyStyle
{
public:
    sipQProxyStyle(QStyle*);
    sipQProxyStyle(const QString&);
    virtual ~sipQProxyStyle();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void unpolish(QApplication*);
    void unpolish(QWidget*);
    void polish(QApplication*);
    void polish(QPalette&);
    void polish(QWidget*);
    QPalette standardPalette() const;
    QPixmap generatedIconPixmap(QIcon::Mode,const QPixmap&,const QStyleOption*) const;
    QPixmap standardPixmap(QStyle::StandardPixmap,const QStyleOption*,const QWidget*) const;
    QIcon standardIcon(QStyle::StandardPixmap,const QStyleOption*,const QWidget*) const;
    int layoutSpacing(QSizePolicy::ControlType,QSizePolicy::ControlType,Qt::Orientation,const QStyleOption*,const QWidget*) const;
    int pixelMetric(QStyle::PixelMetric,const QStyleOption*,const QWidget*) const;
    int styleHint(QStyle::StyleHint,const QStyleOption*,const QWidget*,QStyleHintReturn*) const;
    QStyle::SubControl hitTestComplexControl(QStyle::ComplexControl,const QStyleOptionComplex*,const QPoint&,const QWidget*) const;
    QRect itemPixmapRect(const QRect&,int,const QPixmap&) const;
    QRect itemTextRect(const QFontMetrics&,const QRect&,int,bool,const QString&) const;
    QRect subControlRect(QStyle::ComplexControl,const QStyleOptionComplex*,QStyle::SubControl,const QWidget*) const;
    QRect subElementRect(QStyle::SubElement,const QStyleOption*,const QWidget*) const;
    QSize sizeFromContents(QStyle::ContentsType,const QStyleOption*,const QSize&,const QWidget*) const;
    void drawItemPixmap(QPainter*,const QRect&,int,const QPixmap&) const;
    void drawItemText(QPainter*,const QRect&,int,const QPalette&,bool,const QString&,QPalette::ColorRole) const;
    void drawComplexControl(QStyle::ComplexControl,const QStyleOptionComplex*,QPainter*,const QWidget*) const;
    void drawControl(QStyle::ControlElement,const QStyleOption*,QPainter*,const QWidget*) const;
    void drawPrimitive(QStyle::PrimitiveElement,const QStyleOption*,QPainter*,const QWidget*) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProxyStyle(const sipQProxyStyle &);
    sipQProxyStyle &operator = (const sipQProxyStyle &);

    char sipPyMethods[30];
};

sipQProxyStyle::sipQProxyStyle(QStyle*a0): QProxyStyle(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProxyStyle::sipQProxyStyle(const QString& a0): QProxyStyle(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProxyStyle::~sipQProxyStyle()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQProxyStyle::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QProxyStyle);

    return QProxyStyle::metaObject();
}

int sipQProxyStyle::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QProxyStyle::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QProxyStyle,_c,_id,_a);

    return _id;
}

void *sipQProxyStyle::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QProxyStyle, _clname, &sipCpp) ? sipCpp : QProxyStyle::qt_metacast(_clname));
}

void sipQProxyStyle::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QProxyStyle::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QProxyStyle::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QProxyStyle::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QProxyStyle::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QProxyStyle::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQProxyStyle::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QProxyStyle::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQProxyStyle::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QProxyStyle::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::unpolish(QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_unpolish);

    if (!sipMeth)
    {
        QProxyStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtWidgets_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QApplication*);

    sipVH_QtWidgets_75(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::unpolish(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_unpolish);

    if (!sipMeth)
    {
        QProxyStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::polish(QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
        QProxyStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QApplication*);

    sipVH_QtWidgets_75(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::polish(QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
        QProxyStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPalette&);

    sipVH_QtWidgets_74(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQProxyStyle::polish(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
        QProxyStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPalette sipQProxyStyle::standardPalette() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_standardPalette);

    if (!sipMeth)
        return QProxyStyle::standardPalette();

    extern QPalette sipVH_QtWidgets_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_69(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QPixmap sipQProxyStyle::generatedIconPixmap(QIcon::Mode a0,const QPixmap& a1,const QStyleOption*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_generatedIconPixmap);

    if (!sipMeth)
        return QProxyStyle::generatedIconPixmap(a0,a1,a2);

    extern QPixmap sipVH_QtWidgets_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIcon::Mode,const QPixmap&,const QStyleOption*);

    return sipVH_QtWidgets_57(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QPixmap sipQProxyStyle::standardPixmap(QStyle::StandardPixmap a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_standardPixmap);

    if (!sipMeth)
        return QProxyStyle::standardPixmap(a0,a1,a2);

    extern QPixmap sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::StandardPixmap,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_59(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QIcon sipQProxyStyle::standardIcon(QStyle::StandardPixmap a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_standardIcon);

    if (!sipMeth)
        return QProxyStyle::standardIcon(a0,a1,a2);

    extern QIcon sipVH_QtWidgets_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::StandardPixmap,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_58(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

int sipQProxyStyle::layoutSpacing(QSizePolicy::ControlType a0,QSizePolicy::ControlType a1,Qt::Orientation a2,const QStyleOption*a3,const QWidget*a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_layoutSpacing);

    if (!sipMeth)
        return QProxyStyle::layoutSpacing(a0,a1,a2,a3,a4);

    extern int sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSizePolicy::ControlType,QSizePolicy::ControlType,Qt::Orientation,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_56(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

int sipQProxyStyle::pixelMetric(QStyle::PixelMetric a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_pixelMetric);

    if (!sipMeth)
        return QProxyStyle::pixelMetric(a0,a1,a2);

    extern int sipVH_QtWidgets_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::PixelMetric,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_62(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

int sipQProxyStyle::styleHint(QStyle::StyleHint a0,const QStyleOption*a1,const QWidget*a2,QStyleHintReturn*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_styleHint);

    if (!sipMeth)
        return QProxyStyle::styleHint(a0,a1,a2,a3);

    extern int sipVH_QtWidgets_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::StyleHint,const QStyleOption*,const QWidget*,QStyleHintReturn*);

    return sipVH_QtWidgets_60(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QStyle::SubControl sipQProxyStyle::hitTestComplexControl(QStyle::ComplexControl a0,const QStyleOptionComplex*a1,const QPoint& a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_hitTestComplexControl);

    if (!sipMeth)
        return QProxyStyle::hitTestComplexControl(a0,a1,a2,a3);

    extern QStyle::SubControl sipVH_QtWidgets_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ComplexControl,const QStyleOptionComplex*,const QPoint&,const QWidget*);

    return sipVH_QtWidgets_64(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QRect sipQProxyStyle::itemPixmapRect(const QRect& a0,int a1,const QPixmap& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_itemPixmapRect);

    if (!sipMeth)
        return QProxyStyle::itemPixmapRect(a0,a1,a2);

    extern QRect sipVH_QtWidgets_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,int,const QPixmap&);

    return sipVH_QtWidgets_72(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QRect sipQProxyStyle::itemTextRect(const QFontMetrics& a0,const QRect& a1,int a2,bool a3,const QString& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_itemTextRect);

    if (!sipMeth)
        return QProxyStyle::itemTextRect(a0,a1,a2,a3,a4);

    extern QRect sipVH_QtWidgets_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFontMetrics&,const QRect&,int,bool,const QString&);

    return sipVH_QtWidgets_73(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QRect sipQProxyStyle::subControlRect(QStyle::ComplexControl a0,const QStyleOptionComplex*a1,QStyle::SubControl a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_subControlRect);

    if (!sipMeth)
        return QProxyStyle::subControlRect(a0,a1,a2,a3);

    extern QRect sipVH_QtWidgets_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ComplexControl,const QStyleOptionComplex*,QStyle::SubControl,const QWidget*);

    return sipVH_QtWidgets_63(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QRect sipQProxyStyle::subElementRect(QStyle::SubElement a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_subElementRect);

    if (!sipMeth)
        return QProxyStyle::subElementRect(a0,a1,a2);

    extern QRect sipVH_QtWidgets_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::SubElement,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_66(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QSize sipQProxyStyle::sizeFromContents(QStyle::ContentsType a0,const QStyleOption*a1,const QSize& a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_sizeFromContents);

    if (!sipMeth)
        return QProxyStyle::sizeFromContents(a0,a1,a2,a3);

    extern QSize sipVH_QtWidgets_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ContentsType,const QStyleOption*,const QSize&,const QWidget*);

    return sipVH_QtWidgets_61(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQProxyStyle::drawItemPixmap(QPainter*a0,const QRect& a1,int a2,const QPixmap& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_drawItemPixmap);

    if (!sipMeth)
    {
        QProxyStyle::drawItemPixmap(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,int,const QPixmap&);

    sipVH_QtWidgets_70(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQProxyStyle::drawItemText(QPainter*a0,const QRect& a1,int a2,const QPalette& a3,bool a4,const QString& a5,QPalette::ColorRole a6) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_drawItemText);

    if (!sipMeth)
    {
        QProxyStyle::drawItemText(a0,a1,a2,a3,a4,a5,a6);
        return;
    }

    extern void sipVH_QtWidgets_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,int,const QPalette&,bool,const QString&,QPalette::ColorRole);

    sipVH_QtWidgets_71(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4, a5, a6);
}

void sipQProxyStyle::drawComplexControl(QStyle::ComplexControl a0,const QStyleOptionComplex*a1,QPainter*a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_drawComplexControl);

    if (!sipMeth)
    {
        QProxyStyle::drawComplexControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ComplexControl,const QStyleOptionComplex*,QPainter*,const QWidget*);

    sipVH_QtWidgets_65(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQProxyStyle::drawControl(QStyle::ControlElement a0,const QStyleOption*a1,QPainter*a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_drawControl);

    if (!sipMeth)
    {
        QProxyStyle::drawControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ControlElement,const QStyleOption*,QPainter*,const QWidget*);

    sipVH_QtWidgets_67(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQProxyStyle::drawPrimitive(QStyle::PrimitiveElement a0,const QStyleOption*a1,QPainter*a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_drawPrimitive);

    if (!sipMeth)
    {
        QProxyStyle::drawPrimitive(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::PrimitiveElement,const QStyleOption*,QPainter*,const QWidget*);

    sipVH_QtWidgets_68(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}


PyDoc_STRVAR(doc_QProxyStyle_baseStyle, "baseStyle(self) -> QStyle");

extern "C" {static PyObject *meth_QProxyStyle_baseStyle(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_baseStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyStyle, &sipCpp))
        {
            QStyle*sipRes;

            sipRes = sipCpp->baseStyle();

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_baseStyle, doc_QProxyStyle_baseStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_setBaseStyle, "setBaseStyle(self, QStyle)");

extern "C" {static PyObject *meth_QProxyStyle_setBaseStyle(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_setBaseStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle* a0;
        QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle, &a0))
        {
            sipCpp->setBaseStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_setBaseStyle, doc_QProxyStyle_setBaseStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_drawPrimitive, "drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QProxyStyle_drawPrimitive(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawPrimitive(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::PrimitiveElement a0;
        const QStyleOption* a1;
        QPainter* a2;
        const QWidget* a3 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_PrimitiveElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::drawPrimitive(a0,a1,a2,a3) : sipCpp->drawPrimitive(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawPrimitive, doc_QProxyStyle_drawPrimitive);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_drawControl, "drawControl(self, QStyle.ControlElement, QStyleOption, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QProxyStyle_drawControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ControlElement a0;
        const QStyleOption* a1;
        QPainter* a2;
        const QWidget* a3 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ControlElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::drawControl(a0,a1,a2,a3) : sipCpp->drawControl(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawControl, doc_QProxyStyle_drawControl);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_drawComplexControl, "drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QProxyStyle_drawComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex* a1;
        QPainter* a2;
        const QWidget* a3 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::drawComplexControl(a0,a1,a2,a3) : sipCpp->drawComplexControl(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawComplexControl, doc_QProxyStyle_drawComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_drawItemText, "drawItemText(self, QPainter, QRect, int, QPalette, bool, str, textRole: QPalette.ColorRole = QPalette.NoRole)");

extern "C" {static PyObject *meth_QProxyStyle_drawItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRect* a1;
        int a2;
        const QPalette* a3;
        bool a4;
        const QString* a5;
        int a5State = 0;
        QPalette::ColorRole a6 = QPalette::NoRole;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_textRole,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9iJ9bJ1|E", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, &a2, sipType_QPalette, &a3, &a4, sipType_QString,&a5, &a5State, sipType_QPalette_ColorRole, &a6))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::drawItemText(a0,*a1,a2,*a3,a4,*a5,a6) : sipCpp->drawItemText(a0,*a1,a2,*a3,a4,*a5,a6));
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawItemText, doc_QProxyStyle_drawItemText);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_drawItemPixmap, "drawItemPixmap(self, QPainter, QRect, int, QPixmap)");

extern "C" {static PyObject *meth_QProxyStyle_drawItemPixmap(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_drawItemPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRect* a1;
        int a2;
        const QPixmap* a3;
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9iJ9", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, &a2, sipType_QPixmap, &a3))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::drawItemPixmap(a0,*a1,a2,*a3) : sipCpp->drawItemPixmap(a0,*a1,a2,*a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_drawItemPixmap, doc_QProxyStyle_drawItemPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_sizeFromContents, "sizeFromContents(self, QStyle.ContentsType, QStyleOption, QSize, QWidget) -> QSize");

extern "C" {static PyObject *meth_QProxyStyle_sizeFromContents(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_sizeFromContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ContentsType a0;
        const QStyleOption* a1;
        const QSize* a2;
        const QWidget* a3;
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ8J9J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ContentsType, &a0, sipType_QStyleOption, &a1, sipType_QSize, &a2, sipType_QWidget, &a3))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QProxyStyle::sizeFromContents(a0,a1,*a2,a3) : sipCpp->sizeFromContents(a0,a1,*a2,a3)));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_sizeFromContents, doc_QProxyStyle_sizeFromContents);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_subElementRect, "subElementRect(self, QStyle.SubElement, QStyleOption, QWidget) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_subElementRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_subElementRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::SubElement a0;
        const QStyleOption* a1;
        const QWidget* a2;
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_SubElement, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QProxyStyle::subElementRect(a0,a1,a2) : sipCpp->subElementRect(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_subElementRect, doc_QProxyStyle_subElementRect);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_subControlRect, "subControlRect(self, QStyle.ComplexControl, QStyleOptionComplex, QStyle.SubControl, QWidget) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_subControlRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_subControlRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex* a1;
        QStyle::SubControl a2;
        const QWidget* a3;
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ8EJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QStyle_SubControl, &a2, sipType_QWidget, &a3))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QProxyStyle::subControlRect(a0,a1,a2,a3) : sipCpp->subControlRect(a0,a1,a2,a3)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_subControlRect, doc_QProxyStyle_subControlRect);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_itemTextRect, "itemTextRect(self, QFontMetrics, QRect, int, bool, str) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_itemTextRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_itemTextRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFontMetrics* a0;
        const QRect* a1;
        int a2;
        bool a3;
        const QString* a4;
        int a4State = 0;
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9ibJ1", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QFontMetrics, &a0, sipType_QRect, &a1, &a2, &a3, sipType_QString,&a4, &a4State))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QProxyStyle::itemTextRect(*a0,*a1,a2,a3,*a4) : sipCpp->itemTextRect(*a0,*a1,a2,a3,*a4)));
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_itemTextRect, doc_QProxyStyle_itemTextRect);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_itemPixmapRect, "itemPixmapRect(self, QRect, int, QPixmap) -> QRect");

extern "C" {static PyObject *meth_QProxyStyle_itemPixmapRect(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_itemPixmapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        int a1;
        const QPixmap* a2;
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QRect, &a0, &a1, sipType_QPixmap, &a2))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QProxyStyle::itemPixmapRect(*a0,a1,*a2) : sipCpp->itemPixmapRect(*a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_itemPixmapRect, doc_QProxyStyle_itemPixmapRect);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_hitTestComplexControl, "hitTestComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPoint, widget: QWidget = None) -> QStyle.SubControl");

extern "C" {static PyObject *meth_QProxyStyle_hitTestComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_hitTestComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex* a1;
        const QPoint* a2;
        const QWidget* a3 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J9|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPoint, &a2, sipType_QWidget, &a3))
        {
            QStyle::SubControl sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProxyStyle::hitTestComplexControl(a0,a1,*a2,a3) : sipCpp->hitTestComplexControl(a0,a1,*a2,a3));

            return sipConvertFromEnum(sipRes,sipType_QStyle_SubControl);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_hitTestComplexControl, doc_QProxyStyle_hitTestComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_styleHint, "styleHint(self, QStyle.StyleHint, option: QStyleOption = None, widget: QWidget = None, returnData: QStyleHintReturn = None) -> int");

extern "C" {static PyObject *meth_QProxyStyle_styleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_styleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::StyleHint a0;
        const QStyleOption* a1 = 0;
        const QWidget* a2 = 0;
        QStyleHintReturn* a3 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
            sipName_returnData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_StyleHint, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2, sipType_QStyleHintReturn, &a3))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProxyStyle::styleHint(a0,a1,a2,a3) : sipCpp->styleHint(a0,a1,a2,a3));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_styleHint, doc_QProxyStyle_styleHint);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_pixelMetric, "pixelMetric(self, QStyle.PixelMetric, option: QStyleOption = None, widget: QWidget = None) -> int");

extern "C" {static PyObject *meth_QProxyStyle_pixelMetric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_pixelMetric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::PixelMetric a0;
        const QStyleOption* a1 = 0;
        const QWidget* a2 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_PixelMetric, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProxyStyle::pixelMetric(a0,a1,a2) : sipCpp->pixelMetric(a0,a1,a2));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_pixelMetric, doc_QProxyStyle_pixelMetric);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_layoutSpacing, "layoutSpacing(self, QSizePolicy.ControlType, QSizePolicy.ControlType, Qt.Orientation, option: QStyleOption = None, widget: QWidget = None) -> int");

extern "C" {static PyObject *meth_QProxyStyle_layoutSpacing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_layoutSpacing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSizePolicy::ControlType a0;
        QSizePolicy::ControlType a1;
        Qt::Orientation a2;
        const QStyleOption* a3 = 0;
        const QWidget* a4 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEEE|J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QSizePolicy_ControlType, &a0, sipType_QSizePolicy_ControlType, &a1, sipType_Qt_Orientation, &a2, sipType_QStyleOption, &a3, sipType_QWidget, &a4))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProxyStyle::layoutSpacing(a0,a1,a2,a3,a4) : sipCpp->layoutSpacing(a0,a1,a2,a3,a4));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_layoutSpacing, doc_QProxyStyle_layoutSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_standardIcon, "standardIcon(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QIcon");

extern "C" {static PyObject *meth_QProxyStyle_standardIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_standardIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::StandardPixmap a0;
        const QStyleOption* a1 = 0;
        const QWidget* a2 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            QIcon*sipRes;

            sipRes = new QIcon((sipSelfWasArg ? sipCpp->QProxyStyle::standardIcon(a0,a1,a2) : sipCpp->standardIcon(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_standardIcon, doc_QProxyStyle_standardIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_standardPixmap, "standardPixmap(self, QStyle.StandardPixmap, QStyleOption, widget: QWidget = None) -> QPixmap");

extern "C" {static PyObject *meth_QProxyStyle_standardPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_standardPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::StandardPixmap a0;
        const QStyleOption* a1;
        const QWidget* a2 = 0;
        const QProxyStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8|J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap((sipSelfWasArg ? sipCpp->QProxyStyle::standardPixmap(a0,a1,a2) : sipCpp->standardPixmap(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_standardPixmap, doc_QProxyStyle_standardPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_generatedIconPixmap, "generatedIconPixmap(self, QIcon.Mode, QPixmap, QStyleOption) -> QPixmap");

extern "C" {static PyObject *meth_QProxyStyle_generatedIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_generatedIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIcon::Mode a0;
        const QPixmap* a1;
        const QStyleOption* a2;
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9J8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QIcon_Mode, &a0, sipType_QPixmap, &a1, sipType_QStyleOption, &a2))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap((sipSelfWasArg ? sipCpp->QProxyStyle::generatedIconPixmap(a0,*a1,a2) : sipCpp->generatedIconPixmap(a0,*a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_generatedIconPixmap, doc_QProxyStyle_generatedIconPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_standardPalette, "standardPalette(self) -> QPalette");

extern "C" {static PyObject *meth_QProxyStyle_standardPalette(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_standardPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyStyle, &sipCpp))
        {
            QPalette*sipRes;

            sipRes = new QPalette((sipSelfWasArg ? sipCpp->QProxyStyle::standardPalette() : sipCpp->standardPalette()));

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_standardPalette, doc_QProxyStyle_standardPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_polish, "polish(self, QWidget)\n"
    "polish(self, QPalette) -> QPalette\n"
    "polish(self, QApplication)");

extern "C" {static PyObject *meth_QProxyStyle_polish(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_polish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QWidget, &a0))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::polish(a0) : sipCpp->polish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPalette* a0;
        QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QPalette, &a0))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::polish(*a0) : sipCpp->polish(*a0));

            return sipConvertFromType(a0,sipType_QPalette,NULL);
        }
    }

    {
        QApplication* a0;
        QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QApplication, &a0))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::polish(a0) : sipCpp->polish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_polish, doc_QProxyStyle_polish);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_unpolish, "unpolish(self, QWidget)\n"
    "unpolish(self, QApplication)");

extern "C" {static PyObject *meth_QProxyStyle_unpolish(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_unpolish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QWidget, &a0))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::unpolish(a0) : sipCpp->unpolish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QApplication* a0;
        QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QApplication, &a0))
        {
            (sipSelfWasArg ? sipCpp->QProxyStyle::unpolish(a0) : sipCpp->unpolish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_unpolish, doc_QProxyStyle_unpolish);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyStyle_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QProxyStyle_event(PyObject *, PyObject *);}
static PyObject *meth_QProxyStyle_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QProxyStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QProxyStyle, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProxyStyle::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyStyle, sipName_event, doc_QProxyStyle_event);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProxyStyle(void *, int);}
static void release_QProxyStyle(void *sipCppV,int)
{
    QProxyStyle *sipCpp = reinterpret_cast<QProxyStyle *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QProxyStyle(sipSimpleWrapper *);}
static void dealloc_QProxyStyle(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQProxyStyle *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QProxyStyle(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QProxyStyle(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProxyStyle(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQProxyStyle *sipCpp = 0;

    {
        QStyle* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J:", sipType_QStyle, &a0))
        {
            sipCpp = new sipQProxyStyle(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQProxyStyle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProxyStyle[] = {{48, 255, 1}};


static PyMethodDef methods_QProxyStyle[] = {
    {SIP_MLNAME_CAST(sipName_baseStyle), meth_QProxyStyle_baseStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_baseStyle)},
    {SIP_MLNAME_CAST(sipName_drawComplexControl), (PyCFunction)meth_QProxyStyle_drawComplexControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_drawComplexControl)},
    {SIP_MLNAME_CAST(sipName_drawControl), (PyCFunction)meth_QProxyStyle_drawControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_drawControl)},
    {SIP_MLNAME_CAST(sipName_drawItemPixmap), meth_QProxyStyle_drawItemPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_drawItemPixmap)},
    {SIP_MLNAME_CAST(sipName_drawItemText), (PyCFunction)meth_QProxyStyle_drawItemText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_drawItemText)},
    {SIP_MLNAME_CAST(sipName_drawPrimitive), (PyCFunction)meth_QProxyStyle_drawPrimitive, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_drawPrimitive)},
    {SIP_MLNAME_CAST(sipName_event), meth_QProxyStyle_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_event)},
    {SIP_MLNAME_CAST(sipName_generatedIconPixmap), meth_QProxyStyle_generatedIconPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_generatedIconPixmap)},
    {SIP_MLNAME_CAST(sipName_hitTestComplexControl), (PyCFunction)meth_QProxyStyle_hitTestComplexControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_hitTestComplexControl)},
    {SIP_MLNAME_CAST(sipName_itemPixmapRect), meth_QProxyStyle_itemPixmapRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_itemPixmapRect)},
    {SIP_MLNAME_CAST(sipName_itemTextRect), meth_QProxyStyle_itemTextRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_itemTextRect)},
    {SIP_MLNAME_CAST(sipName_layoutSpacing), (PyCFunction)meth_QProxyStyle_layoutSpacing, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_layoutSpacing)},
    {SIP_MLNAME_CAST(sipName_pixelMetric), (PyCFunction)meth_QProxyStyle_pixelMetric, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_pixelMetric)},
    {SIP_MLNAME_CAST(sipName_polish), meth_QProxyStyle_polish, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_polish)},
    {SIP_MLNAME_CAST(sipName_setBaseStyle), meth_QProxyStyle_setBaseStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_setBaseStyle)},
    {SIP_MLNAME_CAST(sipName_sizeFromContents), meth_QProxyStyle_sizeFromContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_sizeFromContents)},
    {SIP_MLNAME_CAST(sipName_standardIcon), (PyCFunction)meth_QProxyStyle_standardIcon, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_standardIcon)},
    {SIP_MLNAME_CAST(sipName_standardPalette), meth_QProxyStyle_standardPalette, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_standardPalette)},
    {SIP_MLNAME_CAST(sipName_standardPixmap), (PyCFunction)meth_QProxyStyle_standardPixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_standardPixmap)},
    {SIP_MLNAME_CAST(sipName_styleHint), (PyCFunction)meth_QProxyStyle_styleHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyStyle_styleHint)},
    {SIP_MLNAME_CAST(sipName_subControlRect), meth_QProxyStyle_subControlRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_subControlRect)},
    {SIP_MLNAME_CAST(sipName_subElementRect), meth_QProxyStyle_subElementRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_subElementRect)},
    {SIP_MLNAME_CAST(sipName_unpolish), meth_QProxyStyle_unpolish, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyStyle_unpolish)}
};

PyDoc_STRVAR(doc_QProxyStyle, "\1QProxyStyle(style: QStyle = None)\n"
    "QProxyStyle(str)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QProxyStyle = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QProxyStyle,
        {0}
    },
    {
        sipNameNr_QProxyStyle,
        {0, 0, 1},
        23, methods_QProxyStyle,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QProxyStyle,
    -1,
    -1,
    supers_QProxyStyle,
    0,
    init_type_QProxyStyle,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QProxyStyle,
    0,
    0,
    0,
    release_QProxyStyle,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QProxyStyle::staticMetaObject,
    0,
    0,
    0
};
