/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 491 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 345 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 366 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 549 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 598 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 571 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 587 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 560 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 150 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 326 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 464 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 380 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 208 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 453 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 442 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 654 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 287 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 420 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 394 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 252 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 255 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 258 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 261 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 264 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 267 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 270 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 273 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 276 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 279 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 282 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 285 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"


class sipQAbstractItemView : public QAbstractItemView
{
public:
    sipQAbstractItemView(QWidget*);
    virtual ~sipQAbstractItemView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void setupViewport(QWidget*);
    void scrollContentsBy(int,int);
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    void paintEvent(QPaintEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    QSize viewportSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void timerEvent(QTimerEvent*);
    void resizeEvent(QResizeEvent*);
    void keyPressEvent(QKeyEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool viewportEvent(QEvent*);
    bool event(QEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    bool isIndexHidden(const QModelIndex&) const;
    int verticalOffset() const;
    int horizontalOffset() const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarAction(int);
    void updateGeometries();
    void updateEditorGeometries();
    void updateEditorData();
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void dataChanged(const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void selectAll();
    void setRootIndex(const QModelIndex&);
    void reset();
    int sizeHintForColumn(int) const;
    int sizeHintForRow(int) const;
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void keyboardSearch(const QString&);
    void setSelectionModel(QItemSelectionModel*);
    void setModel(QAbstractItemModel*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemView(const sipQAbstractItemView &);
    sipQAbstractItemView &operator = (const sipQAbstractItemView &);

    char sipPyMethods[87];
};

sipQAbstractItemView::sipQAbstractItemView(QWidget*a0): QAbstractItemView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemView::~sipQAbstractItemView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractItemView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QAbstractItemView);

    return QAbstractItemView::metaObject();
}

int sipQAbstractItemView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractItemView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QAbstractItemView,_c,_id,_a);

    return _id;
}

void *sipQAbstractItemView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QAbstractItemView, _clname, &sipCpp) ? sipCpp : QAbstractItemView::qt_metacast(_clname));
}

void sipQAbstractItemView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractItemView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractItemView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractItemView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractItemView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QAbstractItemView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQAbstractItemView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QAbstractItemView::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractItemView::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QAbstractItemView::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QAbstractItemView::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQAbstractItemView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QAbstractItemView::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QAbstractItemView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QAbstractItemView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QAbstractItemView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QAbstractItemView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QAbstractItemView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QAbstractItemView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QAbstractItemView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QAbstractItemView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QAbstractItemView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQAbstractItemView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QAbstractItemView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQAbstractItemView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QAbstractItemView::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QAbstractItemView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractItemView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QAbstractItemView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractItemView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QAbstractItemView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QAbstractItemView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QAbstractItemView::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractItemView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QAbstractItemView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QAbstractItemView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QAbstractItemView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQAbstractItemView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QAbstractItemView::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQAbstractItemView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QAbstractItemView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQAbstractItemView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return QAbstractItemView::viewportSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractItemView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQAbstractItemView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractItemView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QAbstractItemView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QAbstractItemView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QAbstractItemView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QAbstractItemView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QAbstractItemView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QAbstractItemView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QAbstractItemView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QAbstractItemView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QAbstractItemView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractItemView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQAbstractItemView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QAbstractItemView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_46(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractItemView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtWidgets_91(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQAbstractItemView::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtWidgets_144(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtWidgets_144(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_145(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtWidgets_145(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QModelIndexList sipQAbstractItemView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[54]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QAbstractItemView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_27(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRegion sipQAbstractItemView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,sipName_QAbstractItemView,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QRegion();

    extern QRegion sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtWidgets_28(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,sipName_QAbstractItemView,sipName_setSelection);

    if (!sipMeth)
        return;

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_29(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,sipName_QAbstractItemView,sipName_isIndexHidden);

    if (!sipMeth)
        return 0;

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractItemView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,sipName_QAbstractItemView,sipName_verticalOffset);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQAbstractItemView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[59]),sipPySelf,sipName_QAbstractItemView,sipName_horizontalOffset);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QModelIndex sipQAbstractItemView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,sipName_QAbstractItemView,sipName_moveCursor);

    if (!sipMeth)
        return QModelIndex();

    extern QModelIndex sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtWidgets_30(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_146(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtWidgets_146(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_147(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QAbstractItemView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QAbstractItemView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractItemView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractItemView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractItemView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QAbstractItemView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtWidgets_23(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QAbstractItemView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtWidgets_24(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QAbstractItemView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemView::dataChanged(const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QAbstractItemView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&,const QVector<int>&);

    sipVH_QtWidgets_32(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractItemView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QAbstractItemView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractItemView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QAbstractItemView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QAbstractItemView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQAbstractItemView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QAbstractItemView::sizeHintForColumn(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractItemView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[80]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QAbstractItemView::sizeHintForRow(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndex sipQAbstractItemView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,sipName_QAbstractItemView,sipName_indexAt);

    if (!sipMeth)
        return QModelIndex();

    extern QModelIndex sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_33(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,sipName_QAbstractItemView,sipName_scrollTo);

    if (!sipMeth)
        return;

    extern void sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_34(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QRect sipQAbstractItemView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,sipName_QAbstractItemView,sipName_visualRect);

    if (!sipMeth)
        return QRect();

    extern QRect sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_35(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QAbstractItemView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QAbstractItemView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtWidgets_16(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractItemView::setModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
        QAbstractItemView::setModel(a0);
        return;
    }

    typedef void (*sipVH_QtCore_40)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    ((sipVH_QtCore_40)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[40]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractItemView_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QAbstractItemView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setModel, doc_QAbstractItemView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QAbstractItemView_model(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_model, doc_QAbstractItemView_model);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionModel, "setSelectionModel(self, QItemSelectionModel)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel* a0;
        PyObject *a0Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionModel, doc_QAbstractItemView_setSelectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionModel, "selectionModel(self) -> QItemSelectionModel");

extern "C" {static PyObject *meth_QAbstractItemView_selectionModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QItemSelectionModel*sipRes;

            sipRes = sipCpp->selectionModel();

            return sipConvertFromType(sipRes,sipType_QItemSelectionModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionModel, doc_QAbstractItemView_selectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegate, "setItemDelegate(self, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemDelegate* a0;
        PyObject *a0Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            sipCpp->setItemDelegate(a0);

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegate, doc_QAbstractItemView_setItemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegate, "itemDelegate(self) -> QAbstractItemDelegate\n"
    "itemDelegate(self, QModelIndex) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegate();

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    {
        const QModelIndex* a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegate(*a0);

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegate, doc_QAbstractItemView_itemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionMode, "setSelectionMode(self, QAbstractItemView.SelectionMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::SelectionMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_SelectionMode, &a0))
        {
            sipCpp->setSelectionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionMode, doc_QAbstractItemView_setSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionMode, "selectionMode(self) -> QAbstractItemView.SelectionMode");

extern "C" {static PyObject *meth_QAbstractItemView_selectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::SelectionMode sipRes;

            sipRes = sipCpp->selectionMode();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_SelectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionMode, doc_QAbstractItemView_selectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelectionBehavior, "setSelectionBehavior(self, QAbstractItemView.SelectionBehavior)");

extern "C" {static PyObject *meth_QAbstractItemView_setSelectionBehavior(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelectionBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::SelectionBehavior a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_SelectionBehavior, &a0))
        {
            sipCpp->setSelectionBehavior(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelectionBehavior, doc_QAbstractItemView_setSelectionBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionBehavior, "selectionBehavior(self) -> QAbstractItemView.SelectionBehavior");

extern "C" {static PyObject *meth_QAbstractItemView_selectionBehavior(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::SelectionBehavior sipRes;

            sipRes = sipCpp->selectionBehavior();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_SelectionBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionBehavior, doc_QAbstractItemView_selectionBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_currentIndex, "currentIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->currentIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_currentIndex, doc_QAbstractItemView_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rootIndex, "rootIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_rootIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->rootIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rootIndex, doc_QAbstractItemView_rootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setEditTriggers, "setEditTriggers(self, Union[QAbstractItemView.EditTriggers, QAbstractItemView.EditTrigger])");

extern "C" {static PyObject *meth_QAbstractItemView_setEditTriggers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setEditTriggers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::EditTriggers* a0;
        int a0State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_EditTriggers, &a0, &a0State))
        {
            sipCpp->setEditTriggers(*a0);
            sipReleaseType(a0,sipType_QAbstractItemView_EditTriggers,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setEditTriggers, doc_QAbstractItemView_setEditTriggers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_editTriggers, "editTriggers(self) -> QAbstractItemView.EditTriggers");

extern "C" {static PyObject *meth_QAbstractItemView_editTriggers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_editTriggers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::EditTriggers*sipRes;

            sipRes = new QAbstractItemView::EditTriggers(sipCpp->editTriggers());

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemView_EditTriggers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_editTriggers, doc_QAbstractItemView_editTriggers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAutoScroll, "setAutoScroll(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setAutoScroll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAutoScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setAutoScroll(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAutoScroll, doc_QAbstractItemView_setAutoScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_hasAutoScroll, "hasAutoScroll(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_hasAutoScroll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_hasAutoScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAutoScroll();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_hasAutoScroll, doc_QAbstractItemView_hasAutoScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setTabKeyNavigation, "setTabKeyNavigation(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setTabKeyNavigation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setTabKeyNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setTabKeyNavigation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setTabKeyNavigation, doc_QAbstractItemView_setTabKeyNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_tabKeyNavigation, "tabKeyNavigation(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_tabKeyNavigation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_tabKeyNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabKeyNavigation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_tabKeyNavigation, doc_QAbstractItemView_tabKeyNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDropIndicatorShown, "setDropIndicatorShown(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDropIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDropIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setDropIndicatorShown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDropIndicatorShown, doc_QAbstractItemView_setDropIndicatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_showDropIndicator, "showDropIndicator(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_showDropIndicator(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_showDropIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->showDropIndicator();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_showDropIndicator, doc_QAbstractItemView_showDropIndicator);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragEnabled, "setDragEnabled(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setDragEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragEnabled, doc_QAbstractItemView_setDragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragEnabled, "dragEnabled(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_dragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dragEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragEnabled, doc_QAbstractItemView_dragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAlternatingRowColors, "setAlternatingRowColors(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setAlternatingRowColors(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAlternatingRowColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setAlternatingRowColors(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAlternatingRowColors, doc_QAbstractItemView_setAlternatingRowColors);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_alternatingRowColors, "alternatingRowColors(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_alternatingRowColors(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_alternatingRowColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->alternatingRowColors();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_alternatingRowColors, doc_QAbstractItemView_alternatingRowColors);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setIconSize, "setIconSize(self, QSize)");

extern "C" {static PyObject *meth_QAbstractItemView_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setIconSize, doc_QAbstractItemView_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_iconSize, "iconSize(self) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_iconSize, doc_QAbstractItemView_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setTextElideMode, "setTextElideMode(self, Qt.TextElideMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setTextElideMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setTextElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextElideMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_TextElideMode, &a0))
        {
            sipCpp->setTextElideMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setTextElideMode, doc_QAbstractItemView_setTextElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_textElideMode, "textElideMode(self) -> Qt.TextElideMode");

extern "C" {static PyObject *meth_QAbstractItemView_textElideMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_textElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Qt::TextElideMode sipRes;

            sipRes = sipCpp->textElideMode();

            return sipConvertFromEnum(sipRes,sipType_Qt_TextElideMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_textElideMode, doc_QAbstractItemView_textElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_keyboardSearch, "keyboardSearch(self, str)");

extern "C" {static PyObject *meth_QAbstractItemView_keyboardSearch(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_keyboardSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::keyboardSearch(*a0) : sipCpp->keyboardSearch(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_keyboardSearch, doc_QAbstractItemView_keyboardSearch);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QAbstractItemView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex* a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_visualRect);
                return NULL;
            }

            sipRes = new QRect(sipCpp->visualRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_visualRect, doc_QAbstractItemView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollTo, "scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_scrollTo);
                return NULL;
            }

            sipCpp->scrollTo(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollTo, doc_QAbstractItemView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPoint* a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_indexAt);
                return NULL;
            }

            sipRes = new QModelIndex(sipCpp->indexAt(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_indexAt, doc_QAbstractItemView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForIndex, "sizeHintForIndex(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sizeHintForIndex(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForIndex, doc_QAbstractItemView_sizeHintForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForRow, "sizeHintForRow(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::sizeHintForRow(a0) : sipCpp->sizeHintForRow(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForRow, doc_QAbstractItemView_sizeHintForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_sizeHintForColumn, "sizeHintForColumn(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::sizeHintForColumn(a0) : sipCpp->sizeHintForColumn(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_sizeHintForColumn, doc_QAbstractItemView_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_openPersistentEditor, "openPersistentEditor(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_openPersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->openPersistentEditor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_openPersistentEditor, doc_QAbstractItemView_openPersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_closePersistentEditor, "closePersistentEditor(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_closePersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->closePersistentEditor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_closePersistentEditor, doc_QAbstractItemView_closePersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setIndexWidget, "setIndexWidget(self, QModelIndex, QWidget)");

extern "C" {static PyObject *meth_QAbstractItemView_setIndexWidget(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setIndexWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QWidget* a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J:", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QWidget, &a1))
        {
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qabstractitemview.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->indexWidget(*a0);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setIndexWidget(*a0, a1);
        Py_END_ALLOW_THREADS
#line 3045 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQAbstractItemView.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setIndexWidget, doc_QAbstractItemView_setIndexWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_indexWidget, "indexWidget(self, QModelIndex) -> QWidget");

extern "C" {static PyObject *meth_QAbstractItemView_indexWidget(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_indexWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QWidget*sipRes;

            sipRes = sipCpp->indexWidget(*a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_indexWidget, doc_QAbstractItemView_indexWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_reset, "reset(self)");

extern "C" {static PyObject *meth_QAbstractItemView_reset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_reset, doc_QAbstractItemView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setRootIndex, "setRootIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setRootIndex, doc_QAbstractItemView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QAbstractItemView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::selectAll() : sipCpp->selectAll());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectAll, doc_QAbstractItemView_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_edit, "edit(self, QModelIndex)\n"
    "edit(self, QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_edit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_edit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->edit(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex* a0;
        QAbstractItemView::EditTrigger a1;
        QEvent* a2;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9EJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::edit(*a0,a1,a2) : sipCpp->edit(*a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_edit, doc_QAbstractItemView_edit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_clearSelection, "clearSelection(self)");

extern "C" {static PyObject *meth_QAbstractItemView_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_clearSelection, doc_QAbstractItemView_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setCurrentIndex, "setCurrentIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->setCurrentIndex(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setCurrentIndex, doc_QAbstractItemView_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollToTop, "scrollToTop(self)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollToTop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollToTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->scrollToTop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollToTop, doc_QAbstractItemView_scrollToTop);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollToBottom, "scrollToBottom(self)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollToBottom(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollToBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->scrollToBottom();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollToBottom, doc_QAbstractItemView_scrollToBottom);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_update, "update(self)\n"
    "update(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_update(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_update, doc_QAbstractItemView_update);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dataChanged, "dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])");

extern "C" {static PyObject *meth_QAbstractItemView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        const QVector<int>& a2def = QVector<int>();
        const QVector<int>* a2 = &a2def;
        int a2State = 0;
        QAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ9J9|J1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dataChanged(*a0,*a1,*a2) : sipCpp->dataChanged(*a0,*a1,*a2));
            sipReleaseType(const_cast<QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dataChanged, doc_QAbstractItemView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rowsInserted, "rowsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rowsInserted, doc_QAbstractItemView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_rowsAboutToBeRemoved, "rowsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::rowsAboutToBeRemoved(*a0,a1,a2) : sipCpp->rowsAboutToBeRemoved(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_rowsAboutToBeRemoved, doc_QAbstractItemView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionChanged, "selectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QAbstractItemView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionChanged, doc_QAbstractItemView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_currentChanged, doc_QAbstractItemView_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateEditorData, "updateEditorData(self)");

extern "C" {static PyObject *meth_QAbstractItemView_updateEditorData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::updateEditorData() : sipCpp->updateEditorData());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateEditorData, doc_QAbstractItemView_updateEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateEditorGeometries, "updateEditorGeometries(self)");

extern "C" {static PyObject *meth_QAbstractItemView_updateEditorGeometries(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::updateEditorGeometries() : sipCpp->updateEditorGeometries());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateEditorGeometries, doc_QAbstractItemView_updateEditorGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QAbstractItemView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::updateGeometries() : sipCpp->updateGeometries());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_updateGeometries, doc_QAbstractItemView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollbarAction, "verticalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::verticalScrollbarAction(a0) : sipCpp->verticalScrollbarAction(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollbarAction, doc_QAbstractItemView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollbarAction, "horizontalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::horizontalScrollbarAction(a0) : sipCpp->horizontalScrollbarAction(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollbarAction, doc_QAbstractItemView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollbarValueChanged, "verticalScrollbarValueChanged(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::verticalScrollbarValueChanged(a0) : sipCpp->verticalScrollbarValueChanged(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollbarValueChanged, doc_QAbstractItemView_verticalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollbarValueChanged, "horizontalScrollbarValueChanged(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::horizontalScrollbarValueChanged(a0) : sipCpp->horizontalScrollbarValueChanged(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollbarValueChanged, doc_QAbstractItemView_horizontalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_closeEditor, "closeEditor(self, QWidget, QAbstractItemDelegate.EndEditHint)");

extern "C" {static PyObject *meth_QAbstractItemView_closeEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_closeEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemDelegate::EndEditHint a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8E", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::closeEditor(a0,a1) : sipCpp->closeEditor(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_closeEditor, doc_QAbstractItemView_closeEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_commitData, "commitData(self, QWidget)");

extern "C" {static PyObject *meth_QAbstractItemView_commitData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QWidget, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::commitData(a0) : sipCpp->commitData(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_commitData, doc_QAbstractItemView_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_editorDestroyed, "editorDestroyed(self, QObject)");

extern "C" {static PyObject *meth_QAbstractItemView_editorDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QObject, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::editorDestroyed(a0) : sipCpp->editorDestroyed(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_editorDestroyed, doc_QAbstractItemView_editorDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractItemView::CursorAction a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_moveCursor);
                return NULL;
            }

            sipRes = new QModelIndex(sipCpp->moveCursor(a0,*a1));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_moveCursor, doc_QAbstractItemView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_horizontalOffset);
                return NULL;
            }

            sipRes = sipCpp->horizontalOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalOffset, doc_QAbstractItemView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_verticalOffset);
                return NULL;
            }

            sipRes = sipCpp->verticalOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalOffset, doc_QAbstractItemView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex* a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_isIndexHidden);
                return NULL;
            }

            sipRes = sipCpp->isIndexHidden(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_isIndexHidden, doc_QAbstractItemView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setSelection, "setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QAbstractItemView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_setSelection);
                return NULL;
            }

            sipCpp->setSelection(*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setSelection, doc_QAbstractItemView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QAbstractItemView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QItemSelection* a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemView, sipName_visualRegionForSelection);
                return NULL;
            }

            sipRes = new QRegion(sipCpp->visualRegionForSelection(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_visualRegionForSelection, doc_QAbstractItemView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectedIndexes, "selectedIndexes(self) -> object");

extern "C" {static PyObject *meth_QAbstractItemView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QAbstractItemView::selectedIndexes() : sipCpp->selectedIndexes()));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectedIndexes, doc_QAbstractItemView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_selectionCommand, "selectionCommand(self, QModelIndex, event: QEvent = None) -> QItemSelectionModel.SelectionFlags");

extern "C" {static PyObject *meth_QAbstractItemView_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QEvent* a1 = 0;
        const QAbstractItemView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ9|J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
            QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new QItemSelectionModel::SelectionFlags((sipSelfWasArg ? sipCpp->QAbstractItemView::selectionCommand(*a0,a1) : sipCpp->selectionCommand(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_selectionCommand, doc_QAbstractItemView_selectionCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_startDrag, "startDrag(self, Union[Qt.DropActions, Qt.DropAction])");

extern "C" {static PyObject *meth_QAbstractItemView_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions* a0;
        int a0State = 0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::startDrag(*a0) : sipCpp->startDrag(*a0));
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_startDrag, doc_QAbstractItemView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewOptions, "viewOptions(self) -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QAbstractItemView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QStyleOptionViewItem*sipRes;

            sipRes = new QStyleOptionViewItem((sipSelfWasArg ? sipCpp->QAbstractItemView::viewOptions() : sipCpp->viewOptions()));

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewOptions, doc_QAbstractItemView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_state, "state(self) -> QAbstractItemView.State");

extern "C" {static PyObject *meth_QAbstractItemView_state(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_state, doc_QAbstractItemView_state);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setState, "setState(self, QAbstractItemView.State)");

extern "C" {static PyObject *meth_QAbstractItemView_setState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::State a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            sipCpp->setState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setState, doc_QAbstractItemView_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scheduleDelayedItemsLayout, "scheduleDelayedItemsLayout(self)");

extern "C" {static PyObject *meth_QAbstractItemView_scheduleDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->scheduleDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scheduleDelayedItemsLayout, doc_QAbstractItemView_scheduleDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_executeDelayedItemsLayout, "executeDelayedItemsLayout(self)");

extern "C" {static PyObject *meth_QAbstractItemView_executeDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            sipCpp->executeDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_executeDelayedItemsLayout, doc_QAbstractItemView_executeDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_scrollDirtyRegion, "scrollDirtyRegion(self, int, int)");

extern "C" {static PyObject *meth_QAbstractItemView_scrollDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1))
        {
            sipCpp->scrollDirtyRegion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_scrollDirtyRegion, doc_QAbstractItemView_scrollDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDirtyRegion, "setDirtyRegion(self, QRegion)");

extern "C" {static PyObject *meth_QAbstractItemView_setDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->setDirtyRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDirtyRegion, doc_QAbstractItemView_setDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dirtyRegionOffset, "dirtyRegionOffset(self) -> QPoint");

extern "C" {static PyObject *meth_QAbstractItemView_dirtyRegionOffset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->dirtyRegionOffset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dirtyRegionOffset, doc_QAbstractItemView_dirtyRegionOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_event, doc_QAbstractItemView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewportEvent, "viewportEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::viewportEvent(a0) : sipCpp->viewportEvent(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewportEvent, doc_QAbstractItemView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mousePressEvent, doc_QAbstractItemView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseMoveEvent, doc_QAbstractItemView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseReleaseEvent, doc_QAbstractItemView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_mouseDoubleClickEvent, doc_QAbstractItemView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragEnterEvent, doc_QAbstractItemView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragMoveEvent, doc_QAbstractItemView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragLeaveEvent, doc_QAbstractItemView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dropEvent, doc_QAbstractItemView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusInEvent, doc_QAbstractItemView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusOutEvent, doc_QAbstractItemView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_keyPressEvent, doc_QAbstractItemView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_resizeEvent, doc_QAbstractItemView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_timerEvent, doc_QAbstractItemView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dropIndicatorPosition, "dropIndicatorPosition(self) -> QAbstractItemView.DropIndicatorPosition");

extern "C" {static PyObject *meth_QAbstractItemView_dropIndicatorPosition(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::DropIndicatorPosition sipRes;

            sipRes = sipCpp->dropIndicatorPosition();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dropIndicatorPosition, doc_QAbstractItemView_dropIndicatorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setVerticalScrollMode, "setVerticalScrollMode(self, QAbstractItemView.ScrollMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setVerticalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setVerticalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::ScrollMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_ScrollMode, &a0))
        {
            sipCpp->setVerticalScrollMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setVerticalScrollMode, doc_QAbstractItemView_setVerticalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_verticalScrollMode, "verticalScrollMode(self) -> QAbstractItemView.ScrollMode");

extern "C" {static PyObject *meth_QAbstractItemView_verticalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_verticalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::ScrollMode sipRes;

            sipRes = sipCpp->verticalScrollMode();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_ScrollMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_verticalScrollMode, doc_QAbstractItemView_verticalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setHorizontalScrollMode, "setHorizontalScrollMode(self, QAbstractItemView.ScrollMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setHorizontalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setHorizontalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::ScrollMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_ScrollMode, &a0))
        {
            sipCpp->setHorizontalScrollMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setHorizontalScrollMode, doc_QAbstractItemView_setHorizontalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_horizontalScrollMode, "horizontalScrollMode(self) -> QAbstractItemView.ScrollMode");

extern "C" {static PyObject *meth_QAbstractItemView_horizontalScrollMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_horizontalScrollMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::ScrollMode sipRes;

            sipRes = sipCpp->horizontalScrollMode();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_ScrollMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_horizontalScrollMode, doc_QAbstractItemView_horizontalScrollMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragDropOverwriteMode, "setDragDropOverwriteMode(self, bool)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragDropOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragDropOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setDragDropOverwriteMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragDropOverwriteMode, doc_QAbstractItemView_setDragDropOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragDropOverwriteMode, "dragDropOverwriteMode(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_dragDropOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragDropOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dragDropOverwriteMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragDropOverwriteMode, doc_QAbstractItemView_dragDropOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDragDropMode, "setDragDropMode(self, QAbstractItemView.DragDropMode)");

extern "C" {static PyObject *meth_QAbstractItemView_setDragDropMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDragDropMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemView::DragDropMode a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QAbstractItemView_DragDropMode, &a0))
        {
            sipCpp->setDragDropMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDragDropMode, doc_QAbstractItemView_setDragDropMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_dragDropMode, "dragDropMode(self) -> QAbstractItemView.DragDropMode");

extern "C" {static PyObject *meth_QAbstractItemView_dragDropMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_dragDropMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QAbstractItemView::DragDropMode sipRes;

            sipRes = sipCpp->dragDropMode();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DragDropMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_dragDropMode, doc_QAbstractItemView_dragDropMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegateForRow, "setItemDelegateForRow(self, int, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegateForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegateForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemDelegate* a1;
        PyObject *a1Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1Keep, sipType_QAbstractItemDelegate, &a1))
        {
            sipCpp->setItemDelegateForRow(a0,a1);

            sipKeepReference(sipSelf, -5, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegateForRow, doc_QAbstractItemView_setItemDelegateForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegateForRow, "itemDelegateForRow(self, int) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegateForRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegateForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegateForRow(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegateForRow, doc_QAbstractItemView_itemDelegateForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setItemDelegateForColumn, "setItemDelegateForColumn(self, int, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QAbstractItemView_setItemDelegateForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setItemDelegateForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemDelegate* a1;
        PyObject *a1Keep;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi@J8", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0, &a1Keep, sipType_QAbstractItemDelegate, &a1))
        {
            sipCpp->setItemDelegateForColumn(a0,a1);

            sipKeepReference(sipSelf, -6, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setItemDelegateForColumn, doc_QAbstractItemView_setItemDelegateForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_itemDelegateForColumn, "itemDelegateForColumn(self, int) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QAbstractItemView_itemDelegateForColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_itemDelegateForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegateForColumn(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_itemDelegateForColumn, doc_QAbstractItemView_itemDelegateForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QAbstractItemView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QAbstractItemView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_inputMethodQuery, doc_QAbstractItemView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setAutoScrollMargin, "setAutoScrollMargin(self, int)");

extern "C" {static PyObject *meth_QAbstractItemView_setAutoScrollMargin(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setAutoScrollMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            sipCpp->setAutoScrollMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setAutoScrollMargin, doc_QAbstractItemView_setAutoScrollMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_autoScrollMargin, "autoScrollMargin(self) -> int");

extern "C" {static PyObject *meth_QAbstractItemView_autoScrollMargin(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_autoScrollMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->autoScrollMargin();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_autoScrollMargin, doc_QAbstractItemView_autoScrollMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QAbstractItemView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QAbstractItemView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemView::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_focusNextPrevChild, doc_QAbstractItemView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QAbstractItemView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractItemView::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_inputMethodEvent, doc_QAbstractItemView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_viewportSizeHint, "viewportSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemView_viewportSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QAbstractItemView::viewportSizeHint() : sipCpp->viewportSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_viewportSizeHint, doc_QAbstractItemView_viewportSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_setDefaultDropAction, "setDefaultDropAction(self, Qt.DropAction)");

extern "C" {static PyObject *meth_QAbstractItemView_setDefaultDropAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_setDefaultDropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DropAction a0;
        QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractItemView, &sipCpp, sipType_Qt_DropAction, &a0))
        {
            sipCpp->setDefaultDropAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_setDefaultDropAction, doc_QAbstractItemView_setDefaultDropAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractItemView_defaultDropAction, "defaultDropAction(self) -> Qt.DropAction");

extern "C" {static PyObject *meth_QAbstractItemView_defaultDropAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemView_defaultDropAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractItemView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemView, &sipCpp))
        {
            Qt::DropAction sipRes;

            sipRes = sipCpp->defaultDropAction();

            return sipConvertFromEnum(sipRes,sipType_Qt_DropAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemView, sipName_defaultDropAction, doc_QAbstractItemView_defaultDropAction);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QAbstractItemView(void *, const sipTypeDef *);}
static void *cast_QAbstractItemView(void *sipCppV, const sipTypeDef *targetType)
{
    QAbstractItemView *sipCpp = reinterpret_cast<QAbstractItemView *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemView(void *, int);}
static void release_QAbstractItemView(void *sipCppV,int)
{
    QAbstractItemView *sipCpp = reinterpret_cast<QAbstractItemView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractItemView(sipSimpleWrapper *);}
static void dealloc_QAbstractItemView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractItemView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractItemView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractItemView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractItemView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractItemView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractItemView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemView[] = {{15, 255, 1}};


static PyMethodDef methods_QAbstractItemView[] = {
    {SIP_MLNAME_CAST(sipName_alternatingRowColors), meth_QAbstractItemView_alternatingRowColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_alternatingRowColors)},
    {SIP_MLNAME_CAST(sipName_autoScrollMargin), meth_QAbstractItemView_autoScrollMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_autoScrollMargin)},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QAbstractItemView_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_clearSelection)},
    {SIP_MLNAME_CAST(sipName_closeEditor), meth_QAbstractItemView_closeEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_closeEditor)},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), meth_QAbstractItemView_closePersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_closePersistentEditor)},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QAbstractItemView_commitData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_commitData)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QAbstractItemView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QAbstractItemView_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_currentIndex)},
    {SIP_MLNAME_CAST(sipName_dataChanged), (PyCFunction)meth_QAbstractItemView_dataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_defaultDropAction), meth_QAbstractItemView_defaultDropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_defaultDropAction)},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), meth_QAbstractItemView_dirtyRegionOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dirtyRegionOffset)},
    {SIP_MLNAME_CAST(sipName_dragDropMode), meth_QAbstractItemView_dragDropMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragDropMode)},
    {SIP_MLNAME_CAST(sipName_dragDropOverwriteMode), meth_QAbstractItemView_dragDropOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragDropOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_dragEnabled), meth_QAbstractItemView_dragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragEnabled)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QAbstractItemView_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QAbstractItemView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QAbstractItemView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QAbstractItemView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), meth_QAbstractItemView_dropIndicatorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_dropIndicatorPosition)},
    {SIP_MLNAME_CAST(sipName_edit), meth_QAbstractItemView_edit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_edit)},
    {SIP_MLNAME_CAST(sipName_editTriggers), meth_QAbstractItemView_editTriggers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_editTriggers)},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), meth_QAbstractItemView_editorDestroyed, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_editorDestroyed)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractItemView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_event)},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), meth_QAbstractItemView_executeDelayedItemsLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_executeDelayedItemsLayout)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QAbstractItemView_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QAbstractItemView_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QAbstractItemView_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_hasAutoScroll), meth_QAbstractItemView_hasAutoScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_hasAutoScroll)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QAbstractItemView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollMode), meth_QAbstractItemView_horizontalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollMode)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QAbstractItemView_horizontalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), meth_QAbstractItemView_horizontalScrollbarValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_horizontalScrollbarValueChanged)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QAbstractItemView_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_iconSize)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QAbstractItemView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_indexAt)},
    {SIP_MLNAME_CAST(sipName_indexWidget), meth_QAbstractItemView_indexWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_indexWidget)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QAbstractItemView_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QAbstractItemView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QAbstractItemView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_itemDelegate), meth_QAbstractItemView_itemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegate)},
    {SIP_MLNAME_CAST(sipName_itemDelegateForColumn), meth_QAbstractItemView_itemDelegateForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegateForColumn)},
    {SIP_MLNAME_CAST(sipName_itemDelegateForRow), meth_QAbstractItemView_itemDelegateForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_itemDelegateForRow)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QAbstractItemView_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyboardSearch), meth_QAbstractItemView_keyboardSearch, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_keyboardSearch)},
    {SIP_MLNAME_CAST(sipName_model), meth_QAbstractItemView_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_model)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QAbstractItemView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QAbstractItemView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QAbstractItemView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QAbstractItemView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QAbstractItemView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), meth_QAbstractItemView_openPersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_openPersistentEditor)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QAbstractItemView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_reset)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QAbstractItemView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_rootIndex), meth_QAbstractItemView_rootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_rootIndex)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QAbstractItemView_rowsAboutToBeRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QAbstractItemView_rowsInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), meth_QAbstractItemView_scheduleDelayedItemsLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scheduleDelayedItemsLayout)},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), meth_QAbstractItemView_scrollDirtyRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollDirtyRegion)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QAbstractItemView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_scrollToBottom), meth_QAbstractItemView_scrollToBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollToBottom)},
    {SIP_MLNAME_CAST(sipName_scrollToTop), meth_QAbstractItemView_scrollToTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_scrollToTop)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QAbstractItemView_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QAbstractItemView_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionBehavior), meth_QAbstractItemView_selectionBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionBehavior)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QAbstractItemView_selectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QAbstractItemView_selectionCommand, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionCommand)},
    {SIP_MLNAME_CAST(sipName_selectionMode), meth_QAbstractItemView_selectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionMode)},
    {SIP_MLNAME_CAST(sipName_selectionModel), meth_QAbstractItemView_selectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_selectionModel)},
    {SIP_MLNAME_CAST(sipName_setAlternatingRowColors), meth_QAbstractItemView_setAlternatingRowColors, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAlternatingRowColors)},
    {SIP_MLNAME_CAST(sipName_setAutoScroll), meth_QAbstractItemView_setAutoScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAutoScroll)},
    {SIP_MLNAME_CAST(sipName_setAutoScrollMargin), meth_QAbstractItemView_setAutoScrollMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setAutoScrollMargin)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QAbstractItemView_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setDefaultDropAction), meth_QAbstractItemView_setDefaultDropAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDefaultDropAction)},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), meth_QAbstractItemView_setDirtyRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDirtyRegion)},
    {SIP_MLNAME_CAST(sipName_setDragDropMode), meth_QAbstractItemView_setDragDropMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragDropMode)},
    {SIP_MLNAME_CAST(sipName_setDragDropOverwriteMode), meth_QAbstractItemView_setDragDropOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragDropOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QAbstractItemView_setDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDragEnabled)},
    {SIP_MLNAME_CAST(sipName_setDropIndicatorShown), meth_QAbstractItemView_setDropIndicatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setDropIndicatorShown)},
    {SIP_MLNAME_CAST(sipName_setEditTriggers), meth_QAbstractItemView_setEditTriggers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setEditTriggers)},
    {SIP_MLNAME_CAST(sipName_setHorizontalScrollMode), meth_QAbstractItemView_setHorizontalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setHorizontalScrollMode)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QAbstractItemView_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setIndexWidget), meth_QAbstractItemView_setIndexWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setIndexWidget)},
    {SIP_MLNAME_CAST(sipName_setItemDelegate), meth_QAbstractItemView_setItemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegate)},
    {SIP_MLNAME_CAST(sipName_setItemDelegateForColumn), meth_QAbstractItemView_setItemDelegateForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegateForColumn)},
    {SIP_MLNAME_CAST(sipName_setItemDelegateForRow), meth_QAbstractItemView_setItemDelegateForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setItemDelegateForRow)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QAbstractItemView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setModel)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QAbstractItemView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QAbstractItemView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionBehavior), meth_QAbstractItemView_setSelectionBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionBehavior)},
    {SIP_MLNAME_CAST(sipName_setSelectionMode), meth_QAbstractItemView_setSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionMode)},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QAbstractItemView_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setState), meth_QAbstractItemView_setState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setState)},
    {SIP_MLNAME_CAST(sipName_setTabKeyNavigation), meth_QAbstractItemView_setTabKeyNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setTabKeyNavigation)},
    {SIP_MLNAME_CAST(sipName_setTextElideMode), meth_QAbstractItemView_setTextElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setTextElideMode)},
    {SIP_MLNAME_CAST(sipName_setVerticalScrollMode), meth_QAbstractItemView_setVerticalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_setVerticalScrollMode)},
    {SIP_MLNAME_CAST(sipName_showDropIndicator), meth_QAbstractItemView_showDropIndicator, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_showDropIndicator)},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QAbstractItemView_sizeHintForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForColumn)},
    {SIP_MLNAME_CAST(sipName_sizeHintForIndex), meth_QAbstractItemView_sizeHintForIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForIndex)},
    {SIP_MLNAME_CAST(sipName_sizeHintForRow), meth_QAbstractItemView_sizeHintForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_sizeHintForRow)},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QAbstractItemView_startDrag, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_startDrag)},
    {SIP_MLNAME_CAST(sipName_state), meth_QAbstractItemView_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_state)},
    {SIP_MLNAME_CAST(sipName_tabKeyNavigation), meth_QAbstractItemView_tabKeyNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_tabKeyNavigation)},
    {SIP_MLNAME_CAST(sipName_textElideMode), meth_QAbstractItemView_textElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_textElideMode)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractItemView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_update), meth_QAbstractItemView_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_update)},
    {SIP_MLNAME_CAST(sipName_updateEditorData), meth_QAbstractItemView_updateEditorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateEditorData)},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), meth_QAbstractItemView_updateEditorGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateEditorGeometries)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QAbstractItemView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QAbstractItemView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollMode), meth_QAbstractItemView_verticalScrollMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollMode)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QAbstractItemView_verticalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), meth_QAbstractItemView_verticalScrollbarValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_verticalScrollbarValueChanged)},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QAbstractItemView_viewOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QAbstractItemView_viewportEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_viewportSizeHint), meth_QAbstractItemView_viewportSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_viewportSizeHint)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QAbstractItemView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QAbstractItemView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemView_visualRegionForSelection)}
};

static sipEnumMemberDef enummembers_QAbstractItemView[] = {
    {sipName_AboveItem, static_cast<int>(QAbstractItemView::AboveItem), 7},
    {sipName_AllEditTriggers, static_cast<int>(QAbstractItemView::AllEditTriggers), 8},
    {sipName_AnimatingState, static_cast<int>(QAbstractItemView::AnimatingState), 14},
    {sipName_AnyKeyPressed, static_cast<int>(QAbstractItemView::AnyKeyPressed), 8},
    {sipName_BelowItem, static_cast<int>(QAbstractItemView::BelowItem), 7},
    {sipName_CollapsingState, static_cast<int>(QAbstractItemView::CollapsingState), 14},
    {sipName_ContiguousSelection, static_cast<int>(QAbstractItemView::ContiguousSelection), 13},
    {sipName_CurrentChanged, static_cast<int>(QAbstractItemView::CurrentChanged), 8},
    {sipName_DoubleClicked, static_cast<int>(QAbstractItemView::DoubleClicked), 8},
    {sipName_DragDrop, static_cast<int>(QAbstractItemView::DragDrop), 6},
    {sipName_DragOnly, static_cast<int>(QAbstractItemView::DragOnly), 6},
    {sipName_DragSelectingState, static_cast<int>(QAbstractItemView::DragSelectingState), 14},
    {sipName_DraggingState, static_cast<int>(QAbstractItemView::DraggingState), 14},
    {sipName_DropOnly, static_cast<int>(QAbstractItemView::DropOnly), 6},
    {sipName_EditKeyPressed, static_cast<int>(QAbstractItemView::EditKeyPressed), 8},
    {sipName_EditingState, static_cast<int>(QAbstractItemView::EditingState), 14},
    {sipName_EnsureVisible, static_cast<int>(QAbstractItemView::EnsureVisible), 10},
    {sipName_ExpandingState, static_cast<int>(QAbstractItemView::ExpandingState), 14},
    {sipName_ExtendedSelection, static_cast<int>(QAbstractItemView::ExtendedSelection), 13},
    {sipName_InternalMove, static_cast<int>(QAbstractItemView::InternalMove), 6},
    {sipName_MoveDown, static_cast<int>(QAbstractItemView::MoveDown), 5},
    {sipName_MoveEnd, static_cast<int>(QAbstractItemView::MoveEnd), 5},
    {sipName_MoveHome, static_cast<int>(QAbstractItemView::MoveHome), 5},
    {sipName_MoveLeft, static_cast<int>(QAbstractItemView::MoveLeft), 5},
    {sipName_MoveNext, static_cast<int>(QAbstractItemView::MoveNext), 5},
    {sipName_MovePageDown, static_cast<int>(QAbstractItemView::MovePageDown), 5},
    {sipName_MovePageUp, static_cast<int>(QAbstractItemView::MovePageUp), 5},
    {sipName_MovePrevious, static_cast<int>(QAbstractItemView::MovePrevious), 5},
    {sipName_MoveRight, static_cast<int>(QAbstractItemView::MoveRight), 5},
    {sipName_MoveUp, static_cast<int>(QAbstractItemView::MoveUp), 5},
    {sipName_MultiSelection, static_cast<int>(QAbstractItemView::MultiSelection), 13},
    {sipName_NoDragDrop, static_cast<int>(QAbstractItemView::NoDragDrop), 6},
    {sipName_NoEditTriggers, static_cast<int>(QAbstractItemView::NoEditTriggers), 8},
    {sipName_NoSelection, static_cast<int>(QAbstractItemView::NoSelection), 13},
    {sipName_NoState, static_cast<int>(QAbstractItemView::NoState), 14},
    {sipName_OnItem, static_cast<int>(QAbstractItemView::OnItem), 7},
    {sipName_OnViewport, static_cast<int>(QAbstractItemView::OnViewport), 7},
    {sipName_PositionAtBottom, static_cast<int>(QAbstractItemView::PositionAtBottom), 10},
    {sipName_PositionAtCenter, static_cast<int>(QAbstractItemView::PositionAtCenter), 10},
    {sipName_PositionAtTop, static_cast<int>(QAbstractItemView::PositionAtTop), 10},
    {sipName_ScrollPerItem, static_cast<int>(QAbstractItemView::ScrollPerItem), 11},
    {sipName_ScrollPerPixel, static_cast<int>(QAbstractItemView::ScrollPerPixel), 11},
    {sipName_SelectColumns, static_cast<int>(QAbstractItemView::SelectColumns), 12},
    {sipName_SelectItems, static_cast<int>(QAbstractItemView::SelectItems), 12},
    {sipName_SelectRows, static_cast<int>(QAbstractItemView::SelectRows), 12},
    {sipName_SelectedClicked, static_cast<int>(QAbstractItemView::SelectedClicked), 8},
    {sipName_SingleSelection, static_cast<int>(QAbstractItemView::SingleSelection), 13},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractItemView[] = {
    {"iconSizeChanged(QSize)", "\1iconSizeChanged(self, QSize)", 0, 0},
    {"viewportEntered()", "\1viewportEntered(self)", 0, 0},
    {"entered(QModelIndex)", "\1entered(self, QModelIndex)", 0, 0},
    {"activated(QModelIndex)", "\1activated(self, QModelIndex)", 0, 0},
    {"doubleClicked(QModelIndex)", "\1doubleClicked(self, QModelIndex)", 0, 0},
    {"clicked(QModelIndex)", "\1clicked(self, QModelIndex)", 0, 0},
    {"pressed(QModelIndex)", "\1pressed(self, QModelIndex)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractItemView, "\1QAbstractItemView(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QAbstractItemView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemView,
        {0}
    },
    {
        sipNameNr_QAbstractItemView,
        {0, 0, 1},
        116, methods_QAbstractItemView,
        47, enummembers_QAbstractItemView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractItemView,
    -1,
    -1,
    supers_QAbstractItemView,
    0,
    init_type_QAbstractItemView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractItemView,
    0,
    0,
    0,
    release_QAbstractItemView,
    cast_QAbstractItemView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractItemView::staticMetaObject,
    0,
    signals_QAbstractItemView,
    0
};
