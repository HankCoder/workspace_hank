/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qapplication.sip"
#include <qapplication.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qdesktopwidget.sip"
#include <qdesktopwidget.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 28 "sip/QtGui/qsessionmanager.sip"
#include <qsessionmanager.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 30 "sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"


class sipQApplication : public QApplication
{
public:
    sipQApplication(int&,char**,int);
    virtual ~sipQApplication();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool notify(QObject*,QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQApplication(const sipQApplication &);
    sipQApplication &operator = (const sipQApplication &);

    char sipPyMethods[8];
};

sipQApplication::sipQApplication(int& a0,char**a1,int a2): QApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::~sipQApplication()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQApplication::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QApplication);

    return QApplication::metaObject();
}

int sipQApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QApplication,_c,_id,_a);

    return _id;
}

void *sipQApplication::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QApplication, _clname, &sipCpp) ? sipCpp : QApplication::qt_metacast(_clname));
}

void sipQApplication::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QApplication::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQApplication::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QApplication::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQApplication::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QApplication::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQApplication::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QApplication::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQApplication::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QApplication::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQApplication::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QApplication::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQApplication::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QApplication::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQApplication::notify(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_notify);

    if (!sipMeth)
        return QApplication::notify(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QApplication_style, "style() -> QStyle");

extern "C" {static PyObject *meth_QApplication_style(PyObject *, PyObject *);}
static PyObject *meth_QApplication_style(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStyle*sipRes;

            sipRes = QApplication::style();

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_style, doc_QApplication_style);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStyle, "setStyle(QStyle)\n"
    "setStyle(str) -> QStyle");

extern "C" {static PyObject *meth_QApplication_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStyle(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_QStyle, &a0))
        {
            QApplication::setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QStyle*sipRes;

            sipRes = QApplication::setStyle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStyle, doc_QApplication_setStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_colorSpec, "colorSpec() -> int");

extern "C" {static PyObject *meth_QApplication_colorSpec(PyObject *, PyObject *);}
static PyObject *meth_QApplication_colorSpec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = QApplication::colorSpec();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_colorSpec, doc_QApplication_colorSpec);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setColorSpec, "setColorSpec(int)");

extern "C" {static PyObject *meth_QApplication_setColorSpec(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setColorSpec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QApplication::setColorSpec(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setColorSpec, doc_QApplication_setColorSpec);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_palette, "palette() -> QPalette\n"
    "palette(QWidget) -> QPalette\n"
    "palette(str) -> QPalette");

extern "C" {static PyObject *meth_QApplication_palette(PyObject *, PyObject *);}
static PyObject *meth_QApplication_palette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QPalette*sipRes;

            sipRes = new QPalette(QApplication::palette());

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        const QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            QPalette*sipRes;

            sipRes = new QPalette(QApplication::palette(a0));

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
            QPalette*sipRes;

            sipRes = new QPalette(QApplication::palette(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_palette, doc_QApplication_palette);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setPalette, "setPalette(QPalette, className: str = None)");

extern "C" {static PyObject *meth_QApplication_setPalette(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_setPalette(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_className,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J9|AA", sipType_QPalette, &a0, &a1Keep, &a1))
        {
            QApplication::setPalette(*a0,a1);
            Py_XDECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setPalette, doc_QApplication_setPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_font, "font() -> QFont\n"
    "font(QWidget) -> QFont\n"
    "font(str) -> QFont");

extern "C" {static PyObject *meth_QApplication_font(PyObject *, PyObject *);}
static PyObject *meth_QApplication_font(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QFont*sipRes;

            sipRes = new QFont(QApplication::font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    {
        const QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            QFont*sipRes;

            sipRes = new QFont(QApplication::font(a0));

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
            QFont*sipRes;

            sipRes = new QFont(QApplication::font(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_font, doc_QApplication_font);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setFont, "setFont(QFont, className: str = None)");

extern "C" {static PyObject *meth_QApplication_setFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_setFont(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_className,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J9|AA", sipType_QFont, &a0, &a1Keep, &a1))
        {
            QApplication::setFont(*a0,a1);
            Py_XDECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setFont, doc_QApplication_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_fontMetrics, "fontMetrics() -> QFontMetrics");

extern "C" {static PyObject *meth_QApplication_fontMetrics(PyObject *, PyObject *);}
static PyObject *meth_QApplication_fontMetrics(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QFontMetrics*sipRes;

            sipRes = new QFontMetrics(QApplication::fontMetrics());

            return sipConvertFromNewType(sipRes,sipType_QFontMetrics,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_fontMetrics, doc_QApplication_fontMetrics);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setWindowIcon, "setWindowIcon(QIcon)");

extern "C" {static PyObject *meth_QApplication_setWindowIcon(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setWindowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QIcon, &a0))
        {
            QApplication::setWindowIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setWindowIcon, doc_QApplication_setWindowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_windowIcon, "windowIcon() -> QIcon");

extern "C" {static PyObject *meth_QApplication_windowIcon(PyObject *, PyObject *);}
static PyObject *meth_QApplication_windowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QIcon*sipRes;

            sipRes = new QIcon(QApplication::windowIcon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_windowIcon, doc_QApplication_windowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_allWidgets, "allWidgets() -> object");

extern "C" {static PyObject *meth_QApplication_allWidgets(PyObject *, PyObject *);}
static PyObject *meth_QApplication_allWidgets(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidgetList*sipRes;

            sipRes = new QWidgetList(QApplication::allWidgets());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_allWidgets, doc_QApplication_allWidgets);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_topLevelWidgets, "topLevelWidgets() -> object");

extern "C" {static PyObject *meth_QApplication_topLevelWidgets(PyObject *, PyObject *);}
static PyObject *meth_QApplication_topLevelWidgets(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidgetList*sipRes;

            sipRes = new QWidgetList(QApplication::topLevelWidgets());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_topLevelWidgets, doc_QApplication_topLevelWidgets);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_desktop, "desktop() -> QDesktopWidget");

extern "C" {static PyObject *meth_QApplication_desktop(PyObject *, PyObject *);}
static PyObject *meth_QApplication_desktop(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDesktopWidget*sipRes;

            sipRes = QApplication::desktop();

            return sipConvertFromType(sipRes,sipType_QDesktopWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_desktop, doc_QApplication_desktop);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_activePopupWidget, "activePopupWidget() -> QWidget");

extern "C" {static PyObject *meth_QApplication_activePopupWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activePopupWidget(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            sipRes = QApplication::activePopupWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_activePopupWidget, doc_QApplication_activePopupWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_activeModalWidget, "activeModalWidget() -> QWidget");

extern "C" {static PyObject *meth_QApplication_activeModalWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activeModalWidget(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            sipRes = QApplication::activeModalWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_activeModalWidget, doc_QApplication_activeModalWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_focusWidget, "focusWidget() -> QWidget");

extern "C" {static PyObject *meth_QApplication_focusWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_focusWidget(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            sipRes = QApplication::focusWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_focusWidget, doc_QApplication_focusWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_activeWindow, "activeWindow() -> QWidget");

extern "C" {static PyObject *meth_QApplication_activeWindow(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activeWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            sipRes = QApplication::activeWindow();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_activeWindow, doc_QApplication_activeWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setActiveWindow, "setActiveWindow(QWidget)");

extern "C" {static PyObject *meth_QApplication_setActiveWindow(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setActiveWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            QApplication::setActiveWindow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setActiveWindow, doc_QApplication_setActiveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_widgetAt, "widgetAt(QPoint) -> QWidget\n"
    "widgetAt(int, int) -> QWidget");

extern "C" {static PyObject *meth_QApplication_widgetAt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_widgetAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
            QWidget*sipRes;

            sipRes = QApplication::widgetAt(*a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            QWidget*sipRes;

            sipRes = QApplication::widgetAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_widgetAt, doc_QApplication_widgetAt);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_topLevelAt, "topLevelAt(QPoint) -> QWidget\n"
    "topLevelAt(int, int) -> QWidget");

extern "C" {static PyObject *meth_QApplication_topLevelAt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_topLevelAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
            QWidget*sipRes;

            sipRes = QApplication::topLevelAt(*a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            QWidget*sipRes;

            sipRes = QApplication::topLevelAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_topLevelAt, doc_QApplication_topLevelAt);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_beep, "beep()");

extern "C" {static PyObject *meth_QApplication_beep(PyObject *, PyObject *);}
static PyObject *meth_QApplication_beep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QApplication::beep();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_beep, doc_QApplication_beep);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_alert, "alert(QWidget, msecs: int = 0)");

extern "C" {static PyObject *meth_QApplication_alert(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_alert(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|i", sipType_QWidget, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::alert(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_alert, doc_QApplication_alert);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setCursorFlashTime, "setCursorFlashTime(int)");

extern "C" {static PyObject *meth_QApplication_setCursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setCursorFlashTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QApplication::setCursorFlashTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setCursorFlashTime, doc_QApplication_setCursorFlashTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_cursorFlashTime, "cursorFlashTime() -> int");

extern "C" {static PyObject *meth_QApplication_cursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_cursorFlashTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = QApplication::cursorFlashTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_cursorFlashTime, doc_QApplication_cursorFlashTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setDoubleClickInterval, "setDoubleClickInterval(int)");

extern "C" {static PyObject *meth_QApplication_setDoubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setDoubleClickInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QApplication::setDoubleClickInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setDoubleClickInterval, doc_QApplication_setDoubleClickInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_doubleClickInterval, "doubleClickInterval() -> int");

extern "C" {static PyObject *meth_QApplication_doubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_doubleClickInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = QApplication::doubleClickInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_doubleClickInterval, doc_QApplication_doubleClickInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setKeyboardInputInterval, "setKeyboardInputInterval(int)");

extern "C" {static PyObject *meth_QApplication_setKeyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setKeyboardInputInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QApplication::setKeyboardInputInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setKeyboardInputInterval, doc_QApplication_setKeyboardInputInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_keyboardInputInterval, "keyboardInputInterval() -> int");

extern "C" {static PyObject *meth_QApplication_keyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardInputInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = QApplication::keyboardInputInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_keyboardInputInterval, doc_QApplication_keyboardInputInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setWheelScrollLines, "setWheelScrollLines(int)");

extern "C" {static PyObject *meth_QApplication_setWheelScrollLines(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setWheelScrollLines(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QApplication::setWheelScrollLines(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setWheelScrollLines, doc_QApplication_setWheelScrollLines);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_wheelScrollLines, "wheelScrollLines() -> int");

extern "C" {static PyObject *meth_QApplication_wheelScrollLines(PyObject *, PyObject *);}
static PyObject *meth_QApplication_wheelScrollLines(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = QApplication::wheelScrollLines();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_wheelScrollLines, doc_QApplication_wheelScrollLines);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setGlobalStrut, "setGlobalStrut(QSize)");

extern "C" {static PyObject *meth_QApplication_setGlobalStrut(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setGlobalStrut(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSize, &a0))
        {
            QApplication::setGlobalStrut(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setGlobalStrut, doc_QApplication_setGlobalStrut);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_globalStrut, "globalStrut() -> QSize");

extern "C" {static PyObject *meth_QApplication_globalStrut(PyObject *, PyObject *);}
static PyObject *meth_QApplication_globalStrut(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QSize*sipRes;

            sipRes = new QSize(QApplication::globalStrut());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_globalStrut, doc_QApplication_globalStrut);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStartDragTime, "setStartDragTime(int)");

extern "C" {static PyObject *meth_QApplication_setStartDragTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStartDragTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QApplication::setStartDragTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStartDragTime, doc_QApplication_setStartDragTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_startDragTime, "startDragTime() -> int");

extern "C" {static PyObject *meth_QApplication_startDragTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_startDragTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = QApplication::startDragTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_startDragTime, doc_QApplication_startDragTime);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStartDragDistance, "setStartDragDistance(int)");

extern "C" {static PyObject *meth_QApplication_setStartDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStartDragDistance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QApplication::setStartDragDistance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStartDragDistance, doc_QApplication_setStartDragDistance);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_startDragDistance, "startDragDistance() -> int");

extern "C" {static PyObject *meth_QApplication_startDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QApplication_startDragDistance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = QApplication::startDragDistance();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_startDragDistance, doc_QApplication_startDragDistance);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_isEffectEnabled, "isEffectEnabled(Qt.UIEffect) -> bool");

extern "C" {static PyObject *meth_QApplication_isEffectEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isEffectEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::UIEffect a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_UIEffect, &a0))
        {
            bool sipRes;

            sipRes = QApplication::isEffectEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_isEffectEnabled, doc_QApplication_isEffectEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setEffectEnabled, "setEffectEnabled(Qt.UIEffect, enabled: bool = True)");

extern "C" {static PyObject *meth_QApplication_setEffectEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QApplication_setEffectEnabled(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::UIEffect a0;
        bool a1 = 1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "E|b", sipType_Qt_UIEffect, &a0, &a1))
        {
            QApplication::setEffectEnabled(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setEffectEnabled, doc_QApplication_setEffectEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_exec_, "exec_() -> int");

extern "C" {static PyObject *meth_QApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_exec_, doc_QApplication_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_exec, "exec() -> int");

extern "C" {static PyObject *meth_QApplication_exec(PyObject *, PyObject *);}
static PyObject *meth_QApplication_exec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_exec, doc_QApplication_exec);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_notify, "notify(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_notify, doc_QApplication_notify);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_autoSipEnabled, "autoSipEnabled(self) -> bool");

extern "C" {static PyObject *meth_QApplication_autoSipEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_autoSipEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoSipEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_autoSipEnabled, doc_QApplication_autoSipEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_styleSheet, "styleSheet(self) -> str");

extern "C" {static PyObject *meth_QApplication_styleSheet(PyObject *, PyObject *);}
static PyObject *meth_QApplication_styleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QApplication, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->styleSheet());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_styleSheet, doc_QApplication_styleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_aboutQt, "aboutQt()");

extern "C" {static PyObject *meth_QApplication_aboutQt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_aboutQt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QApplication::aboutQt();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_aboutQt, doc_QApplication_aboutQt);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_closeAllWindows, "closeAllWindows()");

extern "C" {static PyObject *meth_QApplication_closeAllWindows(PyObject *, PyObject *);}
static PyObject *meth_QApplication_closeAllWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QApplication::closeAllWindows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_closeAllWindows, doc_QApplication_closeAllWindows);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setAutoSipEnabled, "setAutoSipEnabled(self, bool)");

extern "C" {static PyObject *meth_QApplication_setAutoSipEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setAutoSipEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QApplication, &sipCpp, &a0))
        {
            sipCpp->setAutoSipEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setAutoSipEnabled, doc_QApplication_setAutoSipEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_setStyleSheet, "setStyleSheet(self, str)");

extern "C" {static PyObject *meth_QApplication_setStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QApplication, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStyleSheet(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_setStyleSheet, doc_QApplication_setStyleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QApplication_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QApplication::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QApplication, sipName_event, doc_QApplication_event);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QApplication(void *, int);}
static void release_QApplication(void *sipCppV,int)
{
    QApplication *sipCpp = reinterpret_cast<QApplication *>(sipCppV);

#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qapplication.sip"
        // Make sure all top level widgets are not owned by Python and so won't be
        // destroyed by the garbage collector after QApplication is destroyed.  Note
        // that it could still mean that widgets outlive the QApplication (which is
        // probably not good).  However experimentation shows that deleting top level
        // widgets in the wrong order can cause crashes (so we don't try and do that).
        QWidgetList tlw = QApplication::topLevelWidgets();
        
        for (int i = 0; i < tlw.count(); ++i)
        {
            PyObject *sw = sipGetPyObject(tlw.at(i), sipType_QWidget);
        
            if (sw)
                sipTransferTo(sw, 0);
        }
#line 1850 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QApplication(sipSimpleWrapper *);}
static void dealloc_QApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQApplication *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QApplication(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQApplication *sipCpp = 0;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 206 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtWidgets/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_qtwidgets_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(nargc, argv, QCoreApplication::ApplicationFlags);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_qtwidgets_update_argv_list(a0, argc, argv);
        }
#line 1910 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtWidgets/sipQtWidgetsQApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QApplication[] = {{53, 1, 1}};


static PyMethodDef methods_QApplication[] = {
    {SIP_MLNAME_CAST(sipName_aboutQt), meth_QApplication_aboutQt, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_aboutQt)},
    {SIP_MLNAME_CAST(sipName_activeModalWidget), meth_QApplication_activeModalWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_activeModalWidget)},
    {SIP_MLNAME_CAST(sipName_activePopupWidget), meth_QApplication_activePopupWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_activePopupWidget)},
    {SIP_MLNAME_CAST(sipName_activeWindow), meth_QApplication_activeWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_activeWindow)},
    {SIP_MLNAME_CAST(sipName_alert), (PyCFunction)meth_QApplication_alert, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_alert)},
    {SIP_MLNAME_CAST(sipName_allWidgets), meth_QApplication_allWidgets, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_allWidgets)},
    {SIP_MLNAME_CAST(sipName_autoSipEnabled), meth_QApplication_autoSipEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_autoSipEnabled)},
    {SIP_MLNAME_CAST(sipName_beep), meth_QApplication_beep, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_beep)},
    {SIP_MLNAME_CAST(sipName_closeAllWindows), meth_QApplication_closeAllWindows, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_closeAllWindows)},
    {SIP_MLNAME_CAST(sipName_colorSpec), meth_QApplication_colorSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_colorSpec)},
    {SIP_MLNAME_CAST(sipName_cursorFlashTime), meth_QApplication_cursorFlashTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_cursorFlashTime)},
    {SIP_MLNAME_CAST(sipName_desktop), meth_QApplication_desktop, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_desktop)},
    {SIP_MLNAME_CAST(sipName_doubleClickInterval), meth_QApplication_doubleClickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_doubleClickInterval)},
    {SIP_MLNAME_CAST(sipName_event), meth_QApplication_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_event)},
    {SIP_MLNAME_CAST(sipName_exec), meth_QApplication_exec, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QApplication_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_exec_)},
    {SIP_MLNAME_CAST(sipName_focusWidget), meth_QApplication_focusWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_focusWidget)},
    {SIP_MLNAME_CAST(sipName_font), meth_QApplication_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_font)},
    {SIP_MLNAME_CAST(sipName_fontMetrics), meth_QApplication_fontMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_fontMetrics)},
    {SIP_MLNAME_CAST(sipName_globalStrut), meth_QApplication_globalStrut, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_globalStrut)},
    {SIP_MLNAME_CAST(sipName_isEffectEnabled), meth_QApplication_isEffectEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_isEffectEnabled)},
    {SIP_MLNAME_CAST(sipName_keyboardInputInterval), meth_QApplication_keyboardInputInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_keyboardInputInterval)},
    {SIP_MLNAME_CAST(sipName_notify), meth_QApplication_notify, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_notify)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QApplication_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_palette)},
    {SIP_MLNAME_CAST(sipName_setActiveWindow), meth_QApplication_setActiveWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setActiveWindow)},
    {SIP_MLNAME_CAST(sipName_setAutoSipEnabled), meth_QApplication_setAutoSipEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setAutoSipEnabled)},
    {SIP_MLNAME_CAST(sipName_setColorSpec), meth_QApplication_setColorSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setColorSpec)},
    {SIP_MLNAME_CAST(sipName_setCursorFlashTime), meth_QApplication_setCursorFlashTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setCursorFlashTime)},
    {SIP_MLNAME_CAST(sipName_setDoubleClickInterval), meth_QApplication_setDoubleClickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setDoubleClickInterval)},
    {SIP_MLNAME_CAST(sipName_setEffectEnabled), (PyCFunction)meth_QApplication_setEffectEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_setEffectEnabled)},
    {SIP_MLNAME_CAST(sipName_setFont), (PyCFunction)meth_QApplication_setFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_setFont)},
    {SIP_MLNAME_CAST(sipName_setGlobalStrut), meth_QApplication_setGlobalStrut, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setGlobalStrut)},
    {SIP_MLNAME_CAST(sipName_setKeyboardInputInterval), meth_QApplication_setKeyboardInputInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setKeyboardInputInterval)},
    {SIP_MLNAME_CAST(sipName_setPalette), (PyCFunction)meth_QApplication_setPalette, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QApplication_setPalette)},
    {SIP_MLNAME_CAST(sipName_setStartDragDistance), meth_QApplication_setStartDragDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStartDragDistance)},
    {SIP_MLNAME_CAST(sipName_setStartDragTime), meth_QApplication_setStartDragTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStartDragTime)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QApplication_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStyle)},
    {SIP_MLNAME_CAST(sipName_setStyleSheet), meth_QApplication_setStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setStyleSheet)},
    {SIP_MLNAME_CAST(sipName_setWheelScrollLines), meth_QApplication_setWheelScrollLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setWheelScrollLines)},
    {SIP_MLNAME_CAST(sipName_setWindowIcon), meth_QApplication_setWindowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_setWindowIcon)},
    {SIP_MLNAME_CAST(sipName_startDragDistance), meth_QApplication_startDragDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_startDragDistance)},
    {SIP_MLNAME_CAST(sipName_startDragTime), meth_QApplication_startDragTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_startDragTime)},
    {SIP_MLNAME_CAST(sipName_style), meth_QApplication_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_style)},
    {SIP_MLNAME_CAST(sipName_styleSheet), meth_QApplication_styleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_styleSheet)},
    {SIP_MLNAME_CAST(sipName_topLevelAt), meth_QApplication_topLevelAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_topLevelAt)},
    {SIP_MLNAME_CAST(sipName_topLevelWidgets), meth_QApplication_topLevelWidgets, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_topLevelWidgets)},
    {SIP_MLNAME_CAST(sipName_wheelScrollLines), meth_QApplication_wheelScrollLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_wheelScrollLines)},
    {SIP_MLNAME_CAST(sipName_widgetAt), meth_QApplication_widgetAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_widgetAt)},
    {SIP_MLNAME_CAST(sipName_windowIcon), meth_QApplication_windowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QApplication_windowIcon)}
};

static sipEnumMemberDef enummembers_QApplication[] = {
    {sipName_CustomColor, static_cast<int>(QApplication::CustomColor), 31},
    {sipName_ManyColor, static_cast<int>(QApplication::ManyColor), 31},
    {sipName_NormalColor, static_cast<int>(QApplication::NormalColor), 31},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QApplication[] = {
    {"focusChanged(QWidget*,QWidget*)", "\1focusChanged(self, QWidget, QWidget)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QApplication, "\1QApplication(List[str])");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QApplication = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QApplication,
        {0}
    },
    {
        sipNameNr_QApplication,
        {0, 0, 1},
        49, methods_QApplication,
        3, enummembers_QApplication,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QApplication,
    -1,
    -1,
    supers_QApplication,
    0,
    init_type_QApplication,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QApplication,
    0,
    0,
    0,
    release_QApplication,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QApplication::staticMetaObject,
    0,
    signals_QApplication,
    0
};
