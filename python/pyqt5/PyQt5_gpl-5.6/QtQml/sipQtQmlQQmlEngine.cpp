/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 59 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlnetworkaccessmanagerfactory.sip"
#include <qqmlnetworkaccessmanagerfactory.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"


class sipQQmlEngine : public QQmlEngine
{
public:
    sipQQmlEngine(QObject*);
    virtual ~sipQQmlEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlEngine(const sipQQmlEngine &);
    sipQQmlEngine &operator = (const sipQQmlEngine &);

    char sipPyMethods[7];
};

sipQQmlEngine::sipQQmlEngine(QObject*a0): QQmlEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlEngine::~sipQQmlEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQmlEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlEngine);

    return QQmlEngine::metaObject();
}

int sipQQmlEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQmlEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlEngine,_c,_id,_a);

    return _id;
}

void *sipQQmlEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlEngine, _clname, &sipCpp) ? sipCpp : QQmlEngine::qt_metacast(_clname));
}

void sipQQmlEngine::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQmlEngine::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQml_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQmlEngine::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQml_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQmlEngine::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQml_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQmlEngine::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQml_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQmlEngine::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQml_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQmlEngine::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQmlEngine::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQml_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQmlEngine::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQmlEngine::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQml_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlEngine_rootContext, "rootContext(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQmlEngine_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QQmlContext*sipRes;

            sipRes = sipCpp->rootContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_rootContext, doc_QQmlEngine_rootContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_clearComponentCache, "clearComponentCache(self)");

extern "C" {static PyObject *meth_QQmlEngine_clearComponentCache(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_clearComponentCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            sipCpp->clearComponentCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_clearComponentCache, doc_QQmlEngine_clearComponentCache);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_trimComponentCache, "trimComponentCache(self)");

extern "C" {static PyObject *meth_QQmlEngine_trimComponentCache(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_trimComponentCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            sipCpp->trimComponentCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_trimComponentCache, doc_QQmlEngine_trimComponentCache);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_importPathList, "importPathList(self) -> List[str]");

extern "C" {static PyObject *meth_QQmlEngine_importPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_importPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->importPathList());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_importPathList, doc_QQmlEngine_importPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setImportPathList, "setImportPathList(self, Iterable[str])");

extern "C" {static PyObject *meth_QQmlEngine_setImportPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setImportPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setImportPathList(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setImportPathList, doc_QQmlEngine_setImportPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_addImportPath, "addImportPath(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_addImportPath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addImportPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addImportPath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addImportPath, doc_QQmlEngine_addImportPath);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_pluginPathList, "pluginPathList(self) -> List[str]");

extern "C" {static PyObject *meth_QQmlEngine_pluginPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_pluginPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->pluginPathList());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_pluginPathList, doc_QQmlEngine_pluginPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setPluginPathList, "setPluginPathList(self, Iterable[str])");

extern "C" {static PyObject *meth_QQmlEngine_setPluginPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setPluginPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setPluginPathList(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setPluginPathList, doc_QQmlEngine_setPluginPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_addPluginPath, "addPluginPath(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_addPluginPath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addPluginPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addPluginPath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addPluginPath, doc_QQmlEngine_addPluginPath);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_addNamedBundle, "addNamedBundle(self, str, str) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_addNamedBundle(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addNamedBundle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addNamedBundle(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addNamedBundle, doc_QQmlEngine_addNamedBundle);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_importPlugin, "importPlugin(self, str, str, object) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_importPlugin(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_importPlugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QList<QQmlError>* a2;
        PyObject *a2Wrapper;
        int a2State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1@J0", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2Wrapper, sipType_QList_0100QQmlError,&a2, &a2State))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 77 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlengine.sip"
        int orig_size = (a2 ? a2->size() : 0);
        
        sipRes = sipCpp->importPlugin(*a0, *a1, a2);
        
        if (a2)
        {
            for (int i = a2->size(); i > orig_size; --i)
            {
                QQmlError *new_error = new QQmlError(a2->at(i - orig_size - 1));
                PyObject *new_error_obj = sipConvertFromNewType(new_error, sipType_QQmlError, 0);
                
                if (!new_error_obj)
                {
                    delete new_error;
                    sipError = sipErrorFail;
                    break;
                }
                
                if (PyList_Insert(a2Wrapper, 0, new_error_obj) < 0)
                {
                    Py_DECREF(new_error_obj);
                    sipError = sipErrorFail;
                    break;
                }
                
                Py_DECREF(new_error_obj);
            }
        }
#line 647 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QList_0100QQmlError,a2State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_importPlugin, doc_QQmlEngine_importPlugin);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setNetworkAccessManagerFactory, "setNetworkAccessManagerFactory(self, QQmlNetworkAccessManagerFactory)");

extern "C" {static PyObject *meth_QQmlEngine_setNetworkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setNetworkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQmlNetworkAccessManagerFactory* a0;
        PyObject *a0Keep;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QQmlEngine, &sipCpp, &a0Keep, sipType_QQmlNetworkAccessManagerFactory, &a0))
        {
            sipCpp->setNetworkAccessManagerFactory(a0);

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setNetworkAccessManagerFactory, doc_QQmlEngine_setNetworkAccessManagerFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_networkAccessManagerFactory, "networkAccessManagerFactory(self) -> QQmlNetworkAccessManagerFactory");

extern "C" {static PyObject *meth_QQmlEngine_networkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_networkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QQmlNetworkAccessManagerFactory*sipRes;

            sipRes = sipCpp->networkAccessManagerFactory();

            return sipConvertFromType(sipRes,sipType_QQmlNetworkAccessManagerFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_networkAccessManagerFactory, doc_QQmlEngine_networkAccessManagerFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_networkAccessManager, "networkAccessManager(self) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QQmlEngine_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QNetworkAccessManager*sipRes;

            sipRes = sipCpp->networkAccessManager();

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_networkAccessManager, doc_QQmlEngine_networkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_addImageProvider, "addImageProvider(self, str, QQmlImageProviderBase)");

extern "C" {static PyObject *meth_QQmlEngine_addImageProvider(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addImageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QQmlImageProviderBase* a1;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QQmlImageProviderBase, &a1))
        {
            sipCpp->addImageProvider(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addImageProvider, doc_QQmlEngine_addImageProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_imageProvider, "imageProvider(self, str) -> QQmlImageProviderBase");

extern "C" {static PyObject *meth_QQmlEngine_imageProvider(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_imageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QQmlImageProviderBase*sipRes;

            sipRes = sipCpp->imageProvider(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QQmlImageProviderBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_imageProvider, doc_QQmlEngine_imageProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_removeImageProvider, "removeImageProvider(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_removeImageProvider(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_removeImageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeImageProvider(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_removeImageProvider, doc_QQmlEngine_removeImageProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setIncubationController, "setIncubationController(self, QQmlIncubationController)");

extern "C" {static PyObject *meth_QQmlEngine_setIncubationController(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setIncubationController(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQmlIncubationController* a0;
        PyObject *a0Keep;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QQmlEngine, &sipCpp, &a0Keep, sipType_QQmlIncubationController, &a0))
        {
            sipCpp->setIncubationController(a0);

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setIncubationController, doc_QQmlEngine_setIncubationController);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_incubationController, "incubationController(self) -> QQmlIncubationController");

extern "C" {static PyObject *meth_QQmlEngine_incubationController(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_incubationController(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QQmlIncubationController*sipRes;

            sipRes = sipCpp->incubationController();

            return sipConvertFromType(sipRes,sipType_QQmlIncubationController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_incubationController, doc_QQmlEngine_incubationController);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setOfflineStoragePath, "setOfflineStoragePath(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_setOfflineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setOfflineStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setOfflineStoragePath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setOfflineStoragePath, doc_QQmlEngine_setOfflineStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_offlineStoragePath, "offlineStoragePath(self) -> str");

extern "C" {static PyObject *meth_QQmlEngine_offlineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_offlineStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->offlineStoragePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_offlineStoragePath, doc_QQmlEngine_offlineStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_baseUrl, "baseUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QQmlEngine_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->baseUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_baseUrl, doc_QQmlEngine_baseUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setBaseUrl, "setBaseUrl(self, QUrl)");

extern "C" {static PyObject *meth_QQmlEngine_setBaseUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setBaseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setBaseUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setBaseUrl, doc_QQmlEngine_setBaseUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_outputWarningsToStandardError, "outputWarningsToStandardError(self) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_outputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_outputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->outputWarningsToStandardError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_outputWarningsToStandardError, doc_QQmlEngine_outputWarningsToStandardError);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setOutputWarningsToStandardError, "setOutputWarningsToStandardError(self, bool)");

extern "C" {static PyObject *meth_QQmlEngine_setOutputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setOutputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQmlEngine, &sipCpp, &a0))
        {
            sipCpp->setOutputWarningsToStandardError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setOutputWarningsToStandardError, doc_QQmlEngine_setOutputWarningsToStandardError);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_contextForObject, "contextForObject(QObject) -> QQmlContext");

extern "C" {static PyObject *meth_QQmlEngine_contextForObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_contextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QQmlContext*sipRes;

            sipRes = QQmlEngine::contextForObject(a0);

            return sipConvertFromType(sipRes,sipType_QQmlContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_contextForObject, doc_QQmlEngine_contextForObject);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setContextForObject, "setContextForObject(QObject, QQmlContext)");

extern "C" {static PyObject *meth_QQmlEngine_setContextForObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setContextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        QQmlContext* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QQmlContext, &a1))
        {
            QQmlEngine::setContextForObject(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setContextForObject, doc_QQmlEngine_setContextForObject);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_setObjectOwnership, "setObjectOwnership(QObject, QQmlEngine.ObjectOwnership)");

extern "C" {static PyObject *meth_QQmlEngine_setObjectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setObjectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        PyObject *a0Wrapper;
        QQmlEngine::ObjectOwnership a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "@J8E", &a0Wrapper, sipType_QObject, &a0, sipType_QQmlEngine_ObjectOwnership, &a1))
        {
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/sip/QtQml/qqmlengine.sip"
        QQmlEngine::ObjectOwnership old = QQmlEngine::objectOwnership(a0);
        
        QQmlEngine::setObjectOwnership(a0, a1);
        
        if (old != a1 && !a0->parent())
        {
            if (old == QQmlEngine::CppOwnership)
                sipTransferTo(a0Wrapper, Py_None);
            else
                sipTransferBack(a0Wrapper);
        }
#line 1162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.6/QtQml/sipQtQmlQQmlEngine.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setObjectOwnership, doc_QQmlEngine_setObjectOwnership);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_objectOwnership, "objectOwnership(QObject) -> QQmlEngine.ObjectOwnership");

extern "C" {static PyObject *meth_QQmlEngine_objectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_objectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QQmlEngine::ObjectOwnership sipRes;

            sipRes = QQmlEngine::objectOwnership(a0);

            return sipConvertFromEnum(sipRes,sipType_QQmlEngine_ObjectOwnership);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_objectOwnership, doc_QQmlEngine_objectOwnership);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlEngine_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_event(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQmlEngine::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_event, doc_QQmlEngine_event);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlEngine(void *, int);}
static void release_QQmlEngine(void *sipCppV,int)
{
    QQmlEngine *sipCpp = reinterpret_cast<QQmlEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlEngine(sipSimpleWrapper *);}
static void dealloc_QQmlEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQmlEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQmlEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQmlEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlEngine *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQmlEngine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlEngine[] = {{0, 255, 1}};


static PyMethodDef methods_QQmlEngine[] = {
    {SIP_MLNAME_CAST(sipName_addImageProvider), meth_QQmlEngine_addImageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addImageProvider)},
    {SIP_MLNAME_CAST(sipName_addImportPath), meth_QQmlEngine_addImportPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addImportPath)},
    {SIP_MLNAME_CAST(sipName_addNamedBundle), meth_QQmlEngine_addNamedBundle, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addNamedBundle)},
    {SIP_MLNAME_CAST(sipName_addPluginPath), meth_QQmlEngine_addPluginPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addPluginPath)},
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QQmlEngine_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_baseUrl)},
    {SIP_MLNAME_CAST(sipName_clearComponentCache), meth_QQmlEngine_clearComponentCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_clearComponentCache)},
    {SIP_MLNAME_CAST(sipName_contextForObject), meth_QQmlEngine_contextForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_contextForObject)},
    {SIP_MLNAME_CAST(sipName_event), meth_QQmlEngine_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_event)},
    {SIP_MLNAME_CAST(sipName_imageProvider), meth_QQmlEngine_imageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_imageProvider)},
    {SIP_MLNAME_CAST(sipName_importPathList), meth_QQmlEngine_importPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_importPathList)},
    {SIP_MLNAME_CAST(sipName_importPlugin), meth_QQmlEngine_importPlugin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_importPlugin)},
    {SIP_MLNAME_CAST(sipName_incubationController), meth_QQmlEngine_incubationController, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_incubationController)},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QQmlEngine_networkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_networkAccessManager)},
    {SIP_MLNAME_CAST(sipName_networkAccessManagerFactory), meth_QQmlEngine_networkAccessManagerFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_networkAccessManagerFactory)},
    {SIP_MLNAME_CAST(sipName_objectOwnership), meth_QQmlEngine_objectOwnership, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_objectOwnership)},
    {SIP_MLNAME_CAST(sipName_offlineStoragePath), meth_QQmlEngine_offlineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_offlineStoragePath)},
    {SIP_MLNAME_CAST(sipName_outputWarningsToStandardError), meth_QQmlEngine_outputWarningsToStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_outputWarningsToStandardError)},
    {SIP_MLNAME_CAST(sipName_pluginPathList), meth_QQmlEngine_pluginPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_pluginPathList)},
    {SIP_MLNAME_CAST(sipName_removeImageProvider), meth_QQmlEngine_removeImageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_removeImageProvider)},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QQmlEngine_rootContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_rootContext)},
    {SIP_MLNAME_CAST(sipName_setBaseUrl), meth_QQmlEngine_setBaseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setBaseUrl)},
    {SIP_MLNAME_CAST(sipName_setContextForObject), meth_QQmlEngine_setContextForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setContextForObject)},
    {SIP_MLNAME_CAST(sipName_setImportPathList), meth_QQmlEngine_setImportPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setImportPathList)},
    {SIP_MLNAME_CAST(sipName_setIncubationController), meth_QQmlEngine_setIncubationController, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setIncubationController)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManagerFactory), meth_QQmlEngine_setNetworkAccessManagerFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setNetworkAccessManagerFactory)},
    {SIP_MLNAME_CAST(sipName_setObjectOwnership), meth_QQmlEngine_setObjectOwnership, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setObjectOwnership)},
    {SIP_MLNAME_CAST(sipName_setOfflineStoragePath), meth_QQmlEngine_setOfflineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setOfflineStoragePath)},
    {SIP_MLNAME_CAST(sipName_setOutputWarningsToStandardError), meth_QQmlEngine_setOutputWarningsToStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setOutputWarningsToStandardError)},
    {SIP_MLNAME_CAST(sipName_setPluginPathList), meth_QQmlEngine_setPluginPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setPluginPathList)},
    {SIP_MLNAME_CAST(sipName_trimComponentCache), meth_QQmlEngine_trimComponentCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_trimComponentCache)}
};

static sipEnumMemberDef enummembers_QQmlEngine[] = {
    {sipName_CppOwnership, static_cast<int>(QQmlEngine::CppOwnership), 17},
    {sipName_JavaScriptOwnership, static_cast<int>(QQmlEngine::JavaScriptOwnership), 17},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQmlEngine[] = {
    {"warnings(QList<QQmlError>)", "\1warnings(self, Iterable[QQmlError])", 0, 0},
    {"quit()", "\1quit(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQmlEngine, "\1QQmlEngine(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtQml_QQmlEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQmlEngine,
        {0}
    },
    {
        sipNameNr_QQmlEngine,
        {0, 0, 1},
        30, methods_QQmlEngine,
        2, enummembers_QQmlEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQmlEngine,
    -1,
    -1,
    supers_QQmlEngine,
    0,
    init_type_QQmlEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQmlEngine,
    0,
    0,
    0,
    release_QQmlEngine,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQmlEngine::staticMetaObject,
    0,
    signals_QQmlEngine,
    0
};
