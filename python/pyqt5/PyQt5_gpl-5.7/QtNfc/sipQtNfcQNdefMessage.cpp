/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNfc.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNfc/qndefmessage.sip"
#include <qndefmessage.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNfc/qndefrecord.sip"
#include <qndefrecord.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"


PyDoc_STRVAR(doc_QNdefMessage_toByteArray, "toByteArray(self) -> QByteArray");

extern "C" {static PyObject *meth_QNdefMessage_toByteArray(PyObject *, PyObject *);}
static PyObject *meth_QNdefMessage_toByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNdefMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNdefMessage, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->toByteArray());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefMessage, sipName_toByteArray, doc_QNdefMessage_toByteArray);

    return NULL;
}


PyDoc_STRVAR(doc_QNdefMessage_fromByteArray, "fromByteArray(Union[QByteArray, bytes, bytearray]) -> QNdefMessage");

extern "C" {static PyObject *meth_QNdefMessage_fromByteArray(PyObject *, PyObject *);}
static PyObject *meth_QNdefMessage_fromByteArray(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QNdefMessage*sipRes;

            sipRes = new QNdefMessage(QNdefMessage::fromByteArray(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNdefMessage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefMessage, sipName_fromByteArray, doc_QNdefMessage_fromByteArray);

    return NULL;
}


extern "C" {static PyObject *slot_QNdefMessage___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNdefMessage___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QNdefMessage *sipCpp = reinterpret_cast<QNdefMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNdefMessage));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QNdefMessage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNdefMessage, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->QNdefMessage::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNfc,ne_slot,sipType_QNdefMessage,sipSelf,sipArg);
}


extern "C" {static int slot_QNdefMessage___delitem__(PyObject *,PyObject *);}
static int slot_QNdefMessage___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QNdefMessage *sipCpp = reinterpret_cast<QNdefMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNdefMessage));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 65 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNfc/qndefmessage.sip"
        int len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            sipCpp->removeAt(a0);
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefMessage, sipName___delitem__, NULL);

    return -1;
}


extern "C" {static int slot_QNdefMessage___setitem__(PyObject *,PyObject *);}
static int slot_QNdefMessage___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    QNdefMessage *sipCpp = reinterpret_cast<QNdefMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNdefMessage));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QNdefRecord* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QNdefRecord, &a1))
        {
            int sipIsErr = 0;

#line 55 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNfc/qndefmessage.sip"
        int len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            (*sipCpp)[a0] = *a1;
#line 197 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefMessage, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QNdefMessage___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QNdefMessage___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QNdefMessage *sipCpp = reinterpret_cast<QNdefMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNdefMessage));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            QNdefRecord*sipRes = 0;
            int sipIsErr = 0;

#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNfc/qndefmessage.sip"
        Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QNdefRecord(sipCpp->at((int)idx));
#line 238 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QNdefRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNdefMessage, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static SIP_SSIZE_T slot_QNdefMessage___len__(PyObject *);}
static SIP_SSIZE_T slot_QNdefMessage___len__(PyObject *sipSelf)
{
    QNdefMessage *sipCpp = reinterpret_cast<QNdefMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNdefMessage));

    if (!sipCpp)
        return 0;


    {
        {
            int sipRes = 0;

#line 40 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNfc/qndefmessage.sip"
        sipRes = sipCpp->count();
#line 269 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNfc/sipQtNfcQNdefMessage.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNdefMessage___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNdefMessage___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QNdefMessage *sipCpp = reinterpret_cast<QNdefMessage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNdefMessage));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QNdefMessage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNdefMessage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QNdefMessage::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNfc,eq_slot,sipType_QNdefMessage,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNdefMessage(void *, int);}
static void release_QNdefMessage(void *sipCppV,int)
{
    delete reinterpret_cast<QNdefMessage *>(sipCppV);
}


extern "C" {static void assign_QNdefMessage(void *, SIP_SSIZE_T, const void *);}
static void assign_QNdefMessage(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QNdefMessage *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QNdefMessage *>(sipSrc);
}


extern "C" {static void *array_QNdefMessage(SIP_SSIZE_T);}
static void *array_QNdefMessage(SIP_SSIZE_T sipNrElem)
{
    return new QNdefMessage[sipNrElem];
}


extern "C" {static void *copy_QNdefMessage(const void *, SIP_SSIZE_T);}
static void *copy_QNdefMessage(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QNdefMessage(reinterpret_cast<const QNdefMessage *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNdefMessage(sipSimpleWrapper *);}
static void dealloc_QNdefMessage(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QNdefMessage(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QNdefMessage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNdefMessage(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QNdefMessage *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QNdefMessage();

            return sipCpp;
        }
    }

    {
        const QNdefRecord* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QNdefRecord, &a0))
        {
            sipCpp = new QNdefMessage(*a0);

            return sipCpp;
        }
    }

    {
        const QNdefMessage* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QNdefMessage, &a0))
        {
            sipCpp = new QNdefMessage(*a0);

            return sipCpp;
        }
    }

    {
        const QList<QNdefRecord>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QList_0100QNdefRecord,&a0, &a0State))
        {
            sipCpp = new QNdefMessage(*a0);
            sipReleaseType(const_cast<QList<QNdefRecord> *>(a0),sipType_QList_0100QNdefRecord,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNdefMessage[] = {
    {(void *)slot_QNdefMessage___ne__, ne_slot},
    {(void *)slot_QNdefMessage___delitem__, delitem_slot},
    {(void *)slot_QNdefMessage___setitem__, setitem_slot},
    {(void *)slot_QNdefMessage___getitem__, getitem_slot},
    {(void *)slot_QNdefMessage___len__, len_slot},
    {(void *)slot_QNdefMessage___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNdefMessage[] = {
    {SIP_MLNAME_CAST(sipName_fromByteArray), meth_QNdefMessage_fromByteArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QNdefMessage_fromByteArray)},
    {SIP_MLNAME_CAST(sipName_toByteArray), meth_QNdefMessage_toByteArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QNdefMessage_toByteArray)}
};

PyDoc_STRVAR(doc_QNdefMessage, "\1QNdefMessage()\n"
    "QNdefMessage(QNdefRecord)\n"
    "QNdefMessage(QNdefMessage)\n"
    "QNdefMessage(object)");


pyqt5ClassTypeDef sipTypeDef_QtNfc_QNdefMessage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNdefMessage,
        {0}
    },
    {
        sipNameNr_QNdefMessage,
        {0, 0, 1},
        2, methods_QNdefMessage,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNdefMessage,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QNdefMessage,
    init_type_QNdefMessage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNdefMessage,
    assign_QNdefMessage,
    array_QNdefMessage,
    copy_QNdefMessage,
    release_QNdefMessage,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
