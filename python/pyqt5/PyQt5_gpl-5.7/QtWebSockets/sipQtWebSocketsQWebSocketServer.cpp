/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebSockets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebSockets/qwebsocketserver.sip"
#include <qwebsocketserver.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebSockets/qwebsocketcorsauthenticator.sip"
#include <qwebsocketcorsauthenticator.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebSockets/qwebsocketprotocol.sip"
#include <qwebsocketprotocol.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebSockets/qwebsocket.sip"
#include <qwebsocket.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"


class sipQWebSocketServer : public QWebSocketServer
{
public:
    sipQWebSocketServer(const QString&,QWebSocketServer::SslMode,QObject*);
    virtual ~sipQWebSocketServer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QWebSocket* nextPendingConnection();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebSocketServer(const sipQWebSocketServer &);
    sipQWebSocketServer &operator = (const sipQWebSocketServer &);

    char sipPyMethods[8];
};

sipQWebSocketServer::sipQWebSocketServer(const QString& a0,QWebSocketServer::SslMode a1,QObject*a2): QWebSocketServer(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebSocketServer::~sipQWebSocketServer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebSocketServer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebSockets_qt_metaobject(sipPySelf,sipType_QWebSocketServer);

    return QWebSocketServer::metaObject();
}

int sipQWebSocketServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebSocketServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebSockets_qt_metacall(sipPySelf,sipType_QWebSocketServer,_c,_id,_a);

    return _id;
}

void *sipQWebSocketServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebSockets_qt_metacast(sipPySelf, sipType_QWebSocketServer, _clname, &sipCpp) ? sipCpp : QWebSocketServer::qt_metacast(_clname));
}

void sipQWebSocketServer::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebSocketServer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebSocketServer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebSocketServer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebSocketServer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebSocketServer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebSocketServer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebSocketServer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebSocketServer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebSocketServer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QWebSocket* sipQWebSocketServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nextPendingConnection);

    if (!sipMeth)
        return QWebSocketServer::nextPendingConnection();

    extern QWebSocket* sipVH_QtWebSockets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebSockets_0(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QWebSocketServer_listen, "listen(self, address: Union[QHostAddress, QHostAddress.SpecialAddress] = QHostAddress.Any, port: int = 0) -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_listen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_listen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress& a0def = QHostAddress::Any;
        const QHostAddress* a0 = &a0def;
        int a0State = 0;
        quint16 a1 = 0;
        QWebSocketServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_address,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1t", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0,a1);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_listen, doc_QWebSocketServer_listen);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_close, "close(self)");

extern "C" {static PyObject *meth_QWebSocketServer_close(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_close, doc_QWebSocketServer_close);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_isListening, "isListening(self) -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_isListening, doc_QWebSocketServer_isListening);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setMaxPendingConnections, "setMaxPendingConnections(self, int)");

extern "C" {static PyObject *meth_QWebSocketServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebSocketServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setMaxPendingConnections, doc_QWebSocketServer_setMaxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_maxPendingConnections, "maxPendingConnections(self) -> int");

extern "C" {static PyObject *meth_QWebSocketServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_maxPendingConnections, doc_QWebSocketServer_maxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverPort, "serverPort(self) -> int");

extern "C" {static PyObject *meth_QWebSocketServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->serverPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverPort, doc_QWebSocketServer_serverPort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverAddress, "serverAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QWebSocketServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->serverAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverAddress, doc_QWebSocketServer_serverAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_secureMode, "secureMode(self) -> QWebSocketServer.SslMode");

extern "C" {static PyObject *meth_QWebSocketServer_secureMode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_secureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QWebSocketServer::SslMode sipRes;

            sipRes = sipCpp->secureMode();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketServer_SslMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_secureMode, doc_QWebSocketServer_secureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setSocketDescriptor, "setSocketDescriptor(self, int) -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_setSocketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebSocketServer, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setSocketDescriptor, doc_QWebSocketServer_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_socketDescriptor, "socketDescriptor(self) -> int");

extern "C" {static PyObject *meth_QWebSocketServer_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->socketDescriptor();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_socketDescriptor, doc_QWebSocketServer_socketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_hasPendingConnections, "hasPendingConnections(self) -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasPendingConnections();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_hasPendingConnections, doc_QWebSocketServer_hasPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_nextPendingConnection, "nextPendingConnection(self) -> QWebSocket");

extern "C" {static PyObject *meth_QWebSocketServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QWebSocket*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebSocketServer::nextPendingConnection() : sipCpp->nextPendingConnection());

            return sipConvertFromNewType(sipRes,sipType_QWebSocket,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_nextPendingConnection, doc_QWebSocketServer_nextPendingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_error, "error(self) -> QWebSocketProtocol.CloseCode");

extern "C" {static PyObject *meth_QWebSocketServer_error(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QWebSocketProtocol::CloseCode sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketProtocol_CloseCode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_error, doc_QWebSocketServer_error);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QWebSocketServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_errorString, doc_QWebSocketServer_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_pauseAccepting, "pauseAccepting(self)");

extern "C" {static PyObject *meth_QWebSocketServer_pauseAccepting(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_pauseAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            sipCpp->pauseAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_pauseAccepting, doc_QWebSocketServer_pauseAccepting);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_resumeAccepting, "resumeAccepting(self)");

extern "C" {static PyObject *meth_QWebSocketServer_resumeAccepting(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_resumeAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            sipCpp->resumeAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_resumeAccepting, doc_QWebSocketServer_resumeAccepting);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setServerName, "setServerName(self, str)");

extern "C" {static PyObject *meth_QWebSocketServer_setServerName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServerName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setServerName, doc_QWebSocketServer_setServerName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverName, "serverName(self) -> str");

extern "C" {static PyObject *meth_QWebSocketServer_serverName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->serverName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverName, doc_QWebSocketServer_serverName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setProxy, "setProxy(self, QNetworkProxy)");

extern "C" {static PyObject *meth_QWebSocketServer_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setProxy, doc_QWebSocketServer_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_proxy, "proxy(self) -> QNetworkProxy");

extern "C" {static PyObject *meth_QWebSocketServer_proxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QNetworkProxy*sipRes;

            sipRes = new QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_proxy, doc_QWebSocketServer_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setSslConfiguration, "setSslConfiguration(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QWebSocketServer_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setSslConfiguration, doc_QWebSocketServer_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_sslConfiguration, "sslConfiguration(self) -> QSslConfiguration");

extern "C" {static PyObject *meth_QWebSocketServer_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_sslConfiguration, doc_QWebSocketServer_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_supportedVersions, "supportedVersions(self) -> object");

extern "C" {static PyObject *meth_QWebSocketServer_supportedVersions(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_supportedVersions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QList<QWebSocketProtocol::Version>*sipRes;

            sipRes = new QList<QWebSocketProtocol::Version>(sipCpp->supportedVersions());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebSocketProtocol_Version,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_supportedVersions, doc_QWebSocketServer_supportedVersions);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverUrl, "serverUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebSocketServer_serverUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->serverUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverUrl, doc_QWebSocketServer_serverUrl);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSocketServer(void *, int);}
static void release_QWebSocketServer(void *sipCppV,int)
{
    QWebSocketServer *sipCpp = reinterpret_cast<QWebSocketServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebSocketServer(sipSimpleWrapper *);}
static void dealloc_QWebSocketServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebSocketServer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebSocketServer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebSocketServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebSocketServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebSocketServer *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        QWebSocketServer::SslMode a1;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|JH", sipType_QString,&a0, &a0State, sipType_QWebSocketServer_SslMode, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQWebSocketServer(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebSocketServer[] = {{165, 0, 1}};


static PyMethodDef methods_QWebSocketServer[] = {
    {SIP_MLNAME_CAST(sipName_close), meth_QWebSocketServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_close)},
    {SIP_MLNAME_CAST(sipName_error), meth_QWebSocketServer_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QWebSocketServer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_errorString)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QWebSocketServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QWebSocketServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_isListening)},
    {SIP_MLNAME_CAST(sipName_listen), (PyCFunction)meth_QWebSocketServer_listen, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebSocketServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QWebSocketServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QWebSocketServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_pauseAccepting), meth_QWebSocketServer_pauseAccepting, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_pauseAccepting)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QWebSocketServer_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_proxy)},
    {SIP_MLNAME_CAST(sipName_resumeAccepting), meth_QWebSocketServer_resumeAccepting, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_resumeAccepting)},
    {SIP_MLNAME_CAST(sipName_secureMode), meth_QWebSocketServer_secureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_secureMode)},
    {SIP_MLNAME_CAST(sipName_serverAddress), meth_QWebSocketServer_serverAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverAddress)},
    {SIP_MLNAME_CAST(sipName_serverName), meth_QWebSocketServer_serverName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverName)},
    {SIP_MLNAME_CAST(sipName_serverPort), meth_QWebSocketServer_serverPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverPort)},
    {SIP_MLNAME_CAST(sipName_serverUrl), meth_QWebSocketServer_serverUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverUrl)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QWebSocketServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QWebSocketServer_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setProxy)},
    {SIP_MLNAME_CAST(sipName_setServerName), meth_QWebSocketServer_setServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setServerName)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), meth_QWebSocketServer_setSocketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QWebSocketServer_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QWebSocketServer_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QWebSocketServer_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_supportedVersions), meth_QWebSocketServer_supportedVersions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_supportedVersions)}
};

static sipEnumMemberDef enummembers_QWebSocketServer[] = {
    {sipName_NonSecureMode, static_cast<int>(QWebSocketServer::NonSecureMode), 8},
    {sipName_SecureMode, static_cast<int>(QWebSocketServer::SecureMode), 8},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebSocketServer[] = {
    {"closed()", "\1closed(self)", 0, 0},
    {"sslErrors(QList<QSslError>)", "\1sslErrors(self, Iterable[QSslError])", 0, 0},
    {"peerVerifyError(QSslError)", "\1peerVerifyError(self, QSslError)", 0, 0},
    {"newConnection()", "\1newConnection(self)", 0, 0},
    {"originAuthenticationRequired(QWebSocketCorsAuthenticator*)", "\1originAuthenticationRequired(self, QWebSocketCorsAuthenticator)", 0, 0},
    {"serverError(QWebSocketProtocol::CloseCode)", "\1serverError(self, QWebSocketProtocol.CloseCode)", 0, 0},
    {"acceptError(QAbstractSocket::SocketError)", "\1acceptError(self, QAbstractSocket.SocketError)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebSocketServer, "\1QWebSocketServer(str, QWebSocketServer.SslMode, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWebSockets_QWebSocketServer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebSocketServer,
        {0}
    },
    {
        sipNameNr_QWebSocketServer,
        {0, 0, 1},
        24, methods_QWebSocketServer,
        2, enummembers_QWebSocketServer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebSocketServer,
    -1,
    -1,
    supers_QWebSocketServer,
    0,
    init_type_QWebSocketServer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebSocketServer,
    0,
    0,
    0,
    release_QWebSocketServer,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebSocketServer::staticMetaObject,
    0,
    signals_QWebSocketServer,
    0
};
