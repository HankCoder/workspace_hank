/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebSockets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebSockets/qwebsocket.sip"
#include <qwebsocket.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebSockets/qwebsocketprotocol.sip"
#include <qwebsocketprotocol.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebSockets/qmaskgenerator.sip"
#include <qmaskgenerator.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebSockets/sipQtWebSocketsQWebSocket.cpp"


class sipQWebSocket : public QWebSocket
{
public:
    sipQWebSocket(const QString&,QWebSocketProtocol::Version,QObject*);
    virtual ~sipQWebSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebSocket(const sipQWebSocket &);
    sipQWebSocket &operator = (const sipQWebSocket &);

    char sipPyMethods[7];
};

sipQWebSocket::sipQWebSocket(const QString& a0,QWebSocketProtocol::Version a1,QObject*a2): QWebSocket(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebSocket::~sipQWebSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebSocket::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebSockets_qt_metaobject(sipPySelf,sipType_QWebSocket);

    return QWebSocket::metaObject();
}

int sipQWebSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebSockets_qt_metacall(sipPySelf,sipType_QWebSocket,_c,_id,_a);

    return _id;
}

void *sipQWebSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebSockets_qt_metacast(sipPySelf, sipType_QWebSocket, _clname, &sipCpp) ? sipCpp : QWebSocket::qt_metacast(_clname));
}

void sipQWebSocket::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWebSocket_abort, "abort(self)");

extern "C" {static PyObject *meth_QWebSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_abort, doc_QWebSocket_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_error, "error(self) -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QWebSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QAbstractSocket::SocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_error, doc_QWebSocket_error);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QWebSocket_errorString(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_errorString, doc_QWebSocket_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QWebSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_flush, doc_QWebSocket_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QWebSocket_isValid(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_isValid, doc_QWebSocket_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_localAddress, "localAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QWebSocket_localAddress(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_localAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->localAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_localAddress, doc_QWebSocket_localAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_localPort, "localPort(self) -> int");

extern "C" {static PyObject *meth_QWebSocket_localPort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_localPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->localPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_localPort, doc_QWebSocket_localPort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_pauseMode, "pauseMode(self) -> QAbstractSocket.PauseModes");

extern "C" {static PyObject *meth_QWebSocket_pauseMode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_pauseMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QAbstractSocket::PauseModes*sipRes;

            sipRes = new QAbstractSocket::PauseModes(sipCpp->pauseMode());

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_PauseModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_pauseMode, doc_QWebSocket_pauseMode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_peerAddress, "peerAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QWebSocket_peerAddress(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_peerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->peerAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_peerAddress, doc_QWebSocket_peerAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_peerName, "peerName(self) -> str");

extern "C" {static PyObject *meth_QWebSocket_peerName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_peerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->peerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_peerName, doc_QWebSocket_peerName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_peerPort, "peerPort(self) -> int");

extern "C" {static PyObject *meth_QWebSocket_peerPort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_peerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->peerPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_peerPort, doc_QWebSocket_peerPort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_proxy, "proxy(self) -> QNetworkProxy");

extern "C" {static PyObject *meth_QWebSocket_proxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QNetworkProxy*sipRes;

            sipRes = new QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_proxy, doc_QWebSocket_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setProxy, "setProxy(self, QNetworkProxy)");

extern "C" {static PyObject *meth_QWebSocket_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setProxy, doc_QWebSocket_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setMaskGenerator, "setMaskGenerator(self, QMaskGenerator)");

extern "C" {static PyObject *meth_QWebSocket_setMaskGenerator(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setMaskGenerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMaskGenerator* a0;
        PyObject *a0Keep;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebSocket, &sipCpp, &a0Keep, sipType_QMaskGenerator, &a0))
        {
            sipCpp->setMaskGenerator(a0);

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setMaskGenerator, doc_QWebSocket_setMaskGenerator);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_maskGenerator, "maskGenerator(self) -> QMaskGenerator");

extern "C" {static PyObject *meth_QWebSocket_maskGenerator(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_maskGenerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            const QMaskGenerator*sipRes;

            sipRes = sipCpp->maskGenerator();

            return sipConvertFromType(const_cast<QMaskGenerator *>(sipRes),sipType_QMaskGenerator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_maskGenerator, doc_QWebSocket_maskGenerator);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QWebSocket_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_readBufferSize, doc_QWebSocket_readBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QWebSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QWebSocket, &sipCpp, &a0))
        {
            sipCpp->setReadBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setReadBufferSize, doc_QWebSocket_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_resume, "resume(self)");

extern "C" {static PyObject *meth_QWebSocket_resume(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resume();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_resume, doc_QWebSocket_resume);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setPauseMode, "setPauseMode(self, Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode])");

extern "C" {static PyObject *meth_QWebSocket_setPauseMode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setPauseMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::PauseModes* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QAbstractSocket_PauseModes, &a0, &a0State))
        {
            sipCpp->setPauseMode(*a0);
            sipReleaseType(a0,sipType_QAbstractSocket_PauseModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setPauseMode, doc_QWebSocket_setPauseMode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_state, "state(self) -> QAbstractSocket.SocketState");

extern "C" {static PyObject *meth_QWebSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QAbstractSocket::SocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_state, doc_QWebSocket_state);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_version, "version(self) -> QWebSocketProtocol.Version");

extern "C" {static PyObject *meth_QWebSocket_version(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QWebSocketProtocol::Version sipRes;

            sipRes = sipCpp->version();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketProtocol_Version);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_version, doc_QWebSocket_version);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_resourceName, "resourceName(self) -> str");

extern "C" {static PyObject *meth_QWebSocket_resourceName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_resourceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->resourceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_resourceName, doc_QWebSocket_resourceName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_requestUrl, "requestUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebSocket_requestUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_requestUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->requestUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_requestUrl, doc_QWebSocket_requestUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_origin, "origin(self) -> str");

extern "C" {static PyObject *meth_QWebSocket_origin(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_origin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->origin());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_origin, doc_QWebSocket_origin);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_closeCode, "closeCode(self) -> QWebSocketProtocol.CloseCode");

extern "C" {static PyObject *meth_QWebSocket_closeCode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_closeCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QWebSocketProtocol::CloseCode sipRes;

            sipRes = sipCpp->closeCode();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketProtocol_CloseCode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_closeCode, doc_QWebSocket_closeCode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_closeReason, "closeReason(self) -> str");

extern "C" {static PyObject *meth_QWebSocket_closeReason(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_closeReason(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->closeReason());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_closeReason, doc_QWebSocket_closeReason);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_sendTextMessage, "sendTextMessage(self, str) -> int");

extern "C" {static PyObject *meth_QWebSocket_sendTextMessage(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_sendTextMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendTextMessage(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_sendTextMessage, doc_QWebSocket_sendTextMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_sendBinaryMessage, "sendBinaryMessage(self, Union[QByteArray, bytes, bytearray]) -> int");

extern "C" {static PyObject *meth_QWebSocket_sendBinaryMessage(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_sendBinaryMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendBinaryMessage(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_sendBinaryMessage, doc_QWebSocket_sendBinaryMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_ignoreSslErrors, "ignoreSslErrors(self, Iterable[QSslError])\n"
    "ignoreSslErrors(self)");

extern "C" {static PyObject *meth_QWebSocket_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslError>* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            sipCpp->ignoreSslErrors(*a0);
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            sipCpp->ignoreSslErrors();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_ignoreSslErrors, doc_QWebSocket_ignoreSslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setSslConfiguration, "setSslConfiguration(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QWebSocket_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setSslConfiguration, doc_QWebSocket_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_sslConfiguration, "sslConfiguration(self) -> QSslConfiguration");

extern "C" {static PyObject *meth_QWebSocket_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_sslConfiguration, doc_QWebSocket_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_request, "request(self) -> QNetworkRequest");

extern "C" {static PyObject *meth_QWebSocket_request(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QNetworkRequest*sipRes;

            sipRes = new QNetworkRequest(sipCpp->request());

            return sipConvertFromNewType(sipRes,sipType_QNetworkRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_request, doc_QWebSocket_request);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_close, "close(self, closeCode: QWebSocketProtocol.CloseCode = QWebSocketProtocol.CloseCodeNormal, reason: str = '')");

extern "C" {static PyObject *meth_QWebSocket_close(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_close(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketProtocol::CloseCode a0 = QWebSocketProtocol::CloseCodeNormal;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QWebSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_closeCode,
            sipName_reason,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|EJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QWebSocketProtocol_CloseCode, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_close, doc_QWebSocket_close);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_open, "open(self, QUrl)\n"
    "open(self, QNetworkRequest)");

extern "C" {static PyObject *meth_QWebSocket_open(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QNetworkRequest* a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_open, doc_QWebSocket_open);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_ping, "ping(self, payload: Union[QByteArray, bytes, bytearray] = QByteArray())");

extern "C" {static PyObject *meth_QWebSocket_ping(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_ping(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray& a0def = QByteArray();
        const QByteArray* a0 = &a0def;
        int a0State = 0;
        QWebSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_payload,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ping(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_ping, doc_QWebSocket_ping);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSocket(void *, int);}
static void release_QWebSocket(void *sipCppV,int)
{
    QWebSocket *sipCpp = reinterpret_cast<QWebSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebSocket(sipSimpleWrapper *);}
static void dealloc_QWebSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebSocket *sipCpp = 0;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        QWebSocketProtocol::Version a1 = QWebSocketProtocol::VersionLatest;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            sipName_origin,
            sipName_version,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1EJH", sipType_QString,&a0, &a0State, sipType_QWebSocketProtocol_Version, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQWebSocket(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebSocket[] = {{165, 0, 1}};


static PyMethodDef methods_QWebSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QWebSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_abort)},
    {SIP_MLNAME_CAST(sipName_close), (PyCFunction)meth_QWebSocket_close, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebSocket_close)},
    {SIP_MLNAME_CAST(sipName_closeCode), meth_QWebSocket_closeCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_closeCode)},
    {SIP_MLNAME_CAST(sipName_closeReason), meth_QWebSocket_closeReason, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_closeReason)},
    {SIP_MLNAME_CAST(sipName_error), meth_QWebSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QWebSocket_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_errorString)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QWebSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_flush)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QWebSocket_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QWebSocket_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_isValid)},
    {SIP_MLNAME_CAST(sipName_localAddress), meth_QWebSocket_localAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_localAddress)},
    {SIP_MLNAME_CAST(sipName_localPort), meth_QWebSocket_localPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_localPort)},
    {SIP_MLNAME_CAST(sipName_maskGenerator), meth_QWebSocket_maskGenerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_maskGenerator)},
    {SIP_MLNAME_CAST(sipName_open), meth_QWebSocket_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_open)},
    {SIP_MLNAME_CAST(sipName_origin), meth_QWebSocket_origin, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_origin)},
    {SIP_MLNAME_CAST(sipName_pauseMode), meth_QWebSocket_pauseMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_pauseMode)},
    {SIP_MLNAME_CAST(sipName_peerAddress), meth_QWebSocket_peerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_peerAddress)},
    {SIP_MLNAME_CAST(sipName_peerName), meth_QWebSocket_peerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_peerName)},
    {SIP_MLNAME_CAST(sipName_peerPort), meth_QWebSocket_peerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_peerPort)},
    {SIP_MLNAME_CAST(sipName_ping), (PyCFunction)meth_QWebSocket_ping, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebSocket_ping)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QWebSocket_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_proxy)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QWebSocket_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_request), meth_QWebSocket_request, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_request)},
    {SIP_MLNAME_CAST(sipName_requestUrl), meth_QWebSocket_requestUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_requestUrl)},
    {SIP_MLNAME_CAST(sipName_resourceName), meth_QWebSocket_resourceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_resourceName)},
    {SIP_MLNAME_CAST(sipName_resume), meth_QWebSocket_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_resume)},
    {SIP_MLNAME_CAST(sipName_sendBinaryMessage), meth_QWebSocket_sendBinaryMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_sendBinaryMessage)},
    {SIP_MLNAME_CAST(sipName_sendTextMessage), meth_QWebSocket_sendTextMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_sendTextMessage)},
    {SIP_MLNAME_CAST(sipName_setMaskGenerator), meth_QWebSocket_setMaskGenerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setMaskGenerator)},
    {SIP_MLNAME_CAST(sipName_setPauseMode), meth_QWebSocket_setPauseMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setPauseMode)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QWebSocket_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setProxy)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QWebSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QWebSocket_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QWebSocket_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_state), meth_QWebSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_state)},
    {SIP_MLNAME_CAST(sipName_version), meth_QWebSocket_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_version)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebSocket[] = {
    {"sslErrors(QList<QSslError>)", "\1sslErrors(self, Iterable[QSslError])", 0, 0},
    {"bytesWritten(qint64)", "\1bytesWritten(self, int)", 0, 0},
    {"pong(quint64,QByteArray)", "\1pong(self, int, Union[QByteArray, bytes, bytearray])", 0, 0},
    {"binaryMessageReceived(QByteArray)", "\1binaryMessageReceived(self, Union[QByteArray, bytes, bytearray])", 0, 0},
    {"textMessageReceived(QString)", "\1textMessageReceived(self, str)", 0, 0},
    {"binaryFrameReceived(QByteArray,bool)", "\1binaryFrameReceived(self, Union[QByteArray, bytes, bytearray], bool)", 0, 0},
    {"textFrameReceived(QString,bool)", "\1textFrameReceived(self, str, bool)", 0, 0},
    {"readChannelFinished()", "\1readChannelFinished(self)", 0, 0},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator)", 0, 0},
    {"stateChanged(QAbstractSocket::SocketState)", "\1stateChanged(self, QAbstractSocket.SocketState)", 0, 0},
    {"disconnected()", "\1disconnected(self)", 0, 0},
    {"connected()", "\1connected(self)", 0, 0},
    {"aboutToClose()", "\1aboutToClose(self)", 0, 0},
    {"error(QAbstractSocket::SocketError)", "\1error(self, QAbstractSocket.SocketError)", &methods_QWebSocket[4], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebSocket, "\1QWebSocket(origin: str = '', version: QWebSocketProtocol.Version = QWebSocketProtocol.VersionLatest, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWebSockets_QWebSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebSocket,
        {0}
    },
    {
        sipNameNr_QWebSocket,
        {0, 0, 1},
        35, methods_QWebSocket,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebSocket,
    -1,
    -1,
    supers_QWebSocket,
    0,
    init_type_QWebSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebSocket,
    0,
    0,
    0,
    release_QWebSocket,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebSocket::staticMetaObject,
    0,
    signals_QWebSocket,
    0
};
