/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qhistorystate.sip"
#include <qhistorystate.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 244 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 232 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 38 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 32 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 148 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtCore/sipQtCoreQHistoryState.cpp"


class sipQHistoryState : public QHistoryState
{
public:
    sipQHistoryState(QState*);
    sipQHistoryState(QHistoryState::HistoryType,QState*);
    virtual ~sipQHistoryState();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void onExit(QEvent*);
    void onEntry(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHistoryState(const sipQHistoryState &);
    sipQHistoryState &operator = (const sipQHistoryState &);

    char sipPyMethods[9];
};

sipQHistoryState::sipQHistoryState(QState*a0): QHistoryState(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHistoryState::sipQHistoryState(QHistoryState::HistoryType a0,QState*a1): QHistoryState(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHistoryState::~sipQHistoryState()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHistoryState::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QHistoryState);

    return QHistoryState::metaObject();
}

int sipQHistoryState::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QHistoryState::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QHistoryState,_c,_id,_a);

    return _id;
}

void *sipQHistoryState::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QHistoryState, _clname, &sipCpp) ? sipCpp : QHistoryState::qt_metacast(_clname));
}

void sipQHistoryState::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QHistoryState::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QHistoryState::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QHistoryState::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QHistoryState::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QHistoryState::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQHistoryState::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QHistoryState::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQHistoryState::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QHistoryState::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::onExit(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_onExit);

    if (!sipMeth)
    {
        QHistoryState::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::onEntry(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_onEntry);

    if (!sipMeth)
    {
        QHistoryState::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QHistoryState_defaultState, "defaultState(self) -> QAbstractState");

extern "C" {static PyObject *meth_QHistoryState_defaultState(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_defaultState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHistoryState, &sipCpp))
        {
            QAbstractState*sipRes;

            sipRes = sipCpp->defaultState();

            return sipConvertFromType(sipRes,sipType_QAbstractState,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_defaultState, doc_QHistoryState_defaultState);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_setDefaultState, "setDefaultState(self, QAbstractState)");

extern "C" {static PyObject *meth_QHistoryState_setDefaultState(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_setDefaultState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractState* a0;
        PyObject *a0Keep;
        QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHistoryState, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            sipCpp->setDefaultState(a0);

            sipKeepReference(sipSelf, 0, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_setDefaultState, doc_QHistoryState_setDefaultState);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_historyType, "historyType(self) -> QHistoryState.HistoryType");

extern "C" {static PyObject *meth_QHistoryState_historyType(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_historyType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHistoryState, &sipCpp))
        {
            QHistoryState::HistoryType sipRes;

            sipRes = sipCpp->historyType();

            return sipConvertFromEnum(sipRes,sipType_QHistoryState_HistoryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_historyType, doc_QHistoryState_historyType);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_setHistoryType, "setHistoryType(self, QHistoryState.HistoryType)");

extern "C" {static PyObject *meth_QHistoryState_setHistoryType(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_setHistoryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHistoryState::HistoryType a0;
        QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QHistoryState_HistoryType, &a0))
        {
            sipCpp->setHistoryType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_setHistoryType, doc_QHistoryState_setHistoryType);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_onEntry, "onEntry(self, QEvent)");

extern "C" {static PyObject *meth_QHistoryState_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHistoryState::onEntry(a0) : sipCpp->onEntry(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_onEntry, doc_QHistoryState_onEntry);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_onExit, "onExit(self, QEvent)");

extern "C" {static PyObject *meth_QHistoryState_onExit(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHistoryState::onExit(a0) : sipCpp->onExit(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_onExit, doc_QHistoryState_onExit);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHistoryState_event(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QHistoryState::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_event, doc_QHistoryState_event);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_defaultTransition, "defaultTransition(self) -> QAbstractTransition");

extern "C" {static PyObject *meth_QHistoryState_defaultTransition(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_defaultTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHistoryState, &sipCpp))
        {
            QAbstractTransition*sipRes;

            sipRes = sipCpp->defaultTransition();

            return sipConvertFromType(sipRes,sipType_QAbstractTransition,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_defaultTransition, doc_QHistoryState_defaultTransition);

    return NULL;
}


PyDoc_STRVAR(doc_QHistoryState_setDefaultTransition, "setDefaultTransition(self, QAbstractTransition)");

extern "C" {static PyObject *meth_QHistoryState_setDefaultTransition(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_setDefaultTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractTransition* a0;
        PyObject *a0Keep;
        QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHistoryState, &sipCpp, &a0Keep, sipType_QAbstractTransition, &a0))
        {
            sipCpp->setDefaultTransition(a0);

            sipKeepReference(sipSelf, 1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_setDefaultTransition, doc_QHistoryState_setDefaultTransition);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHistoryState(void *, int);}
static void release_QHistoryState(void *sipCppV,int)
{
    QHistoryState *sipCpp = reinterpret_cast<QHistoryState *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QHistoryState(sipSimpleWrapper *);}
static void dealloc_QHistoryState(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHistoryState *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHistoryState(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QHistoryState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHistoryState(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHistoryState *sipCpp = 0;

    {
        QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQHistoryState(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QHistoryState::HistoryType a0;
        QState* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QHistoryState_HistoryType, &a0, sipType_QState, &a1, sipOwner))
        {
            sipCpp = new sipQHistoryState(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHistoryState[] = {{11, 255, 1}};


static PyMethodDef methods_QHistoryState[] = {
    {SIP_MLNAME_CAST(sipName_defaultState), meth_QHistoryState_defaultState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_defaultState)},
    {SIP_MLNAME_CAST(sipName_defaultTransition), meth_QHistoryState_defaultTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_defaultTransition)},
    {SIP_MLNAME_CAST(sipName_event), meth_QHistoryState_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_event)},
    {SIP_MLNAME_CAST(sipName_historyType), meth_QHistoryState_historyType, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_historyType)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QHistoryState_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QHistoryState_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_onExit)},
    {SIP_MLNAME_CAST(sipName_setDefaultState), meth_QHistoryState_setDefaultState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_setDefaultState)},
    {SIP_MLNAME_CAST(sipName_setDefaultTransition), meth_QHistoryState_setDefaultTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_setDefaultTransition)},
    {SIP_MLNAME_CAST(sipName_setHistoryType), meth_QHistoryState_setHistoryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_setHistoryType)}
};

static sipEnumMemberDef enummembers_QHistoryState[] = {
    {sipName_DeepHistory, static_cast<int>(QHistoryState::DeepHistory), 79},
    {sipName_ShallowHistory, static_cast<int>(QHistoryState::ShallowHistory), 79},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QHistoryState[] = {
    {"defaultTransitionChanged()", "\1defaultTransitionChanged(self)", 0, 0},
    {"historyTypeChanged()", "\1historyTypeChanged(self)", 0, 0},
    {"defaultStateChanged()", "\1defaultStateChanged(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QHistoryState, "\1QHistoryState(parent: QState = None)\n"
    "QHistoryState(QHistoryState.HistoryType, parent: QState = None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QHistoryState = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QHistoryState,
        {0}
    },
    {
        sipNameNr_QHistoryState,
        {0, 0, 1},
        9, methods_QHistoryState,
        2, enummembers_QHistoryState,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHistoryState,
    -1,
    -1,
    supers_QHistoryState,
    0,
    init_type_QHistoryState,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHistoryState,
    0,
    0,
    0,
    release_QHistoryState,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QHistoryState::staticMetaObject,
    0,
    signals_QHistoryState,
    0
};
