/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIpyrcc.h"

#line 52 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/pyrcc/pyrccmod.sip"
#include "rcc.h"
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/pyrcc/sippyrccRCCResourceLibrary.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/pyrcc/sippyrccRCCResourceLibrary.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/pyrcc/sippyrccRCCResourceLibrary.cpp"


extern "C" {static PyObject *meth_RCCResourceLibrary_output(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_output(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_RCCResourceLibrary, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->output(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_output, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_readFiles(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_readFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RCCResourceLibrary, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->readFiles();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_readFiles, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_setInputFiles(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_setInputFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStringList* a0;
        int a0State = 0;
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_RCCResourceLibrary, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setInputFiles(*a0);
            sipReleaseType(a0,sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_setInputFiles, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_dataFiles(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_dataFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RCCResourceLibrary, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->dataFiles());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_dataFiles, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_setVerbose(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_setVerbose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_RCCResourceLibrary, &sipCpp, &a0))
        {
            sipCpp->setVerbose(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_setVerbose, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_setInitName(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_setInitName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_RCCResourceLibrary, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setInitName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_setInitName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_setCompressLevel(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_setCompressLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_RCCResourceLibrary, &sipCpp, &a0))
        {
            sipCpp->setCompressLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_setCompressLevel, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_setCompressThreshold(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_setCompressThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_RCCResourceLibrary, &sipCpp, &a0))
        {
            sipCpp->setCompressThreshold(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_setCompressThreshold, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RCCResourceLibrary_setResourceRoot(PyObject *, PyObject *);}
static PyObject *meth_RCCResourceLibrary_setResourceRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString* a0;
        int a0State = 0;
        RCCResourceLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_RCCResourceLibrary, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setResourceRoot(*a0);
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RCCResourceLibrary, sipName_setResourceRoot, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_RCCResourceLibrary(void *, int);}
static void release_RCCResourceLibrary(void *sipCppV,int)
{
    delete reinterpret_cast<RCCResourceLibrary *>(sipCppV);
}


extern "C" {static void assign_RCCResourceLibrary(void *, SIP_SSIZE_T, const void *);}
static void assign_RCCResourceLibrary(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<RCCResourceLibrary *>(sipDst)[sipDstIdx] = *reinterpret_cast<const RCCResourceLibrary *>(sipSrc);
}


extern "C" {static void *array_RCCResourceLibrary(SIP_SSIZE_T);}
static void *array_RCCResourceLibrary(SIP_SSIZE_T sipNrElem)
{
    return new RCCResourceLibrary[sipNrElem];
}


extern "C" {static void *copy_RCCResourceLibrary(const void *, SIP_SSIZE_T);}
static void *copy_RCCResourceLibrary(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new RCCResourceLibrary(reinterpret_cast<const RCCResourceLibrary *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_RCCResourceLibrary(sipSimpleWrapper *);}
static void dealloc_RCCResourceLibrary(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_RCCResourceLibrary(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_RCCResourceLibrary(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_RCCResourceLibrary(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    RCCResourceLibrary *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new RCCResourceLibrary();

            return sipCpp;
        }
    }

    {
        const RCCResourceLibrary* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_RCCResourceLibrary, &a0))
        {
            sipCpp = new RCCResourceLibrary(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_RCCResourceLibrary[] = {
    {SIP_MLNAME_CAST(sipName_dataFiles), meth_RCCResourceLibrary_dataFiles, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_output), meth_RCCResourceLibrary_output, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readFiles), meth_RCCResourceLibrary_readFiles, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompressLevel), meth_RCCResourceLibrary_setCompressLevel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompressThreshold), meth_RCCResourceLibrary_setCompressThreshold, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInitName), meth_RCCResourceLibrary_setInitName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInputFiles), meth_RCCResourceLibrary_setInputFiles, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setResourceRoot), meth_RCCResourceLibrary_setResourceRoot, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerbose), meth_RCCResourceLibrary_setVerbose, METH_VARARGS, NULL}
};


pyqt5ClassTypeDef sipTypeDef_pyrcc_RCCResourceLibrary = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_RCCResourceLibrary,
        {0}
    },
    {
        sipNameNr_RCCResourceLibrary,
        {0, 0, 1},
        9, methods_RCCResourceLibrary,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_RCCResourceLibrary,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_RCCResourceLibrary,
    assign_RCCResourceLibrary,
    array_RCCResourceLibrary,
    copy_RCCResourceLibrary,
    release_RCCResourceLibrary,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
