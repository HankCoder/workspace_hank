/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 41 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnectioninterface.sip"
#include <qdbusconnectioninterface.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 41 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbuspendingcall.sip"
#include <qdbuspendingcall.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusmessage.sip"
#include <qdbusmessage.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 41 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbuserror.sip"
#include <qdbuserror.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"


PyDoc_STRVAR(doc_QDBusConnection_isConnected, "isConnected(self) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_isConnected(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_isConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnection, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isConnected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_isConnected, doc_QDBusConnection_isConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_baseService, "baseService(self) -> str");

extern "C" {static PyObject *meth_QDBusConnection_baseService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_baseService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnection, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->baseService());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_baseService, doc_QDBusConnection_baseService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_lastError, "lastError(self) -> QDBusError");

extern "C" {static PyObject *meth_QDBusConnection_lastError(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnection, &sipCpp))
        {
            QDBusError*sipRes;

            sipRes = new QDBusError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QDBusError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_lastError, doc_QDBusConnection_lastError);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_name, "name(self) -> str");

extern "C" {static PyObject *meth_QDBusConnection_name(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnection, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_name, doc_QDBusConnection_name);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_connectionCapabilities, "connectionCapabilities(self) -> QDBusConnection.ConnectionCapabilities");

extern "C" {static PyObject *meth_QDBusConnection_connectionCapabilities(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_connectionCapabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnection, &sipCpp))
        {
            QDBusConnection::ConnectionCapabilities*sipRes;

            sipRes = new QDBusConnection::ConnectionCapabilities(sipCpp->connectionCapabilities());

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection_ConnectionCapabilities,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_connectionCapabilities, doc_QDBusConnection_connectionCapabilities);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_send, "send(self, QDBusMessage) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_send(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_send(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusMessage* a0;
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QDBusMessage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->send(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_send, doc_QDBusConnection_send);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_callWithCallback, "callWithCallback(self, QDBusMessage, PYQT_SLOT, PYQT_SLOT, timeout: int = -1) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_callWithCallback(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_callWithCallback(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusMessage* a0;
        PyObject * a1;
        PyObject * a2;
        int a3 = -1;
        const QDBusConnection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9P0P0|i", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QDBusMessage, &a0, &a1, &a2, &a3))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
        QObject *receiver;
        QByteArray return_slot;
        
        if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a1, &receiver, return_slot)) == sipErrorNone)
        {
            QObject *error_receiver;
            QByteArray error_slot;
        
            if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a2, &error_receiver, error_slot)) == sipErrorNone)
            {
                if (receiver == error_receiver)
                {
                    sipRes = sipCpp->callWithCallback(*a0, receiver, return_slot.constData(), error_slot.constData(), a3);
                }
                else
                {
                    PyErr_SetString(PyExc_ValueError,
                            "the return and error methods must be bound to the same QObject instance");
                    sipError = sipErrorFail;
                }
            }
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(2, a2);
            }
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(1, a1);
        }
#line 293 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_callWithCallback, doc_QDBusConnection_callWithCallback);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_call, "call(self, QDBusMessage, mode: QDBus.CallMode = QDBus.Block, timeout: int = -1) -> QDBusMessage");

extern "C" {static PyObject *meth_QDBusConnection_call(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_call(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusMessage* a0;
        QDBus::CallMode a1 = QDBus::Block;
        int a2 = -1;
        const QDBusConnection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|Ei", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QDBusMessage, &a0, sipType_QDBus_CallMode, &a1, &a2))
        {
            QDBusMessage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusMessage(sipCpp->call(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDBusMessage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_call, doc_QDBusConnection_call);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_asyncCall, "asyncCall(self, QDBusMessage, timeout: int = -1) -> QDBusPendingCall");

extern "C" {static PyObject *meth_QDBusConnection_asyncCall(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_asyncCall(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusMessage* a0;
        int a1 = -1;
        const QDBusConnection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QDBusMessage, &a0, &a1))
        {
            QDBusPendingCall*sipRes;

            sipRes = new QDBusPendingCall(sipCpp->asyncCall(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QDBusPendingCall,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_asyncCall, doc_QDBusConnection_asyncCall);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_connect, "connect(self, str, str, str, str, PYQT_SLOT) -> bool\n"
    "connect(self, str, str, str, str, str, PYQT_SLOT) -> bool\n"
    "connect(self, str, str, str, str, Iterable[str], str, PYQT_SLOT) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_connect(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_connect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        PyObject * a4;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1P0", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, &a4))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a4, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->connect(*a0, *a1, *a2, *a3, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(4, a4);
        }
#line 429 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString* a4;
        int a4State = 0;
        PyObject * a5;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1P0", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, &a5))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a5, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->connect(*a0, *a1, *a2, *a3, *a4, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(5, a5);
        }
#line 478 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QStringList* a4;
        int a4State = 0;
        const QString* a5;
        int a5State = 0;
        PyObject * a6;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1J1P0", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QStringList,&a4, &a4State, sipType_QString,&a5, &a5State, &a6))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a6, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->connect(*a0, *a1, *a2, *a3, *a4, *a5, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(6, a6);
        }
#line 530 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QStringList *>(a4),sipType_QStringList,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_connect, doc_QDBusConnection_connect);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_disconnect, "disconnect(self, str, str, str, str, PYQT_SLOT) -> bool\n"
    "disconnect(self, str, str, str, str, str, PYQT_SLOT) -> bool\n"
    "disconnect(self, str, str, str, str, Iterable[str], str, PYQT_SLOT) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_disconnect(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_disconnect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        PyObject * a4;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1P0", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, &a4))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a4, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->disconnect(*a0, *a1, *a2, *a3, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(4, a4);
        }
#line 598 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QString* a4;
        int a4State = 0;
        PyObject * a5;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1P0", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, &a5))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a5, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->disconnect(*a0, *a1, *a2, *a3, *a4, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(5, a5);
        }
#line 647 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        const QString* a3;
        int a3State = 0;
        const QStringList* a4;
        int a4State = 0;
        const QString* a5;
        int a5State = 0;
        PyObject * a6;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1J1P0", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QStringList,&a4, &a4State, sipType_QString,&a5, &a5State, &a6))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtDBus/qdbusconnection.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtdbus_get_pyqtslot_parts(a6, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->disconnect(*a0, *a1, *a2, *a3, *a4, *a5, receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(6, a6);
        }
#line 699 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtDBus/sipQtDBusQDBusConnection.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QStringList *>(a4),sipType_QStringList,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_disconnect, doc_QDBusConnection_disconnect);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_registerObject, "registerObject(self, str, QObject, options: Union[QDBusConnection.RegisterOptions, QDBusConnection.RegisterOption] = QDBusConnection.ExportAdaptors) -> bool\n"
    "registerObject(self, str, str, QObject, options: Union[QDBusConnection.RegisterOptions, QDBusConnection.RegisterOption] = QDBusConnection.ExportAdaptors) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_registerObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_registerObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;
        QDBusConnection::RegisterOptions a2def = QDBusConnection::ExportAdaptors;
        QDBusConnection::RegisterOptions* a2 = &a2def;
        int a2State = 0;
        QDBusConnection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J8|J1", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipType_QDBusConnection_RegisterOptions, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->registerObject(*a0,a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QDBusConnection_RegisterOptions,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QObject* a2;
        QDBusConnection::RegisterOptions a3def = QDBusConnection::ExportAdaptors;
        QDBusConnection::RegisterOptions* a3 = &a3def;
        int a3State = 0;
        QDBusConnection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1J8|J1", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipType_QDBusConnection_RegisterOptions, &a3, &a3State))
        {
            bool sipRes;

            sipRes = sipCpp->registerObject(*a0,*a1,a2,*a3);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a3,sipType_QDBusConnection_RegisterOptions,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_registerObject, doc_QDBusConnection_registerObject);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_unregisterObject, "unregisterObject(self, str, mode: QDBusConnection.UnregisterMode = QDBusConnection.UnregisterNode)");

extern "C" {static PyObject *meth_QDBusConnection_unregisterObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_unregisterObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusConnection::UnregisterMode a1 = QDBusConnection::UnregisterNode;
        QDBusConnection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State, sipType_QDBusConnection_UnregisterMode, &a1))
        {
            sipCpp->unregisterObject(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_unregisterObject, doc_QDBusConnection_unregisterObject);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_objectRegisteredAt, "objectRegisteredAt(self, str) -> QObject");

extern "C" {static PyObject *meth_QDBusConnection_objectRegisteredAt(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_objectRegisteredAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QObject*sipRes;

            sipRes = sipCpp->objectRegisteredAt(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_objectRegisteredAt, doc_QDBusConnection_objectRegisteredAt);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_registerService, "registerService(self, str) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_registerService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_registerService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->registerService(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_registerService, doc_QDBusConnection_registerService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_unregisterService, "unregisterService(self, str) -> bool");

extern "C" {static PyObject *meth_QDBusConnection_unregisterService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_unregisterService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->unregisterService(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_unregisterService, doc_QDBusConnection_unregisterService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_interface, "interface(self) -> QDBusConnectionInterface");

extern "C" {static PyObject *meth_QDBusConnection_interface(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_interface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnection, &sipCpp))
        {
            QDBusConnectionInterface*sipRes;

            sipRes = sipCpp->interface();

            return sipConvertFromType(sipRes,sipType_QDBusConnectionInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_interface, doc_QDBusConnection_interface);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_connectToBus, "connectToBus(QDBusConnection.BusType, str) -> QDBusConnection\n"
    "connectToBus(str, str) -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusConnection_connectToBus(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_connectToBus(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDBusConnection::BusType a0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "EJ1", sipType_QDBusConnection_BusType, &a0, sipType_QString,&a1, &a1State))
        {
            QDBusConnection*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusConnection(QDBusConnection::connectToBus(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDBusConnection*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusConnection(QDBusConnection::connectToBus(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_connectToBus, doc_QDBusConnection_connectToBus);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_connectToPeer, "connectToPeer(str, str) -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusConnection_connectToPeer(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_connectToPeer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDBusConnection*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusConnection(QDBusConnection::connectToPeer(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_connectToPeer, doc_QDBusConnection_connectToPeer);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_disconnectFromBus, "disconnectFromBus(str)");

extern "C" {static PyObject *meth_QDBusConnection_disconnectFromBus(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_disconnectFromBus(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QDBusConnection::disconnectFromBus(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_disconnectFromBus, doc_QDBusConnection_disconnectFromBus);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_disconnectFromPeer, "disconnectFromPeer(str)");

extern "C" {static PyObject *meth_QDBusConnection_disconnectFromPeer(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_disconnectFromPeer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QDBusConnection::disconnectFromPeer(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_disconnectFromPeer, doc_QDBusConnection_disconnectFromPeer);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_localMachineId, "localMachineId() -> QByteArray");

extern "C" {static PyObject *meth_QDBusConnection_localMachineId(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_localMachineId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(QDBusConnection::localMachineId());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_localMachineId, doc_QDBusConnection_localMachineId);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_sessionBus, "sessionBus() -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusConnection_sessionBus(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_sessionBus(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDBusConnection*sipRes;

            sipRes = new QDBusConnection(QDBusConnection::sessionBus());

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_sessionBus, doc_QDBusConnection_sessionBus);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_systemBus, "systemBus() -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusConnection_systemBus(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_systemBus(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDBusConnection*sipRes;

            sipRes = new QDBusConnection(QDBusConnection::systemBus());

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_systemBus, doc_QDBusConnection_systemBus);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_sender, "sender() -> QDBusConnection");

extern "C" {static PyObject *meth_QDBusConnection_sender(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_sender(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDBusConnection*sipRes;

            sipRes = new QDBusConnection(QDBusConnection::sender());

            return sipConvertFromNewType(sipRes,sipType_QDBusConnection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_sender, doc_QDBusConnection_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnection_swap, "swap(self, QDBusConnection)");

extern "C" {static PyObject *meth_QDBusConnection_swap(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnection_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDBusConnection* a0;
        QDBusConnection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDBusConnection, &sipCpp, sipType_QDBusConnection, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnection, sipName_swap, doc_QDBusConnection_swap);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusConnection(void *, int);}
static void release_QDBusConnection(void *sipCppV,int)
{
    delete reinterpret_cast<QDBusConnection *>(sipCppV);
}


extern "C" {static void dealloc_QDBusConnection(sipSimpleWrapper *);}
static void dealloc_QDBusConnection(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDBusConnection(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDBusConnection(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDBusConnection(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDBusConnection *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QDBusConnection(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QDBusConnection* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDBusConnection, &a0))
        {
            sipCpp = new QDBusConnection(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QDBusConnection[] = {
    {SIP_MLNAME_CAST(sipName_asyncCall), (PyCFunction)meth_QDBusConnection_asyncCall, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusConnection_asyncCall)},
    {SIP_MLNAME_CAST(sipName_baseService), meth_QDBusConnection_baseService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_baseService)},
    {SIP_MLNAME_CAST(sipName_call), (PyCFunction)meth_QDBusConnection_call, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusConnection_call)},
    {SIP_MLNAME_CAST(sipName_callWithCallback), (PyCFunction)meth_QDBusConnection_callWithCallback, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusConnection_callWithCallback)},
    {SIP_MLNAME_CAST(sipName_connect), meth_QDBusConnection_connect, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_connect)},
    {SIP_MLNAME_CAST(sipName_connectToBus), meth_QDBusConnection_connectToBus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_connectToBus)},
    {SIP_MLNAME_CAST(sipName_connectToPeer), meth_QDBusConnection_connectToPeer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_connectToPeer)},
    {SIP_MLNAME_CAST(sipName_connectionCapabilities), meth_QDBusConnection_connectionCapabilities, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_connectionCapabilities)},
    {SIP_MLNAME_CAST(sipName_disconnect), meth_QDBusConnection_disconnect, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_disconnect)},
    {SIP_MLNAME_CAST(sipName_disconnectFromBus), meth_QDBusConnection_disconnectFromBus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_disconnectFromBus)},
    {SIP_MLNAME_CAST(sipName_disconnectFromPeer), meth_QDBusConnection_disconnectFromPeer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_disconnectFromPeer)},
    {SIP_MLNAME_CAST(sipName_interface), meth_QDBusConnection_interface, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_interface)},
    {SIP_MLNAME_CAST(sipName_isConnected), meth_QDBusConnection_isConnected, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_isConnected)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QDBusConnection_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_lastError)},
    {SIP_MLNAME_CAST(sipName_localMachineId), meth_QDBusConnection_localMachineId, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_localMachineId)},
    {SIP_MLNAME_CAST(sipName_name), meth_QDBusConnection_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_name)},
    {SIP_MLNAME_CAST(sipName_objectRegisteredAt), meth_QDBusConnection_objectRegisteredAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_objectRegisteredAt)},
    {SIP_MLNAME_CAST(sipName_registerObject), (PyCFunction)meth_QDBusConnection_registerObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusConnection_registerObject)},
    {SIP_MLNAME_CAST(sipName_registerService), meth_QDBusConnection_registerService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_registerService)},
    {SIP_MLNAME_CAST(sipName_send), meth_QDBusConnection_send, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_send)},
    {SIP_MLNAME_CAST(sipName_sender), meth_QDBusConnection_sender, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_sender)},
    {SIP_MLNAME_CAST(sipName_sessionBus), meth_QDBusConnection_sessionBus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_sessionBus)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDBusConnection_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_swap)},
    {SIP_MLNAME_CAST(sipName_systemBus), meth_QDBusConnection_systemBus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_systemBus)},
    {SIP_MLNAME_CAST(sipName_unregisterObject), (PyCFunction)meth_QDBusConnection_unregisterObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusConnection_unregisterObject)},
    {SIP_MLNAME_CAST(sipName_unregisterService), meth_QDBusConnection_unregisterService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnection_unregisterService)}
};

static sipEnumMemberDef enummembers_QDBusConnection[] = {
    {sipName_ActivationBus, static_cast<int>(QDBusConnection::ActivationBus), 6},
    {sipName_ExportAdaptors, static_cast<int>(QDBusConnection::ExportAdaptors), 9},
    {sipName_ExportAllContents, static_cast<int>(QDBusConnection::ExportAllContents), 9},
    {sipName_ExportAllInvokables, static_cast<int>(QDBusConnection::ExportAllInvokables), 9},
    {sipName_ExportAllProperties, static_cast<int>(QDBusConnection::ExportAllProperties), 9},
    {sipName_ExportAllSignal, static_cast<int>(QDBusConnection::ExportAllSignal), 9},
    {sipName_ExportAllSignals, static_cast<int>(QDBusConnection::ExportAllSignals), 9},
    {sipName_ExportAllSlots, static_cast<int>(QDBusConnection::ExportAllSlots), 9},
    {sipName_ExportChildObjects, static_cast<int>(QDBusConnection::ExportChildObjects), 9},
    {sipName_ExportNonScriptableContents, static_cast<int>(QDBusConnection::ExportNonScriptableContents), 9},
    {sipName_ExportNonScriptableInvokables, static_cast<int>(QDBusConnection::ExportNonScriptableInvokables), 9},
    {sipName_ExportNonScriptableProperties, static_cast<int>(QDBusConnection::ExportNonScriptableProperties), 9},
    {sipName_ExportNonScriptableSignals, static_cast<int>(QDBusConnection::ExportNonScriptableSignals), 9},
    {sipName_ExportNonScriptableSlots, static_cast<int>(QDBusConnection::ExportNonScriptableSlots), 9},
    {sipName_ExportScriptableContents, static_cast<int>(QDBusConnection::ExportScriptableContents), 9},
    {sipName_ExportScriptableInvokables, static_cast<int>(QDBusConnection::ExportScriptableInvokables), 9},
    {sipName_ExportScriptableProperties, static_cast<int>(QDBusConnection::ExportScriptableProperties), 9},
    {sipName_ExportScriptableSignals, static_cast<int>(QDBusConnection::ExportScriptableSignals), 9},
    {sipName_ExportScriptableSlots, static_cast<int>(QDBusConnection::ExportScriptableSlots), 9},
    {sipName_SessionBus, static_cast<int>(QDBusConnection::SessionBus), 6},
    {sipName_SystemBus, static_cast<int>(QDBusConnection::SystemBus), 6},
    {sipName_UnixFileDescriptorPassing, static_cast<int>(QDBusConnection::UnixFileDescriptorPassing), 8},
    {sipName_UnregisterNode, static_cast<int>(QDBusConnection::UnregisterNode), 11},
    {sipName_UnregisterTree, static_cast<int>(QDBusConnection::UnregisterTree), 11},
};

PyDoc_STRVAR(doc_QDBusConnection, "\1QDBusConnection(str)\n"
    "QDBusConnection(QDBusConnection)");


pyqt5ClassTypeDef sipTypeDef_QtDBus_QDBusConnection = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDBusConnection,
        {0}
    },
    {
        sipNameNr_QDBusConnection,
        {0, 0, 1},
        26, methods_QDBusConnection,
        24, enummembers_QDBusConnection,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDBusConnection,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QDBusConnection,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDBusConnection,
    0,
    0,
    0,
    release_QDBusConnection,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
