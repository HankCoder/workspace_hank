/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNetwork/qlocalsocket.sip"
#include <qlocalsocket.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 155 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"


class sipQLocalSocket : public QLocalSocket
{
public:
    sipQLocalSocket(QObject*);
    virtual ~sipQLocalSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    qint64 readLineData(char*,qint64);
    bool reset();
    bool atEnd() const;
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readData(char*,qint64);
    bool waitForReadyRead(int);
    bool waitForBytesWritten(int);
    void close();
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool isSequential() const;
    bool open(QIODevice::OpenMode);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLocalSocket(const sipQLocalSocket &);
    sipQLocalSocket &operator = (const sipQLocalSocket &);

    char sipPyMethods[23];
};

sipQLocalSocket::sipQLocalSocket(QObject*a0): QLocalSocket(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLocalSocket::~sipQLocalSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLocalSocket::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QLocalSocket);

    return QLocalSocket::metaObject();
}

int sipQLocalSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QLocalSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QLocalSocket,_c,_id,_a);

    return _id;
}

void *sipQLocalSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QLocalSocket, _clname, &sipCpp) ? sipCpp : QLocalSocket::qt_metacast(_clname));
}

void sipQLocalSocket::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QLocalSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QLocalSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QLocalSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QLocalSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QLocalSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QLocalSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQLocalSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QLocalSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQLocalSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QLocalSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQLocalSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QLocalSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQLocalSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QLocalSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQLocalSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QLocalSocket::seek(a0);

    typedef bool (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQLocalSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QLocalSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQLocalSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QLocalSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQLocalSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QLocalSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[42]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQLocalSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QLocalSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQLocalSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QLocalSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QLocalSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QLocalSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQLocalSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QLocalSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQLocalSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QLocalSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQLocalSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QLocalSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQLocalSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QLocalSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQLocalSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QLocalSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLocalSocket_connectToServer, "connectToServer(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
    "connectToServer(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QLocalSocket_connectToServer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_connectToServer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QIODevice::OpenMode a1def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToServer(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QIODevice::OpenMode a0def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToServer(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_connectToServer, doc_QLocalSocket_connectToServer);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_disconnectFromServer, "disconnectFromServer(self)");

extern "C" {static PyObject *meth_QLocalSocket_disconnectFromServer(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_disconnectFromServer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromServer();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_disconnectFromServer, doc_QLocalSocket_disconnectFromServer);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_open, "open(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice::OpenMode a0def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::open(*a0) : sipCpp->open(*a0));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_open, doc_QLocalSocket_open);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_serverName, "serverName(self) -> str");

extern "C" {static PyObject *meth_QLocalSocket_serverName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_serverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->serverName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_serverName, doc_QLocalSocket_serverName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_setServerName, "setServerName(self, str)");

extern "C" {static PyObject *meth_QLocalSocket_setServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServerName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setServerName, doc_QLocalSocket_setServerName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_fullServerName, "fullServerName(self) -> str");

extern "C" {static PyObject *meth_QLocalSocket_fullServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_fullServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fullServerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_fullServerName, doc_QLocalSocket_fullServerName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_abort, "abort(self)");

extern "C" {static PyObject *meth_QLocalSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_abort, doc_QLocalSocket_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_isSequential, doc_QLocalSocket_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_bytesAvailable, doc_QLocalSocket_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_bytesToWrite, doc_QLocalSocket_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_canReadLine, doc_QLocalSocket_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_close, "close(self)");

extern "C" {static PyObject *meth_QLocalSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QLocalSocket::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_close, doc_QLocalSocket_close);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_error, "error(self) -> QLocalSocket.LocalSocketError");

extern "C" {static PyObject *meth_QLocalSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            QLocalSocket::LocalSocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QLocalSocket_LocalSocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_error, doc_QLocalSocket_error);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->flush();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_flush, doc_QLocalSocket_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_isValid(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_isValid, doc_QLocalSocket_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_readBufferSize, doc_QLocalSocket_readBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QLocalSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            sipCpp->setReadBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setReadBufferSize, doc_QLocalSocket_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_setSocketDescriptor, "setSocketDescriptor(self, sip.voidptr, state: QLocalSocket.LocalSocketState = QLocalSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qintptr* a0;
        int a0State = 0;
        QLocalSocket::LocalSocketState a1 = QLocalSocket::ConnectedState;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EJ1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_qintptr,&a0, &a0State, sipType_QLocalSocket_LocalSocketState, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(*a0,a1,*a2);
            sipReleaseType(a0,sipType_qintptr,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setSocketDescriptor, doc_QLocalSocket_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_socketDescriptor, "socketDescriptor(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QLocalSocket_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            qintptr*sipRes;

            sipRes = new qintptr(sipCpp->socketDescriptor());

            return sipConvertFromNewType(sipRes,sipType_qintptr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_socketDescriptor, doc_QLocalSocket_socketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_state, "state(self) -> QLocalSocket.LocalSocketState");

extern "C" {static PyObject *meth_QLocalSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            QLocalSocket::LocalSocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QLocalSocket_LocalSocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_state, doc_QLocalSocket_state);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForBytesWritten, "waitForBytesWritten(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForBytesWritten, doc_QLocalSocket_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForConnected, "waitForConnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForConnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForConnected, doc_QLocalSocket_waitForConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForDisconnected, "waitForDisconnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForDisconnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForDisconnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForDisconnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForDisconnected, doc_QLocalSocket_waitForDisconnected);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForReadyRead, "waitForReadyRead(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForReadyRead, doc_QLocalSocket_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QLocalSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNetwork/qlocalsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QLocalSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1356 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQLocalSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_readData, doc_QLocalSocket_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalSocket_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QLocalSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLocalSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_writeData, doc_QLocalSocket_writeData);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocalSocket(void *, int);}
static void release_QLocalSocket(void *sipCppV,int)
{
    QLocalSocket *sipCpp = reinterpret_cast<QLocalSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLocalSocket(sipSimpleWrapper *);}
static void dealloc_QLocalSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQLocalSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QLocalSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QLocalSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocalSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLocalSocket *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQLocalSocket(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLocalSocket[] = {{80, 0, 1}};


static PyMethodDef methods_QLocalSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QLocalSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_abort)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QLocalSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QLocalSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QLocalSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QLocalSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectToServer), (PyCFunction)meth_QLocalSocket_connectToServer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_connectToServer)},
    {SIP_MLNAME_CAST(sipName_disconnectFromServer), meth_QLocalSocket_disconnectFromServer, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_disconnectFromServer)},
    {SIP_MLNAME_CAST(sipName_error), meth_QLocalSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_error)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QLocalSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_flush)},
    {SIP_MLNAME_CAST(sipName_fullServerName), meth_QLocalSocket_fullServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_fullServerName)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QLocalSocket_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_isSequential)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QLocalSocket_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_isValid)},
    {SIP_MLNAME_CAST(sipName_open), (PyCFunction)meth_QLocalSocket_open, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_open)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QLocalSocket_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QLocalSocket_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_readData)},
    {SIP_MLNAME_CAST(sipName_serverName), meth_QLocalSocket_serverName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_serverName)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QLocalSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setServerName), meth_QLocalSocket_setServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_setServerName)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), (PyCFunction)meth_QLocalSocket_setSocketDescriptor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QLocalSocket_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_state), meth_QLocalSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_state)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), (PyCFunction)meth_QLocalSocket_waitForBytesWritten, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForConnected), (PyCFunction)meth_QLocalSocket_waitForConnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForConnected)},
    {SIP_MLNAME_CAST(sipName_waitForDisconnected), (PyCFunction)meth_QLocalSocket_waitForDisconnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForDisconnected)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), (PyCFunction)meth_QLocalSocket_waitForReadyRead, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QLocalSocket_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_writeData)}
};

static sipEnumMemberDef enummembers_QLocalSocket[] = {
    {sipName_ClosingState, static_cast<int>(QLocalSocket::ClosingState), 49},
    {sipName_ConnectedState, static_cast<int>(QLocalSocket::ConnectedState), 49},
    {sipName_ConnectingState, static_cast<int>(QLocalSocket::ConnectingState), 49},
    {sipName_ConnectionError, static_cast<int>(QLocalSocket::ConnectionError), 48},
    {sipName_ConnectionRefusedError, static_cast<int>(QLocalSocket::ConnectionRefusedError), 48},
    {sipName_DatagramTooLargeError, static_cast<int>(QLocalSocket::DatagramTooLargeError), 48},
    {sipName_OperationError, static_cast<int>(QLocalSocket::OperationError), 48},
    {sipName_PeerClosedError, static_cast<int>(QLocalSocket::PeerClosedError), 48},
    {sipName_ServerNotFoundError, static_cast<int>(QLocalSocket::ServerNotFoundError), 48},
    {sipName_SocketAccessError, static_cast<int>(QLocalSocket::SocketAccessError), 48},
    {sipName_SocketResourceError, static_cast<int>(QLocalSocket::SocketResourceError), 48},
    {sipName_SocketTimeoutError, static_cast<int>(QLocalSocket::SocketTimeoutError), 48},
    {sipName_UnconnectedState, static_cast<int>(QLocalSocket::UnconnectedState), 49},
    {sipName_UnknownSocketError, static_cast<int>(QLocalSocket::UnknownSocketError), 48},
    {sipName_UnsupportedSocketOperationError, static_cast<int>(QLocalSocket::UnsupportedSocketOperationError), 48},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLocalSocket[] = {
    {"stateChanged(QLocalSocket::LocalSocketState)", "\1stateChanged(self, QLocalSocket.LocalSocketState)", 0, 0},
    {"disconnected()", "\1disconnected(self)", 0, 0},
    {"connected()", "\1connected(self)", 0, 0},
    {"error(QLocalSocket::LocalSocketError)", "\1error(self, QLocalSocket.LocalSocketError)", &methods_QLocalSocket[7], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QLocalSocket, "\1QLocalSocket(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QLocalSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLocalSocket,
        {0}
    },
    {
        sipNameNr_QLocalSocket,
        {0, 0, 1},
        26, methods_QLocalSocket,
        15, enummembers_QLocalSocket,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLocalSocket,
    -1,
    -1,
    supers_QLocalSocket,
    0,
    init_type_QLocalSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLocalSocket,
    0,
    0,
    0,
    release_QLocalSocket,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QLocalSocket::staticMetaObject,
    0,
    signals_QLocalSocket,
    0
};
