/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtNetwork/sipQtNetworkQAbstractNetworkCache.cpp"


class sipQAbstractNetworkCache : public QAbstractNetworkCache
{
public:
    sipQAbstractNetworkCache(QObject*);
    virtual ~sipQAbstractNetworkCache();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void clear();
    void insert(QIODevice*);
    QIODevice* prepare(const QNetworkCacheMetaData&);
    qint64 cacheSize() const;
    bool remove(const QUrl&);
    QIODevice* data(const QUrl&);
    void updateMetaData(const QNetworkCacheMetaData&);
    QNetworkCacheMetaData metaData(const QUrl&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractNetworkCache(const sipQAbstractNetworkCache &);
    sipQAbstractNetworkCache &operator = (const sipQAbstractNetworkCache &);

    char sipPyMethods[15];
};

sipQAbstractNetworkCache::sipQAbstractNetworkCache(QObject*a0): QAbstractNetworkCache(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractNetworkCache::~sipQAbstractNetworkCache()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractNetworkCache::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QAbstractNetworkCache);

    return QAbstractNetworkCache::metaObject();
}

int sipQAbstractNetworkCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractNetworkCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QAbstractNetworkCache,_c,_id,_a);

    return _id;
}

void *sipQAbstractNetworkCache::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QAbstractNetworkCache, _clname, &sipCpp) ? sipCpp : QAbstractNetworkCache::qt_metacast(_clname));
}

void sipQAbstractNetworkCache::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractNetworkCache::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractNetworkCache::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractNetworkCache::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractNetworkCache::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractNetworkCache::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractNetworkCache::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractNetworkCache::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractNetworkCache::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractNetworkCache::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractNetworkCache,sipName_clear);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractNetworkCache::insert(QIODevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QAbstractNetworkCache,sipName_insert);

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice*);

    sipVH_QtNetwork_11(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QIODevice* sipQAbstractNetworkCache::prepare(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QAbstractNetworkCache,sipName_prepare);

    if (!sipMeth)
        return 0;

    extern QIODevice* sipVH_QtNetwork_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QNetworkCacheMetaData&);

    return sipVH_QtNetwork_12(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQAbstractNetworkCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QAbstractNetworkCache,sipName_cacheSize);

    if (!sipMeth)
        return 0;

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractNetworkCache::remove(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_QAbstractNetworkCache,sipName_remove);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_13(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QIODevice* sipQAbstractNetworkCache::data(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QAbstractNetworkCache,sipName_data);

    if (!sipMeth)
        return 0;

    extern QIODevice* sipVH_QtNetwork_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_14(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::updateMetaData(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,sipName_QAbstractNetworkCache,sipName_updateMetaData);

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QNetworkCacheMetaData&);

    sipVH_QtNetwork_15(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QNetworkCacheMetaData sipQAbstractNetworkCache::metaData(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QAbstractNetworkCache,sipName_metaData);

    if (!sipMeth)
        return QNetworkCacheMetaData();

    extern QNetworkCacheMetaData sipVH_QtNetwork_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_16(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_metaData, "metaData(self, QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QUrl* a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            QNetworkCacheMetaData*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_metaData);
                return NULL;
            }

            sipRes = new QNetworkCacheMetaData(sipCpp->metaData(*a0));

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_metaData, doc_QAbstractNetworkCache_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_updateMetaData, "updateMetaData(self, QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QNetworkCacheMetaData* a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_updateMetaData);
                return NULL;
            }

            sipCpp->updateMetaData(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_updateMetaData, doc_QAbstractNetworkCache_updateMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_data, "data(self, QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_data(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QUrl* a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            QIODevice*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_data);
                return NULL;
            }

            sipRes = sipCpp->data(*a0);

            return sipConvertFromNewType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_data, doc_QAbstractNetworkCache_data);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_remove, "remove(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QAbstractNetworkCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QUrl* a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_remove);
                return NULL;
            }

            sipRes = sipCpp->remove(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_remove, doc_QAbstractNetworkCache_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_cacheSize, "cacheSize(self) -> int");

extern "C" {static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
            qint64 sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_cacheSize);
                return NULL;
            }

            sipRes = sipCpp->cacheSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_cacheSize, doc_QAbstractNetworkCache_cacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_prepare, "prepare(self, QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QNetworkCacheMetaData* a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            QIODevice*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_prepare);
                return NULL;
            }

            sipRes = sipCpp->prepare(*a0);

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_prepare, doc_QAbstractNetworkCache_prepare);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_insert, "insert(self, QIODevice)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QIODevice* a0;
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QIODevice, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_insert);
                return NULL;
            }

            sipCpp->insert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_insert, doc_QAbstractNetworkCache_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_clear, "clear(self)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_clear);
                return NULL;
            }

            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_clear, doc_QAbstractNetworkCache_clear);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractNetworkCache(void *, int);}
static void release_QAbstractNetworkCache(void *sipCppV,int)
{
    QAbstractNetworkCache *sipCpp = reinterpret_cast<QAbstractNetworkCache *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *);}
static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractNetworkCache *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractNetworkCache(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractNetworkCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractNetworkCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractNetworkCache *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractNetworkCache(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractNetworkCache[] = {{165, 0, 1}};


static PyMethodDef methods_QAbstractNetworkCache[] = {
    {SIP_MLNAME_CAST(sipName_cacheSize), meth_QAbstractNetworkCache_cacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_cacheSize)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QAbstractNetworkCache_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_clear)},
    {SIP_MLNAME_CAST(sipName_data), meth_QAbstractNetworkCache_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_data)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QAbstractNetworkCache_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_insert)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QAbstractNetworkCache_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_metaData)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QAbstractNetworkCache_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_prepare)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QAbstractNetworkCache_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_remove)},
    {SIP_MLNAME_CAST(sipName_updateMetaData), meth_QAbstractNetworkCache_updateMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_updateMetaData)}
};

PyDoc_STRVAR(doc_QAbstractNetworkCache, "\1QAbstractNetworkCache(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QAbstractNetworkCache = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractNetworkCache,
        {0}
    },
    {
        sipNameNr_QAbstractNetworkCache,
        {0, 0, 1},
        8, methods_QAbstractNetworkCache,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractNetworkCache,
    -1,
    -1,
    supers_QAbstractNetworkCache,
    0,
    init_type_QAbstractNetworkCache,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractNetworkCache,
    0,
    0,
    0,
    release_QAbstractNetworkCache,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractNetworkCache::staticMetaObject,
    0,
    0,
    0
};
