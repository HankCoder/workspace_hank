/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebengineview.sip"
#include <qwebengineview.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 555 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 577 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 604 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 593 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebenginepage.sip"
#include <qwebenginepage.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebenginesettings.sip"
#include <qwebenginesettings.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebenginepage.sip"
#include <qwebenginepage.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebenginehistory.sip"
#include <qwebenginehistory.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 660 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"


class sipQWebEngineView : public QWebEngineView
{
public:
    sipQWebEngineView(QWidget*);
    virtual ~sipQWebEngineView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    void setVisible(bool);
    int devType() const;
    void dropEvent(QDropEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    bool event(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    QWebEngineView* createWindow(QWebEnginePage::WebWindowType);
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebEngineView(const sipQWebEngineView &);
    sipQWebEngineView &operator = (const sipQWebEngineView &);

    char sipPyMethods[47];
};

sipQWebEngineView::sipQWebEngineView(QWidget*a0): QWebEngineView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebEngineView::~sipQWebEngineView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebEngineView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebEngineWidgets_qt_metaobject(sipPySelf,sipType_QWebEngineView);

    return QWebEngineView::metaObject();
}

int sipQWebEngineView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebEngineView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebEngineWidgets_qt_metacall(sipPySelf,sipType_QWebEngineView,_c,_id,_a);

    return _id;
}

void *sipQWebEngineView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebEngineWidgets_qt_metacast(sipPySelf, sipType_QWebEngineView, _clname, &sipCpp) ? sipCpp : QWebEngineView::qt_metacast(_clname));
}

void sipQWebEngineView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebEngineView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebEngineView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebEngineView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebEngineView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebEngineView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebEngineView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebEngineView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQWebEngineView::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QWebEngineView::initPainter(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    ((sipVH_QtWidgets_3)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQWebEngineView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QWebEngineView::sharedPainter();

    typedef QPainter* (*sipVH_QtWidgets_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtWidgets_4)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQWebEngineView::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QWebEngineView::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQWebEngineView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QWebEngineView::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQWebEngineView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QWebEngineView::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtWidgets_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return ((sipVH_QtWidgets_5)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQWebEngineView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QWebEngineView::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtWidgets_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return ((sipVH_QtWidgets_6)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QWebEngineView::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    ((sipVH_QtWidgets_7)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQWebEngineView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QWebEngineView::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QWebEngineView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QWebEngineView::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    ((sipVH_QtWidgets_12)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QWebEngineView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QWebEngineView::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    ((sipVH_QtWidgets_14)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[14]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QWebEngineView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QWebEngineView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QWebEngineView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QWebEngineView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QWebEngineView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QWebEngineView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QWebEngineView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QWebEngineView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QWebEngineView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QWebEngineView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QWebEngineView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QWebEngineView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QWebEngineView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QWebEngineView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQWebEngineView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QWebEngineView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQWebEngineView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QWebEngineView::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQWebEngineView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QWebEngineView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQWebEngineView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QWebEngineView::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_0)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQWebEngineView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QWebEngineView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQWebEngineView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QWebEngineView::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    ((sipVH_QtWidgets_8)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QWebEngineView::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    ((sipVH_QtWidgets_10)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[10]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QWebEngineView::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    ((sipVH_QtWidgets_9)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QWebEngineView::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    ((sipVH_QtWidgets_11)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QWebEngineView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QWebEngineView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebEngineView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebEngineView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QWebEngineView::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    ((sipVH_QtWidgets_13)(sipModuleAPI_QtWebEngineWidgets_QtWidgets->em_virthandlers[13]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QWebEngineView* sipQWebEngineView::createWindow(QWebEnginePage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_createWindow);

    if (!sipMeth)
        return QWebEngineView::createWindow(a0);

    extern QWebEngineView* sipVH_QtWebEngineWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebEnginePage::WebWindowType);

    return sipVH_QtWebEngineWidgets_0(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQWebEngineView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QWebEngineView::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWebEngineWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QWebEngineView_page, "page(self) -> QWebEnginePage");

extern "C" {static PyObject *meth_QWebEngineView_page(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QWebEnginePage*sipRes;

            sipRes = sipCpp->page();

            return sipConvertFromType(sipRes,sipType_QWebEnginePage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_page, doc_QWebEngineView_page);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_setPage, "setPage(self, QWebEnginePage)");

extern "C" {static PyObject *meth_QWebEngineView_setPage(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEnginePage* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QWebEnginePage, &a0))
        {
            sipCpp->setPage(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_setPage, doc_QWebEngineView_setPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_load, "load(self, QUrl)");

extern "C" {static PyObject *meth_QWebEngineView_load(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->load(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_load, doc_QWebEngineView_load);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_setHtml, "setHtml(self, str, baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebEngineView_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl& a1def = QUrl();
        const QUrl* a1 = &a1def;
        QWebEngineView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            sipCpp->setHtml(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_setHtml, doc_QWebEngineView_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_setContent, "setContent(self, Union[QByteArray, bytes, bytearray], mimeType: str = '', baseUrl: QUrl = QUrl())");

extern "C" {static PyObject *meth_QWebEngineView_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl* a2 = &a2def;
        QWebEngineView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            sipCpp->setContent(*a0,*a1,*a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_setContent, doc_QWebEngineView_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_history, "history(self) -> QWebEngineHistory");

extern "C" {static PyObject *meth_QWebEngineView_history(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QWebEngineHistory*sipRes;

            sipRes = sipCpp->history();

            return sipConvertFromType(sipRes,sipType_QWebEngineHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_history, doc_QWebEngineView_history);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_title, "title(self) -> str");

extern "C" {static PyObject *meth_QWebEngineView_title(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_title, doc_QWebEngineView_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QWebEngineView_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_setUrl, doc_QWebEngineView_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineView_url(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_url, doc_QWebEngineView_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_iconUrl, "iconUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineView_iconUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_iconUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->iconUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_iconUrl, doc_QWebEngineView_iconUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineView_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_hasSelection, doc_QWebEngineView_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QWebEngineView_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_selectedText, doc_QWebEngineView_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_pageAction, "pageAction(self, QWebEnginePage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QWebEngineView_pageAction(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_pageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEnginePage::WebAction a0;
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QWebEnginePage_WebAction, &a0))
        {
            QAction*sipRes;

            sipRes = sipCpp->pageAction(a0);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_pageAction, doc_QWebEngineView_pageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_triggerPageAction, "triggerPageAction(self, QWebEnginePage.WebAction, checked: bool = False)");

extern "C" {static PyObject *meth_QWebEngineView_triggerPageAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_triggerPageAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEnginePage::WebAction a0;
        bool a1 = 0;
        QWebEngineView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QWebEnginePage_WebAction, &a0, &a1))
        {
            sipCpp->triggerPageAction(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_triggerPageAction, doc_QWebEngineView_triggerPageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_zoomFactor, "zoomFactor(self) -> float");

extern "C" {static PyObject *meth_QWebEngineView_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->zoomFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_zoomFactor, doc_QWebEngineView_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_setZoomFactor, "setZoomFactor(self, float)");

extern "C" {static PyObject *meth_QWebEngineView_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebEngineView, &sipCpp, &a0))
        {
            sipCpp->setZoomFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_setZoomFactor, doc_QWebEngineView_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_findText, "findText(self, str, options: QWebEnginePage.FindFlags = 0, resultCallback: Callable[..., None] = 0)");

extern "C" {static PyObject *meth_QWebEngineView_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEnginePage::FindFlags a1def = 0;
        QWebEnginePage::FindFlags* a1 = &a1def;
        int a1State = 0;
        PyObject * a2 = 0;
        QWebEngineView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
            sipName_resultCallback,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1H", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebEnginePage_FindFlags, &a1, &a1State, &a2))
        {
#line 91 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebengineview.sip"
        // Make sure any callable doesn't get garbage collected.
        Py_XINCREF(a2);
        
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->findText(*a0, *a1, [a2](bool arg) {
            if (a2)
            {
                SIP_BLOCK_THREADS
                
                PyObject *res;
        
                res = PyObject_CallFunctionObjArgs(a2, (arg ? Py_True : Py_False), NULL);
        
                Py_DECREF(a2);
        
                if (!res)
                    pyqt5_qtwebenginewidgets_err_print();
                else
                    Py_DECREF(res);
                
                SIP_UNBLOCK_THREADS
            }
        });
        
        Py_END_ALLOW_THREADS
#line 1692 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineView.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebEnginePage_FindFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_findText, doc_QWebEngineView_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QWebEngineView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QWebEngineView::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_sizeHint, doc_QWebEngineView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_settings, "settings(self) -> QWebEngineSettings");

extern "C" {static PyObject *meth_QWebEngineView_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QWebEngineSettings*sipRes;

            sipRes = sipCpp->settings();

            return sipConvertFromType(sipRes,sipType_QWebEngineSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_settings, doc_QWebEngineView_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_stop, "stop(self)");

extern "C" {static PyObject *meth_QWebEngineView_stop(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_stop, doc_QWebEngineView_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_back, "back(self)");

extern "C" {static PyObject *meth_QWebEngineView_back(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            sipCpp->back();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_back, doc_QWebEngineView_back);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_forward, "forward(self)");

extern "C" {static PyObject *meth_QWebEngineView_forward(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            sipCpp->forward();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_forward, doc_QWebEngineView_forward);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_reload, "reload(self)");

extern "C" {static PyObject *meth_QWebEngineView_reload(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            sipCpp->reload();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_reload, doc_QWebEngineView_reload);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_createWindow, "createWindow(self, QWebEnginePage.WebWindowType) -> QWebEngineView");

extern "C" {static PyObject *meth_QWebEngineView_createWindow(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_createWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebEnginePage::WebWindowType a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QWebEnginePage_WebWindowType, &a0))
        {
            QWebEngineView*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebEngineView::createWindow(a0) : sipCpp->createWindow(a0));

            return sipConvertFromType(sipRes,sipType_QWebEngineView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_createWindow, doc_QWebEngineView_createWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QWebEngineView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWebEngineView::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_contextMenuEvent, doc_QWebEngineView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWebEngineView_event(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebEngineView::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_event, doc_QWebEngineView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QWebEngineView_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWebEngineView::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_showEvent, doc_QWebEngineView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QWebEngineView_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWebEngineView::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_hideEvent, doc_QWebEngineView_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QWebEngineView_icon(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineView, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_icon, doc_QWebEngineView_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QWebEngineView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWebEngineView::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_dragEnterEvent, doc_QWebEngineView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QWebEngineView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWebEngineView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_dragLeaveEvent, doc_QWebEngineView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QWebEngineView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWebEngineView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_dragMoveEvent, doc_QWebEngineView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineView_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QWebEngineView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        QWebEngineView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebEngineView, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWebEngineView::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineView, sipName_dropEvent, doc_QWebEngineView_dropEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QWebEngineView(void *, const sipTypeDef *);}
static void *cast_QWebEngineView(void *sipCppV, const sipTypeDef *targetType)
{
    QWebEngineView *sipCpp = reinterpret_cast<QWebEngineView *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineView(void *, int);}
static void release_QWebEngineView(void *sipCppV,int)
{
    QWebEngineView *sipCpp = reinterpret_cast<QWebEngineView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEngineView(sipSimpleWrapper *);}
static void dealloc_QWebEngineView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebEngineView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebEngineView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebEngineView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQWebEngineView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEngineView[] = {{456, 4, 1}};


static PyMethodDef methods_QWebEngineView[] = {
    {SIP_MLNAME_CAST(sipName_back), meth_QWebEngineView_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_back)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QWebEngineView_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_createWindow), meth_QWebEngineView_createWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_createWindow)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QWebEngineView_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QWebEngineView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QWebEngineView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QWebEngineView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebEngineView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_event)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebEngineView_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEngineView_findText)},
    {SIP_MLNAME_CAST(sipName_forward), meth_QWebEngineView_forward, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_forward)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QWebEngineView_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_hasSelection)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QWebEngineView_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_hideEvent)},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebEngineView_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_history)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWebEngineView_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_icon)},
    {SIP_MLNAME_CAST(sipName_iconUrl), meth_QWebEngineView_iconUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_iconUrl)},
    {SIP_MLNAME_CAST(sipName_load), meth_QWebEngineView_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_load)},
    {SIP_MLNAME_CAST(sipName_page), meth_QWebEngineView_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_page)},
    {SIP_MLNAME_CAST(sipName_pageAction), meth_QWebEngineView_pageAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_pageAction)},
    {SIP_MLNAME_CAST(sipName_reload), meth_QWebEngineView_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_reload)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebEngineView_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_selectedText)},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QWebEngineView_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEngineView_setContent)},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QWebEngineView_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEngineView_setHtml)},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QWebEngineView_setPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_setPage)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebEngineView_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_setUrl)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebEngineView_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebEngineView_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_settings)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QWebEngineView_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QWebEngineView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QWebEngineView_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_stop)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebEngineView_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_title)},
    {SIP_MLNAME_CAST(sipName_triggerPageAction), (PyCFunction)meth_QWebEngineView_triggerPageAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEngineView_triggerPageAction)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebEngineView_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_url)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebEngineView_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineView_zoomFactor)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebEngineView[] = {
    {"iconChanged(QIcon)", "\1iconChanged(self, QIcon)", 0, 0},
    {"renderProcessTerminated(QWebEnginePage::RenderProcessTerminationStatus,int)", "\1renderProcessTerminated(self, QWebEnginePage.RenderProcessTerminationStatus, int)", 0, 0},
    {"iconUrlChanged(QUrl)", "\1iconUrlChanged(self, QUrl)", 0, 0},
    {"urlChanged(QUrl)", "\1urlChanged(self, QUrl)", 0, 0},
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"titleChanged(QString)", "\1titleChanged(self, str)", 0, 0},
    {"loadFinished(bool)", "\1loadFinished(self, bool)", 0, 0},
    {"loadProgress(int)", "\1loadProgress(self, int)", 0, 0},
    {"loadStarted()", "\1loadStarted(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebEngineView, "\1QWebEngineView(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEngineView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineView,
        {0}
    },
    {
        sipNameNr_QWebEngineView,
        {0, 0, 1},
        33, methods_QWebEngineView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineView,
    -1,
    -1,
    supers_QWebEngineView,
    0,
    init_type_QWebEngineView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineView,
    0,
    0,
    0,
    release_QWebEngineView,
    cast_QWebEngineView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebEngineView::staticMetaObject,
    0,
    signals_QWebEngineView,
    0
};
