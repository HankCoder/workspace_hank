/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebenginescript.sip"
#include <qwebenginescript.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineScript.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineScript.cpp"


PyDoc_STRVAR(doc_QWebEngineScript_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineScript_isNull(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineScript, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_isNull, doc_QWebEngineScript_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_name, "name(self) -> str");

extern "C" {static PyObject *meth_QWebEngineScript_name(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineScript, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_name, doc_QWebEngineScript_name);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QWebEngineScript_setName(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineScript, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_setName, doc_QWebEngineScript_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_sourceCode, "sourceCode(self) -> str");

extern "C" {static PyObject *meth_QWebEngineScript_sourceCode(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_sourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineScript, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sourceCode());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_sourceCode, doc_QWebEngineScript_sourceCode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_setSourceCode, "setSourceCode(self, str)");

extern "C" {static PyObject *meth_QWebEngineScript_setSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_setSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEngineScript, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setSourceCode(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_setSourceCode, doc_QWebEngineScript_setSourceCode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_injectionPoint, "injectionPoint(self) -> QWebEngineScript.InjectionPoint");

extern "C" {static PyObject *meth_QWebEngineScript_injectionPoint(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_injectionPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineScript, &sipCpp))
        {
            QWebEngineScript::InjectionPoint sipRes;

            sipRes = sipCpp->injectionPoint();

            return sipConvertFromEnum(sipRes,sipType_QWebEngineScript_InjectionPoint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_injectionPoint, doc_QWebEngineScript_injectionPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_setInjectionPoint, "setInjectionPoint(self, QWebEngineScript.InjectionPoint)");

extern "C" {static PyObject *meth_QWebEngineScript_setInjectionPoint(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_setInjectionPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineScript::InjectionPoint a0;
        QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEngineScript, &sipCpp, sipType_QWebEngineScript_InjectionPoint, &a0))
        {
            sipCpp->setInjectionPoint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_setInjectionPoint, doc_QWebEngineScript_setInjectionPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_worldId, "worldId(self) -> int");

extern "C" {static PyObject *meth_QWebEngineScript_worldId(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_worldId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineScript, &sipCpp))
        {
            quint32 sipRes;

            sipRes = sipCpp->worldId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_worldId, doc_QWebEngineScript_worldId);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_setWorldId, "setWorldId(self, int)");

extern "C" {static PyObject *meth_QWebEngineScript_setWorldId(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_setWorldId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint32 a0;
        QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QWebEngineScript, &sipCpp, &a0))
        {
            sipCpp->setWorldId(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_setWorldId, doc_QWebEngineScript_setWorldId);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_runsOnSubFrames, "runsOnSubFrames(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineScript_runsOnSubFrames(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_runsOnSubFrames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineScript, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->runsOnSubFrames();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_runsOnSubFrames, doc_QWebEngineScript_runsOnSubFrames);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_setRunsOnSubFrames, "setRunsOnSubFrames(self, bool)");

extern "C" {static PyObject *meth_QWebEngineScript_setRunsOnSubFrames(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_setRunsOnSubFrames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebEngineScript, &sipCpp, &a0))
        {
            sipCpp->setRunsOnSubFrames(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_setRunsOnSubFrames, doc_QWebEngineScript_setRunsOnSubFrames);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineScript_swap, "swap(self, QWebEngineScript)");

extern "C" {static PyObject *meth_QWebEngineScript_swap(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineScript_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEngineScript* a0;
        QWebEngineScript *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineScript, &sipCpp, sipType_QWebEngineScript, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineScript, sipName_swap, doc_QWebEngineScript_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QWebEngineScript___ne__(PyObject *,PyObject *);}
static PyObject *slot_QWebEngineScript___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QWebEngineScript *sipCpp = reinterpret_cast<QWebEngineScript *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebEngineScript));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebEngineScript, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QWebEngineScript::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebEngineWidgets,ne_slot,sipType_QWebEngineScript,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QWebEngineScript___eq__(PyObject *,PyObject *);}
static PyObject *slot_QWebEngineScript___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QWebEngineScript *sipCpp = reinterpret_cast<QWebEngineScript *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebEngineScript));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QWebEngineScript* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebEngineScript, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QWebEngineScript::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebEngineWidgets,eq_slot,sipType_QWebEngineScript,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineScript(void *, int);}
static void release_QWebEngineScript(void *sipCppV,int)
{
    delete reinterpret_cast<QWebEngineScript *>(sipCppV);
}


extern "C" {static void assign_QWebEngineScript(void *, SIP_SSIZE_T, const void *);}
static void assign_QWebEngineScript(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QWebEngineScript *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QWebEngineScript *>(sipSrc);
}


extern "C" {static void *array_QWebEngineScript(SIP_SSIZE_T);}
static void *array_QWebEngineScript(SIP_SSIZE_T sipNrElem)
{
    return new QWebEngineScript[sipNrElem];
}


extern "C" {static void *copy_QWebEngineScript(const void *, SIP_SSIZE_T);}
static void *copy_QWebEngineScript(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QWebEngineScript(reinterpret_cast<const QWebEngineScript *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebEngineScript(sipSimpleWrapper *);}
static void dealloc_QWebEngineScript(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineScript(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QWebEngineScript(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineScript(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWebEngineScript *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QWebEngineScript();

            return sipCpp;
        }
    }

    {
        const QWebEngineScript* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebEngineScript, &a0))
        {
            sipCpp = new QWebEngineScript(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QWebEngineScript[] = {
    {(void *)slot_QWebEngineScript___ne__, ne_slot},
    {(void *)slot_QWebEngineScript___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QWebEngineScript[] = {
    {SIP_MLNAME_CAST(sipName_injectionPoint), meth_QWebEngineScript_injectionPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_injectionPoint)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QWebEngineScript_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_isNull)},
    {SIP_MLNAME_CAST(sipName_name), meth_QWebEngineScript_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_name)},
    {SIP_MLNAME_CAST(sipName_runsOnSubFrames), meth_QWebEngineScript_runsOnSubFrames, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_runsOnSubFrames)},
    {SIP_MLNAME_CAST(sipName_setInjectionPoint), meth_QWebEngineScript_setInjectionPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_setInjectionPoint)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QWebEngineScript_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_setName)},
    {SIP_MLNAME_CAST(sipName_setRunsOnSubFrames), meth_QWebEngineScript_setRunsOnSubFrames, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_setRunsOnSubFrames)},
    {SIP_MLNAME_CAST(sipName_setSourceCode), meth_QWebEngineScript_setSourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_setSourceCode)},
    {SIP_MLNAME_CAST(sipName_setWorldId), meth_QWebEngineScript_setWorldId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_setWorldId)},
    {SIP_MLNAME_CAST(sipName_sourceCode), meth_QWebEngineScript_sourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_sourceCode)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QWebEngineScript_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_swap)},
    {SIP_MLNAME_CAST(sipName_worldId), meth_QWebEngineScript_worldId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineScript_worldId)}
};

static sipEnumMemberDef enummembers_QWebEngineScript[] = {
    {sipName_ApplicationWorld, static_cast<int>(QWebEngineScript::ApplicationWorld), 28},
    {sipName_Deferred, static_cast<int>(QWebEngineScript::Deferred), 27},
    {sipName_DocumentCreation, static_cast<int>(QWebEngineScript::DocumentCreation), 27},
    {sipName_DocumentReady, static_cast<int>(QWebEngineScript::DocumentReady), 27},
    {sipName_MainWorld, static_cast<int>(QWebEngineScript::MainWorld), 28},
    {sipName_UserWorld, static_cast<int>(QWebEngineScript::UserWorld), 28},
};

PyDoc_STRVAR(doc_QWebEngineScript, "\1QWebEngineScript()\n"
    "QWebEngineScript(QWebEngineScript)");


pyqt5ClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEngineScript = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineScript,
        {0}
    },
    {
        sipNameNr_QWebEngineScript,
        {0, 0, 1},
        12, methods_QWebEngineScript,
        6, enummembers_QWebEngineScript,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineScript,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QWebEngineScript,
    init_type_QWebEngineScript,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineScript,
    assign_QWebEngineScript,
    array_QWebEngineScript,
    copy_QWebEngineScript,
    release_QWebEngineScript,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
