/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineWidgets/qwebenginecontextmenudata.sip"
#include <qwebenginecontextmenudata.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineContextMenuData.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineContextMenuData.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineContextMenuData.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEngineContextMenuData.cpp"


PyDoc_STRVAR(doc_QWebEngineContextMenuData_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_isValid(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_isValid, doc_QWebEngineContextMenuData_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineContextMenuData_position, "position(self) -> QPoint");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_position(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->position());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_position, doc_QWebEngineContextMenuData_position);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineContextMenuData_selectedText, "selectedText(self) -> str");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_selectedText, doc_QWebEngineContextMenuData_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineContextMenuData_linkText, "linkText(self) -> str");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_linkText(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_linkText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->linkText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_linkText, doc_QWebEngineContextMenuData_linkText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineContextMenuData_linkUrl, "linkUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_linkUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_linkUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->linkUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_linkUrl, doc_QWebEngineContextMenuData_linkUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineContextMenuData_mediaUrl, "mediaUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_mediaUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_mediaUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->mediaUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_mediaUrl, doc_QWebEngineContextMenuData_mediaUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineContextMenuData_mediaType, "mediaType(self) -> QWebEngineContextMenuData.MediaType");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_mediaType(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_mediaType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            QWebEngineContextMenuData::MediaType sipRes;

            sipRes = sipCpp->mediaType();

            return sipConvertFromEnum(sipRes,sipType_QWebEngineContextMenuData_MediaType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_mediaType, doc_QWebEngineContextMenuData_mediaType);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineContextMenuData_isContentEditable, "isContentEditable(self) -> bool");

extern "C" {static PyObject *meth_QWebEngineContextMenuData_isContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineContextMenuData_isContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineContextMenuData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineContextMenuData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isContentEditable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineContextMenuData, sipName_isContentEditable, doc_QWebEngineContextMenuData_isContentEditable);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineContextMenuData(void *, int);}
static void release_QWebEngineContextMenuData(void *sipCppV,int)
{
    delete reinterpret_cast<QWebEngineContextMenuData *>(sipCppV);
}


extern "C" {static void assign_QWebEngineContextMenuData(void *, SIP_SSIZE_T, const void *);}
static void assign_QWebEngineContextMenuData(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QWebEngineContextMenuData *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QWebEngineContextMenuData *>(sipSrc);
}


extern "C" {static void *array_QWebEngineContextMenuData(SIP_SSIZE_T);}
static void *array_QWebEngineContextMenuData(SIP_SSIZE_T sipNrElem)
{
    return new QWebEngineContextMenuData[sipNrElem];
}


extern "C" {static void *copy_QWebEngineContextMenuData(const void *, SIP_SSIZE_T);}
static void *copy_QWebEngineContextMenuData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QWebEngineContextMenuData(reinterpret_cast<const QWebEngineContextMenuData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebEngineContextMenuData(sipSimpleWrapper *);}
static void dealloc_QWebEngineContextMenuData(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineContextMenuData(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QWebEngineContextMenuData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineContextMenuData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWebEngineContextMenuData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QWebEngineContextMenuData();

            return sipCpp;
        }
    }

    {
        const QWebEngineContextMenuData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebEngineContextMenuData, &a0))
        {
            sipCpp = new QWebEngineContextMenuData(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QWebEngineContextMenuData[] = {
    {SIP_MLNAME_CAST(sipName_isContentEditable), meth_QWebEngineContextMenuData_isContentEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_isContentEditable)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QWebEngineContextMenuData_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_isValid)},
    {SIP_MLNAME_CAST(sipName_linkText), meth_QWebEngineContextMenuData_linkText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_linkText)},
    {SIP_MLNAME_CAST(sipName_linkUrl), meth_QWebEngineContextMenuData_linkUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_linkUrl)},
    {SIP_MLNAME_CAST(sipName_mediaType), meth_QWebEngineContextMenuData_mediaType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_mediaType)},
    {SIP_MLNAME_CAST(sipName_mediaUrl), meth_QWebEngineContextMenuData_mediaUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_mediaUrl)},
    {SIP_MLNAME_CAST(sipName_position), meth_QWebEngineContextMenuData_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_position)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebEngineContextMenuData_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineContextMenuData_selectedText)}
};

static sipEnumMemberDef enummembers_QWebEngineContextMenuData[] = {
    {sipName_MediaTypeAudio, static_cast<int>(QWebEngineContextMenuData::MediaTypeAudio), 5},
    {sipName_MediaTypeCanvas, static_cast<int>(QWebEngineContextMenuData::MediaTypeCanvas), 5},
    {sipName_MediaTypeFile, static_cast<int>(QWebEngineContextMenuData::MediaTypeFile), 5},
    {sipName_MediaTypeImage, static_cast<int>(QWebEngineContextMenuData::MediaTypeImage), 5},
    {sipName_MediaTypeNone, static_cast<int>(QWebEngineContextMenuData::MediaTypeNone), 5},
    {sipName_MediaTypePlugin, static_cast<int>(QWebEngineContextMenuData::MediaTypePlugin), 5},
    {sipName_MediaTypeVideo, static_cast<int>(QWebEngineContextMenuData::MediaTypeVideo), 5},
};

PyDoc_STRVAR(doc_QWebEngineContextMenuData, "\1QWebEngineContextMenuData()\n"
    "QWebEngineContextMenuData(QWebEngineContextMenuData)");


pyqt5ClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEngineContextMenuData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineContextMenuData,
        {0}
    },
    {
        sipNameNr_QWebEngineContextMenuData,
        {0, 0, 1},
        8, methods_QWebEngineContextMenuData,
        7, enummembers_QWebEngineContextMenuData,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineContextMenuData,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QWebEngineContextMenuData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineContextMenuData,
    assign_QWebEngineContextMenuData,
    array_QWebEngineContextMenuData,
    copy_QWebEngineContextMenuData,
    release_QWebEngineContextMenuData,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
