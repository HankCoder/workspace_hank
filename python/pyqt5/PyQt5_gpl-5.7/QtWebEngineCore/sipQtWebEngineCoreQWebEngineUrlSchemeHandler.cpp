/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineCore.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineCore/qwebengineurlschemehandler.sip"
#include <qwebengineurlschemehandler.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineCore/qwebengineurlrequestjob.sip"
#include <qwebengineurlrequestjob.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlSchemeHandler.cpp"


class sipQWebEngineUrlSchemeHandler : public QWebEngineUrlSchemeHandler
{
public:
    sipQWebEngineUrlSchemeHandler(QObject*);
    virtual ~sipQWebEngineUrlSchemeHandler();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void requestStarted(QWebEngineUrlRequestJob*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebEngineUrlSchemeHandler(const sipQWebEngineUrlSchemeHandler &);
    sipQWebEngineUrlSchemeHandler &operator = (const sipQWebEngineUrlSchemeHandler &);

    char sipPyMethods[8];
};

sipQWebEngineUrlSchemeHandler::sipQWebEngineUrlSchemeHandler(QObject*a0): QWebEngineUrlSchemeHandler(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebEngineUrlSchemeHandler::~sipQWebEngineUrlSchemeHandler()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebEngineUrlSchemeHandler::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebEngineCore_qt_metaobject(sipPySelf,sipType_QWebEngineUrlSchemeHandler);

    return QWebEngineUrlSchemeHandler::metaObject();
}

int sipQWebEngineUrlSchemeHandler::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebEngineUrlSchemeHandler::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebEngineCore_qt_metacall(sipPySelf,sipType_QWebEngineUrlSchemeHandler,_c,_id,_a);

    return _id;
}

void *sipQWebEngineUrlSchemeHandler::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebEngineCore_qt_metacast(sipPySelf, sipType_QWebEngineUrlSchemeHandler, _clname, &sipCpp) ? sipCpp : QWebEngineUrlSchemeHandler::qt_metacast(_clname));
}

void sipQWebEngineUrlSchemeHandler::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebEngineUrlSchemeHandler::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineCore_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineUrlSchemeHandler::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebEngineUrlSchemeHandler::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineCore_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineUrlSchemeHandler::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebEngineUrlSchemeHandler::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebEngineCore_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineUrlSchemeHandler::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebEngineUrlSchemeHandler::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebEngineCore_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineUrlSchemeHandler::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebEngineUrlSchemeHandler::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebEngineCore_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebEngineUrlSchemeHandler::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebEngineUrlSchemeHandler::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebEngineCore_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebEngineUrlSchemeHandler::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebEngineUrlSchemeHandler::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebEngineCore_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEngineUrlSchemeHandler::requestStarted(QWebEngineUrlRequestJob*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QWebEngineUrlSchemeHandler,sipName_requestStarted);

    if (!sipMeth)
        return;

    extern void sipVH_QtWebEngineCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebEngineUrlRequestJob*);

    sipVH_QtWebEngineCore_0(sipGILState, sipModuleAPI_QtWebEngineCore_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QWebEngineUrlSchemeHandler_requestStarted, "requestStarted(self, QWebEngineUrlRequestJob)");

extern "C" {static PyObject *meth_QWebEngineUrlSchemeHandler_requestStarted(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlSchemeHandler_requestStarted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWebEngineUrlRequestJob* a0;
        QWebEngineUrlSchemeHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEngineUrlSchemeHandler, &sipCpp, sipType_QWebEngineUrlRequestJob, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebEngineUrlSchemeHandler, sipName_requestStarted);
                return NULL;
            }

            sipCpp->requestStarted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlSchemeHandler, sipName_requestStarted, doc_QWebEngineUrlSchemeHandler_requestStarted);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineUrlSchemeHandler(void *, int);}
static void release_QWebEngineUrlSchemeHandler(void *sipCppV,int)
{
    QWebEngineUrlSchemeHandler *sipCpp = reinterpret_cast<QWebEngineUrlSchemeHandler *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEngineUrlSchemeHandler(sipSimpleWrapper *);}
static void dealloc_QWebEngineUrlSchemeHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebEngineUrlSchemeHandler *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEngineUrlSchemeHandler(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebEngineUrlSchemeHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEngineUrlSchemeHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQWebEngineUrlSchemeHandler *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_QObject, &a0))
        {
            sipCpp = new sipQWebEngineUrlSchemeHandler(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEngineUrlSchemeHandler[] = {{165, 0, 1}};


static PyMethodDef methods_QWebEngineUrlSchemeHandler[] = {
    {SIP_MLNAME_CAST(sipName_requestStarted), meth_QWebEngineUrlSchemeHandler_requestStarted, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlSchemeHandler_requestStarted)}
};

PyDoc_STRVAR(doc_QWebEngineUrlSchemeHandler, "\1QWebEngineUrlSchemeHandler(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtWebEngineCore_QWebEngineUrlSchemeHandler = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineUrlSchemeHandler,
        {0}
    },
    {
        sipNameNr_QWebEngineUrlSchemeHandler,
        {0, 0, 1},
        1, methods_QWebEngineUrlSchemeHandler,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEngineUrlSchemeHandler,
    -1,
    -1,
    supers_QWebEngineUrlSchemeHandler,
    0,
    init_type_QWebEngineUrlSchemeHandler,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEngineUrlSchemeHandler,
    0,
    0,
    0,
    release_QWebEngineUrlSchemeHandler,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebEngineUrlSchemeHandler::staticMetaObject,
    0,
    0,
    0
};
