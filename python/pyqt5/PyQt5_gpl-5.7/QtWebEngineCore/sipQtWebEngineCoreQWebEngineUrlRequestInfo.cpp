/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineCore.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWebEngineCore/qwebengineurlrequestinfo.sip"
#include <qwebengineurlrequestinfo.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestInfo.cpp"

#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestInfo.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWebEngineCore/sipQtWebEngineCoreQWebEngineUrlRequestInfo.cpp"


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_resourceType, "resourceType(self) -> QWebEngineUrlRequestInfo.ResourceType");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_resourceType(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_resourceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp))
        {
            QWebEngineUrlRequestInfo::ResourceType sipRes;

            sipRes = sipCpp->resourceType();

            return sipConvertFromEnum(sipRes,sipType_QWebEngineUrlRequestInfo_ResourceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_resourceType, doc_QWebEngineUrlRequestInfo_resourceType);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_navigationType, "navigationType(self) -> QWebEngineUrlRequestInfo.NavigationType");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_navigationType(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_navigationType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp))
        {
            QWebEngineUrlRequestInfo::NavigationType sipRes;

            sipRes = sipCpp->navigationType();

            return sipConvertFromEnum(sipRes,sipType_QWebEngineUrlRequestInfo_NavigationType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_navigationType, doc_QWebEngineUrlRequestInfo_navigationType);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_requestUrl, "requestUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_requestUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_requestUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->requestUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_requestUrl, doc_QWebEngineUrlRequestInfo_requestUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_firstPartyUrl, "firstPartyUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_firstPartyUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_firstPartyUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->firstPartyUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_firstPartyUrl, doc_QWebEngineUrlRequestInfo_firstPartyUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_requestMethod, "requestMethod(self) -> QByteArray");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_requestMethod(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_requestMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->requestMethod());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_requestMethod, doc_QWebEngineUrlRequestInfo_requestMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_block, "block(self, bool)");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_block(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_block(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp, &a0))
        {
            sipCpp->block(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_block, doc_QWebEngineUrlRequestInfo_block);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_redirect, "redirect(self, QUrl)");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_redirect(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_redirect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->redirect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_redirect, doc_QWebEngineUrlRequestInfo_redirect);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEngineUrlRequestInfo_setHttpHeader, "setHttpHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QWebEngineUrlRequestInfo_setHttpHeader(PyObject *, PyObject *);}
static PyObject *meth_QWebEngineUrlRequestInfo_setHttpHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        QWebEngineUrlRequestInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QWebEngineUrlRequestInfo, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setHttpHeader(*a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEngineUrlRequestInfo, sipName_setHttpHeader, doc_QWebEngineUrlRequestInfo_setHttpHeader);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEngineUrlRequestInfo(void *, int);}
static void release_QWebEngineUrlRequestInfo(void *,int)
{
}


static PyMethodDef methods_QWebEngineUrlRequestInfo[] = {
    {SIP_MLNAME_CAST(sipName_block), meth_QWebEngineUrlRequestInfo_block, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_block)},
    {SIP_MLNAME_CAST(sipName_firstPartyUrl), meth_QWebEngineUrlRequestInfo_firstPartyUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_firstPartyUrl)},
    {SIP_MLNAME_CAST(sipName_navigationType), meth_QWebEngineUrlRequestInfo_navigationType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_navigationType)},
    {SIP_MLNAME_CAST(sipName_redirect), meth_QWebEngineUrlRequestInfo_redirect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_redirect)},
    {SIP_MLNAME_CAST(sipName_requestMethod), meth_QWebEngineUrlRequestInfo_requestMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_requestMethod)},
    {SIP_MLNAME_CAST(sipName_requestUrl), meth_QWebEngineUrlRequestInfo_requestUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_requestUrl)},
    {SIP_MLNAME_CAST(sipName_resourceType), meth_QWebEngineUrlRequestInfo_resourceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_resourceType)},
    {SIP_MLNAME_CAST(sipName_setHttpHeader), meth_QWebEngineUrlRequestInfo_setHttpHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEngineUrlRequestInfo_setHttpHeader)}
};

static sipEnumMemberDef enummembers_QWebEngineUrlRequestInfo[] = {
    {sipName_NavigationTypeBackForward, static_cast<int>(QWebEngineUrlRequestInfo::NavigationTypeBackForward), 2},
    {sipName_NavigationTypeFormSubmitted, static_cast<int>(QWebEngineUrlRequestInfo::NavigationTypeFormSubmitted), 2},
    {sipName_NavigationTypeLink, static_cast<int>(QWebEngineUrlRequestInfo::NavigationTypeLink), 2},
    {sipName_NavigationTypeOther, static_cast<int>(QWebEngineUrlRequestInfo::NavigationTypeOther), 2},
    {sipName_NavigationTypeReload, static_cast<int>(QWebEngineUrlRequestInfo::NavigationTypeReload), 2},
    {sipName_NavigationTypeTyped, static_cast<int>(QWebEngineUrlRequestInfo::NavigationTypeTyped), 2},
    {sipName_ResourceTypeCspReport, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeCspReport), 3},
    {sipName_ResourceTypeFavicon, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeFavicon), 3},
    {sipName_ResourceTypeFontResource, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeFontResource), 3},
    {sipName_ResourceTypeImage, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeImage), 3},
    {sipName_ResourceTypeMainFrame, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeMainFrame), 3},
    {sipName_ResourceTypeMedia, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeMedia), 3},
    {sipName_ResourceTypeObject, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeObject), 3},
    {sipName_ResourceTypePing, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypePing), 3},
    {sipName_ResourceTypePluginResource, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypePluginResource), 3},
    {sipName_ResourceTypePrefetch, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypePrefetch), 3},
    {sipName_ResourceTypeScript, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeScript), 3},
    {sipName_ResourceTypeServiceWorker, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeServiceWorker), 3},
    {sipName_ResourceTypeSharedWorker, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeSharedWorker), 3},
    {sipName_ResourceTypeStylesheet, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeStylesheet), 3},
    {sipName_ResourceTypeSubFrame, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeSubFrame), 3},
    {sipName_ResourceTypeSubResource, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeSubResource), 3},
    {sipName_ResourceTypeUnknown, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeUnknown), 3},
    {sipName_ResourceTypeWorker, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeWorker), 3},
    {sipName_ResourceTypeXhr, static_cast<int>(QWebEngineUrlRequestInfo::ResourceTypeXhr), 3},
};


pyqt5ClassTypeDef sipTypeDef_QtWebEngineCore_QWebEngineUrlRequestInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEngineUrlRequestInfo,
        {0}
    },
    {
        sipNameNr_QWebEngineUrlRequestInfo,
        {0, 0, 1},
        8, methods_QWebEngineUrlRequestInfo,
        25, enummembers_QWebEngineUrlRequestInfo,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QWebEngineUrlRequestInfo,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
