/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIpylupdate.h"

#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/pylupdate/pylupdatemod.sip"
#include "pylupdate.h"
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/pylupdate/sippylupdateMetaTranslator.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/pylupdate/sippylupdateMetaTranslator.cpp"


extern "C" {static PyObject *meth_MetaTranslator_load(PyObject *, PyObject *);}
static PyObject *meth_MetaTranslator_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        MetaTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MetaTranslator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->load(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MetaTranslator, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MetaTranslator_save(PyObject *, PyObject *);}
static PyObject *meth_MetaTranslator_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const MetaTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MetaTranslator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->save(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MetaTranslator, sipName_save, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MetaTranslator_stripObsoleteMessages(PyObject *, PyObject *);}
static PyObject *meth_MetaTranslator_stripObsoleteMessages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        MetaTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MetaTranslator, &sipCpp))
        {
            sipCpp->stripObsoleteMessages();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MetaTranslator, sipName_stripObsoleteMessages, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MetaTranslator_stripEmptyContexts(PyObject *, PyObject *);}
static PyObject *meth_MetaTranslator_stripEmptyContexts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        MetaTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MetaTranslator, &sipCpp))
        {
            sipCpp->stripEmptyContexts();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MetaTranslator, sipName_stripEmptyContexts, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MetaTranslator_setCodec(PyObject *, PyObject *);}
static PyObject *meth_MetaTranslator_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        MetaTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAL", &sipSelf, sipType_MetaTranslator, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->setCodec(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MetaTranslator, sipName_setCodec, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_MetaTranslator(void *, int);}
static void release_MetaTranslator(void *sipCppV,int)
{
    delete reinterpret_cast<MetaTranslator *>(sipCppV);
}


extern "C" {static void assign_MetaTranslator(void *, SIP_SSIZE_T, const void *);}
static void assign_MetaTranslator(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<MetaTranslator *>(sipDst)[sipDstIdx] = *reinterpret_cast<const MetaTranslator *>(sipSrc);
}


extern "C" {static void *array_MetaTranslator(SIP_SSIZE_T);}
static void *array_MetaTranslator(SIP_SSIZE_T sipNrElem)
{
    return new MetaTranslator[sipNrElem];
}


extern "C" {static void *copy_MetaTranslator(const void *, SIP_SSIZE_T);}
static void *copy_MetaTranslator(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new MetaTranslator(reinterpret_cast<const MetaTranslator *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_MetaTranslator(sipSimpleWrapper *);}
static void dealloc_MetaTranslator(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_MetaTranslator(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_MetaTranslator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_MetaTranslator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    MetaTranslator *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new MetaTranslator();

            return sipCpp;
        }
    }

    {
        const MetaTranslator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_MetaTranslator, &a0))
        {
            sipCpp = new MetaTranslator(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_MetaTranslator[] = {
    {SIP_MLNAME_CAST(sipName_load), meth_MetaTranslator_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_MetaTranslator_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_MetaTranslator_setCodec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stripEmptyContexts), meth_MetaTranslator_stripEmptyContexts, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stripObsoleteMessages), meth_MetaTranslator_stripObsoleteMessages, METH_VARARGS, NULL}
};


pyqt5ClassTypeDef sipTypeDef_pylupdate_MetaTranslator = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_MetaTranslator,
        {0}
    },
    {
        sipNameNr_MetaTranslator,
        {0, 0, 1},
        5, methods_MetaTranslator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_MetaTranslator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_MetaTranslator,
    assign_MetaTranslator,
    array_MetaTranslator,
    copy_MetaTranslator,
    release_MetaTranslator,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
