/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 62 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 41 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 44 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 47 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 182 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 52 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 55 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 58 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 61 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 64 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 67 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 70 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 73 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 76 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 555 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 82 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 604 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 85 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 577 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 88 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 593 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 91 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 238 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 94 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 711 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 97 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 100 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 103 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 106 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 109 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 112 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 115 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 118 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 121 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 326 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 124 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 127 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 130 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 133 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 136 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 139 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 142 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 145 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 148 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 151 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 154 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 157 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 160 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 163 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 166 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 169 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 172 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 175 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtQuick/sipQtQuickQQuickPaintedItem.cpp"

sipQQuickPaintedItem::sipQQuickPaintedItem(QQuickItem*a0): QQuickPaintedItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickPaintedItem::~sipQQuickPaintedItem()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQuickPaintedItem::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickPaintedItem);

    return QQuickPaintedItem::metaObject();
}

int sipQQuickPaintedItem::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQuickPaintedItem::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickPaintedItem,_c,_id,_a);

    return _id;
}

void *sipQQuickPaintedItem::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickPaintedItem, _clname, &sipCpp) ? sipCpp : QQuickPaintedItem::qt_metacast(_clname));
}

void sipQQuickPaintedItem::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQuickPaintedItem::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQuickPaintedItem::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickPaintedItem::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQuickPaintedItem::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::updatePolish()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_updatePolish);

    if (!sipMeth)
    {
        QQuickPaintedItem::updatePolish();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::geometryChanged(const QRectF& a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_geometryChanged);

    if (!sipMeth)
    {
        QQuickPaintedItem::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&,const QRectF&);

    sipVH_QtQuick_15(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickPaintedItem::childMouseEventFilter(QQuickItem*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_childMouseEventFilter);

    if (!sipMeth)
        return QQuickPaintedItem::childMouseEventFilter(a0,a1);

    extern bool sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem*,QEvent*);

    return sipVH_QtQuick_16(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtQuick_17(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtQuick_18(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtQuick_19(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverLeaveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_21(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverMoveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_21(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverEnterEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_21(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::touchEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[1]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::touchUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_touchUngrabEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::touchUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::mouseUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mouseUngrabEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtQuick_22(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_componentComplete);

    if (!sipMeth)
    {
        QQuickPaintedItem::componentComplete();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_classBegin);

    if (!sipMeth)
    {
        QQuickPaintedItem::classBegin();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickPaintedItem::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQuickPaintedItem::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQQuickPaintedItem::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QQuickPaintedItem::inputMethodQuery(a0);

    extern QVariant sipVH_QtQuick_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtQuick_23(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickPaintedItem::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return QQuickPaintedItem::contains(a0);

    extern bool sipVH_QtQuick_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&);

    return sipVH_QtQuick_24(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::itemChange(QQuickItem::ItemChange a0,const QQuickItem::ItemChangeData& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
    {
        QQuickPaintedItem::itemChange(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem::ItemChange,const QQuickItem::ItemChangeData&);

    sipVH_QtQuick_11(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::releaseResources()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_releaseResources);

    if (!sipMeth)
    {
        QQuickPaintedItem::releaseResources();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGTextureProvider* sipQQuickPaintedItem::textureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_textureProvider);

    if (!sipMeth)
        return QQuickPaintedItem::textureProvider();

    extern QSGTextureProvider* sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_12(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickPaintedItem::isTextureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_isTextureProvider);

    if (!sipMeth)
        return QQuickPaintedItem::isTextureProvider();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGNode* sipQQuickPaintedItem::updatePaintNode(QSGNode*a0,QQuickItem::UpdatePaintNodeData*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_updatePaintNode);

    if (!sipMeth)
        return QQuickPaintedItem::updatePaintNode(a0,a1);

    extern QSGNode* sipVH_QtQuick_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSGNode*,QQuickItem::UpdatePaintNodeData*);

    return sipVH_QtQuick_13(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::paint(QPainter*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,sipName_QQuickPaintedItem,sipName_paint);

    if (!sipMeth)
        return;

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtQuick_14(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickPaintedItem_update, "update(self, rect: QRect = QRect())");

extern "C" {static PyObject *meth_QQuickPaintedItem_update(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_update(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect& a0def = QRect();
        const QRect* a0 = &a0def;
        QQuickPaintedItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_update, doc_QQuickPaintedItem_update);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_opaquePainting, "opaquePainting(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_opaquePainting(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_opaquePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->opaquePainting();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_opaquePainting, doc_QQuickPaintedItem_opaquePainting);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setOpaquePainting, "setOpaquePainting(self, bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setOpaquePainting(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setOpaquePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setOpaquePainting(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setOpaquePainting, doc_QQuickPaintedItem_setOpaquePainting);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_antialiasing, "antialiasing(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_antialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_antialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->antialiasing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_antialiasing, doc_QQuickPaintedItem_antialiasing);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setAntialiasing, "setAntialiasing(self, bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setAntialiasing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setAntialiasing, doc_QQuickPaintedItem_setAntialiasing);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mipmap, "mipmap(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_mipmap(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->mipmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mipmap, doc_QQuickPaintedItem_mipmap);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setMipmap, "setMipmap(self, bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setMipmap(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setMipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setMipmap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setMipmap, doc_QQuickPaintedItem_setMipmap);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_performanceHints, "performanceHints(self) -> QQuickPaintedItem.PerformanceHints");

extern "C" {static PyObject *meth_QQuickPaintedItem_performanceHints(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_performanceHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new QQuickPaintedItem::PerformanceHints(sipCpp->performanceHints());

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_performanceHints, doc_QQuickPaintedItem_performanceHints);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setPerformanceHint, "setPerformanceHint(self, QQuickPaintedItem.PerformanceHint, enabled: bool = True)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setPerformanceHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setPerformanceHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem::PerformanceHint a0;
        bool a1 = 1;
        QQuickPaintedItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_PerformanceHint, &a0, &a1))
        {
            sipCpp->setPerformanceHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setPerformanceHint, doc_QQuickPaintedItem_setPerformanceHint);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setPerformanceHints, "setPerformanceHints(self, Union[QQuickPaintedItem.PerformanceHints, QQuickPaintedItem.PerformanceHint])");

extern "C" {static PyObject *meth_QQuickPaintedItem_setPerformanceHints(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setPerformanceHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State))
        {
            sipCpp->setPerformanceHints(*a0);
            sipReleaseType(a0,sipType_QQuickPaintedItem_PerformanceHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setPerformanceHints, doc_QQuickPaintedItem_setPerformanceHints);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsBoundingRect, "contentsBoundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->contentsBoundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsBoundingRect, doc_QQuickPaintedItem_contentsBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsSize, "contentsSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->contentsSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsSize, doc_QQuickPaintedItem_contentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setContentsSize, "setContentsSize(self, QSize)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setContentsSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setContentsSize, doc_QQuickPaintedItem_setContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_resetContentsSize, "resetContentsSize(self)");

extern "C" {static PyObject *meth_QQuickPaintedItem_resetContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_resetContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->resetContentsSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_resetContentsSize, doc_QQuickPaintedItem_resetContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsScale, "contentsScale(self) -> float");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->contentsScale();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsScale, doc_QQuickPaintedItem_contentsScale);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setContentsScale, "setContentsScale(self, float)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setContentsScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setContentsScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setContentsScale(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setContentsScale, doc_QQuickPaintedItem_setContentsScale);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_fillColor, "fillColor(self) -> QColor");

extern "C" {static PyObject *meth_QQuickPaintedItem_fillColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_fillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->fillColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_fillColor, doc_QQuickPaintedItem_fillColor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setFillColor, "setFillColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QQuickPaintedItem_setFillColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setFillColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setFillColor, doc_QQuickPaintedItem_setFillColor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_renderTarget, "renderTarget(self) -> QQuickPaintedItem.RenderTarget");

extern "C" {static PyObject *meth_QQuickPaintedItem_renderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_renderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QQuickPaintedItem::RenderTarget sipRes;

            sipRes = sipCpp->renderTarget();

            return sipConvertFromEnum(sipRes,sipType_QQuickPaintedItem_RenderTarget);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_renderTarget, doc_QQuickPaintedItem_renderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setRenderTarget, "setRenderTarget(self, QQuickPaintedItem.RenderTarget)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setRenderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setRenderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem::RenderTarget a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_RenderTarget, &a0))
        {
            sipCpp->setRenderTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setRenderTarget, doc_QQuickPaintedItem_setRenderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_paint, "paint(self, QPainter)");

extern "C" {static PyObject *meth_QQuickPaintedItem_paint(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPainter* a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QPainter, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickPaintedItem, sipName_paint);
                return NULL;
            }

            sipCpp->paint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_paint, doc_QQuickPaintedItem_paint);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_updatePaintNode, "updatePaintNode(self, QSGNode, QQuickItem.UpdatePaintNodeData) -> QSGNode");

extern "C" {static PyObject *meth_QQuickPaintedItem_updatePaintNode(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_updatePaintNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSGNode* a0;
        QQuickItem::UpdatePaintNodeData* a1;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSGNode, &a0, sipType_QQuickItem_UpdatePaintNodeData, &a1))
        {
            QSGNode*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickPaintedItem::updatePaintNode(a0,a1) : sipCpp->updatePaintNode(a0,a1));

            return sipConvertFromType(sipRes,sipType_QSGNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_updatePaintNode, doc_QQuickPaintedItem_updatePaintNode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_isTextureProvider, "isTextureProvider(self) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_isTextureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_isTextureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickPaintedItem::isTextureProvider() : sipCpp->isTextureProvider());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_isTextureProvider, doc_QQuickPaintedItem_isTextureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_textureProvider, "textureProvider(self) -> QSGTextureProvider");

extern "C" {static PyObject *meth_QQuickPaintedItem_textureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_textureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QSGTextureProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickPaintedItem::textureProvider() : sipCpp->textureProvider());

            return sipConvertFromType(sipRes,sipType_QSGTextureProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_textureProvider, doc_QQuickPaintedItem_textureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_releaseResources, "releaseResources(self)");

extern "C" {static PyObject *meth_QQuickPaintedItem_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QQuickPaintedItem::releaseResources() : sipCpp->releaseResources());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_releaseResources, doc_QQuickPaintedItem_releaseResources);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_itemChange, "itemChange(self, QQuickItem.ItemChange, QQuickItem.ItemChangeData)");

extern "C" {static PyObject *meth_QQuickPaintedItem_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickItem::ItemChange a0;
        const QQuickItem::ItemChangeData* a1;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickItem_ItemChange, &a0, sipType_QQuickItem_ItemChangeData, &a1))
        {
            (sipSelfWasArg ? sipCpp->QQuickPaintedItem::itemChange(a0,*a1) : sipCpp->itemChange(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_itemChange, doc_QQuickPaintedItem_itemChange);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_textureSize, "textureSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickPaintedItem_textureSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_textureSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->textureSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_textureSize, doc_QQuickPaintedItem_textureSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setTextureSize, "setTextureSize(self, QSize)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setTextureSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setTextureSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setTextureSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setTextureSize, doc_QQuickPaintedItem_setTextureSize);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QQuickPaintedItem(void *, const sipTypeDef *);}
static void *cast_QQuickPaintedItem(void *sipCppV, const sipTypeDef *targetType)
{
    QQuickPaintedItem *sipCpp = reinterpret_cast<QQuickPaintedItem *>(sipCppV);

    if (targetType == sipType_QQmlParserStatus)
        return static_cast<QQmlParserStatus *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickPaintedItem(void *, int);}
static void release_QQuickPaintedItem(void *sipCppV,int)
{
    QQuickPaintedItem *sipCpp = reinterpret_cast<QQuickPaintedItem *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickPaintedItem(sipSimpleWrapper *);}
static void dealloc_QQuickPaintedItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQuickPaintedItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQuickPaintedItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQuickPaintedItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickPaintedItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickPaintedItem *sipCpp = 0;

    {
        QQuickItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickPaintedItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickPaintedItem[] = {{7, 255, 1}};


static PyMethodDef methods_QQuickPaintedItem[] = {
    {SIP_MLNAME_CAST(sipName_antialiasing), meth_QQuickPaintedItem_antialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_antialiasing)},
    {SIP_MLNAME_CAST(sipName_contentsBoundingRect), meth_QQuickPaintedItem_contentsBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsBoundingRect)},
    {SIP_MLNAME_CAST(sipName_contentsScale), meth_QQuickPaintedItem_contentsScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsScale)},
    {SIP_MLNAME_CAST(sipName_contentsSize), meth_QQuickPaintedItem_contentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsSize)},
    {SIP_MLNAME_CAST(sipName_fillColor), meth_QQuickPaintedItem_fillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_fillColor)},
    {SIP_MLNAME_CAST(sipName_isTextureProvider), meth_QQuickPaintedItem_isTextureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_isTextureProvider)},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QQuickPaintedItem_itemChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_itemChange)},
    {SIP_MLNAME_CAST(sipName_mipmap), meth_QQuickPaintedItem_mipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_mipmap)},
    {SIP_MLNAME_CAST(sipName_opaquePainting), meth_QQuickPaintedItem_opaquePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_opaquePainting)},
    {SIP_MLNAME_CAST(sipName_paint), meth_QQuickPaintedItem_paint, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_paint)},
    {SIP_MLNAME_CAST(sipName_performanceHints), meth_QQuickPaintedItem_performanceHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_performanceHints)},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickPaintedItem_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_releaseResources)},
    {SIP_MLNAME_CAST(sipName_renderTarget), meth_QQuickPaintedItem_renderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_renderTarget)},
    {SIP_MLNAME_CAST(sipName_resetContentsSize), meth_QQuickPaintedItem_resetContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_resetContentsSize)},
    {SIP_MLNAME_CAST(sipName_setAntialiasing), meth_QQuickPaintedItem_setAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setAntialiasing)},
    {SIP_MLNAME_CAST(sipName_setContentsScale), meth_QQuickPaintedItem_setContentsScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setContentsScale)},
    {SIP_MLNAME_CAST(sipName_setContentsSize), meth_QQuickPaintedItem_setContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setContentsSize)},
    {SIP_MLNAME_CAST(sipName_setFillColor), meth_QQuickPaintedItem_setFillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setFillColor)},
    {SIP_MLNAME_CAST(sipName_setMipmap), meth_QQuickPaintedItem_setMipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setMipmap)},
    {SIP_MLNAME_CAST(sipName_setOpaquePainting), meth_QQuickPaintedItem_setOpaquePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setOpaquePainting)},
    {SIP_MLNAME_CAST(sipName_setPerformanceHint), (PyCFunction)meth_QQuickPaintedItem_setPerformanceHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setPerformanceHint)},
    {SIP_MLNAME_CAST(sipName_setPerformanceHints), meth_QQuickPaintedItem_setPerformanceHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setPerformanceHints)},
    {SIP_MLNAME_CAST(sipName_setRenderTarget), meth_QQuickPaintedItem_setRenderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setRenderTarget)},
    {SIP_MLNAME_CAST(sipName_setTextureSize), meth_QQuickPaintedItem_setTextureSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setTextureSize)},
    {SIP_MLNAME_CAST(sipName_textureProvider), meth_QQuickPaintedItem_textureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_textureProvider)},
    {SIP_MLNAME_CAST(sipName_textureSize), meth_QQuickPaintedItem_textureSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_textureSize)},
    {SIP_MLNAME_CAST(sipName_update), (PyCFunction)meth_QQuickPaintedItem_update, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_update)},
    {SIP_MLNAME_CAST(sipName_updatePaintNode), meth_QQuickPaintedItem_updatePaintNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_updatePaintNode)}
};

static sipEnumMemberDef enummembers_QQuickPaintedItem[] = {
    {sipName_FastFBOResizing, static_cast<int>(QQuickPaintedItem::FastFBOResizing), 16},
    {sipName_FramebufferObject, static_cast<int>(QQuickPaintedItem::FramebufferObject), 18},
    {sipName_Image, static_cast<int>(QQuickPaintedItem::Image), 18},
    {sipName_InvertedYFramebufferObject, static_cast<int>(QQuickPaintedItem::InvertedYFramebufferObject), 18},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickPaintedItem[] = {
    {"textureSizeChanged()", "\1textureSizeChanged(self)", 0, 0},
    {"renderTargetChanged()", "\1renderTargetChanged(self)", 0, 0},
    {"contentsScaleChanged()", "\1contentsScaleChanged(self)", 0, 0},
    {"contentsSizeChanged()", "\1contentsSizeChanged(self)", 0, 0},
    {"fillColorChanged()", "\1fillColorChanged(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQuickPaintedItem, "\1QQuickPaintedItem(parent: QQuickItem = None)");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QQuickPaintedItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuickPaintedItem,
        {0}
    },
    {
        sipNameNr_QQuickPaintedItem,
        {0, 0, 1},
        28, methods_QQuickPaintedItem,
        4, enummembers_QQuickPaintedItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickPaintedItem,
    -1,
    -1,
    supers_QQuickPaintedItem,
    0,
    init_type_QQuickPaintedItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickPaintedItem,
    0,
    0,
    0,
    release_QQuickPaintedItem,
    cast_QQuickPaintedItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQuickPaintedItem::staticMetaObject,
    0,
    signals_QQuickPaintedItem,
    0
};
