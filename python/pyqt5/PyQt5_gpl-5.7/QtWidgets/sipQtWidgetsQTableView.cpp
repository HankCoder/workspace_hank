/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qtableview.sip"
#include <qtableview.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 150 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 560 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qheaderview.sip"
#include <qheaderview.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 555 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 604 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 577 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 593 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 326 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 208 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 660 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 252 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 255 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 258 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 261 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 264 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 267 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 270 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 273 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 276 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 279 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 282 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 285 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 288 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 291 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTableView.cpp"


class sipQTableView : public QTableView
{
public:
    sipQTableView(QWidget*);
    virtual ~sipQTableView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void resizeEvent(QResizeEvent*);
    void keyPressEvent(QKeyEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool viewportEvent(QEvent*);
    bool event(QEvent*);
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void updateEditorGeometries();
    void updateEditorData();
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void dataChanged(const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void selectAll();
    void reset();
    void keyboardSearch(const QString&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    QSize viewportSizeHint() const;
    bool isIndexHidden(const QModelIndex&) const;
    void horizontalScrollbarAction(int);
    void verticalScrollbarAction(int);
    int sizeHintForColumn(int) const;
    int sizeHintForRow(int) const;
    void updateGeometries();
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int verticalOffset() const;
    int horizontalOffset() const;
    void timerEvent(QTimerEvent*);
    void paintEvent(QPaintEvent*);
    QStyleOptionViewItem viewOptions() const;
    void scrollContentsBy(int,int);
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void setSelectionModel(QItemSelectionModel*);
    void setRootIndex(const QModelIndex&);
    void setModel(QAbstractItemModel*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTableView(const sipQTableView &);
    sipQTableView &operator = (const sipQTableView &);

    char sipPyMethods[87];
};

sipQTableView::sipQTableView(QWidget*a0): QTableView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableView::~sipQTableView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTableView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTableView);

    return QTableView::metaObject();
}

int sipQTableView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTableView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTableView,_c,_id,_a);

    return _id;
}

void *sipQTableView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTableView, _clname, &sipCpp) ? sipCpp : QTableView::qt_metacast(_clname));
}

void sipQTableView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTableView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTableView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTableView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTableView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QTableView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQTableView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QTableView::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTableView::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QTableView::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTableView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QTableView::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTableView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTableView::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTableView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTableView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTableView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTableView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTableView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTableView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTableView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTableView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTableView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTableView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTableView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTableView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTableView::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTableView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTableView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTableView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTableView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QTableView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTableView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTableView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTableView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTableView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQTableView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTableView::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQTableView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTableView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTableView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTableView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQTableView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTableView::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTableView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTableView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTableView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTableView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTableView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTableView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTableView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTableView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTableView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTableView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTableView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTableView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTableView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTableView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QTableView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtWidgets_91(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQTableView::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QTableView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtWidgets_144(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtWidgets_144(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTableView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QTableView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_145(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtWidgets_145(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableView::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QTableView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_146(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtWidgets_146(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QTableView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QTableView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_147(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTableView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTableView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTableView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QTableView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QTableView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QTableView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QTableView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableView::dataChanged(const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QTableView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&,const QVector<int>&);

    sipVH_QtWidgets_32(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QTableView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QTableView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QTableView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QTableView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtWidgets_23(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTableView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QTableView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtWidgets_24(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QSize sipQTableView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return QTableView::viewportSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTableView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QTableView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QTableView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QTableView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTableView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QTableView::sizeHintForColumn(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTableView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[69]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QTableView::sizeHintForRow(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QTableView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QModelIndexList sipQTableView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[71]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QTableView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_27(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRegion sipQTableView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[72]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QTableView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtWidgets_28(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QTableView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_29(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QModelIndex sipQTableView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QTableView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtWidgets_30(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

int sipQTableView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[75]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QTableView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTableView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[76]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QTableView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTableView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTableView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQTableView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QTableView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_46(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTableView::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QModelIndex sipQTableView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QTableView::indexAt(a0);

    extern QModelIndex sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_33(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QTableView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_34(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QRect sipQTableView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QTableView::visualRect(a0);

    extern QRect sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_35(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QTableView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtWidgets_16(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QTableView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableView::setModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
        QTableView::setModel(a0);
        return;
    }

    typedef void (*sipVH_QtCore_40)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    ((sipVH_QtCore_40)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[40]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTableView_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QTableView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTableView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTableView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -45, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setModel, doc_QTableView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setRootIndex, "setRootIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QTableView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTableView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setRootIndex, doc_QTableView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSelectionModel, "setSelectionModel(self, QItemSelectionModel)");

extern "C" {static PyObject *meth_QTableView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel* a0;
        PyObject *a0Keep;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTableView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTableView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));

            sipKeepReference(sipSelf, -46, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSelectionModel, doc_QTableView_setSelectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_horizontalHeader, "horizontalHeader(self) -> QHeaderView");

extern "C" {static PyObject *meth_QTableView_horizontalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_horizontalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QHeaderView*sipRes;

            sipRes = sipCpp->horizontalHeader();

            return sipConvertFromType(sipRes,sipType_QHeaderView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_horizontalHeader, doc_QTableView_horizontalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_verticalHeader, "verticalHeader(self) -> QHeaderView");

extern "C" {static PyObject *meth_QTableView_verticalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_verticalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QHeaderView*sipRes;

            sipRes = sipCpp->verticalHeader();

            return sipConvertFromType(sipRes,sipType_QHeaderView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_verticalHeader, doc_QTableView_verticalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setHorizontalHeader, "setHorizontalHeader(self, QHeaderView)");

extern "C" {static PyObject *meth_QTableView_setHorizontalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setHorizontalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView* a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTableView, &sipCpp, sipType_QHeaderView, &a0))
        {
            sipCpp->setHorizontalHeader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setHorizontalHeader, doc_QTableView_setHorizontalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setVerticalHeader, "setVerticalHeader(self, QHeaderView)");

extern "C" {static PyObject *meth_QTableView_setVerticalHeader(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setVerticalHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView* a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTableView, &sipCpp, sipType_QHeaderView, &a0))
        {
            sipCpp->setVerticalHeader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setVerticalHeader, doc_QTableView_setVerticalHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowViewportPosition, "rowViewportPosition(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_rowViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rowViewportPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowViewportPosition, doc_QTableView_rowViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setRowHeight, "setRowHeight(self, int, int)");

extern "C" {static PyObject *meth_QTableView_setRowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setRowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            sipCpp->setRowHeight(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setRowHeight, doc_QTableView_setRowHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowHeight, "rowHeight(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_rowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rowHeight(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowHeight, doc_QTableView_rowHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowAt, "rowAt(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_rowAt(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rowAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowAt, doc_QTableView_rowAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnViewportPosition, "columnViewportPosition(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_columnViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnViewportPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnViewportPosition, doc_QTableView_columnViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setColumnWidth, "setColumnWidth(self, int, int)");

extern "C" {static PyObject *meth_QTableView_setColumnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setColumnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnWidth(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setColumnWidth, doc_QTableView_setColumnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnWidth, "columnWidth(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_columnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnWidth(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnWidth, doc_QTableView_columnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnAt, "columnAt(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_columnAt(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnAt, doc_QTableView_columnAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isRowHidden, "isRowHidden(self, int) -> bool");

extern "C" {static PyObject *meth_QTableView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isRowHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isRowHidden, doc_QTableView_isRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setRowHidden, "setRowHidden(self, int, bool)");

extern "C" {static PyObject *meth_QTableView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            sipCpp->setRowHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setRowHidden, doc_QTableView_setRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isColumnHidden, "isColumnHidden(self, int) -> bool");

extern "C" {static PyObject *meth_QTableView_isColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isColumnHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isColumnHidden, doc_QTableView_isColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setColumnHidden, "setColumnHidden(self, int, bool)");

extern "C" {static PyObject *meth_QTableView_setColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setColumnHidden, doc_QTableView_setColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_showGrid, "showGrid(self) -> bool");

extern "C" {static PyObject *meth_QTableView_showGrid(PyObject *, PyObject *);}
static PyObject *meth_QTableView_showGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->showGrid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_showGrid, doc_QTableView_showGrid);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setShowGrid, "setShowGrid(self, bool)");

extern "C" {static PyObject *meth_QTableView_setShowGrid(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setShowGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->setShowGrid(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setShowGrid, doc_QTableView_setShowGrid);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_gridStyle, "gridStyle(self) -> Qt.PenStyle");

extern "C" {static PyObject *meth_QTableView_gridStyle(PyObject *, PyObject *);}
static PyObject *meth_QTableView_gridStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            Qt::PenStyle sipRes;

            sipRes = sipCpp->gridStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_PenStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_gridStyle, doc_QTableView_gridStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setGridStyle, "setGridStyle(self, Qt.PenStyle)");

extern "C" {static PyObject *meth_QTableView_setGridStyle(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setGridStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenStyle a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTableView, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setGridStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setGridStyle, doc_QTableView_setGridStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QTableView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QTableView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QTableView::visualRect(*a0) : sipCpp->visualRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_visualRect, doc_QTableView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_scrollTo, "scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTableView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTableView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            (sipSelfWasArg ? sipCpp->QTableView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_scrollTo, doc_QTableView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QTableView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QTableView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint* a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTableView::indexAt(*a0) : sipCpp->indexAt(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_indexAt, doc_QTableView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectRow, "selectRow(self, int)");

extern "C" {static PyObject *meth_QTableView_selectRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->selectRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectRow, doc_QTableView_selectRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectColumn, "selectColumn(self, int)");

extern "C" {static PyObject *meth_QTableView_selectColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->selectColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectColumn, doc_QTableView_selectColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_hideRow, "hideRow(self, int)");

extern "C" {static PyObject *meth_QTableView_hideRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_hideRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->hideRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_hideRow, doc_QTableView_hideRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_hideColumn, "hideColumn(self, int)");

extern "C" {static PyObject *meth_QTableView_hideColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_hideColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->hideColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_hideColumn, doc_QTableView_hideColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_showRow, "showRow(self, int)");

extern "C" {static PyObject *meth_QTableView_showRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_showRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->showRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_showRow, doc_QTableView_showRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_showColumn, "showColumn(self, int)");

extern "C" {static PyObject *meth_QTableView_showColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_showColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->showColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_showColumn, doc_QTableView_showColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeRowToContents, "resizeRowToContents(self, int)");

extern "C" {static PyObject *meth_QTableView_resizeRowToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeRowToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->resizeRowToContents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeRowToContents, doc_QTableView_resizeRowToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeRowsToContents, "resizeRowsToContents(self)");

extern "C" {static PyObject *meth_QTableView_resizeRowsToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeRowsToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            sipCpp->resizeRowsToContents();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeRowsToContents, doc_QTableView_resizeRowsToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeColumnToContents, "resizeColumnToContents(self, int)");

extern "C" {static PyObject *meth_QTableView_resizeColumnToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeColumnToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->resizeColumnToContents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeColumnToContents, doc_QTableView_resizeColumnToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_resizeColumnsToContents, "resizeColumnsToContents(self)");

extern "C" {static PyObject *meth_QTableView_resizeColumnsToContents(PyObject *, PyObject *);}
static PyObject *meth_QTableView_resizeColumnsToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            sipCpp->resizeColumnsToContents();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_resizeColumnsToContents, doc_QTableView_resizeColumnsToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowMoved, "rowMoved(self, int, int, int)");

extern "C" {static PyObject *meth_QTableView_rowMoved(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->rowMoved(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowMoved, doc_QTableView_rowMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnMoved, "columnMoved(self, int, int, int)");

extern "C" {static PyObject *meth_QTableView_columnMoved(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->columnMoved(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnMoved, doc_QTableView_columnMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowResized, "rowResized(self, int, int, int)");

extern "C" {static PyObject *meth_QTableView_rowResized(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowResized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->rowResized(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowResized, doc_QTableView_rowResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnResized, "columnResized(self, int, int, int)");

extern "C" {static PyObject *meth_QTableView_columnResized(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnResized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->columnResized(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnResized, doc_QTableView_columnResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowCountChanged, "rowCountChanged(self, int, int)");

extern "C" {static PyObject *meth_QTableView_rowCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            sipCpp->rowCountChanged(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowCountChanged, doc_QTableView_rowCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnCountChanged, "columnCountChanged(self, int, int)");

extern "C" {static PyObject *meth_QTableView_columnCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            sipCpp->columnCountChanged(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnCountChanged, doc_QTableView_columnCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QTableView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTableView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QTableView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_scrollContentsBy, doc_QTableView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_viewOptions, "viewOptions(self) -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QTableView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QTableView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QStyleOptionViewItem*sipRes;

            sipRes = new QStyleOptionViewItem((sipSelfWasArg ? sipCpp->QTableView::viewOptions() : sipCpp->viewOptions()));

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_viewOptions, doc_QTableView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QTableView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTableView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTableView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTableView::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_paintEvent, doc_QTableView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTableView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTableView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTableView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTableView::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_timerEvent, doc_QTableView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QTableView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTableView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTableView::horizontalOffset() : sipCpp->horizontalOffset());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_horizontalOffset, doc_QTableView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QTableView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTableView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTableView::verticalOffset() : sipCpp->verticalOffset());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_verticalOffset, doc_QTableView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QTableView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QTableView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView::CursorAction a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QTableView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTableView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_moveCursor, doc_QTableView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSelection, "setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QTableView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QTableView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp->QTableView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSelection, doc_QTableView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QTableView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QTableView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            sipRes = new QRegion((sipSelfWasArg ? sipCpp->QTableView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_visualRegionForSelection, doc_QTableView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectedIndexes, "selectedIndexes(self) -> object");

extern "C" {static PyObject *meth_QTableView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QTableView::selectedIndexes() : sipCpp->selectedIndexes()));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectedIndexes, doc_QTableView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QTableView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTableView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTableView::updateGeometries() : sipCpp->updateGeometries());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_updateGeometries, doc_QTableView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_sizeHintForRow, "sizeHintForRow(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_sizeHintForRow(PyObject *, PyObject *);}
static PyObject *meth_QTableView_sizeHintForRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTableView::sizeHintForRow(a0) : sipCpp->sizeHintForRow(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_sizeHintForRow, doc_QTableView_sizeHintForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_sizeHintForColumn, "sizeHintForColumn(self, int) -> int");

extern "C" {static PyObject *meth_QTableView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTableView::sizeHintForColumn(a0) : sipCpp->sizeHintForColumn(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_sizeHintForColumn, doc_QTableView_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_verticalScrollbarAction, "verticalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QTableView_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTableView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTableView::verticalScrollbarAction(a0) : sipCpp->verticalScrollbarAction(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_verticalScrollbarAction, doc_QTableView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_horizontalScrollbarAction, "horizontalScrollbarAction(self, int)");

extern "C" {static PyObject *meth_QTableView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTableView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTableView::horizontalScrollbarAction(a0) : sipCpp->horizontalScrollbarAction(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_horizontalScrollbarAction, doc_QTableView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTableView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTableView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isIndexHidden, doc_QTableView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_viewportSizeHint, "viewportSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTableView_viewportSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTableView_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTableView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QTableView::viewportSizeHint() : sipCpp->viewportSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_viewportSizeHint, doc_QTableView_viewportSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSortingEnabled, "setSortingEnabled(self, bool)");

extern "C" {static PyObject *meth_QTableView_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->setSortingEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSortingEnabled, doc_QTableView_setSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isSortingEnabled, "isSortingEnabled(self) -> bool");

extern "C" {static PyObject *meth_QTableView_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortingEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isSortingEnabled, doc_QTableView_isSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setSpan, "setSpan(self, int, int, int, int)");

extern "C" {static PyObject *meth_QTableView_setSpan(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setSpan(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setSpan, doc_QTableView_setSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_rowSpan, "rowSpan(self, int, int) -> int");

extern "C" {static PyObject *meth_QTableView_rowSpan(PyObject *, PyObject *);}
static PyObject *meth_QTableView_rowSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->rowSpan(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_rowSpan, doc_QTableView_rowSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_columnSpan, "columnSpan(self, int, int) -> int");

extern "C" {static PyObject *meth_QTableView_columnSpan(PyObject *, PyObject *);}
static PyObject *meth_QTableView_columnSpan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableView, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->columnSpan(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_columnSpan, doc_QTableView_columnSpan);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_sortByColumn, "sortByColumn(self, int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTableView_sortByColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableView_sortByColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTableView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortByColumn(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_sortByColumn, doc_QTableView_sortByColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setWordWrap, "setWordWrap(self, bool)");

extern "C" {static PyObject *meth_QTableView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->setWordWrap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setWordWrap, doc_QTableView_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_wordWrap, "wordWrap(self) -> bool");

extern "C" {static PyObject *meth_QTableView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTableView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wordWrap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_wordWrap, doc_QTableView_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_setCornerButtonEnabled, "setCornerButtonEnabled(self, bool)");

extern "C" {static PyObject *meth_QTableView_setCornerButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_setCornerButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableView, &sipCpp, &a0))
        {
            sipCpp->setCornerButtonEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_setCornerButtonEnabled, doc_QTableView_setCornerButtonEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_isCornerButtonEnabled, "isCornerButtonEnabled(self) -> bool");

extern "C" {static PyObject *meth_QTableView_isCornerButtonEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableView_isCornerButtonEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCornerButtonEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_isCornerButtonEnabled, doc_QTableView_isCornerButtonEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_clearSpans, "clearSpans(self)");

extern "C" {static PyObject *meth_QTableView_clearSpans(PyObject *, PyObject *);}
static PyObject *meth_QTableView_clearSpans(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableView, &sipCpp))
        {
            sipCpp->clearSpans();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_clearSpans, doc_QTableView_clearSpans);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_selectionChanged, "selectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QTableView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            (sipSelfWasArg ? sipCpp->QTableView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_selectionChanged, doc_QTableView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QTableView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QTableView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QTableView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QTableView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            (sipSelfWasArg ? sipCpp->QTableView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableView, sipName_currentChanged, doc_QTableView_currentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QTableView(void *, const sipTypeDef *);}
static void *cast_QTableView(void *sipCppV, const sipTypeDef *targetType)
{
    QTableView *sipCpp = reinterpret_cast<QTableView *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTableView(void *, int);}
static void release_QTableView(void *sipCppV,int)
{
    QTableView *sipCpp = reinterpret_cast<QTableView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTableView(sipSimpleWrapper *);}
static void dealloc_QTableView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTableView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTableView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTableView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTableView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTableView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTableView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTableView[] = {{4, 255, 1}};


static PyMethodDef methods_QTableView[] = {
    {SIP_MLNAME_CAST(sipName_clearSpans), meth_QTableView_clearSpans, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_clearSpans)},
    {SIP_MLNAME_CAST(sipName_columnAt), meth_QTableView_columnAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnAt)},
    {SIP_MLNAME_CAST(sipName_columnCountChanged), meth_QTableView_columnCountChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnCountChanged)},
    {SIP_MLNAME_CAST(sipName_columnMoved), meth_QTableView_columnMoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnMoved)},
    {SIP_MLNAME_CAST(sipName_columnResized), meth_QTableView_columnResized, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnResized)},
    {SIP_MLNAME_CAST(sipName_columnSpan), meth_QTableView_columnSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnSpan)},
    {SIP_MLNAME_CAST(sipName_columnViewportPosition), meth_QTableView_columnViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnViewportPosition)},
    {SIP_MLNAME_CAST(sipName_columnWidth), meth_QTableView_columnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_columnWidth)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QTableView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_gridStyle), meth_QTableView_gridStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_gridStyle)},
    {SIP_MLNAME_CAST(sipName_hideColumn), meth_QTableView_hideColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_hideColumn)},
    {SIP_MLNAME_CAST(sipName_hideRow), meth_QTableView_hideRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_hideRow)},
    {SIP_MLNAME_CAST(sipName_horizontalHeader), meth_QTableView_horizontalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_horizontalHeader)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QTableView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QTableView_horizontalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_horizontalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QTableView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_indexAt)},
    {SIP_MLNAME_CAST(sipName_isColumnHidden), meth_QTableView_isColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isColumnHidden)},
    {SIP_MLNAME_CAST(sipName_isCornerButtonEnabled), meth_QTableView_isCornerButtonEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isCornerButtonEnabled)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QTableView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QTableView_isRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isRowHidden)},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTableView_isSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_isSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QTableView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTableView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_resizeColumnToContents), meth_QTableView_resizeColumnToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeColumnToContents)},
    {SIP_MLNAME_CAST(sipName_resizeColumnsToContents), meth_QTableView_resizeColumnsToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeColumnsToContents)},
    {SIP_MLNAME_CAST(sipName_resizeRowToContents), meth_QTableView_resizeRowToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeRowToContents)},
    {SIP_MLNAME_CAST(sipName_resizeRowsToContents), meth_QTableView_resizeRowsToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_resizeRowsToContents)},
    {SIP_MLNAME_CAST(sipName_rowAt), meth_QTableView_rowAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowAt)},
    {SIP_MLNAME_CAST(sipName_rowCountChanged), meth_QTableView_rowCountChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowCountChanged)},
    {SIP_MLNAME_CAST(sipName_rowHeight), meth_QTableView_rowHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowHeight)},
    {SIP_MLNAME_CAST(sipName_rowMoved), meth_QTableView_rowMoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowMoved)},
    {SIP_MLNAME_CAST(sipName_rowResized), meth_QTableView_rowResized, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowResized)},
    {SIP_MLNAME_CAST(sipName_rowSpan), meth_QTableView_rowSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowSpan)},
    {SIP_MLNAME_CAST(sipName_rowViewportPosition), meth_QTableView_rowViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_rowViewportPosition)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QTableView_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QTableView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_selectColumn), meth_QTableView_selectColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectColumn)},
    {SIP_MLNAME_CAST(sipName_selectRow), meth_QTableView_selectRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectRow)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QTableView_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QTableView_selectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_setColumnHidden), meth_QTableView_setColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setColumnHidden)},
    {SIP_MLNAME_CAST(sipName_setColumnWidth), meth_QTableView_setColumnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setColumnWidth)},
    {SIP_MLNAME_CAST(sipName_setCornerButtonEnabled), meth_QTableView_setCornerButtonEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setCornerButtonEnabled)},
    {SIP_MLNAME_CAST(sipName_setGridStyle), meth_QTableView_setGridStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setGridStyle)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeader), meth_QTableView_setHorizontalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setHorizontalHeader)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTableView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setModel)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QTableView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setRowHeight), meth_QTableView_setRowHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setRowHeight)},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QTableView_setRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setRowHidden)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QTableView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTableView_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setShowGrid), meth_QTableView_setShowGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setShowGrid)},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTableView_setSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_setSpan), meth_QTableView_setSpan, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setSpan)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeader), meth_QTableView_setVerticalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setVerticalHeader)},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QTableView_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_showColumn), meth_QTableView_showColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_showColumn)},
    {SIP_MLNAME_CAST(sipName_showGrid), meth_QTableView_showGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_showGrid)},
    {SIP_MLNAME_CAST(sipName_showRow), meth_QTableView_showRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_showRow)},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QTableView_sizeHintForColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_sizeHintForColumn)},
    {SIP_MLNAME_CAST(sipName_sizeHintForRow), meth_QTableView_sizeHintForRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_sizeHintForRow)},
    {SIP_MLNAME_CAST(sipName_sortByColumn), meth_QTableView_sortByColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_sortByColumn)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTableView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QTableView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_verticalHeader), meth_QTableView_verticalHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_verticalHeader)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QTableView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QTableView_verticalScrollbarAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_verticalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QTableView_viewOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_viewportSizeHint), meth_QTableView_viewportSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_viewportSizeHint)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QTableView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QTableView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QTableView_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableView_wordWrap)}
};

PyDoc_STRVAR(doc_QTableView, "\1QTableView(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTableView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTableView,
        {0}
    },
    {
        sipNameNr_QTableView,
        {0, 0, 1},
        72, methods_QTableView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTableView,
    -1,
    -1,
    supers_QTableView,
    0,
    init_type_QTableView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTableView,
    0,
    0,
    0,
    release_QTableView,
    cast_QTableView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTableView::staticMetaObject,
    0,
    0,
    0
};
