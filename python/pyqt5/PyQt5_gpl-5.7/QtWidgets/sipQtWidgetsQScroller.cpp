/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qscroller.sip"
#include <qscroller.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qscrollerproperties.sip"
#include <qscrollerproperties.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 742 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQScroller.cpp"


PyDoc_STRVAR(doc_QScroller_hasScroller, "hasScroller(QObject) -> bool");

extern "C" {static PyObject *meth_QScroller_hasScroller(PyObject *, PyObject *);}
static PyObject *meth_QScroller_hasScroller(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = QScroller::hasScroller(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_hasScroller, doc_QScroller_hasScroller);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_scroller, "scroller(QObject) -> QScroller");

extern "C" {static PyObject *meth_QScroller_scroller(PyObject *, PyObject *);}
static PyObject *meth_QScroller_scroller(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QScroller*sipRes;

            sipRes = QScroller::scroller(a0);

            return sipConvertFromType(sipRes,sipType_QScroller,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_scroller, doc_QScroller_scroller);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_grabGesture, "grabGesture(QObject, scrollGestureType: QScroller.ScrollerGestureType = QScroller.TouchGesture) -> Qt.GestureType");

extern "C" {static PyObject *meth_QScroller_grabGesture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScroller_grabGesture(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        QScroller::ScrollerGestureType a1 = QScroller::TouchGesture;

        static const char *sipKwdList[] = {
            NULL,
            sipName_scrollGestureType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|E", sipType_QObject, &a0, sipType_QScroller_ScrollerGestureType, &a1))
        {
            Qt::GestureType sipRes;

            sipRes = QScroller::grabGesture(a0,a1);

            return sipConvertFromEnum(sipRes,sipType_Qt_GestureType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_grabGesture, doc_QScroller_grabGesture);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_grabbedGesture, "grabbedGesture(QObject) -> Qt.GestureType");

extern "C" {static PyObject *meth_QScroller_grabbedGesture(PyObject *, PyObject *);}
static PyObject *meth_QScroller_grabbedGesture(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            Qt::GestureType sipRes;

            sipRes = QScroller::grabbedGesture(a0);

            return sipConvertFromEnum(sipRes,sipType_Qt_GestureType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_grabbedGesture, doc_QScroller_grabbedGesture);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_ungrabGesture, "ungrabGesture(QObject)");

extern "C" {static PyObject *meth_QScroller_ungrabGesture(PyObject *, PyObject *);}
static PyObject *meth_QScroller_ungrabGesture(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QScroller::ungrabGesture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_ungrabGesture, doc_QScroller_ungrabGesture);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_activeScrollers, "activeScrollers() -> object");

extern "C" {static PyObject *meth_QScroller_activeScrollers(PyObject *, PyObject *);}
static PyObject *meth_QScroller_activeScrollers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QScroller*>*sipRes;

            sipRes = new QList<QScroller*>(QScroller::activeScrollers());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QScroller,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_activeScrollers, doc_QScroller_activeScrollers);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_target, "target(self) -> QObject");

extern "C" {static PyObject *meth_QScroller_target(PyObject *, PyObject *);}
static PyObject *meth_QScroller_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            QObject*sipRes;

            sipRes = sipCpp->target();

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_target, doc_QScroller_target);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_state, "state(self) -> QScroller.State");

extern "C" {static PyObject *meth_QScroller_state(PyObject *, PyObject *);}
static PyObject *meth_QScroller_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            QScroller::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QScroller_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_state, doc_QScroller_state);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_handleInput, "handleInput(self, QScroller.Input, Union[QPointF, QPoint], timestamp: int = 0) -> bool");

extern "C" {static PyObject *meth_QScroller_handleInput(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScroller_handleInput(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QScroller::Input a0;
        const QPointF* a1;
        int a1State = 0;
        qint64 a2 = 0;
        QScroller *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_timestamp,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1|n", &sipSelf, sipType_QScroller, &sipCpp, sipType_QScroller_Input, &a0, sipType_QPointF, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->handleInput(a0,*a1,a2);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_handleInput, doc_QScroller_handleInput);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_stop, "stop(self)");

extern "C" {static PyObject *meth_QScroller_stop(PyObject *, PyObject *);}
static PyObject *meth_QScroller_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_stop, doc_QScroller_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_velocity, "velocity(self) -> QPointF");

extern "C" {static PyObject *meth_QScroller_velocity(PyObject *, PyObject *);}
static PyObject *meth_QScroller_velocity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->velocity());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_velocity, doc_QScroller_velocity);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_finalPosition, "finalPosition(self) -> QPointF");

extern "C" {static PyObject *meth_QScroller_finalPosition(PyObject *, PyObject *);}
static PyObject *meth_QScroller_finalPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->finalPosition());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_finalPosition, doc_QScroller_finalPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_pixelPerMeter, "pixelPerMeter(self) -> QPointF");

extern "C" {static PyObject *meth_QScroller_pixelPerMeter(PyObject *, PyObject *);}
static PyObject *meth_QScroller_pixelPerMeter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->pixelPerMeter());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_pixelPerMeter, doc_QScroller_pixelPerMeter);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_scrollerProperties, "scrollerProperties(self) -> QScrollerProperties");

extern "C" {static PyObject *meth_QScroller_scrollerProperties(PyObject *, PyObject *);}
static PyObject *meth_QScroller_scrollerProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            QScrollerProperties*sipRes;

            sipRes = new QScrollerProperties(sipCpp->scrollerProperties());

            return sipConvertFromNewType(sipRes,sipType_QScrollerProperties,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_scrollerProperties, doc_QScroller_scrollerProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_setSnapPositionsX, "setSnapPositionsX(self, Iterable[float])\n"
    "setSnapPositionsX(self, float, float)");

extern "C" {static PyObject *meth_QScroller_setSnapPositionsX(PyObject *, PyObject *);}
static PyObject *meth_QScroller_setSnapPositionsX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<qreal>* a0;
        int a0State = 0;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScroller, &sipCpp, sipType_QList_2400,&a0, &a0State))
        {
            sipCpp->setSnapPositionsX(*a0);
            sipReleaseType(const_cast<QList<qreal> *>(a0),sipType_QList_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QScroller, &sipCpp, &a0, &a1))
        {
            sipCpp->setSnapPositionsX(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_setSnapPositionsX, doc_QScroller_setSnapPositionsX);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_setSnapPositionsY, "setSnapPositionsY(self, Iterable[float])\n"
    "setSnapPositionsY(self, float, float)");

extern "C" {static PyObject *meth_QScroller_setSnapPositionsY(PyObject *, PyObject *);}
static PyObject *meth_QScroller_setSnapPositionsY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<qreal>* a0;
        int a0State = 0;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScroller, &sipCpp, sipType_QList_2400,&a0, &a0State))
        {
            sipCpp->setSnapPositionsY(*a0);
            sipReleaseType(const_cast<QList<qreal> *>(a0),sipType_QList_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QScroller, &sipCpp, &a0, &a1))
        {
            sipCpp->setSnapPositionsY(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_setSnapPositionsY, doc_QScroller_setSnapPositionsY);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_setScrollerProperties, "setScrollerProperties(self, QScrollerProperties)");

extern "C" {static PyObject *meth_QScroller_setScrollerProperties(PyObject *, PyObject *);}
static PyObject *meth_QScroller_setScrollerProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScrollerProperties* a0;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScroller, &sipCpp, sipType_QScrollerProperties, &a0))
        {
            sipCpp->setScrollerProperties(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_setScrollerProperties, doc_QScroller_setScrollerProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_scrollTo, "scrollTo(self, Union[QPointF, QPoint])\n"
    "scrollTo(self, Union[QPointF, QPoint], int)");

extern "C" {static PyObject *meth_QScroller_scrollTo(PyObject *, PyObject *);}
static PyObject *meth_QScroller_scrollTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScroller, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->scrollTo(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        int a1;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QScroller, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            sipCpp->scrollTo(*a0,a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_scrollTo, doc_QScroller_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_ensureVisible, "ensureVisible(self, QRectF, float, float)\n"
    "ensureVisible(self, QRectF, float, float, int)");

extern "C" {static PyObject *meth_QScroller_ensureVisible(PyObject *, PyObject *);}
static PyObject *meth_QScroller_ensureVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        qreal a1;
        qreal a2;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9dd", &sipSelf, sipType_QScroller, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->ensureVisible(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        qreal a1;
        qreal a2;
        int a3;
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ddi", &sipSelf, sipType_QScroller, &sipCpp, sipType_QRectF, &a0, &a1, &a2, &a3))
        {
            sipCpp->ensureVisible(*a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_ensureVisible, doc_QScroller_ensureVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QScroller_resendPrepareEvent, "resendPrepareEvent(self)");

extern "C" {static PyObject *meth_QScroller_resendPrepareEvent(PyObject *, PyObject *);}
static PyObject *meth_QScroller_resendPrepareEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScroller *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScroller, &sipCpp))
        {
            sipCpp->resendPrepareEvent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScroller, sipName_resendPrepareEvent, doc_QScroller_resendPrepareEvent);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScroller(void *, int);}
static void release_QScroller(void *,int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScroller[] = {{165, 0, 1}};


static PyMethodDef methods_QScroller[] = {
    {SIP_MLNAME_CAST(sipName_activeScrollers), meth_QScroller_activeScrollers, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_activeScrollers)},
    {SIP_MLNAME_CAST(sipName_ensureVisible), meth_QScroller_ensureVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_ensureVisible)},
    {SIP_MLNAME_CAST(sipName_finalPosition), meth_QScroller_finalPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_finalPosition)},
    {SIP_MLNAME_CAST(sipName_grabGesture), (PyCFunction)meth_QScroller_grabGesture, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScroller_grabGesture)},
    {SIP_MLNAME_CAST(sipName_grabbedGesture), meth_QScroller_grabbedGesture, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_grabbedGesture)},
    {SIP_MLNAME_CAST(sipName_handleInput), (PyCFunction)meth_QScroller_handleInput, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScroller_handleInput)},
    {SIP_MLNAME_CAST(sipName_hasScroller), meth_QScroller_hasScroller, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_hasScroller)},
    {SIP_MLNAME_CAST(sipName_pixelPerMeter), meth_QScroller_pixelPerMeter, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_pixelPerMeter)},
    {SIP_MLNAME_CAST(sipName_resendPrepareEvent), meth_QScroller_resendPrepareEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_resendPrepareEvent)},
    {SIP_MLNAME_CAST(sipName_scrollTo), meth_QScroller_scrollTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_scrollTo)},
    {SIP_MLNAME_CAST(sipName_scroller), meth_QScroller_scroller, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_scroller)},
    {SIP_MLNAME_CAST(sipName_scrollerProperties), meth_QScroller_scrollerProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_scrollerProperties)},
    {SIP_MLNAME_CAST(sipName_setScrollerProperties), meth_QScroller_setScrollerProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_setScrollerProperties)},
    {SIP_MLNAME_CAST(sipName_setSnapPositionsX), meth_QScroller_setSnapPositionsX, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_setSnapPositionsX)},
    {SIP_MLNAME_CAST(sipName_setSnapPositionsY), meth_QScroller_setSnapPositionsY, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_setSnapPositionsY)},
    {SIP_MLNAME_CAST(sipName_state), meth_QScroller_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QScroller_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_stop)},
    {SIP_MLNAME_CAST(sipName_target), meth_QScroller_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_target)},
    {SIP_MLNAME_CAST(sipName_ungrabGesture), meth_QScroller_ungrabGesture, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_ungrabGesture)},
    {SIP_MLNAME_CAST(sipName_velocity), meth_QScroller_velocity, METH_VARARGS, SIP_MLDOC_CAST(doc_QScroller_velocity)}
};

static sipEnumMemberDef enummembers_QScroller[] = {
    {sipName_Dragging, static_cast<int>(QScroller::Dragging), 262},
    {sipName_Inactive, static_cast<int>(QScroller::Inactive), 262},
    {sipName_InputMove, static_cast<int>(QScroller::InputMove), 260},
    {sipName_InputPress, static_cast<int>(QScroller::InputPress), 260},
    {sipName_InputRelease, static_cast<int>(QScroller::InputRelease), 260},
    {sipName_LeftMouseButtonGesture, static_cast<int>(QScroller::LeftMouseButtonGesture), 261},
    {sipName_MiddleMouseButtonGesture, static_cast<int>(QScroller::MiddleMouseButtonGesture), 261},
    {sipName_Pressed, static_cast<int>(QScroller::Pressed), 262},
    {sipName_RightMouseButtonGesture, static_cast<int>(QScroller::RightMouseButtonGesture), 261},
    {sipName_Scrolling, static_cast<int>(QScroller::Scrolling), 262},
    {sipName_TouchGesture, static_cast<int>(QScroller::TouchGesture), 261},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QScroller[] = {
    {"scrollerPropertiesChanged(QScrollerProperties)", "\1scrollerPropertiesChanged(self, QScrollerProperties)", 0, 0},
    {"stateChanged(QScroller::State)", "\1stateChanged(self, QScroller.State)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QScroller = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QScroller,
        {0}
    },
    {
        sipNameNr_QScroller,
        {0, 0, 1},
        20, methods_QScroller,
        11, enummembers_QScroller,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QScroller,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QScroller,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QScroller::staticMetaObject,
    0,
    signals_QScroller,
    0
};
