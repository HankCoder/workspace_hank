/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractslider.sip"
#include <qabstractslider.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 555 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 604 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 577 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 593 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 660 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQAbstractSlider.cpp"


class sipQAbstractSlider : public QAbstractSlider
{
public:
    sipQAbstractSlider(QWidget*);
    virtual ~sipQAbstractSlider();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void wheelEvent(QWheelEvent*);
    void timerEvent(QTimerEvent*);
    void keyPressEvent(QKeyEvent*);
    bool event(QEvent*);
    void sliderChange(QAbstractSlider::SliderChange);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractSlider(const sipQAbstractSlider &);
    sipQAbstractSlider &operator = (const sipQAbstractSlider &);

    char sipPyMethods[47];
};

sipQAbstractSlider::sipQAbstractSlider(QWidget*a0): QAbstractSlider(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractSlider::~sipQAbstractSlider()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractSlider::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QAbstractSlider);

    return QAbstractSlider::metaObject();
}

int sipQAbstractSlider::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractSlider::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QAbstractSlider,_c,_id,_a);

    return _id;
}

void *sipQAbstractSlider::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QAbstractSlider, _clname, &sipCpp) ? sipCpp : QAbstractSlider::qt_metacast(_clname));
}

void sipQAbstractSlider::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractSlider::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractSlider::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractSlider::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractSlider::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractSlider::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractSlider::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractSlider::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QAbstractSlider::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQAbstractSlider::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QAbstractSlider::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractSlider::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QAbstractSlider::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractSlider::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QAbstractSlider::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractSlider::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QAbstractSlider::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQAbstractSlider::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QAbstractSlider::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QAbstractSlider::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractSlider::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QAbstractSlider::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QAbstractSlider::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QAbstractSlider::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QAbstractSlider::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QAbstractSlider::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QAbstractSlider::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QAbstractSlider::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QAbstractSlider::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QAbstractSlider::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QAbstractSlider::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QAbstractSlider::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QAbstractSlider::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QAbstractSlider::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QAbstractSlider::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QAbstractSlider::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QAbstractSlider::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QAbstractSlider::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QAbstractSlider::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QAbstractSlider::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QAbstractSlider::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QAbstractSlider::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QAbstractSlider::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QAbstractSlider::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQAbstractSlider::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QAbstractSlider::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQAbstractSlider::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QAbstractSlider::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQAbstractSlider::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QAbstractSlider::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQAbstractSlider::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QAbstractSlider::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractSlider::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QAbstractSlider::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractSlider::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QAbstractSlider::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractSlider::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QAbstractSlider::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QAbstractSlider::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractSlider::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QAbstractSlider::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractSlider::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractSlider::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSlider::sliderChange(QAbstractSlider::SliderChange a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_sliderChange);

    if (!sipMeth)
    {
        QAbstractSlider::sliderChange(a0);
        return;
    }

    extern void sipVH_QtWidgets_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractSlider::SliderChange);

    sipVH_QtWidgets_85(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractSlider_orientation, "orientation(self) -> Qt.Orientation");

extern "C" {static PyObject *meth_QAbstractSlider_orientation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            Qt::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(sipRes,sipType_Qt_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_orientation, doc_QAbstractSlider_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setMinimum, "setMinimum(self, int)");

extern "C" {static PyObject *meth_QAbstractSlider_setMinimum(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setMinimum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setMinimum, doc_QAbstractSlider_setMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_minimum, "minimum(self) -> int");

extern "C" {static PyObject *meth_QAbstractSlider_minimum(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_minimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_minimum, doc_QAbstractSlider_minimum);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setMaximum, "setMaximum(self, int)");

extern "C" {static PyObject *meth_QAbstractSlider_setMaximum(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setMaximum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setMaximum, doc_QAbstractSlider_setMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_maximum, "maximum(self) -> int");

extern "C" {static PyObject *meth_QAbstractSlider_maximum(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_maximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_maximum, doc_QAbstractSlider_maximum);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setRange, "setRange(self, int, int)");

extern "C" {static PyObject *meth_QAbstractSlider_setRange(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0, &a1))
        {
            sipCpp->setRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setRange, doc_QAbstractSlider_setRange);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setSingleStep, "setSingleStep(self, int)");

extern "C" {static PyObject *meth_QAbstractSlider_setSingleStep(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setSingleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setSingleStep(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setSingleStep, doc_QAbstractSlider_setSingleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_singleStep, "singleStep(self) -> int");

extern "C" {static PyObject *meth_QAbstractSlider_singleStep(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_singleStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->singleStep();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_singleStep, doc_QAbstractSlider_singleStep);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setPageStep, "setPageStep(self, int)");

extern "C" {static PyObject *meth_QAbstractSlider_setPageStep(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setPageStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setPageStep(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setPageStep, doc_QAbstractSlider_setPageStep);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_pageStep, "pageStep(self) -> int");

extern "C" {static PyObject *meth_QAbstractSlider_pageStep(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_pageStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pageStep();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_pageStep, doc_QAbstractSlider_pageStep);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setTracking, "setTracking(self, bool)");

extern "C" {static PyObject *meth_QAbstractSlider_setTracking(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setTracking(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setTracking, doc_QAbstractSlider_setTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_hasTracking, "hasTracking(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSlider_hasTracking(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_hasTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasTracking();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_hasTracking, doc_QAbstractSlider_hasTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setSliderDown, "setSliderDown(self, bool)");

extern "C" {static PyObject *meth_QAbstractSlider_setSliderDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setSliderDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setSliderDown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setSliderDown, doc_QAbstractSlider_setSliderDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_isSliderDown, "isSliderDown(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSlider_isSliderDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_isSliderDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSliderDown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_isSliderDown, doc_QAbstractSlider_isSliderDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setSliderPosition, "setSliderPosition(self, int)");

extern "C" {static PyObject *meth_QAbstractSlider_setSliderPosition(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setSliderPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setSliderPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setSliderPosition, doc_QAbstractSlider_setSliderPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_sliderPosition, "sliderPosition(self) -> int");

extern "C" {static PyObject *meth_QAbstractSlider_sliderPosition(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_sliderPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sliderPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_sliderPosition, doc_QAbstractSlider_sliderPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setInvertedAppearance, "setInvertedAppearance(self, bool)");

extern "C" {static PyObject *meth_QAbstractSlider_setInvertedAppearance(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setInvertedAppearance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setInvertedAppearance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setInvertedAppearance, doc_QAbstractSlider_setInvertedAppearance);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_invertedAppearance, "invertedAppearance(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSlider_invertedAppearance(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_invertedAppearance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->invertedAppearance();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_invertedAppearance, doc_QAbstractSlider_invertedAppearance);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setInvertedControls, "setInvertedControls(self, bool)");

extern "C" {static PyObject *meth_QAbstractSlider_setInvertedControls(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setInvertedControls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setInvertedControls(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setInvertedControls, doc_QAbstractSlider_setInvertedControls);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_invertedControls, "invertedControls(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSlider_invertedControls(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_invertedControls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->invertedControls();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_invertedControls, doc_QAbstractSlider_invertedControls);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_value, "value(self) -> int");

extern "C" {static PyObject *meth_QAbstractSlider_value(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->value();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_value, doc_QAbstractSlider_value);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_triggerAction, "triggerAction(self, QAbstractSlider.SliderAction)");

extern "C" {static PyObject *meth_QAbstractSlider_triggerAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_triggerAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSlider::SliderAction a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QAbstractSlider_SliderAction, &a0))
        {
            sipCpp->triggerAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_triggerAction, doc_QAbstractSlider_triggerAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setValue, "setValue(self, int)");

extern "C" {static PyObject *meth_QAbstractSlider_setValue(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSlider, &sipCpp, &a0))
        {
            sipCpp->setValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setValue, doc_QAbstractSlider_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setOrientation, "setOrientation(self, Qt.Orientation)");

extern "C" {static PyObject *meth_QAbstractSlider_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Orientation a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_Qt_Orientation, &a0))
        {
            sipCpp->setOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setOrientation, doc_QAbstractSlider_setOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_setRepeatAction, "setRepeatAction(self, QAbstractSlider.SliderAction, thresholdTime: int = 500, repeatTime: int = 50)");

extern "C" {static PyObject *meth_QAbstractSlider_setRepeatAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_setRepeatAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSlider::SliderAction a0;
        int a1 = 500;
        int a2 = 50;
        QAbstractSlider *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_thresholdTime,
            sipName_repeatTime,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pE|ii", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QAbstractSlider_SliderAction, &a0, &a1, &a2))
        {
            sipCpp->setRepeatAction(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_setRepeatAction, doc_QAbstractSlider_setRepeatAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_repeatAction, "repeatAction(self) -> QAbstractSlider.SliderAction");

extern "C" {static PyObject *meth_QAbstractSlider_repeatAction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_repeatAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractSlider, &sipCpp))
        {
            QAbstractSlider::SliderAction sipRes;

            sipRes = sipCpp->repeatAction();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSlider_SliderAction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_repeatAction, doc_QAbstractSlider_repeatAction);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_sliderChange, "sliderChange(self, QAbstractSlider.SliderChange)");

extern "C" {static PyObject *meth_QAbstractSlider_sliderChange(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_sliderChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractSlider::SliderChange a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QAbstractSlider_SliderChange, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractSlider::sliderChange(a0) : sipCpp->sliderChange(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_sliderChange, doc_QAbstractSlider_sliderChange);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractSlider_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSlider::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_event, doc_QAbstractSlider_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractSlider_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractSlider::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_keyPressEvent, doc_QAbstractSlider_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractSlider_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractSlider::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_timerEvent, doc_QAbstractSlider_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QAbstractSlider_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractSlider::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_wheelEvent, doc_QAbstractSlider_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSlider_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractSlider_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSlider_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractSlider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractSlider, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractSlider::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSlider, sipName_changeEvent, doc_QAbstractSlider_changeEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QAbstractSlider(void *, const sipTypeDef *);}
static void *cast_QAbstractSlider(void *sipCppV, const sipTypeDef *targetType)
{
    QAbstractSlider *sipCpp = reinterpret_cast<QAbstractSlider *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractSlider(void *, int);}
static void release_QAbstractSlider(void *sipCppV,int)
{
    QAbstractSlider *sipCpp = reinterpret_cast<QAbstractSlider *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractSlider(sipSimpleWrapper *);}
static void dealloc_QAbstractSlider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractSlider *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractSlider(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractSlider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractSlider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractSlider *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractSlider(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractSlider[] = {{456, 255, 1}};


static PyMethodDef methods_QAbstractSlider[] = {
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QAbstractSlider_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_changeEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractSlider_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_event)},
    {SIP_MLNAME_CAST(sipName_hasTracking), meth_QAbstractSlider_hasTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_hasTracking)},
    {SIP_MLNAME_CAST(sipName_invertedAppearance), meth_QAbstractSlider_invertedAppearance, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_invertedAppearance)},
    {SIP_MLNAME_CAST(sipName_invertedControls), meth_QAbstractSlider_invertedControls, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_invertedControls)},
    {SIP_MLNAME_CAST(sipName_isSliderDown), meth_QAbstractSlider_isSliderDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_isSliderDown)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QAbstractSlider_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_maximum), meth_QAbstractSlider_maximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_maximum)},
    {SIP_MLNAME_CAST(sipName_minimum), meth_QAbstractSlider_minimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_minimum)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QAbstractSlider_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_orientation)},
    {SIP_MLNAME_CAST(sipName_pageStep), meth_QAbstractSlider_pageStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_pageStep)},
    {SIP_MLNAME_CAST(sipName_repeatAction), meth_QAbstractSlider_repeatAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_repeatAction)},
    {SIP_MLNAME_CAST(sipName_setInvertedAppearance), meth_QAbstractSlider_setInvertedAppearance, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setInvertedAppearance)},
    {SIP_MLNAME_CAST(sipName_setInvertedControls), meth_QAbstractSlider_setInvertedControls, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setInvertedControls)},
    {SIP_MLNAME_CAST(sipName_setMaximum), meth_QAbstractSlider_setMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setMaximum)},
    {SIP_MLNAME_CAST(sipName_setMinimum), meth_QAbstractSlider_setMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setMinimum)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QAbstractSlider_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setPageStep), meth_QAbstractSlider_setPageStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setPageStep)},
    {SIP_MLNAME_CAST(sipName_setRange), meth_QAbstractSlider_setRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setRange)},
    {SIP_MLNAME_CAST(sipName_setRepeatAction), (PyCFunction)meth_QAbstractSlider_setRepeatAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSlider_setRepeatAction)},
    {SIP_MLNAME_CAST(sipName_setSingleStep), meth_QAbstractSlider_setSingleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setSingleStep)},
    {SIP_MLNAME_CAST(sipName_setSliderDown), meth_QAbstractSlider_setSliderDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setSliderDown)},
    {SIP_MLNAME_CAST(sipName_setSliderPosition), meth_QAbstractSlider_setSliderPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setSliderPosition)},
    {SIP_MLNAME_CAST(sipName_setTracking), meth_QAbstractSlider_setTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setTracking)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QAbstractSlider_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_setValue)},
    {SIP_MLNAME_CAST(sipName_singleStep), meth_QAbstractSlider_singleStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_singleStep)},
    {SIP_MLNAME_CAST(sipName_sliderChange), meth_QAbstractSlider_sliderChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_sliderChange)},
    {SIP_MLNAME_CAST(sipName_sliderPosition), meth_QAbstractSlider_sliderPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_sliderPosition)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractSlider_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_timerEvent)},
    {SIP_MLNAME_CAST(sipName_triggerAction), meth_QAbstractSlider_triggerAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_triggerAction)},
    {SIP_MLNAME_CAST(sipName_value), meth_QAbstractSlider_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_value)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QAbstractSlider_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSlider_wheelEvent)}
};

static sipEnumMemberDef enummembers_QAbstractSlider[] = {
    {sipName_SliderMove, static_cast<int>(QAbstractSlider::SliderMove), 18},
    {sipName_SliderNoAction, static_cast<int>(QAbstractSlider::SliderNoAction), 18},
    {sipName_SliderOrientationChange, static_cast<int>(QAbstractSlider::SliderOrientationChange), 19},
    {sipName_SliderPageStepAdd, static_cast<int>(QAbstractSlider::SliderPageStepAdd), 18},
    {sipName_SliderPageStepSub, static_cast<int>(QAbstractSlider::SliderPageStepSub), 18},
    {sipName_SliderRangeChange, static_cast<int>(QAbstractSlider::SliderRangeChange), 19},
    {sipName_SliderSingleStepAdd, static_cast<int>(QAbstractSlider::SliderSingleStepAdd), 18},
    {sipName_SliderSingleStepSub, static_cast<int>(QAbstractSlider::SliderSingleStepSub), 18},
    {sipName_SliderStepsChange, static_cast<int>(QAbstractSlider::SliderStepsChange), 19},
    {sipName_SliderToMaximum, static_cast<int>(QAbstractSlider::SliderToMaximum), 18},
    {sipName_SliderToMinimum, static_cast<int>(QAbstractSlider::SliderToMinimum), 18},
    {sipName_SliderValueChange, static_cast<int>(QAbstractSlider::SliderValueChange), 19},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractSlider[] = {
    {"actionTriggered(int)", "\1actionTriggered(self, int)", 0, 0},
    {"rangeChanged(int,int)", "\1rangeChanged(self, int, int)", 0, 0},
    {"sliderReleased()", "\1sliderReleased(self)", 0, 0},
    {"sliderMoved(int)", "\1sliderMoved(self, int)", 0, 0},
    {"sliderPressed()", "\1sliderPressed(self)", 0, 0},
    {"valueChanged(int)", "\1valueChanged(self, int)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractSlider, "\1QAbstractSlider(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QAbstractSlider = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractSlider,
        {0}
    },
    {
        sipNameNr_QAbstractSlider,
        {0, 0, 1},
        32, methods_QAbstractSlider,
        12, enummembers_QAbstractSlider,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractSlider,
    -1,
    -1,
    supers_QAbstractSlider,
    0,
    init_type_QAbstractSlider,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractSlider,
    0,
    0,
    0,
    release_QAbstractSlider,
    cast_QAbstractSlider,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractSlider::staticMetaObject,
    0,
    signals_QAbstractSlider,
    0
};
