/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qmainwindow.sip"
#include <qmainwindow.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qdockwidget.sip"
#include <qdockwidget.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 638 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qtabwidget.sip"
#include <qtabwidget.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qtoolbar.sip"
#include <qtoolbar.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qmainwindow.sip"
#include <qmainwindow.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstatusbar.sip"
#include <qstatusbar.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qmenubar.sip"
#include <qmenubar.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 555 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 604 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 577 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 593 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 660 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 252 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 255 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 258 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 261 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQMainWindow.cpp"


class sipQMainWindow : public QMainWindow
{
public:
    sipQMainWindow(QWidget*,Qt::WindowFlags);
    virtual ~sipQMainWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
    bool event(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    QMenu* createPopupMenu();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMainWindow(const sipQMainWindow &);
    sipQMainWindow &operator = (const sipQMainWindow &);

    char sipPyMethods[47];
};

sipQMainWindow::sipQMainWindow(QWidget*a0,Qt::WindowFlags a1): QMainWindow(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMainWindow::~sipQMainWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMainWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QMainWindow);

    return QMainWindow::metaObject();
}

int sipQMainWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMainWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QMainWindow,_c,_id,_a);

    return _id;
}

void *sipQMainWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QMainWindow, _clname, &sipCpp) ? sipCpp : QMainWindow::qt_metacast(_clname));
}

void sipQMainWindow::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMainWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMainWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMainWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMainWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMainWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMainWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMainWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQMainWindow::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QMainWindow::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQMainWindow::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QMainWindow::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMainWindow::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QMainWindow::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQMainWindow::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QMainWindow::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMainWindow::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QMainWindow::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQMainWindow::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QMainWindow::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QMainWindow::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQMainWindow::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QMainWindow::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QMainWindow::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QMainWindow::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QMainWindow::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QMainWindow::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QMainWindow::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QMainWindow::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QMainWindow::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QMainWindow::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QMainWindow::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QMainWindow::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QMainWindow::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QMainWindow::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QMainWindow::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QMainWindow::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QMainWindow::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QMainWindow::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QMainWindow::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QMainWindow::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QMainWindow::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QMainWindow::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QMainWindow::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QMainWindow::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QMainWindow::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QMainWindow::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQMainWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QMainWindow::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQMainWindow::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QMainWindow::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQMainWindow::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QMainWindow::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQMainWindow::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QMainWindow::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQMainWindow::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QMainWindow::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQMainWindow::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QMainWindow::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMainWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMainWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMainWindow::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QMainWindow::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMenu* sipQMainWindow::createPopupMenu()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_createPopupMenu);

    if (!sipMeth)
        return QMainWindow::createPopupMenu();

    extern QMenu* sipVH_QtWidgets_86(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_86(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMainWindow_iconSize, "iconSize(self) -> QSize");

extern "C" {static PyObject *meth_QMainWindow_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_iconSize, doc_QMainWindow_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setIconSize, "setIconSize(self, QSize)");

extern "C" {static PyObject *meth_QMainWindow_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setIconSize, doc_QMainWindow_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_toolButtonStyle, "toolButtonStyle(self) -> Qt.ToolButtonStyle");

extern "C" {static PyObject *meth_QMainWindow_toolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            Qt::ToolButtonStyle sipRes;

            sipRes = sipCpp->toolButtonStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_ToolButtonStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolButtonStyle, doc_QMainWindow_toolButtonStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setToolButtonStyle, "setToolButtonStyle(self, Qt.ToolButtonStyle)");

extern "C" {static PyObject *meth_QMainWindow_setToolButtonStyle(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setToolButtonStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolButtonStyle a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolButtonStyle, &a0))
        {
            sipCpp->setToolButtonStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setToolButtonStyle, doc_QMainWindow_setToolButtonStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_menuBar, "menuBar(self) -> QMenuBar");

extern "C" {static PyObject *meth_QMainWindow_menuBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_menuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QMenuBar*sipRes;

            sipRes = sipCpp->menuBar();

            return sipConvertFromType(sipRes,sipType_QMenuBar,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_menuBar, doc_QMainWindow_menuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setMenuBar, "setMenuBar(self, QMenuBar)");

extern "C" {static PyObject *meth_QMainWindow_setMenuBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setMenuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMenuBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QMenuBar, &a0))
        {
            sipCpp->setMenuBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setMenuBar, doc_QMainWindow_setMenuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_statusBar, "statusBar(self) -> QStatusBar");

extern "C" {static PyObject *meth_QMainWindow_statusBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_statusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QStatusBar*sipRes;

            sipRes = sipCpp->statusBar();

            return sipConvertFromType(sipRes,sipType_QStatusBar,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_statusBar, doc_QMainWindow_statusBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setStatusBar, "setStatusBar(self, QStatusBar)");

extern "C" {static PyObject *meth_QMainWindow_setStatusBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setStatusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStatusBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QStatusBar, &a0))
        {
            sipCpp->setStatusBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setStatusBar, doc_QMainWindow_setStatusBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_centralWidget, "centralWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_centralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_centralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->centralWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_centralWidget, doc_QMainWindow_centralWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setCentralWidget, "setCentralWidget(self, QWidget)");

extern "C" {static PyObject *meth_QMainWindow_setCentralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setCentralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setCentralWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setCentralWidget, doc_QMainWindow_setCentralWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setCorner, "setCorner(self, Qt.Corner, Qt.DockWidgetArea)");

extern "C" {static PyObject *meth_QMainWindow_setCorner(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setCorner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Corner a0;
        Qt::DockWidgetArea a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_Corner, &a0, sipType_Qt_DockWidgetArea, &a1))
        {
            sipCpp->setCorner(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setCorner, doc_QMainWindow_setCorner);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_corner, "corner(self, Qt.Corner) -> Qt.DockWidgetArea");

extern "C" {static PyObject *meth_QMainWindow_corner(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_corner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Corner a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_Corner, &a0))
        {
            Qt::DockWidgetArea sipRes;

            sipRes = sipCpp->corner(a0);

            return sipConvertFromEnum(sipRes,sipType_Qt_DockWidgetArea);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_corner, doc_QMainWindow_corner);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_addToolBarBreak, "addToolBarBreak(self, area: Qt.ToolBarArea = Qt.TopToolBarArea)");

extern "C" {static PyObject *meth_QMainWindow_addToolBarBreak(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addToolBarBreak(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolBarArea a0 = Qt::TopToolBarArea;
        QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_area,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolBarArea, &a0))
        {
            sipCpp->addToolBarBreak(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addToolBarBreak, doc_QMainWindow_addToolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_insertToolBarBreak, "insertToolBarBreak(self, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_insertToolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_insertToolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->insertToolBarBreak(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_insertToolBarBreak, doc_QMainWindow_insertToolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_addToolBar, "addToolBar(self, Qt.ToolBarArea, QToolBar)\n"
    "addToolBar(self, QToolBar)\n"
    "addToolBar(self, str) -> QToolBar");

extern "C" {static PyObject *meth_QMainWindow_addToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ToolBarArea a0;
        QToolBar* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_ToolBarArea, &a0, sipType_QToolBar, &a1))
        {
            sipCpp->addToolBar(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->addToolBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QToolBar*sipRes;

            sipRes = sipCpp->addToolBar(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QToolBar,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addToolBar, doc_QMainWindow_addToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_insertToolBar, "insertToolBar(self, QToolBar, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_insertToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_insertToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QToolBar* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0, sipType_QToolBar, &a1))
        {
            sipCpp->insertToolBar(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_insertToolBar, doc_QMainWindow_insertToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_removeToolBar, "removeToolBar(self, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_removeToolBar(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeToolBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->removeToolBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeToolBar, doc_QMainWindow_removeToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_toolBarArea, "toolBarArea(self, QToolBar) -> Qt.ToolBarArea");

extern "C" {static PyObject *meth_QMainWindow_toolBarArea(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolBarArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            Qt::ToolBarArea sipRes;

            sipRes = sipCpp->toolBarArea(a0);

            return sipConvertFromEnum(sipRes,sipType_Qt_ToolBarArea);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolBarArea, doc_QMainWindow_toolBarArea);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_addDockWidget, "addDockWidget(self, Qt.DockWidgetArea, QDockWidget)\n"
    "addDockWidget(self, Qt.DockWidgetArea, QDockWidget, Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_addDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_addDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetArea a0;
        QDockWidget* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0, sipType_QDockWidget, &a1))
        {
            sipCpp->addDockWidget(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::DockWidgetArea a0;
        QDockWidget* a1;
        Qt::Orientation a2;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0, sipType_QDockWidget, &a1, sipType_Qt_Orientation, &a2))
        {
            sipCpp->addDockWidget(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_addDockWidget, doc_QMainWindow_addDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_splitDockWidget, "splitDockWidget(self, QDockWidget, QDockWidget, Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_splitDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_splitDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QDockWidget* a1;
        Qt::Orientation a2;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J:E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0, sipType_QDockWidget, &a1, sipType_Qt_Orientation, &a2))
        {
            sipCpp->splitDockWidget(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_splitDockWidget, doc_QMainWindow_splitDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_removeDockWidget, "removeDockWidget(self, QDockWidget)");

extern "C" {static PyObject *meth_QMainWindow_removeDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            sipCpp->removeDockWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeDockWidget, doc_QMainWindow_removeDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_dockWidgetArea, "dockWidgetArea(self, QDockWidget) -> Qt.DockWidgetArea");

extern "C" {static PyObject *meth_QMainWindow_dockWidgetArea(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_dockWidgetArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            Qt::DockWidgetArea sipRes;

            sipRes = sipCpp->dockWidgetArea(a0);

            return sipConvertFromEnum(sipRes,sipType_Qt_DockWidgetArea);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_dockWidgetArea, doc_QMainWindow_dockWidgetArea);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_saveState, "saveState(self, version: int = 0) -> QByteArray");

extern "C" {static PyObject *meth_QMainWindow_saveState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_saveState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_version,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->saveState(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_saveState, doc_QMainWindow_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_restoreState, "restoreState(self, Union[QByteArray, bytes, bytearray], version: int = 0) -> bool");

extern "C" {static PyObject *meth_QMainWindow_restoreState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_restoreState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        int a1 = 0;
        QMainWindow *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_version,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->restoreState(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_restoreState, doc_QMainWindow_restoreState);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_createPopupMenu, "createPopupMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QMainWindow_createPopupMenu(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_createPopupMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QMenu*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMainWindow::createPopupMenu() : sipCpp->createPopupMenu());

            return sipConvertFromType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_createPopupMenu, doc_QMainWindow_createPopupMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setAnimated, "setAnimated(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setAnimated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setAnimated, doc_QMainWindow_setAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setDockNestingEnabled, "setDockNestingEnabled(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setDockNestingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDockNestingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setDockNestingEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDockNestingEnabled, doc_QMainWindow_setDockNestingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QMainWindow_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMainWindow::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_contextMenuEvent, doc_QMainWindow_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QMainWindow_event(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMainWindow::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_event, doc_QMainWindow_event);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_isAnimated, "isAnimated(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnimated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isAnimated, doc_QMainWindow_isAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_isDockNestingEnabled, "isDockNestingEnabled(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_isDockNestingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isDockNestingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDockNestingEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isDockNestingEnabled, doc_QMainWindow_isDockNestingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_isSeparator, "isSeparator(self, QPoint) -> bool");

extern "C" {static PyObject *meth_QMainWindow_isSeparator(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_isSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSeparator(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_isSeparator, doc_QMainWindow_isSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_menuWidget, "menuWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_menuWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_menuWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->menuWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_menuWidget, doc_QMainWindow_menuWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setMenuWidget, "setMenuWidget(self, QWidget)");

extern "C" {static PyObject *meth_QMainWindow_setMenuWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setMenuWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setMenuWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setMenuWidget, doc_QMainWindow_setMenuWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabifyDockWidget, "tabifyDockWidget(self, QDockWidget, QDockWidget)");

extern "C" {static PyObject *meth_QMainWindow_tabifyDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabifyDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QDockWidget* a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0, sipType_QDockWidget, &a1))
        {
            sipCpp->tabifyDockWidget(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabifyDockWidget, doc_QMainWindow_tabifyDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setDockOptions, "setDockOptions(self, Union[QMainWindow.DockOptions, QMainWindow.DockOption])");

extern "C" {static PyObject *meth_QMainWindow_setDockOptions(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDockOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMainWindow::DockOptions* a0;
        int a0State = 0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QMainWindow_DockOptions, &a0, &a0State))
        {
            sipCpp->setDockOptions(*a0);
            sipReleaseType(a0,sipType_QMainWindow_DockOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDockOptions, doc_QMainWindow_setDockOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_dockOptions, "dockOptions(self) -> QMainWindow.DockOptions");

extern "C" {static PyObject *meth_QMainWindow_dockOptions(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_dockOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QMainWindow::DockOptions*sipRes;

            sipRes = new QMainWindow::DockOptions(sipCpp->dockOptions());

            return sipConvertFromNewType(sipRes,sipType_QMainWindow_DockOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_dockOptions, doc_QMainWindow_dockOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_removeToolBarBreak, "removeToolBarBreak(self, QToolBar)");

extern "C" {static PyObject *meth_QMainWindow_removeToolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_removeToolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            sipCpp->removeToolBarBreak(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_removeToolBarBreak, doc_QMainWindow_removeToolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_toolBarBreak, "toolBarBreak(self, QToolBar) -> bool");

extern "C" {static PyObject *meth_QMainWindow_toolBarBreak(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_toolBarBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QToolBar* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QToolBar, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->toolBarBreak(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_toolBarBreak, doc_QMainWindow_toolBarBreak);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setUnifiedTitleAndToolBarOnMac, "setUnifiedTitleAndToolBarOnMac(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setUnifiedTitleAndToolBarOnMac(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setUnifiedTitleAndToolBarOnMac(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setUnifiedTitleAndToolBarOnMac(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setUnifiedTitleAndToolBarOnMac, doc_QMainWindow_setUnifiedTitleAndToolBarOnMac);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_unifiedTitleAndToolBarOnMac, "unifiedTitleAndToolBarOnMac(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_unifiedTitleAndToolBarOnMac(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_unifiedTitleAndToolBarOnMac(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unifiedTitleAndToolBarOnMac();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_unifiedTitleAndToolBarOnMac, doc_QMainWindow_unifiedTitleAndToolBarOnMac);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_restoreDockWidget, "restoreDockWidget(self, QDockWidget) -> bool");

extern "C" {static PyObject *meth_QMainWindow_restoreDockWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_restoreDockWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->restoreDockWidget(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_restoreDockWidget, doc_QMainWindow_restoreDockWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_documentMode, "documentMode(self) -> bool");

extern "C" {static PyObject *meth_QMainWindow_documentMode(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_documentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->documentMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_documentMode, doc_QMainWindow_documentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setDocumentMode, "setDocumentMode(self, bool)");

extern "C" {static PyObject *meth_QMainWindow_setDocumentMode(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setDocumentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMainWindow, &sipCpp, &a0))
        {
            sipCpp->setDocumentMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setDocumentMode, doc_QMainWindow_setDocumentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabShape, "tabShape(self) -> QTabWidget.TabShape");

extern "C" {static PyObject *meth_QMainWindow_tabShape(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QTabWidget::TabShape sipRes;

            sipRes = sipCpp->tabShape();

            return sipConvertFromEnum(sipRes,sipType_QTabWidget_TabShape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabShape, doc_QMainWindow_tabShape);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setTabShape, "setTabShape(self, QTabWidget.TabShape)");

extern "C" {static PyObject *meth_QMainWindow_setTabShape(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setTabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabWidget::TabShape a0;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QTabWidget_TabShape, &a0))
        {
            sipCpp->setTabShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setTabShape, doc_QMainWindow_setTabShape);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabPosition, "tabPosition(self, Qt.DockWidgetArea) -> QTabWidget.TabPosition");

extern "C" {static PyObject *meth_QMainWindow_tabPosition(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetArea a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetArea, &a0))
        {
            QTabWidget::TabPosition sipRes;

            sipRes = sipCpp->tabPosition(a0);

            return sipConvertFromEnum(sipRes,sipType_QTabWidget_TabPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabPosition, doc_QMainWindow_tabPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_setTabPosition, "setTabPosition(self, Union[Qt.DockWidgetAreas, Qt.DockWidgetArea], QTabWidget.TabPosition)");

extern "C" {static PyObject *meth_QMainWindow_setTabPosition(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_setTabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DockWidgetAreas* a0;
        int a0State = 0;
        QTabWidget::TabPosition a1;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_Qt_DockWidgetAreas, &a0, &a0State, sipType_QTabWidget_TabPosition, &a1))
        {
            sipCpp->setTabPosition(*a0,a1);
            sipReleaseType(a0,sipType_Qt_DockWidgetAreas,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_setTabPosition, doc_QMainWindow_setTabPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_tabifiedDockWidgets, "tabifiedDockWidgets(self, QDockWidget) -> object");

extern "C" {static PyObject *meth_QMainWindow_tabifiedDockWidgets(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_tabifiedDockWidgets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDockWidget* a0;
        const QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QDockWidget, &a0))
        {
            QList<QDockWidget*>*sipRes;

            sipRes = new QList<QDockWidget*>(sipCpp->tabifiedDockWidgets(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QDockWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_tabifiedDockWidgets, doc_QMainWindow_tabifiedDockWidgets);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_takeCentralWidget, "takeCentralWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QMainWindow_takeCentralWidget(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_takeCentralWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMainWindow, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->takeCentralWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_takeCentralWidget, doc_QMainWindow_takeCentralWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QMainWindow_resizeDocks, "resizeDocks(self, Iterable[QDockWidget], Iterable[int], Qt.Orientation)");

extern "C" {static PyObject *meth_QMainWindow_resizeDocks(PyObject *, PyObject *);}
static PyObject *meth_QMainWindow_resizeDocks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QDockWidget*>* a0;
        int a0State = 0;
        const QList<int>* a1;
        int a1State = 0;
        Qt::Orientation a2;
        QMainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1E", &sipSelf, sipType_QMainWindow, &sipCpp, sipType_QList_0101QDockWidget,&a0, &a0State, sipType_QList_1800,&a1, &a1State, sipType_Qt_Orientation, &a2))
        {
            sipCpp->resizeDocks(*a0,*a1,a2);
            sipReleaseType(const_cast<QList<QDockWidget*> *>(a0),sipType_QList_0101QDockWidget,a0State);
            sipReleaseType(const_cast<QList<int> *>(a1),sipType_QList_1800,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMainWindow, sipName_resizeDocks, doc_QMainWindow_resizeDocks);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QMainWindow(void *, const sipTypeDef *);}
static void *cast_QMainWindow(void *sipCppV, const sipTypeDef *targetType)
{
    QMainWindow *sipCpp = reinterpret_cast<QMainWindow *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMainWindow(void *, int);}
static void release_QMainWindow(void *sipCppV,int)
{
    QMainWindow *sipCpp = reinterpret_cast<QMainWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMainWindow(sipSimpleWrapper *);}
static void dealloc_QMainWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMainWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMainWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMainWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMainWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMainWindow *sipCpp = 0;

    {
        QWidget* a0 = 0;
        Qt::WindowFlags a1def = Qt::WindowFlags();
        Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp = new sipQMainWindow(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMainWindow[] = {{456, 255, 1}};


static PyMethodDef methods_QMainWindow[] = {
    {SIP_MLNAME_CAST(sipName_addDockWidget), meth_QMainWindow_addDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_addDockWidget)},
    {SIP_MLNAME_CAST(sipName_addToolBar), meth_QMainWindow_addToolBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_addToolBar)},
    {SIP_MLNAME_CAST(sipName_addToolBarBreak), (PyCFunction)meth_QMainWindow_addToolBarBreak, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMainWindow_addToolBarBreak)},
    {SIP_MLNAME_CAST(sipName_centralWidget), meth_QMainWindow_centralWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_centralWidget)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QMainWindow_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_corner), meth_QMainWindow_corner, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_corner)},
    {SIP_MLNAME_CAST(sipName_createPopupMenu), meth_QMainWindow_createPopupMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_createPopupMenu)},
    {SIP_MLNAME_CAST(sipName_dockOptions), meth_QMainWindow_dockOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_dockOptions)},
    {SIP_MLNAME_CAST(sipName_dockWidgetArea), meth_QMainWindow_dockWidgetArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_dockWidgetArea)},
    {SIP_MLNAME_CAST(sipName_documentMode), meth_QMainWindow_documentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_documentMode)},
    {SIP_MLNAME_CAST(sipName_event), meth_QMainWindow_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_event)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QMainWindow_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_iconSize)},
    {SIP_MLNAME_CAST(sipName_insertToolBar), meth_QMainWindow_insertToolBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_insertToolBar)},
    {SIP_MLNAME_CAST(sipName_insertToolBarBreak), meth_QMainWindow_insertToolBarBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_insertToolBarBreak)},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QMainWindow_isAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_isAnimated)},
    {SIP_MLNAME_CAST(sipName_isDockNestingEnabled), meth_QMainWindow_isDockNestingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_isDockNestingEnabled)},
    {SIP_MLNAME_CAST(sipName_isSeparator), meth_QMainWindow_isSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_isSeparator)},
    {SIP_MLNAME_CAST(sipName_menuBar), meth_QMainWindow_menuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_menuBar)},
    {SIP_MLNAME_CAST(sipName_menuWidget), meth_QMainWindow_menuWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_menuWidget)},
    {SIP_MLNAME_CAST(sipName_removeDockWidget), meth_QMainWindow_removeDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_removeDockWidget)},
    {SIP_MLNAME_CAST(sipName_removeToolBar), meth_QMainWindow_removeToolBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_removeToolBar)},
    {SIP_MLNAME_CAST(sipName_removeToolBarBreak), meth_QMainWindow_removeToolBarBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_removeToolBarBreak)},
    {SIP_MLNAME_CAST(sipName_resizeDocks), meth_QMainWindow_resizeDocks, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_resizeDocks)},
    {SIP_MLNAME_CAST(sipName_restoreDockWidget), meth_QMainWindow_restoreDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_restoreDockWidget)},
    {SIP_MLNAME_CAST(sipName_restoreState), (PyCFunction)meth_QMainWindow_restoreState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMainWindow_restoreState)},
    {SIP_MLNAME_CAST(sipName_saveState), (PyCFunction)meth_QMainWindow_saveState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMainWindow_saveState)},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QMainWindow_setAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setAnimated)},
    {SIP_MLNAME_CAST(sipName_setCentralWidget), meth_QMainWindow_setCentralWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setCentralWidget)},
    {SIP_MLNAME_CAST(sipName_setCorner), meth_QMainWindow_setCorner, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setCorner)},
    {SIP_MLNAME_CAST(sipName_setDockNestingEnabled), meth_QMainWindow_setDockNestingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setDockNestingEnabled)},
    {SIP_MLNAME_CAST(sipName_setDockOptions), meth_QMainWindow_setDockOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setDockOptions)},
    {SIP_MLNAME_CAST(sipName_setDocumentMode), meth_QMainWindow_setDocumentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setDocumentMode)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QMainWindow_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setMenuBar), meth_QMainWindow_setMenuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setMenuBar)},
    {SIP_MLNAME_CAST(sipName_setMenuWidget), meth_QMainWindow_setMenuWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setMenuWidget)},
    {SIP_MLNAME_CAST(sipName_setStatusBar), meth_QMainWindow_setStatusBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setStatusBar)},
    {SIP_MLNAME_CAST(sipName_setTabPosition), meth_QMainWindow_setTabPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setTabPosition)},
    {SIP_MLNAME_CAST(sipName_setTabShape), meth_QMainWindow_setTabShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setTabShape)},
    {SIP_MLNAME_CAST(sipName_setToolButtonStyle), meth_QMainWindow_setToolButtonStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setToolButtonStyle)},
    {SIP_MLNAME_CAST(sipName_setUnifiedTitleAndToolBarOnMac), meth_QMainWindow_setUnifiedTitleAndToolBarOnMac, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_setUnifiedTitleAndToolBarOnMac)},
    {SIP_MLNAME_CAST(sipName_splitDockWidget), meth_QMainWindow_splitDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_splitDockWidget)},
    {SIP_MLNAME_CAST(sipName_statusBar), meth_QMainWindow_statusBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_statusBar)},
    {SIP_MLNAME_CAST(sipName_tabPosition), meth_QMainWindow_tabPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabPosition)},
    {SIP_MLNAME_CAST(sipName_tabShape), meth_QMainWindow_tabShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabShape)},
    {SIP_MLNAME_CAST(sipName_tabifiedDockWidgets), meth_QMainWindow_tabifiedDockWidgets, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabifiedDockWidgets)},
    {SIP_MLNAME_CAST(sipName_tabifyDockWidget), meth_QMainWindow_tabifyDockWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_tabifyDockWidget)},
    {SIP_MLNAME_CAST(sipName_takeCentralWidget), meth_QMainWindow_takeCentralWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_takeCentralWidget)},
    {SIP_MLNAME_CAST(sipName_toolBarArea), meth_QMainWindow_toolBarArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_toolBarArea)},
    {SIP_MLNAME_CAST(sipName_toolBarBreak), meth_QMainWindow_toolBarBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_toolBarBreak)},
    {SIP_MLNAME_CAST(sipName_toolButtonStyle), meth_QMainWindow_toolButtonStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_toolButtonStyle)},
    {SIP_MLNAME_CAST(sipName_unifiedTitleAndToolBarOnMac), meth_QMainWindow_unifiedTitleAndToolBarOnMac, METH_VARARGS, SIP_MLDOC_CAST(doc_QMainWindow_unifiedTitleAndToolBarOnMac)}
};

static sipEnumMemberDef enummembers_QMainWindow[] = {
    {sipName_AllowNestedDocks, static_cast<int>(QMainWindow::AllowNestedDocks), 221},
    {sipName_AllowTabbedDocks, static_cast<int>(QMainWindow::AllowTabbedDocks), 221},
    {sipName_AnimatedDocks, static_cast<int>(QMainWindow::AnimatedDocks), 221},
    {sipName_ForceTabbedDocks, static_cast<int>(QMainWindow::ForceTabbedDocks), 221},
    {sipName_GroupedDragging, static_cast<int>(QMainWindow::GroupedDragging), 221},
    {sipName_VerticalTabs, static_cast<int>(QMainWindow::VerticalTabs), 221},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMainWindow[] = {
    {"toolButtonStyleChanged(Qt::ToolButtonStyle)", "\1toolButtonStyleChanged(self, Qt.ToolButtonStyle)", 0, 0},
    {"iconSizeChanged(QSize)", "\1iconSizeChanged(self, QSize)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMainWindow, "\1QMainWindow(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QMainWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMainWindow,
        {0}
    },
    {
        sipNameNr_QMainWindow,
        {0, 0, 1},
        51, methods_QMainWindow,
        6, enummembers_QMainWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMainWindow,
    -1,
    -1,
    supers_QMainWindow,
    0,
    init_type_QMainWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMainWindow,
    0,
    0,
    0,
    release_QMainWindow,
    cast_QMainWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMainWindow::staticMetaObject,
    0,
    signals_QMainWindow,
    0
};
