/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qheaderview.sip"
#include <qheaderview.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"

#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 297 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 150 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 326 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 555 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 604 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 577 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 593 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 560 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 67 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 660 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 240 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 246 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 252 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 255 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 258 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 261 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 264 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 267 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 270 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 273 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 276 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 279 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 282 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 285 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 288 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"


class sipQHeaderView : public QHeaderView
{
public:
    sipQHeaderView(Qt::Orientation,QWidget*);
    virtual ~sipQHeaderView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    int devType() const;
    void changeEvent(QEvent*);
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize minimumSizeHint() const;
    QSize viewportSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void timerEvent(QTimerEvent*);
    void resizeEvent(QResizeEvent*);
    void keyPressEvent(QKeyEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    QModelIndexList selectedIndexes() const;
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarAction(int);
    void updateEditorGeometries();
    void updateEditorData();
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void selectAll();
    void setRootIndex(const QModelIndex&);
    int sizeHintForColumn(int) const;
    int sizeHintForRow(int) const;
    void keyboardSearch(const QString&);
    void setSelectionModel(QItemSelectionModel*);
    void setVisible(bool);
    void reset();
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    bool isIndexHidden(const QModelIndex&) const;
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void rowsInserted(const QModelIndex&,int,int);
    void dataChanged(const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void scrollContentsBy(int,int);
    void updateGeometries();
    int verticalOffset() const;
    int horizontalOffset() const;
    QSize sectionSizeFromContents(int) const;
    void paintSection(QPainter*,const QRect&,int) const;
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void paintEvent(QPaintEvent*);
    bool viewportEvent(QEvent*);
    bool event(QEvent*);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    QSize sizeHint() const;
    void setModel(QAbstractItemModel*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHeaderView(const sipQHeaderView &);
    sipQHeaderView &operator = (const sipQHeaderView &);

    char sipPyMethods[89];
};

sipQHeaderView::sipQHeaderView(Qt::Orientation a0,QWidget*a1): QHeaderView(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHeaderView::~sipQHeaderView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHeaderView::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QHeaderView);

    return QHeaderView::metaObject();
}

int sipQHeaderView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QHeaderView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QHeaderView,_c,_id,_a);

    return _id;
}

void *sipQHeaderView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QHeaderView, _clname, &sipCpp) ? sipCpp : QHeaderView::qt_metacast(_clname));
}

void sipQHeaderView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QHeaderView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QHeaderView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QHeaderView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QHeaderView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QHeaderView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQHeaderView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QHeaderView::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQHeaderView::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QHeaderView::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQHeaderView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QHeaderView::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQHeaderView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QHeaderView::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QHeaderView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QHeaderView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QHeaderView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QHeaderView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QHeaderView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QHeaderView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QHeaderView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QHeaderView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QHeaderView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQHeaderView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QHeaderView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQHeaderView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QHeaderView::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQHeaderView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QHeaderView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QHeaderView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QHeaderView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QHeaderView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QHeaderView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QHeaderView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQHeaderView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QHeaderView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQHeaderView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return QHeaderView::viewportSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QHeaderView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QHeaderView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQHeaderView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QHeaderView::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QHeaderView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QHeaderView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QHeaderView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QHeaderView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QHeaderView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QHeaderView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QHeaderView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QHeaderView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QHeaderView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQHeaderView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QHeaderView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_46(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QHeaderView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtWidgets_91(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQHeaderView::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QHeaderView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtWidgets_144(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtWidgets_144(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQHeaderView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QHeaderView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_145(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtWidgets_145(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QModelIndexList sipQHeaderView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QHeaderView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_27(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QHeaderView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_146(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtWidgets_146(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QHeaderView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QHeaderView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_147(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QHeaderView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QHeaderView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QHeaderView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QHeaderView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QHeaderView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QHeaderView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QHeaderView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtWidgets_24(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QHeaderView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QHeaderView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QHeaderView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQHeaderView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QHeaderView::sizeHintForColumn(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQHeaderView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[59]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QHeaderView::sizeHintForRow(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QHeaderView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QHeaderView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtWidgets_16(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QHeaderView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QHeaderView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRegion sipQHeaderView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QHeaderView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtWidgets_28(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QHeaderView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_29(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QModelIndex sipQHeaderView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QHeaderView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemView::CursorAction,Qt::KeyboardModifiers);

    return sipVH_QtWidgets_30(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQHeaderView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[67]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QHeaderView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndex sipQHeaderView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QHeaderView::indexAt(a0);

    extern QModelIndex sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_33(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QHeaderView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_34(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QRect sipQHeaderView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QHeaderView::visualRect(a0);

    extern QRect sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_35(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QHeaderView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::dataChanged(const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QHeaderView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&,const QVector<int>&);

    sipVH_QtWidgets_32(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QHeaderView::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQHeaderView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QHeaderView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQHeaderView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[75]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QHeaderView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQHeaderView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[76]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QHeaderView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQHeaderView::sectionSizeFromContents(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[77]),sipPySelf,NULL,sipName_sectionSizeFromContents);

    if (!sipMeth)
        return QHeaderView::sectionSizeFromContents(a0);

    extern QSize sipVH_QtWidgets_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_47(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::paintSection(QPainter*a0,const QRect& a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[78]),sipPySelf,NULL,sipName_paintSection);

    if (!sipMeth)
    {
        QHeaderView::paintSection(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,int);

    sipVH_QtWidgets_103(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQHeaderView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QHeaderView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QHeaderView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QHeaderView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QHeaderView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QHeaderView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QHeaderView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQHeaderView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QHeaderView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHeaderView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QHeaderView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtWidgets_23(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QSize sipQHeaderView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[87]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QHeaderView::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQHeaderView::setModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
        QHeaderView::setModel(a0);
        return;
    }

    typedef void (*sipVH_QtCore_40)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    ((sipVH_QtCore_40)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[40]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QHeaderView_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QHeaderView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHeaderView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -29, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setModel, doc_QHeaderView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_orientation, "orientation(self) -> Qt.Orientation");

extern "C" {static PyObject *meth_QHeaderView_orientation(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            Qt::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(sipRes,sipType_Qt_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_orientation, doc_QHeaderView_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_offset, "offset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_offset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_offset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->offset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_offset, doc_QHeaderView_offset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_length, "length(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_length(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_length, doc_QHeaderView_length);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QHeaderView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QHeaderView::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sizeHint, doc_QHeaderView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSizeHint, "sectionSizeHint(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionSizeHint(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSizeHint, doc_QHeaderView_sectionSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualIndexAt, "visualIndexAt(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_visualIndexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualIndexAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualIndexAt, doc_QHeaderView_visualIndexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_logicalIndexAt, "logicalIndexAt(self, int) -> int\n"
    "logicalIndexAt(self, int, int) -> int\n"
    "logicalIndexAt(self, QPoint) -> int");

extern "C" {static PyObject *meth_QHeaderView_logicalIndexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_logicalIndexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QPoint* a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndexAt(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_logicalIndexAt, doc_QHeaderView_logicalIndexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSize, "sectionSize(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionSize(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSize, doc_QHeaderView_sectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionPosition, "sectionPosition(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionPosition, doc_QHeaderView_sectionPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionViewportPosition, "sectionViewportPosition(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_sectionViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sectionViewportPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionViewportPosition, doc_QHeaderView_sectionViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_moveSection, "moveSection(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_moveSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_moveSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->moveSection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_moveSection, doc_QHeaderView_moveSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resizeSection, "resizeSection(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_resizeSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->resizeSection(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeSection, doc_QHeaderView_resizeSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_isSectionHidden, "isSectionHidden(self, int) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isSectionHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isSectionHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSectionHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isSectionHidden, doc_QHeaderView_isSectionHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionHidden, "setSectionHidden(self, int, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->setSectionHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionHidden, doc_QHeaderView_setSectionHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_count, "count(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_count(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_count, doc_QHeaderView_count);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualIndex, "visualIndex(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_visualIndex(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualIndex(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualIndex, doc_QHeaderView_visualIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_logicalIndex, "logicalIndex(self, int) -> int");

extern "C" {static PyObject *meth_QHeaderView_logicalIndex(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_logicalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->logicalIndex(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_logicalIndex, doc_QHeaderView_logicalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setHighlightSections, "setHighlightSections(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setHighlightSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setHighlightSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setHighlightSections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setHighlightSections, doc_QHeaderView_setHighlightSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_highlightSections, "highlightSections(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_highlightSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_highlightSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->highlightSections();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_highlightSections, doc_QHeaderView_highlightSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_stretchSectionCount, "stretchSectionCount(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_stretchSectionCount(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_stretchSectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stretchSectionCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_stretchSectionCount, doc_QHeaderView_stretchSectionCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSortIndicatorShown, "setSortIndicatorShown(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSortIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSortIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSortIndicatorShown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSortIndicatorShown, doc_QHeaderView_setSortIndicatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_isSortIndicatorShown, "isSortIndicatorShown(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isSortIndicatorShown(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isSortIndicatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortIndicatorShown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isSortIndicatorShown, doc_QHeaderView_isSortIndicatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSortIndicator, "setSortIndicator(self, int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QHeaderView_setSortIndicator(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSortIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->setSortIndicator(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSortIndicator, doc_QHeaderView_setSortIndicator);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sortIndicatorSection, "sortIndicatorSection(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_sortIndicatorSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sortIndicatorSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortIndicatorSection();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sortIndicatorSection, doc_QHeaderView_sortIndicatorSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sortIndicatorOrder, "sortIndicatorOrder(self) -> Qt.SortOrder");

extern "C" {static PyObject *meth_QHeaderView_sortIndicatorOrder(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sortIndicatorOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            Qt::SortOrder sipRes;

            sipRes = sipCpp->sortIndicatorOrder();

            return sipConvertFromEnum(sipRes,sipType_Qt_SortOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sortIndicatorOrder, doc_QHeaderView_sortIndicatorOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_stretchLastSection, "stretchLastSection(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_stretchLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_stretchLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stretchLastSection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_stretchLastSection, doc_QHeaderView_stretchLastSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setStretchLastSection, "setStretchLastSection(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setStretchLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setStretchLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setStretchLastSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setStretchLastSection, doc_QHeaderView_setStretchLastSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsMoved, "sectionsMoved(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsMoved(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsMoved();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsMoved, doc_QHeaderView_sectionsMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setOffset, "setOffset(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffset, doc_QHeaderView_setOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_headerDataChanged, "headerDataChanged(self, Qt.Orientation, int, int)");

extern "C" {static PyObject *meth_QHeaderView_headerDataChanged(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_headerDataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Orientation a0;
        int a1;
        int a2;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_Qt_Orientation, &a0, &a1, &a2))
        {
            sipCpp->headerDataChanged(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_headerDataChanged, doc_QHeaderView_headerDataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setOffsetToSectionPosition, "setOffsetToSectionPosition(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setOffsetToSectionPosition(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffsetToSectionPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setOffsetToSectionPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffsetToSectionPosition, doc_QHeaderView_setOffsetToSectionPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_updateSection, "updateSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_updateSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->updateSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateSection, doc_QHeaderView_updateSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resizeSections, "resizeSections(self)\n"
    "resizeSections(self, QHeaderView.ResizeMode)");

extern "C" {static PyObject *meth_QHeaderView_resizeSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->resizeSections();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QHeaderView::ResizeMode a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QHeaderView_ResizeMode, &a0))
        {
            sipCpp->resizeSections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeSections, doc_QHeaderView_resizeSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsInserted, "sectionsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_sectionsInserted(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sectionsInserted(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsInserted, doc_QHeaderView_sectionsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsAboutToBeRemoved, "sectionsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_sectionsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sectionsAboutToBeRemoved(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsAboutToBeRemoved, doc_QHeaderView_sectionsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_initialize, "initialize(self)");

extern "C" {static PyObject *meth_QHeaderView_initialize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->initialize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initialize, doc_QHeaderView_initialize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_initializeSections, "initializeSections(self)\n"
    "initializeSections(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_initializeSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initializeSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->initializeSections();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->initializeSections(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initializeSections, doc_QHeaderView_initializeSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QHeaderView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_currentChanged, doc_QHeaderView_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_event(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QHeaderView::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_event, doc_QHeaderView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_viewportEvent, "viewportEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHeaderView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QHeaderView::viewportEvent(a0) : sipCpp->viewportEvent(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_viewportEvent, doc_QHeaderView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QHeaderView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_paintEvent, doc_QHeaderView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mousePressEvent, doc_QHeaderView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseMoveEvent, doc_QHeaderView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseReleaseEvent, doc_QHeaderView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QHeaderView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_mouseDoubleClickEvent, doc_QHeaderView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_paintSection, "paintSection(self, QPainter, QRect, int)");

extern "C" {static PyObject *meth_QHeaderView_paintSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_paintSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRect* a1;
        int a2;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J9i", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::paintSection(a0,*a1,a2) : sipCpp->paintSection(a0,*a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_paintSection, doc_QHeaderView_paintSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionSizeFromContents, "sectionSizeFromContents(self, int) -> QSize");

extern "C" {static PyObject *meth_QHeaderView_sectionSizeFromContents(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionSizeFromContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QHeaderView::sectionSizeFromContents(a0) : sipCpp->sectionSizeFromContents(a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionSizeFromContents, doc_QHeaderView_sectionSizeFromContents);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QHeaderView::horizontalOffset() : sipCpp->horizontalOffset());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_horizontalOffset, doc_QHeaderView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QHeaderView::verticalOffset() : sipCpp->verticalOffset());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_verticalOffset, doc_QHeaderView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QHeaderView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::updateGeometries() : sipCpp->updateGeometries());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_updateGeometries, doc_QHeaderView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scrollContentsBy, doc_QHeaderView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_dataChanged, "dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])");

extern "C" {static PyObject *meth_QHeaderView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        const QVector<int>& a2def = QVector<int>();
        const QVector<int>* a2 = &a2def;
        int a2State = 0;
        QHeaderView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pJ9J9|J1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::dataChanged(*a0,*a1,*a2) : sipCpp->dataChanged(*a0,*a1,*a2));
            sipReleaseType(const_cast<QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_dataChanged, doc_QHeaderView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_rowsInserted, "rowsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QHeaderView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_rowsInserted, doc_QHeaderView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QHeaderView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QHeaderView::visualRect(*a0) : sipCpp->visualRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualRect, doc_QHeaderView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_scrollTo, "scrollTo(self, QModelIndex, QAbstractItemView.ScrollHint)");

extern "C" {static PyObject *meth_QHeaderView_scrollTo(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_scrollTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView::ScrollHint a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9E", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_scrollTo, doc_QHeaderView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QHeaderView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint* a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QHeaderView::indexAt(*a0) : sipCpp->indexAt(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_indexAt, doc_QHeaderView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QHeaderView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QHeaderView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_isIndexHidden, doc_QHeaderView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QHeaderView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemView::CursorAction a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QHeaderView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_moveCursor, doc_QHeaderView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSelection, "setSelection(self, QRect, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QHeaderView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSelection, doc_QHeaderView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QHeaderView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            sipRes = new QRegion((sipSelfWasArg ? sipCpp->QHeaderView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_visualRegionForSelection, doc_QHeaderView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_hideSection, "hideSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_hideSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_hideSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->hideSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_hideSection, doc_QHeaderView_hideSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_showSection, "showSection(self, int)");

extern "C" {static PyObject *meth_QHeaderView_showSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_showSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->showSection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_showSection, doc_QHeaderView_showSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_hiddenSectionCount, "hiddenSectionCount(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_hiddenSectionCount(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_hiddenSectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hiddenSectionCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_hiddenSectionCount, doc_QHeaderView_hiddenSectionCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_defaultSectionSize, "defaultSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_defaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_defaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->defaultSectionSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_defaultSectionSize, doc_QHeaderView_defaultSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setDefaultSectionSize, "setDefaultSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setDefaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setDefaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setDefaultSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setDefaultSectionSize, doc_QHeaderView_setDefaultSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_defaultAlignment, "defaultAlignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QHeaderView_defaultAlignment(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_defaultAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->defaultAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_defaultAlignment, doc_QHeaderView_defaultAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setDefaultAlignment, "setDefaultAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QHeaderView_setDefaultAlignment(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setDefaultAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setDefaultAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setDefaultAlignment, doc_QHeaderView_setDefaultAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsHidden, "sectionsHidden(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsHidden(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsHidden, doc_QHeaderView_sectionsHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_swapSections, "swapSections(self, int, int)");

extern "C" {static PyObject *meth_QHeaderView_swapSections(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_swapSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, &a1))
        {
            sipCpp->swapSections(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_swapSections, doc_QHeaderView_swapSections);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_cascadingSectionResizes, "cascadingSectionResizes(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_cascadingSectionResizes(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_cascadingSectionResizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->cascadingSectionResizes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_cascadingSectionResizes, doc_QHeaderView_cascadingSectionResizes);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setCascadingSectionResizes, "setCascadingSectionResizes(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setCascadingSectionResizes(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setCascadingSectionResizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setCascadingSectionResizes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setCascadingSectionResizes, doc_QHeaderView_setCascadingSectionResizes);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_minimumSectionSize, "minimumSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_minimumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_minimumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumSectionSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_minimumSectionSize, doc_QHeaderView_minimumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setMinimumSectionSize, "setMinimumSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setMinimumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setMinimumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setMinimumSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setMinimumSectionSize, doc_QHeaderView_setMinimumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_saveState, "saveState(self) -> QByteArray");

extern "C" {static PyObject *meth_QHeaderView_saveState(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->saveState());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_saveState, doc_QHeaderView_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_restoreState, "restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QHeaderView_restoreState(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_restoreState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->restoreState(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_restoreState, doc_QHeaderView_restoreState);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_reset, "reset(self)");

extern "C" {static PyObject *meth_QHeaderView_reset(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_reset, doc_QHeaderView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setOffsetToLastSection, "setOffsetToLastSection(self)");

extern "C" {static PyObject *meth_QHeaderView_setOffsetToLastSection(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setOffsetToLastSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->setOffsetToLastSection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setOffsetToLastSection, doc_QHeaderView_setOffsetToLastSection);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_initStyleOption, "initStyleOption(self, QStyleOptionHeader)");

extern "C" {static PyObject *meth_QHeaderView_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionHeader* a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QStyleOptionHeader, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_initStyleOption, doc_QHeaderView_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionsMovable, "setSectionsMovable(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionsMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionsMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSectionsMovable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionsMovable, doc_QHeaderView_setSectionsMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsMovable, "sectionsMovable(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsMovable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsMovable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsMovable, doc_QHeaderView_sectionsMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionsClickable, "setSectionsClickable(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setSectionsClickable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionsClickable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setSectionsClickable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionsClickable, doc_QHeaderView_setSectionsClickable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionsClickable, "sectionsClickable(self) -> bool");

extern "C" {static PyObject *meth_QHeaderView_sectionsClickable(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionsClickable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sectionsClickable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionsClickable, doc_QHeaderView_sectionsClickable);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_sectionResizeMode, "sectionResizeMode(self, int) -> QHeaderView.ResizeMode");

extern "C" {static PyObject *meth_QHeaderView_sectionResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_sectionResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            QHeaderView::ResizeMode sipRes;

            sipRes = sipCpp->sectionResizeMode(a0);

            return sipConvertFromEnum(sipRes,sipType_QHeaderView_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_sectionResizeMode, doc_QHeaderView_sectionResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setSectionResizeMode, "setSectionResizeMode(self, int, QHeaderView.ResizeMode)\n"
    "setSectionResizeMode(self, QHeaderView.ResizeMode)");

extern "C" {static PyObject *meth_QHeaderView_setSectionResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setSectionResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView::ResizeMode a1;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QHeaderView, &sipCpp, &a0, sipType_QHeaderView_ResizeMode, &a1))
        {
            sipCpp->setSectionResizeMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QHeaderView::ResizeMode a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHeaderView, &sipCpp, sipType_QHeaderView_ResizeMode, &a0))
        {
            sipCpp->setSectionResizeMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setSectionResizeMode, doc_QHeaderView_setSectionResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QHeaderView_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QHeaderView::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setVisible, doc_QHeaderView_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setResizeContentsPrecision, "setResizeContentsPrecision(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setResizeContentsPrecision(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setResizeContentsPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setResizeContentsPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setResizeContentsPrecision, doc_QHeaderView_setResizeContentsPrecision);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resizeContentsPrecision, "resizeContentsPrecision(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_resizeContentsPrecision(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resizeContentsPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->resizeContentsPrecision();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resizeContentsPrecision, doc_QHeaderView_resizeContentsPrecision);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_maximumSectionSize, "maximumSectionSize(self) -> int");

extern "C" {static PyObject *meth_QHeaderView_maximumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_maximumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumSectionSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_maximumSectionSize, doc_QHeaderView_maximumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_setMaximumSectionSize, "setMaximumSectionSize(self, int)");

extern "C" {static PyObject *meth_QHeaderView_setMaximumSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_setMaximumSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHeaderView, &sipCpp, &a0))
        {
            sipCpp->setMaximumSectionSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_setMaximumSectionSize, doc_QHeaderView_setMaximumSectionSize);

    return NULL;
}


PyDoc_STRVAR(doc_QHeaderView_resetDefaultSectionSize, "resetDefaultSectionSize(self)");

extern "C" {static PyObject *meth_QHeaderView_resetDefaultSectionSize(PyObject *, PyObject *);}
static PyObject *meth_QHeaderView_resetDefaultSectionSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHeaderView, &sipCpp))
        {
            sipCpp->resetDefaultSectionSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHeaderView, sipName_resetDefaultSectionSize, doc_QHeaderView_resetDefaultSectionSize);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QHeaderView___len__(PyObject *);}
static SIP_SSIZE_T slot_QHeaderView___len__(PyObject *sipSelf)
{
    QHeaderView *sipCpp = reinterpret_cast<QHeaderView *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHeaderView));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 4681 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQHeaderView.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QHeaderView(void *, const sipTypeDef *);}
static void *cast_QHeaderView(void *sipCppV, const sipTypeDef *targetType)
{
    QHeaderView *sipCpp = reinterpret_cast<QHeaderView *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHeaderView(void *, int);}
static void release_QHeaderView(void *sipCppV,int)
{
    QHeaderView *sipCpp = reinterpret_cast<QHeaderView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QHeaderView(sipSimpleWrapper *);}
static void dealloc_QHeaderView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHeaderView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHeaderView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QHeaderView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHeaderView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHeaderView *sipCpp = 0;

    {
        Qt::Orientation a0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_Qt_Orientation, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQHeaderView(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHeaderView[] = {{4, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QHeaderView[] = {
    {(void *)slot_QHeaderView___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QHeaderView[] = {
    {SIP_MLNAME_CAST(sipName_cascadingSectionResizes), meth_QHeaderView_cascadingSectionResizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_cascadingSectionResizes)},
    {SIP_MLNAME_CAST(sipName_count), meth_QHeaderView_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_count)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QHeaderView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_dataChanged), (PyCFunction)meth_QHeaderView_dataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHeaderView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_defaultAlignment), meth_QHeaderView_defaultAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_defaultAlignment)},
    {SIP_MLNAME_CAST(sipName_defaultSectionSize), meth_QHeaderView_defaultSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_defaultSectionSize)},
    {SIP_MLNAME_CAST(sipName_event), meth_QHeaderView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_event)},
    {SIP_MLNAME_CAST(sipName_headerDataChanged), meth_QHeaderView_headerDataChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_headerDataChanged)},
    {SIP_MLNAME_CAST(sipName_hiddenSectionCount), meth_QHeaderView_hiddenSectionCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_hiddenSectionCount)},
    {SIP_MLNAME_CAST(sipName_hideSection), meth_QHeaderView_hideSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_hideSection)},
    {SIP_MLNAME_CAST(sipName_highlightSections), meth_QHeaderView_highlightSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_highlightSections)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QHeaderView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QHeaderView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_indexAt)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QHeaderView_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_initialize), meth_QHeaderView_initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_initialize)},
    {SIP_MLNAME_CAST(sipName_initializeSections), meth_QHeaderView_initializeSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_initializeSections)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QHeaderView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isSectionHidden), meth_QHeaderView_isSectionHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_isSectionHidden)},
    {SIP_MLNAME_CAST(sipName_isSortIndicatorShown), meth_QHeaderView_isSortIndicatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_isSortIndicatorShown)},
    {SIP_MLNAME_CAST(sipName_length), meth_QHeaderView_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_length)},
    {SIP_MLNAME_CAST(sipName_logicalIndex), meth_QHeaderView_logicalIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_logicalIndex)},
    {SIP_MLNAME_CAST(sipName_logicalIndexAt), meth_QHeaderView_logicalIndexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_logicalIndexAt)},
    {SIP_MLNAME_CAST(sipName_maximumSectionSize), meth_QHeaderView_maximumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_maximumSectionSize)},
    {SIP_MLNAME_CAST(sipName_minimumSectionSize), meth_QHeaderView_minimumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_minimumSectionSize)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QHeaderView_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QHeaderView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QHeaderView_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QHeaderView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QHeaderView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_moveSection), meth_QHeaderView_moveSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_moveSection)},
    {SIP_MLNAME_CAST(sipName_offset), meth_QHeaderView_offset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_offset)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QHeaderView_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_orientation)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QHeaderView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paintSection), meth_QHeaderView_paintSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_paintSection)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QHeaderView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_reset)},
    {SIP_MLNAME_CAST(sipName_resetDefaultSectionSize), meth_QHeaderView_resetDefaultSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_resetDefaultSectionSize)},
    {SIP_MLNAME_CAST(sipName_resizeContentsPrecision), meth_QHeaderView_resizeContentsPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_resizeContentsPrecision)},
    {SIP_MLNAME_CAST(sipName_resizeSection), meth_QHeaderView_resizeSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_resizeSection)},
    {SIP_MLNAME_CAST(sipName_resizeSections), meth_QHeaderView_resizeSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_resizeSections)},
    {SIP_MLNAME_CAST(sipName_restoreState), meth_QHeaderView_restoreState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_restoreState)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QHeaderView_rowsInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_saveState), meth_QHeaderView_saveState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_saveState)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QHeaderView_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollTo), meth_QHeaderView_scrollTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_sectionPosition), meth_QHeaderView_sectionPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionPosition)},
    {SIP_MLNAME_CAST(sipName_sectionResizeMode), meth_QHeaderView_sectionResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionResizeMode)},
    {SIP_MLNAME_CAST(sipName_sectionSize), meth_QHeaderView_sectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionSize)},
    {SIP_MLNAME_CAST(sipName_sectionSizeFromContents), meth_QHeaderView_sectionSizeFromContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionSizeFromContents)},
    {SIP_MLNAME_CAST(sipName_sectionSizeHint), meth_QHeaderView_sectionSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionSizeHint)},
    {SIP_MLNAME_CAST(sipName_sectionViewportPosition), meth_QHeaderView_sectionViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionViewportPosition)},
    {SIP_MLNAME_CAST(sipName_sectionsAboutToBeRemoved), meth_QHeaderView_sectionsAboutToBeRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_sectionsClickable), meth_QHeaderView_sectionsClickable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsClickable)},
    {SIP_MLNAME_CAST(sipName_sectionsHidden), meth_QHeaderView_sectionsHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsHidden)},
    {SIP_MLNAME_CAST(sipName_sectionsInserted), meth_QHeaderView_sectionsInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsInserted)},
    {SIP_MLNAME_CAST(sipName_sectionsMovable), meth_QHeaderView_sectionsMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsMovable)},
    {SIP_MLNAME_CAST(sipName_sectionsMoved), meth_QHeaderView_sectionsMoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sectionsMoved)},
    {SIP_MLNAME_CAST(sipName_setCascadingSectionResizes), meth_QHeaderView_setCascadingSectionResizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setCascadingSectionResizes)},
    {SIP_MLNAME_CAST(sipName_setDefaultAlignment), meth_QHeaderView_setDefaultAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setDefaultAlignment)},
    {SIP_MLNAME_CAST(sipName_setDefaultSectionSize), meth_QHeaderView_setDefaultSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setDefaultSectionSize)},
    {SIP_MLNAME_CAST(sipName_setHighlightSections), meth_QHeaderView_setHighlightSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setHighlightSections)},
    {SIP_MLNAME_CAST(sipName_setMaximumSectionSize), meth_QHeaderView_setMaximumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setMaximumSectionSize)},
    {SIP_MLNAME_CAST(sipName_setMinimumSectionSize), meth_QHeaderView_setMinimumSectionSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setMinimumSectionSize)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QHeaderView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setModel)},
    {SIP_MLNAME_CAST(sipName_setOffset), meth_QHeaderView_setOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setOffset)},
    {SIP_MLNAME_CAST(sipName_setOffsetToLastSection), meth_QHeaderView_setOffsetToLastSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setOffsetToLastSection)},
    {SIP_MLNAME_CAST(sipName_setOffsetToSectionPosition), meth_QHeaderView_setOffsetToSectionPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setOffsetToSectionPosition)},
    {SIP_MLNAME_CAST(sipName_setResizeContentsPrecision), meth_QHeaderView_setResizeContentsPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setResizeContentsPrecision)},
    {SIP_MLNAME_CAST(sipName_setSectionHidden), meth_QHeaderView_setSectionHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionHidden)},
    {SIP_MLNAME_CAST(sipName_setSectionResizeMode), meth_QHeaderView_setSectionResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionResizeMode)},
    {SIP_MLNAME_CAST(sipName_setSectionsClickable), meth_QHeaderView_setSectionsClickable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionsClickable)},
    {SIP_MLNAME_CAST(sipName_setSectionsMovable), meth_QHeaderView_setSectionsMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSectionsMovable)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QHeaderView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSortIndicator), meth_QHeaderView_setSortIndicator, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSortIndicator)},
    {SIP_MLNAME_CAST(sipName_setSortIndicatorShown), meth_QHeaderView_setSortIndicatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setSortIndicatorShown)},
    {SIP_MLNAME_CAST(sipName_setStretchLastSection), meth_QHeaderView_setStretchLastSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setStretchLastSection)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QHeaderView_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_setVisible)},
    {SIP_MLNAME_CAST(sipName_showSection), meth_QHeaderView_showSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_showSection)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QHeaderView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sortIndicatorOrder), meth_QHeaderView_sortIndicatorOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sortIndicatorOrder)},
    {SIP_MLNAME_CAST(sipName_sortIndicatorSection), meth_QHeaderView_sortIndicatorSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_sortIndicatorSection)},
    {SIP_MLNAME_CAST(sipName_stretchLastSection), meth_QHeaderView_stretchLastSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_stretchLastSection)},
    {SIP_MLNAME_CAST(sipName_stretchSectionCount), meth_QHeaderView_stretchSectionCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_stretchSectionCount)},
    {SIP_MLNAME_CAST(sipName_swapSections), meth_QHeaderView_swapSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_swapSections)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QHeaderView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_updateSection), meth_QHeaderView_updateSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_updateSection)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QHeaderView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QHeaderView_viewportEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_visualIndex), meth_QHeaderView_visualIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_visualIndex)},
    {SIP_MLNAME_CAST(sipName_visualIndexAt), meth_QHeaderView_visualIndexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_visualIndexAt)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QHeaderView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QHeaderView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QHeaderView_visualRegionForSelection)}
};

static sipEnumMemberDef enummembers_QHeaderView[] = {
    {sipName_Custom, static_cast<int>(QHeaderView::Custom), 172},
    {sipName_Fixed, static_cast<int>(QHeaderView::Fixed), 172},
    {sipName_Interactive, static_cast<int>(QHeaderView::Interactive), 172},
    {sipName_ResizeToContents, static_cast<int>(QHeaderView::ResizeToContents), 172},
    {sipName_Stretch, static_cast<int>(QHeaderView::Stretch), 172},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QHeaderView[] = {
    {"sortIndicatorChanged(int,Qt::SortOrder)", "\1sortIndicatorChanged(self, int, Qt.SortOrder)", 0, 0},
    {"sectionEntered(int)", "\1sectionEntered(self, int)", 0, 0},
    {"sectionHandleDoubleClicked(int)", "\1sectionHandleDoubleClicked(self, int)", 0, 0},
    {"sectionCountChanged(int,int)", "\1sectionCountChanged(self, int, int)", 0, 0},
    {"sectionDoubleClicked(int)", "\1sectionDoubleClicked(self, int)", 0, 0},
    {"sectionClicked(int)", "\1sectionClicked(self, int)", 0, 0},
    {"sectionPressed(int)", "\1sectionPressed(self, int)", 0, 0},
    {"sectionResized(int,int,int)", "\1sectionResized(self, int, int, int)", 0, 0},
    {"sectionMoved(int,int,int)", "\1sectionMoved(self, int, int, int)", 0, 0},
    {"geometriesChanged()", "\1geometriesChanged(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QHeaderView, "\1QHeaderView(Qt.Orientation, parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QHeaderView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QHeaderView,
        {0}
    },
    {
        sipNameNr_QHeaderView,
        {0, 0, 1},
        91, methods_QHeaderView,
        5, enummembers_QHeaderView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHeaderView,
    -1,
    -1,
    supers_QHeaderView,
    slots_QHeaderView,
    init_type_QHeaderView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHeaderView,
    0,
    0,
    0,
    release_QHeaderView,
    cast_QHeaderView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QHeaderView::staticMetaObject,
    0,
    signals_QHeaderView,
    0
};
