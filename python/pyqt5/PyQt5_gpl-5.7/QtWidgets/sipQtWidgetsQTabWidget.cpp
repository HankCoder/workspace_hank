/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qtabwidget.sip"
#include <qtabwidget.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qtabbar.sip"
#include <qtabbar.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 386 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 413 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 448 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 243 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 497 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 459 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 555 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 604 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 577 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 593 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 660 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 293 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 470 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 426 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 400 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 372 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 174 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 177 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 180 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 186 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 192 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 195 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 198 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 201 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 204 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 207 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 210 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 213 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 216 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 219 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 222 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 225 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 228 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 231 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 234 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 237 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"


class sipQTabWidget : public QTabWidget
{
public:
    sipQTabWidget(QWidget*);
    virtual ~sipQTabWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    void setVisible(bool);
    int devType() const;
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    void changeEvent(QEvent*);
    void paintEvent(QPaintEvent*);
    void keyPressEvent(QKeyEvent*);
    void resizeEvent(QResizeEvent*);
    void showEvent(QShowEvent*);
    bool event(QEvent*);
    void tabRemoved(int);
    void tabInserted(int);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTabWidget(const sipQTabWidget &);
    sipQTabWidget &operator = (const sipQTabWidget &);

    char sipPyMethods[48];
};

sipQTabWidget::sipQTabWidget(QWidget*a0): QTabWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTabWidget::~sipQTabWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTabWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTabWidget);

    return QTabWidget::metaObject();
}

int sipQTabWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTabWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTabWidget,_c,_id,_a);

    return _id;
}

void *sipQTabWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTabWidget, _clname, &sipCpp) ? sipCpp : QTabWidget::qt_metacast(_clname));
}

void sipQTabWidget::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTabWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTabWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTabWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTabWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTabWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTabWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTabWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTabWidget::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QTabWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQTabWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QTabWidget::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTabWidget::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QTabWidget::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTabWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTabWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQTabWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTabWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTabWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTabWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTabWidget::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTabWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTabWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTabWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTabWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTabWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTabWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTabWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTabWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTabWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTabWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTabWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTabWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTabWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTabWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTabWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTabWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTabWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTabWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTabWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTabWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTabWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTabWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTabWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTabWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTabWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTabWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTabWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QTabWidget::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTabWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTabWidget::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTabWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTabWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTabWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTabWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTabWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTabWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTabWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::tabRemoved(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_tabRemoved);

    if (!sipMeth)
    {
        QTabWidget::tabRemoved(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTabWidget::tabInserted(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_tabInserted);

    if (!sipMeth)
    {
        QTabWidget::tabInserted(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQTabWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTabWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQTabWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTabWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTabWidget_clear, "clear(self)");

extern "C" {static PyObject *meth_QTabWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_clear, doc_QTabWidget_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_addTab, "addTab(self, QWidget, str) -> int\n"
    "addTab(self, QWidget, QIcon, str) -> int");

extern "C" {static PyObject *meth_QTabWidget_addTab(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_addTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J1", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->addTab(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QWidget* a0;
        const QIcon* a1;
        const QString* a2;
        int a2State = 0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:J9J1", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0, sipType_QIcon, &a1, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            sipRes = sipCpp->addTab(a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_addTab, doc_QTabWidget_addTab);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_insertTab, "insertTab(self, int, QWidget, str) -> int\n"
    "insertTab(self, int, QWidget, QIcon, str) -> int");

extern "C" {static PyObject *meth_QTabWidget_insertTab(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_insertTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget* a1;
        const QString* a2;
        int a2State = 0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            sipRes = sipCpp->insertTab(a0,a1,*a2);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        QWidget* a1;
        const QIcon* a2;
        const QString* a3;
        int a3State = 0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:J9J1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QWidget, &a1, sipType_QIcon, &a2, sipType_QString,&a3, &a3State))
        {
            int sipRes;

            sipRes = sipCpp->insertTab(a0,a1,*a2,*a3);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_insertTab, doc_QTabWidget_insertTab);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_removeTab, "removeTab(self, int)");

extern "C" {static PyObject *meth_QTabWidget_removeTab(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_removeTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->removeTab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_removeTab, doc_QTabWidget_removeTab);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_isTabEnabled, "isTabEnabled(self, int) -> bool");

extern "C" {static PyObject *meth_QTabWidget_isTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_isTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isTabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_isTabEnabled, doc_QTabWidget_isTabEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabEnabled, "setTabEnabled(self, int, bool)");

extern "C" {static PyObject *meth_QTabWidget_setTabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setTabEnabled(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabEnabled, doc_QTabWidget_setTabEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabText, "tabText(self, int) -> str");

extern "C" {static PyObject *meth_QTabWidget_tabText(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->tabText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabText, doc_QTabWidget_tabText);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabText, "setTabText(self, int, str)");

extern "C" {static PyObject *meth_QTabWidget_setTabText(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabText(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabText, doc_QTabWidget_setTabText);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabIcon, "tabIcon(self, int) -> QIcon");

extern "C" {static PyObject *meth_QTabWidget_tabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->tabIcon(a0));

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabIcon, doc_QTabWidget_tabIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabIcon, "setTabIcon(self, int, QIcon)");

extern "C" {static PyObject *meth_QTabWidget_setTabIcon(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QIcon* a1;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            sipCpp->setTabIcon(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabIcon, doc_QTabWidget_setTabIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabToolTip, "setTabToolTip(self, int, str)");

extern "C" {static PyObject *meth_QTabWidget_setTabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabToolTip(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabToolTip, doc_QTabWidget_setTabToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabToolTip, "tabToolTip(self, int) -> str");

extern "C" {static PyObject *meth_QTabWidget_tabToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->tabToolTip(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabToolTip, doc_QTabWidget_tabToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabWhatsThis, "setTabWhatsThis(self, int, str)");

extern "C" {static PyObject *meth_QTabWidget_setTabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTabWidget, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setTabWhatsThis(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabWhatsThis, doc_QTabWidget_setTabWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabWhatsThis, "tabWhatsThis(self, int) -> str");

extern "C" {static PyObject *meth_QTabWidget_tabWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->tabWhatsThis(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabWhatsThis, doc_QTabWidget_tabWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_currentIndex, "currentIndex(self) -> int");

extern "C" {static PyObject *meth_QTabWidget_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_currentIndex, doc_QTabWidget_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_currentWidget, "currentWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QTabWidget_currentWidget(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_currentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->currentWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_currentWidget, doc_QTabWidget_currentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_widget, "widget(self, int) -> QWidget");

extern "C" {static PyObject *meth_QTabWidget_widget(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            QWidget*sipRes;

            sipRes = sipCpp->widget(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_widget, doc_QTabWidget_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_indexOf, "indexOf(self, QWidget) -> int");

extern "C" {static PyObject *meth_QTabWidget_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_indexOf, doc_QTabWidget_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_count, "count(self) -> int");

extern "C" {static PyObject *meth_QTabWidget_count(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_count, doc_QTabWidget_count);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabPosition, "tabPosition(self) -> QTabWidget.TabPosition");

extern "C" {static PyObject *meth_QTabWidget_tabPosition(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            QTabWidget::TabPosition sipRes;

            sipRes = sipCpp->tabPosition();

            return sipConvertFromEnum(sipRes,sipType_QTabWidget_TabPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabPosition, doc_QTabWidget_tabPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabPosition, "setTabPosition(self, QTabWidget.TabPosition)");

extern "C" {static PyObject *meth_QTabWidget_setTabPosition(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabWidget::TabPosition a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QTabWidget_TabPosition, &a0))
        {
            sipCpp->setTabPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabPosition, doc_QTabWidget_setTabPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabShape, "tabShape(self) -> QTabWidget.TabShape");

extern "C" {static PyObject *meth_QTabWidget_tabShape(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            QTabWidget::TabShape sipRes;

            sipRes = sipCpp->tabShape();

            return sipConvertFromEnum(sipRes,sipType_QTabWidget_TabShape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabShape, doc_QTabWidget_tabShape);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabShape, "setTabShape(self, QTabWidget.TabShape)");

extern "C" {static PyObject *meth_QTabWidget_setTabShape(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabWidget::TabShape a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QTabWidget_TabShape, &a0))
        {
            sipCpp->setTabShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabShape, doc_QTabWidget_setTabShape);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTabWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QTabWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_sizeHint, doc_QTabWidget_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_minimumSizeHint, "minimumSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QTabWidget_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QTabWidget::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_minimumSizeHint, doc_QTabWidget_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setCornerWidget, "setCornerWidget(self, QWidget, corner: Qt.Corner = Qt.TopRightCorner)");

extern "C" {static PyObject *meth_QTabWidget_setCornerWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setCornerWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        Qt::Corner a1 = Qt::TopRightCorner;
        QTabWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_corner,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:|E", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0, sipType_Qt_Corner, &a1))
        {
            sipCpp->setCornerWidget(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setCornerWidget, doc_QTabWidget_setCornerWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_cornerWidget, "cornerWidget(self, corner: Qt.Corner = Qt.TopRightCorner) -> QWidget");

extern "C" {static PyObject *meth_QTabWidget_cornerWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_cornerWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Corner a0 = Qt::TopRightCorner;
        const QTabWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_corner,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_Qt_Corner, &a0))
        {
            QWidget*sipRes;

            sipRes = sipCpp->cornerWidget(a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_cornerWidget, doc_QTabWidget_cornerWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setCurrentIndex, "setCurrentIndex(self, int)");

extern "C" {static PyObject *meth_QTabWidget_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setCurrentIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setCurrentIndex, doc_QTabWidget_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setCurrentWidget, "setCurrentWidget(self, QWidget)");

extern "C" {static PyObject *meth_QTabWidget_setCurrentWidget(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setCurrentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setCurrentWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setCurrentWidget, doc_QTabWidget_setCurrentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_initStyleOption, "initStyleOption(self, QStyleOptionTabWidgetFrame)");

extern "C" {static PyObject *meth_QTabWidget_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionTabWidgetFrame* a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QStyleOptionTabWidgetFrame, &a0))
        {
            sipCpp->initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_initStyleOption, doc_QTabWidget_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabInserted, "tabInserted(self, int)");

extern "C" {static PyObject *meth_QTabWidget_tabInserted(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTabWidget::tabInserted(a0) : sipCpp->tabInserted(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabInserted, doc_QTabWidget_tabInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabRemoved, "tabRemoved(self, int)");

extern "C" {static PyObject *meth_QTabWidget_tabRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTabWidget::tabRemoved(a0) : sipCpp->tabRemoved(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabRemoved, doc_QTabWidget_tabRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QTabWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTabWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_event, doc_QTabWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QTabWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTabWidget::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_showEvent, doc_QTabWidget_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QTabWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTabWidget::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_resizeEvent, doc_QTabWidget_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTabWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTabWidget::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_keyPressEvent, doc_QTabWidget_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QTabWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTabWidget::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_paintEvent, doc_QTabWidget_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabBar, "setTabBar(self, QTabBar)");

extern "C" {static PyObject *meth_QTabWidget_setTabBar(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTabBar* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ:", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QTabBar, &a0))
        {
            sipCpp->setTabBar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabBar, doc_QTabWidget_setTabBar);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabBar, "tabBar(self) -> QTabBar");

extern "C" {static PyObject *meth_QTabWidget_tabBar(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            QTabBar*sipRes;

            sipRes = sipCpp->tabBar();

            return sipConvertFromType(sipRes,sipType_QTabBar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabBar, doc_QTabWidget_tabBar);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QTabWidget_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTabWidget::changeEvent(a0) : sipCpp->changeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_changeEvent, doc_QTabWidget_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_elideMode, "elideMode(self) -> Qt.TextElideMode");

extern "C" {static PyObject *meth_QTabWidget_elideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_elideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            Qt::TextElideMode sipRes;

            sipRes = sipCpp->elideMode();

            return sipConvertFromEnum(sipRes,sipType_Qt_TextElideMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_elideMode, doc_QTabWidget_elideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setElideMode, "setElideMode(self, Qt.TextElideMode)");

extern "C" {static PyObject *meth_QTabWidget_setElideMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setElideMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextElideMode a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_Qt_TextElideMode, &a0))
        {
            sipCpp->setElideMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setElideMode, doc_QTabWidget_setElideMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_iconSize, "iconSize(self) -> QSize");

extern "C" {static PyObject *meth_QTabWidget_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_iconSize, doc_QTabWidget_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setIconSize, "setIconSize(self, QSize)");

extern "C" {static PyObject *meth_QTabWidget_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTabWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setIconSize, doc_QTabWidget_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_usesScrollButtons, "usesScrollButtons(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_usesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_usesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->usesScrollButtons();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_usesScrollButtons, doc_QTabWidget_usesScrollButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setUsesScrollButtons, "setUsesScrollButtons(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setUsesScrollButtons(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setUsesScrollButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setUsesScrollButtons(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setUsesScrollButtons, doc_QTabWidget_setUsesScrollButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabsClosable, "tabsClosable(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_tabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabsClosable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabsClosable, doc_QTabWidget_tabsClosable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabsClosable, "setTabsClosable(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setTabsClosable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabsClosable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setTabsClosable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabsClosable, doc_QTabWidget_setTabsClosable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_isMovable, "isMovable(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_isMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_isMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMovable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_isMovable, doc_QTabWidget_isMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setMovable, "setMovable(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setMovable(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setMovable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setMovable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setMovable, doc_QTabWidget_setMovable);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_documentMode, "documentMode(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_documentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_documentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->documentMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_documentMode, doc_QTabWidget_documentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setDocumentMode, "setDocumentMode(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setDocumentMode(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setDocumentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setDocumentMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setDocumentMode, doc_QTabWidget_setDocumentMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_heightForWidth, "heightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QTabWidget_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTabWidget::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_heightForWidth, doc_QTabWidget_heightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_hasHeightForWidth, "hasHeightForWidth(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTabWidget::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_hasHeightForWidth, doc_QTabWidget_hasHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_tabBarAutoHide, "tabBarAutoHide(self) -> bool");

extern "C" {static PyObject *meth_QTabWidget_tabBarAutoHide(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_tabBarAutoHide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTabWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabBarAutoHide();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_tabBarAutoHide, doc_QTabWidget_tabBarAutoHide);

    return NULL;
}


PyDoc_STRVAR(doc_QTabWidget_setTabBarAutoHide, "setTabBarAutoHide(self, bool)");

extern "C" {static PyObject *meth_QTabWidget_setTabBarAutoHide(PyObject *, PyObject *);}
static PyObject *meth_QTabWidget_setTabBarAutoHide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTabWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTabWidget, &sipCpp, &a0))
        {
            sipCpp->setTabBarAutoHide(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTabWidget, sipName_setTabBarAutoHide, doc_QTabWidget_setTabBarAutoHide);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QTabWidget___len__(PyObject *);}
static SIP_SSIZE_T slot_QTabWidget___len__(PyObject *sipSelf)
{
    QTabWidget *sipCpp = reinterpret_cast<QTabWidget *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTabWidget));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 2850 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQTabWidget.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QTabWidget(void *, const sipTypeDef *);}
static void *cast_QTabWidget(void *sipCppV, const sipTypeDef *targetType)
{
    QTabWidget *sipCpp = reinterpret_cast<QTabWidget *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTabWidget(void *, int);}
static void release_QTabWidget(void *sipCppV,int)
{
    QTabWidget *sipCpp = reinterpret_cast<QTabWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTabWidget(sipSimpleWrapper *);}
static void dealloc_QTabWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTabWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTabWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTabWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTabWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTabWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTabWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTabWidget[] = {{456, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QTabWidget[] = {
    {(void *)slot_QTabWidget___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTabWidget[] = {
    {SIP_MLNAME_CAST(sipName_addTab), meth_QTabWidget_addTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_addTab)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QTabWidget_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTabWidget_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_clear)},
    {SIP_MLNAME_CAST(sipName_cornerWidget), (PyCFunction)meth_QTabWidget_cornerWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTabWidget_cornerWidget)},
    {SIP_MLNAME_CAST(sipName_count), meth_QTabWidget_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_count)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QTabWidget_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_currentIndex)},
    {SIP_MLNAME_CAST(sipName_currentWidget), meth_QTabWidget_currentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_currentWidget)},
    {SIP_MLNAME_CAST(sipName_documentMode), meth_QTabWidget_documentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_documentMode)},
    {SIP_MLNAME_CAST(sipName_elideMode), meth_QTabWidget_elideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_elideMode)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTabWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_event)},
    {SIP_MLNAME_CAST(sipName_hasHeightForWidth), meth_QTabWidget_hasHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_hasHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QTabWidget_heightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_heightForWidth)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QTabWidget_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_iconSize)},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QTabWidget_indexOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_indexOf)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QTabWidget_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_insertTab), meth_QTabWidget_insertTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_insertTab)},
    {SIP_MLNAME_CAST(sipName_isMovable), meth_QTabWidget_isMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_isMovable)},
    {SIP_MLNAME_CAST(sipName_isTabEnabled), meth_QTabWidget_isTabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_isTabEnabled)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTabWidget_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QTabWidget_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTabWidget_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_paintEvent)},
    {SIP_MLNAME_CAST(sipName_removeTab), meth_QTabWidget_removeTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_removeTab)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QTabWidget_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_setCornerWidget), (PyCFunction)meth_QTabWidget_setCornerWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTabWidget_setCornerWidget)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QTabWidget_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setCurrentWidget), meth_QTabWidget_setCurrentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setCurrentWidget)},
    {SIP_MLNAME_CAST(sipName_setDocumentMode), meth_QTabWidget_setDocumentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setDocumentMode)},
    {SIP_MLNAME_CAST(sipName_setElideMode), meth_QTabWidget_setElideMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setElideMode)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QTabWidget_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setMovable), meth_QTabWidget_setMovable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setMovable)},
    {SIP_MLNAME_CAST(sipName_setTabBar), meth_QTabWidget_setTabBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabBar)},
    {SIP_MLNAME_CAST(sipName_setTabBarAutoHide), meth_QTabWidget_setTabBarAutoHide, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabBarAutoHide)},
    {SIP_MLNAME_CAST(sipName_setTabEnabled), meth_QTabWidget_setTabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabEnabled)},
    {SIP_MLNAME_CAST(sipName_setTabIcon), meth_QTabWidget_setTabIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabIcon)},
    {SIP_MLNAME_CAST(sipName_setTabPosition), meth_QTabWidget_setTabPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabPosition)},
    {SIP_MLNAME_CAST(sipName_setTabShape), meth_QTabWidget_setTabShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabShape)},
    {SIP_MLNAME_CAST(sipName_setTabText), meth_QTabWidget_setTabText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabText)},
    {SIP_MLNAME_CAST(sipName_setTabToolTip), meth_QTabWidget_setTabToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabToolTip)},
    {SIP_MLNAME_CAST(sipName_setTabWhatsThis), meth_QTabWidget_setTabWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabWhatsThis)},
    {SIP_MLNAME_CAST(sipName_setTabsClosable), meth_QTabWidget_setTabsClosable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setTabsClosable)},
    {SIP_MLNAME_CAST(sipName_setUsesScrollButtons), meth_QTabWidget_setUsesScrollButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_setUsesScrollButtons)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QTabWidget_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QTabWidget_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_sizeHint)},
    {SIP_MLNAME_CAST(sipName_tabBar), meth_QTabWidget_tabBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabBar)},
    {SIP_MLNAME_CAST(sipName_tabBarAutoHide), meth_QTabWidget_tabBarAutoHide, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabBarAutoHide)},
    {SIP_MLNAME_CAST(sipName_tabIcon), meth_QTabWidget_tabIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabIcon)},
    {SIP_MLNAME_CAST(sipName_tabInserted), meth_QTabWidget_tabInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabInserted)},
    {SIP_MLNAME_CAST(sipName_tabPosition), meth_QTabWidget_tabPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabPosition)},
    {SIP_MLNAME_CAST(sipName_tabRemoved), meth_QTabWidget_tabRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabRemoved)},
    {SIP_MLNAME_CAST(sipName_tabShape), meth_QTabWidget_tabShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabShape)},
    {SIP_MLNAME_CAST(sipName_tabText), meth_QTabWidget_tabText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabText)},
    {SIP_MLNAME_CAST(sipName_tabToolTip), meth_QTabWidget_tabToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabToolTip)},
    {SIP_MLNAME_CAST(sipName_tabWhatsThis), meth_QTabWidget_tabWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabWhatsThis)},
    {SIP_MLNAME_CAST(sipName_tabsClosable), meth_QTabWidget_tabsClosable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_tabsClosable)},
    {SIP_MLNAME_CAST(sipName_usesScrollButtons), meth_QTabWidget_usesScrollButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_usesScrollButtons)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QTabWidget_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTabWidget_widget)}
};

static sipEnumMemberDef enummembers_QTabWidget[] = {
    {sipName_East, static_cast<int>(QTabWidget::East), 421},
    {sipName_North, static_cast<int>(QTabWidget::North), 421},
    {sipName_Rounded, static_cast<int>(QTabWidget::Rounded), 422},
    {sipName_South, static_cast<int>(QTabWidget::South), 421},
    {sipName_Triangular, static_cast<int>(QTabWidget::Triangular), 422},
    {sipName_West, static_cast<int>(QTabWidget::West), 421},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTabWidget[] = {
    {"tabBarDoubleClicked(int)", "\1tabBarDoubleClicked(self, int)", 0, 0},
    {"tabBarClicked(int)", "\1tabBarClicked(self, int)", 0, 0},
    {"tabCloseRequested(int)", "\1tabCloseRequested(self, int)", 0, 0},
    {"currentChanged(int)", "\1currentChanged(self, int)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTabWidget, "\1QTabWidget(parent: QWidget = None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTabWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTabWidget,
        {0}
    },
    {
        sipNameNr_QTabWidget,
        {0, 0, 1},
        56, methods_QTabWidget,
        6, enummembers_QTabWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTabWidget,
    -1,
    -1,
    supers_QTabWidget,
    slots_QTabWidget,
    init_type_QTabWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTabWidget,
    0,
    0,
    0,
    release_QTabWidget,
    cast_QTabWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTabWidget::staticMetaObject,
    0,
    signals_QTabWidget,
    0
};
