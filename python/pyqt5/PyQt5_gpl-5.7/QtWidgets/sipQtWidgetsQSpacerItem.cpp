/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 71 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtWidgets/sipQtWidgetsQSpacerItem.cpp"


class sipQSpacerItem : public QSpacerItem
{
public:
    sipQSpacerItem(int,int,QSizePolicy::Policy,QSizePolicy::Policy);
    sipQSpacerItem(const QSpacerItem&);
    virtual ~sipQSpacerItem();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSizePolicy::ControlTypes controlTypes() const;
    QLayout* layout();
    QWidget* widget();
    void invalidate();
    int minimumHeightForWidth(int) const;
    int heightForWidth(int) const;
    bool hasHeightForWidth() const;
    QSpacerItem* spacerItem();
    QRect geometry() const;
    void setGeometry(const QRect&);
    bool isEmpty() const;
    Qt::Orientations expandingDirections() const;
    QSize maximumSize() const;
    QSize minimumSize() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSpacerItem(const sipQSpacerItem &);
    sipQSpacerItem &operator = (const sipQSpacerItem &);

    char sipPyMethods[15];
};

sipQSpacerItem::sipQSpacerItem(int a0,int a1,QSizePolicy::Policy a2,QSizePolicy::Policy a3): QSpacerItem(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSpacerItem::sipQSpacerItem(const QSpacerItem& a0): QSpacerItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSpacerItem::~sipQSpacerItem()
{
    sipCommonDtor(sipPySelf);
}

QSizePolicy::ControlTypes sipQSpacerItem::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_controlTypes);

    if (!sipMeth)
        return QSpacerItem::controlTypes();

    extern QSizePolicy::ControlTypes sipVH_QtWidgets_92(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_92(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QLayout* sipQSpacerItem::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return QSpacerItem::layout();

    extern QLayout* sipVH_QtWidgets_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_95(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QWidget* sipQSpacerItem::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return QSpacerItem::widget();

    extern QWidget* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_79(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSpacerItem::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
        QSpacerItem::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQSpacerItem::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return QSpacerItem::minimumHeightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQSpacerItem::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QSpacerItem::heightForWidth(a0);

    typedef int (*sipVH_QtCore_61)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_61)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[61]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSpacerItem::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QSpacerItem::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSpacerItem* sipQSpacerItem::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return QSpacerItem::spacerItem();

    extern QSpacerItem* sipVH_QtWidgets_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_94(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRect sipQSpacerItem::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return QSpacerItem::geometry();

    typedef QRect (*sipVH_QtGui_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_53)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSpacerItem::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QSpacerItem::setGeometry(a0);
        return;
    }

    typedef void (*sipVH_QtGui_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&);

    ((sipVH_QtGui_44)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSpacerItem::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return QSpacerItem::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

Qt::Orientations sipQSpacerItem::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return QSpacerItem::expandingDirections();

    extern Qt::Orientations sipVH_QtWidgets_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_93(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQSpacerItem::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return QSpacerItem::maximumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQSpacerItem::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return QSpacerItem::minimumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQSpacerItem::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QSpacerItem::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSpacerItem_changeSize, "changeSize(self, int, int, hPolicy: QSizePolicy.Policy = QSizePolicy.Minimum, vPolicy: QSizePolicy.Policy = QSizePolicy.Minimum)");

extern "C" {static PyObject *meth_QSpacerItem_changeSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_changeSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QSizePolicy::Policy a2 = QSizePolicy::Minimum;
        QSizePolicy::Policy a3 = QSizePolicy::Minimum;
        QSpacerItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_hPolicy,
            sipName_vPolicy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|EE", &sipSelf, sipType_QSpacerItem, &sipCpp, &a0, &a1, sipType_QSizePolicy_Policy, &a2, sipType_QSizePolicy_Policy, &a3))
        {
            sipCpp->changeSize(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_changeSize, doc_QSpacerItem_changeSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QSpacerItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QSpacerItem::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_sizeHint, doc_QSpacerItem_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QSpacerItem_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QSpacerItem::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_minimumSize, doc_QSpacerItem_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_maximumSize, "maximumSize(self) -> QSize");

extern "C" {static PyObject *meth_QSpacerItem_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QSpacerItem::maximumSize() : sipCpp->maximumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_maximumSize, doc_QSpacerItem_maximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_expandingDirections, "expandingDirections(self) -> Qt.Orientations");

extern "C" {static PyObject *meth_QSpacerItem_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            Qt::Orientations*sipRes;

            sipRes = new Qt::Orientations((sipSelfWasArg ? sipCpp->QSpacerItem::expandingDirections() : sipCpp->expandingDirections()));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_expandingDirections, doc_QSpacerItem_expandingDirections);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QSpacerItem_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSpacerItem::isEmpty() : sipCpp->isEmpty());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_isEmpty, doc_QSpacerItem_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_setGeometry, "setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QSpacerItem_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSpacerItem, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSpacerItem::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_setGeometry, doc_QSpacerItem_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QSpacerItem_geometry(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QSpacerItem::geometry() : sipCpp->geometry()));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_geometry, doc_QSpacerItem_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_spacerItem, "spacerItem(self) -> QSpacerItem");

extern "C" {static PyObject *meth_QSpacerItem_spacerItem(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_spacerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            QSpacerItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSpacerItem::spacerItem() : sipCpp->spacerItem());

            return sipConvertFromType(sipRes,sipType_QSpacerItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_spacerItem, doc_QSpacerItem_spacerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QSpacerItem_sizePolicy, "sizePolicy(self) -> QSizePolicy");

extern "C" {static PyObject *meth_QSpacerItem_sizePolicy(PyObject *, PyObject *);}
static PyObject *meth_QSpacerItem_sizePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSpacerItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSpacerItem, &sipCpp))
        {
            QSizePolicy*sipRes;

            sipRes = new QSizePolicy(sipCpp->sizePolicy());

            return sipConvertFromNewType(sipRes,sipType_QSizePolicy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSpacerItem, sipName_sizePolicy, doc_QSpacerItem_sizePolicy);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSpacerItem(void *, int);}
static void release_QSpacerItem(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSpacerItem *>(sipCppV);
    else
        delete reinterpret_cast<QSpacerItem *>(sipCppV);
}


extern "C" {static void dealloc_QSpacerItem(sipSimpleWrapper *);}
static void dealloc_QSpacerItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSpacerItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSpacerItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSpacerItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSpacerItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSpacerItem *sipCpp = 0;

    {
        int a0;
        int a1;
        QSizePolicy::Policy a2 = QSizePolicy::Minimum;
        QSizePolicy::Policy a3 = QSizePolicy::Minimum;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_hPolicy,
            sipName_vPolicy,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|EE", &a0, &a1, sipType_QSizePolicy_Policy, &a2, sipType_QSizePolicy_Policy, &a3))
        {
            sipCpp = new sipQSpacerItem(a0,a1,a2,a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QSpacerItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSpacerItem, &a0))
        {
            sipCpp = new sipQSpacerItem(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSpacerItem[] = {{188, 255, 1}};


static PyMethodDef methods_QSpacerItem[] = {
    {SIP_MLNAME_CAST(sipName_changeSize), (PyCFunction)meth_QSpacerItem_changeSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSpacerItem_changeSize)},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QSpacerItem_expandingDirections, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_expandingDirections)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QSpacerItem_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_geometry)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QSpacerItem_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_isEmpty)},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QSpacerItem_maximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_maximumSize)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QSpacerItem_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_minimumSize)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QSpacerItem_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_setGeometry)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QSpacerItem_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sizePolicy), meth_QSpacerItem_sizePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_sizePolicy)},
    {SIP_MLNAME_CAST(sipName_spacerItem), meth_QSpacerItem_spacerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QSpacerItem_spacerItem)}
};

PyDoc_STRVAR(doc_QSpacerItem, "\1QSpacerItem(int, int, hPolicy: QSizePolicy.Policy = QSizePolicy.Minimum, vPolicy: QSizePolicy.Policy = QSizePolicy.Minimum)\n"
    "QSpacerItem(QSpacerItem)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QSpacerItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSpacerItem,
        {0}
    },
    {
        sipNameNr_QSpacerItem,
        {0, 0, 1},
        10, methods_QSpacerItem,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSpacerItem,
    -1,
    -1,
    supers_QSpacerItem,
    0,
    init_type_QSpacerItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSpacerItem,
    0,
    0,
    0,
    release_QSpacerItem,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
