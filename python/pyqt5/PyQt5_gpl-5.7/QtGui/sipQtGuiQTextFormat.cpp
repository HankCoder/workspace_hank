/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 59 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 535 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 429 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 446 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 509 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 397 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 352 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"


PyDoc_STRVAR(doc_QTextFormat_merge, "merge(self, QTextFormat)");

extern "C" {static PyObject *meth_QTextFormat_merge(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat* a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QTextFormat, &a0))
        {
            sipCpp->merge(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_merge, doc_QTextFormat_merge);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isValid, doc_QTextFormat_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_type, "type(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_type(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->type();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_type, doc_QTextFormat_type);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_objectIndex, "objectIndex(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_objectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->objectIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectIndex, doc_QTextFormat_objectIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_setObjectIndex, "setObjectIndex(self, int)");

extern "C" {static PyObject *meth_QTextFormat_setObjectIndex(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->setObjectIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectIndex, doc_QTextFormat_setObjectIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_property, "property(self, int) -> Any");

extern "C" {static PyObject *meth_QTextFormat_property(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->property(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_property, doc_QTextFormat_property);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_setProperty, "setProperty(self, int, Any)\n"
    "setProperty(self, int, Iterable[QTextLength])");

extern "C" {static PyObject *meth_QTextFormat_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QVariant* a1;
        int a1State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setProperty(a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVector<QTextLength>* a1;
        int a1State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextFormat, &sipCpp, &a0, sipType_QVector_0100QTextLength,&a1, &a1State))
        {
            sipCpp->setProperty(a0,*a1);
            sipReleaseType(const_cast<QVector<QTextLength> *>(a1),sipType_QVector_0100QTextLength,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setProperty, doc_QTextFormat_setProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_clearProperty, "clearProperty(self, int)");

extern "C" {static PyObject *meth_QTextFormat_clearProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->clearProperty(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearProperty, doc_QTextFormat_clearProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_hasProperty, "hasProperty(self, int) -> bool");

extern "C" {static PyObject *meth_QTextFormat_hasProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_hasProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->hasProperty(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_hasProperty, doc_QTextFormat_hasProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_boolProperty, "boolProperty(self, int) -> bool");

extern "C" {static PyObject *meth_QTextFormat_boolProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_boolProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->boolProperty(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_boolProperty, doc_QTextFormat_boolProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_intProperty, "intProperty(self, int) -> int");

extern "C" {static PyObject *meth_QTextFormat_intProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_intProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->intProperty(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_intProperty, doc_QTextFormat_intProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_doubleProperty, "doubleProperty(self, int) -> float");

extern "C" {static PyObject *meth_QTextFormat_doubleProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_doubleProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            qreal sipRes;

            sipRes = sipCpp->doubleProperty(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_doubleProperty, doc_QTextFormat_doubleProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_stringProperty, "stringProperty(self, int) -> str");

extern "C" {static PyObject *meth_QTextFormat_stringProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_stringProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->stringProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_stringProperty, doc_QTextFormat_stringProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_colorProperty, "colorProperty(self, int) -> QColor");

extern "C" {static PyObject *meth_QTextFormat_colorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_colorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->colorProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_colorProperty, doc_QTextFormat_colorProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_penProperty, "penProperty(self, int) -> QPen");

extern "C" {static PyObject *meth_QTextFormat_penProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_penProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QPen*sipRes;

            sipRes = new QPen(sipCpp->penProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QPen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_penProperty, doc_QTextFormat_penProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_brushProperty, "brushProperty(self, int) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_brushProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_brushProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->brushProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_brushProperty, doc_QTextFormat_brushProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_lengthProperty, "lengthProperty(self, int) -> QTextLength");

extern "C" {static PyObject *meth_QTextFormat_lengthProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QTextLength*sipRes;

            sipRes = new QTextLength(sipCpp->lengthProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextLength,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthProperty, doc_QTextFormat_lengthProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_lengthVectorProperty, "lengthVectorProperty(self, int) -> object");

extern "C" {static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_lengthVectorProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            QVector<QTextLength>*sipRes;

            sipRes = new QVector<QTextLength>(sipCpp->lengthVectorProperty(a0));

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextLength,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_lengthVectorProperty, doc_QTextFormat_lengthVectorProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_properties, "properties(self) -> Dict[int, Any]");

extern "C" {static PyObject *meth_QTextFormat_properties(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_properties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QMap<int,QVariant>*sipRes;

            sipRes = new QMap<int,QVariant>(sipCpp->properties());

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_properties, doc_QTextFormat_properties);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_objectType, "objectType(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_objectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_objectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->objectType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_objectType, doc_QTextFormat_objectType);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isCharFormat, "isCharFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCharFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isCharFormat, doc_QTextFormat_isCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isBlockFormat, "isBlockFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBlockFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isBlockFormat, doc_QTextFormat_isBlockFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isListFormat, "isListFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isListFormat, doc_QTextFormat_isListFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isFrameFormat, "isFrameFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFrameFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isFrameFormat, doc_QTextFormat_isFrameFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isImageFormat, "isImageFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isImageFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isImageFormat, doc_QTextFormat_isImageFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isTableFormat, "isTableFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTableFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableFormat, doc_QTextFormat_isTableFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_toBlockFormat, "toBlockFormat(self) -> QTextBlockFormat");

extern "C" {static PyObject *meth_QTextFormat_toBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextBlockFormat*sipRes;

            sipRes = new QTextBlockFormat(sipCpp->toBlockFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toBlockFormat, doc_QTextFormat_toBlockFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_toCharFormat, "toCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextFormat_toCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->toCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toCharFormat, doc_QTextFormat_toCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_toListFormat, "toListFormat(self) -> QTextListFormat");

extern "C" {static PyObject *meth_QTextFormat_toListFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toListFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextListFormat*sipRes;

            sipRes = new QTextListFormat(sipCpp->toListFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextListFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toListFormat, doc_QTextFormat_toListFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_toTableFormat, "toTableFormat(self) -> QTextTableFormat");

extern "C" {static PyObject *meth_QTextFormat_toTableFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextTableFormat*sipRes;

            sipRes = new QTextTableFormat(sipCpp->toTableFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextTableFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableFormat, doc_QTextFormat_toTableFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_toFrameFormat, "toFrameFormat(self) -> QTextFrameFormat");

extern "C" {static PyObject *meth_QTextFormat_toFrameFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toFrameFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextFrameFormat*sipRes;

            sipRes = new QTextFrameFormat(sipCpp->toFrameFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextFrameFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toFrameFormat, doc_QTextFormat_toFrameFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_toImageFormat, "toImageFormat(self) -> QTextImageFormat");

extern "C" {static PyObject *meth_QTextFormat_toImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextImageFormat*sipRes;

            sipRes = new QTextImageFormat(sipCpp->toImageFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextImageFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toImageFormat, doc_QTextFormat_toImageFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_setLayoutDirection, "setLayoutDirection(self, Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setLayoutDirection, doc_QTextFormat_setLayoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_layoutDirection, "layoutDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QTextFormat_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            sipRes = sipCpp->layoutDirection();

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_layoutDirection, doc_QTextFormat_layoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_setBackground, "setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFormat_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setBackground, doc_QTextFormat_setBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_background, "background(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_background(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_background, doc_QTextFormat_background);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_clearBackground, "clearBackground(self)");

extern "C" {static PyObject *meth_QTextFormat_clearBackground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            sipCpp->clearBackground();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearBackground, doc_QTextFormat_clearBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_setForeground, "setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFormat_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForeground(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setForeground, doc_QTextFormat_setForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_foreground, "foreground(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFormat_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->foreground());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_foreground, doc_QTextFormat_foreground);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_clearForeground, "clearForeground(self)");

extern "C" {static PyObject *meth_QTextFormat_clearForeground(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_clearForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            sipCpp->clearForeground();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_clearForeground, doc_QTextFormat_clearForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_setObjectType, "setObjectType(self, int)");

extern "C" {static PyObject *meth_QTextFormat_setObjectType(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_setObjectType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextFormat, &sipCpp, &a0))
        {
            sipCpp->setObjectType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_setObjectType, doc_QTextFormat_setObjectType);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_propertyCount, "propertyCount(self) -> int");

extern "C" {static PyObject *meth_QTextFormat_propertyCount(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_propertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_propertyCount, doc_QTextFormat_propertyCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isTableCellFormat, "isTableCellFormat(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTableCellFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isTableCellFormat, doc_QTextFormat_isTableCellFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_toTableCellFormat, "toTableCellFormat(self) -> QTextTableCellFormat");

extern "C" {static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_toTableCellFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            QTextTableCellFormat*sipRes;

            sipRes = new QTextTableCellFormat(sipCpp->toTableCellFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextTableCellFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_toTableCellFormat, doc_QTextFormat_toTableCellFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_swap, "swap(self, QTextFormat)");

extern "C" {static PyObject *meth_QTextFormat_swap(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat* a0;
        QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFormat, &sipCpp, sipType_QTextFormat, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_swap, doc_QTextFormat_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFormat_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QTextFormat_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextFormat_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFormat, sipName_isEmpty, doc_QTextFormat_isEmpty);

    return NULL;
}


extern "C" {static PyObject *slot_QTextFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextFormat *sipCpp = reinterpret_cast<QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextFormat::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QTextFormat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextFormat *sipCpp = reinterpret_cast<QTextFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextFormat::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QTextFormat,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFormat(void *, int);}
static void release_QTextFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QTextFormat *>(sipCppV);
}


extern "C" {static void assign_QTextFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextFormat *>(sipSrc);
}


extern "C" {static void *array_QTextFormat(SIP_SSIZE_T);}
static void *array_QTextFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextFormat[sipNrElem];
}


extern "C" {static void *copy_QTextFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextFormat(reinterpret_cast<const QTextFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFormat(sipSimpleWrapper *);}
static void dealloc_QTextFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextFormat();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            sipCpp = new QTextFormat(a0);

            return sipCpp;
        }
    }

    {
        const QTextFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextFormat, &a0))
        {
            sipCpp = new QTextFormat(*a0);

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 183 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
        if (a0->canConvert<QTextFormat>())
            sipCpp = new QTextFormat(a0->value<QTextFormat>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 1556 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFormat.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return NULL;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextFormat[] = {
    {(void *)slot_QTextFormat___ne__, ne_slot},
    {(void *)slot_QTextFormat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextFormat[] = {
    {SIP_MLNAME_CAST(sipName_background), meth_QTextFormat_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_background)},
    {SIP_MLNAME_CAST(sipName_boolProperty), meth_QTextFormat_boolProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_boolProperty)},
    {SIP_MLNAME_CAST(sipName_brushProperty), meth_QTextFormat_brushProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_brushProperty)},
    {SIP_MLNAME_CAST(sipName_clearBackground), meth_QTextFormat_clearBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_clearBackground)},
    {SIP_MLNAME_CAST(sipName_clearForeground), meth_QTextFormat_clearForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_clearForeground)},
    {SIP_MLNAME_CAST(sipName_clearProperty), meth_QTextFormat_clearProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_clearProperty)},
    {SIP_MLNAME_CAST(sipName_colorProperty), meth_QTextFormat_colorProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_colorProperty)},
    {SIP_MLNAME_CAST(sipName_doubleProperty), meth_QTextFormat_doubleProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_doubleProperty)},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QTextFormat_foreground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_foreground)},
    {SIP_MLNAME_CAST(sipName_hasProperty), meth_QTextFormat_hasProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_hasProperty)},
    {SIP_MLNAME_CAST(sipName_intProperty), meth_QTextFormat_intProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_intProperty)},
    {SIP_MLNAME_CAST(sipName_isBlockFormat), meth_QTextFormat_isBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isBlockFormat)},
    {SIP_MLNAME_CAST(sipName_isCharFormat), meth_QTextFormat_isCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isCharFormat)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTextFormat_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isFrameFormat), meth_QTextFormat_isFrameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isFrameFormat)},
    {SIP_MLNAME_CAST(sipName_isImageFormat), meth_QTextFormat_isImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isImageFormat)},
    {SIP_MLNAME_CAST(sipName_isListFormat), meth_QTextFormat_isListFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isListFormat)},
    {SIP_MLNAME_CAST(sipName_isTableCellFormat), meth_QTextFormat_isTableCellFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isTableCellFormat)},
    {SIP_MLNAME_CAST(sipName_isTableFormat), meth_QTextFormat_isTableFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isTableFormat)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QTextFormat_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_lengthProperty), meth_QTextFormat_lengthProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_lengthProperty)},
    {SIP_MLNAME_CAST(sipName_lengthVectorProperty), meth_QTextFormat_lengthVectorProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_lengthVectorProperty)},
    {SIP_MLNAME_CAST(sipName_merge), meth_QTextFormat_merge, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_merge)},
    {SIP_MLNAME_CAST(sipName_objectIndex), meth_QTextFormat_objectIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_objectIndex)},
    {SIP_MLNAME_CAST(sipName_objectType), meth_QTextFormat_objectType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_objectType)},
    {SIP_MLNAME_CAST(sipName_penProperty), meth_QTextFormat_penProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_penProperty)},
    {SIP_MLNAME_CAST(sipName_properties), meth_QTextFormat_properties, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_properties)},
    {SIP_MLNAME_CAST(sipName_property), meth_QTextFormat_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_property)},
    {SIP_MLNAME_CAST(sipName_propertyCount), meth_QTextFormat_propertyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_propertyCount)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QTextFormat_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setBackground)},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QTextFormat_setForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setForeground)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QTextFormat_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setObjectIndex), meth_QTextFormat_setObjectIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setObjectIndex)},
    {SIP_MLNAME_CAST(sipName_setObjectType), meth_QTextFormat_setObjectType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setObjectType)},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QTextFormat_setProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_setProperty)},
    {SIP_MLNAME_CAST(sipName_stringProperty), meth_QTextFormat_stringProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_stringProperty)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QTextFormat_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_swap)},
    {SIP_MLNAME_CAST(sipName_toBlockFormat), meth_QTextFormat_toBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toBlockFormat)},
    {SIP_MLNAME_CAST(sipName_toCharFormat), meth_QTextFormat_toCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toCharFormat)},
    {SIP_MLNAME_CAST(sipName_toFrameFormat), meth_QTextFormat_toFrameFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toFrameFormat)},
    {SIP_MLNAME_CAST(sipName_toImageFormat), meth_QTextFormat_toImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toImageFormat)},
    {SIP_MLNAME_CAST(sipName_toListFormat), meth_QTextFormat_toListFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toListFormat)},
    {SIP_MLNAME_CAST(sipName_toTableCellFormat), meth_QTextFormat_toTableCellFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toTableCellFormat)},
    {SIP_MLNAME_CAST(sipName_toTableFormat), meth_QTextFormat_toTableFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_toTableFormat)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTextFormat_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFormat_type)}
};

static sipEnumMemberDef enummembers_QTextFormat[] = {
    {sipName_AnchorHref, static_cast<int>(QTextFormat::AnchorHref), 304},
    {sipName_AnchorName, static_cast<int>(QTextFormat::AnchorName), 304},
    {sipName_BackgroundBrush, static_cast<int>(QTextFormat::BackgroundBrush), 304},
    {sipName_BackgroundImageUrl, static_cast<int>(QTextFormat::BackgroundImageUrl), 304},
    {sipName_BlockAlignment, static_cast<int>(QTextFormat::BlockAlignment), 304},
    {sipName_BlockBottomMargin, static_cast<int>(QTextFormat::BlockBottomMargin), 304},
    {sipName_BlockFormat, static_cast<int>(QTextFormat::BlockFormat), 300},
    {sipName_BlockIndent, static_cast<int>(QTextFormat::BlockIndent), 304},
    {sipName_BlockLeftMargin, static_cast<int>(QTextFormat::BlockLeftMargin), 304},
    {sipName_BlockNonBreakableLines, static_cast<int>(QTextFormat::BlockNonBreakableLines), 304},
    {sipName_BlockRightMargin, static_cast<int>(QTextFormat::BlockRightMargin), 304},
    {sipName_BlockTopMargin, static_cast<int>(QTextFormat::BlockTopMargin), 304},
    {sipName_BlockTrailingHorizontalRulerWidth, static_cast<int>(QTextFormat::BlockTrailingHorizontalRulerWidth), 304},
    {sipName_CharFormat, static_cast<int>(QTextFormat::CharFormat), 300},
    {sipName_CssFloat, static_cast<int>(QTextFormat::CssFloat), 304},
    {sipName_FirstFontProperty, static_cast<int>(QTextFormat::FirstFontProperty), 304},
    {sipName_FontCapitalization, static_cast<int>(QTextFormat::FontCapitalization), 304},
    {sipName_FontFamily, static_cast<int>(QTextFormat::FontFamily), 304},
    {sipName_FontFixedPitch, static_cast<int>(QTextFormat::FontFixedPitch), 304},
    {sipName_FontHintingPreference, static_cast<int>(QTextFormat::FontHintingPreference), 304},
    {sipName_FontItalic, static_cast<int>(QTextFormat::FontItalic), 304},
    {sipName_FontKerning, static_cast<int>(QTextFormat::FontKerning), 304},
    {sipName_FontLetterSpacing, static_cast<int>(QTextFormat::FontLetterSpacing), 304},
    {sipName_FontLetterSpacingType, static_cast<int>(QTextFormat::FontLetterSpacingType), 304},
    {sipName_FontOverline, static_cast<int>(QTextFormat::FontOverline), 304},
    {sipName_FontPixelSize, static_cast<int>(QTextFormat::FontPixelSize), 304},
    {sipName_FontPointSize, static_cast<int>(QTextFormat::FontPointSize), 304},
    {sipName_FontSizeAdjustment, static_cast<int>(QTextFormat::FontSizeAdjustment), 304},
    {sipName_FontSizeIncrement, static_cast<int>(QTextFormat::FontSizeIncrement), 304},
    {sipName_FontStretch, static_cast<int>(QTextFormat::FontStretch), 304},
    {sipName_FontStrikeOut, static_cast<int>(QTextFormat::FontStrikeOut), 304},
    {sipName_FontStyleHint, static_cast<int>(QTextFormat::FontStyleHint), 304},
    {sipName_FontStyleStrategy, static_cast<int>(QTextFormat::FontStyleStrategy), 304},
    {sipName_FontUnderline, static_cast<int>(QTextFormat::FontUnderline), 304},
    {sipName_FontWeight, static_cast<int>(QTextFormat::FontWeight), 304},
    {sipName_FontWordSpacing, static_cast<int>(QTextFormat::FontWordSpacing), 304},
    {sipName_ForegroundBrush, static_cast<int>(QTextFormat::ForegroundBrush), 304},
    {sipName_FrameBorder, static_cast<int>(QTextFormat::FrameBorder), 304},
    {sipName_FrameBorderBrush, static_cast<int>(QTextFormat::FrameBorderBrush), 304},
    {sipName_FrameBorderStyle, static_cast<int>(QTextFormat::FrameBorderStyle), 304},
    {sipName_FrameBottomMargin, static_cast<int>(QTextFormat::FrameBottomMargin), 304},
    {sipName_FrameFormat, static_cast<int>(QTextFormat::FrameFormat), 300},
    {sipName_FrameHeight, static_cast<int>(QTextFormat::FrameHeight), 304},
    {sipName_FrameLeftMargin, static_cast<int>(QTextFormat::FrameLeftMargin), 304},
    {sipName_FrameMargin, static_cast<int>(QTextFormat::FrameMargin), 304},
    {sipName_FramePadding, static_cast<int>(QTextFormat::FramePadding), 304},
    {sipName_FrameRightMargin, static_cast<int>(QTextFormat::FrameRightMargin), 304},
    {sipName_FrameTopMargin, static_cast<int>(QTextFormat::FrameTopMargin), 304},
    {sipName_FrameWidth, static_cast<int>(QTextFormat::FrameWidth), 304},
    {sipName_FullWidthSelection, static_cast<int>(QTextFormat::FullWidthSelection), 304},
    {sipName_ImageHeight, static_cast<int>(QTextFormat::ImageHeight), 304},
    {sipName_ImageName, static_cast<int>(QTextFormat::ImageName), 304},
    {sipName_ImageObject, static_cast<int>(QTextFormat::ImageObject), 301},
    {sipName_ImageWidth, static_cast<int>(QTextFormat::ImageWidth), 304},
    {sipName_InvalidFormat, static_cast<int>(QTextFormat::InvalidFormat), 300},
    {sipName_IsAnchor, static_cast<int>(QTextFormat::IsAnchor), 304},
    {sipName_LastFontProperty, static_cast<int>(QTextFormat::LastFontProperty), 304},
    {sipName_LayoutDirection, static_cast<int>(QTextFormat::LayoutDirection), 304},
    {sipName_LineHeight, static_cast<int>(QTextFormat::LineHeight), 304},
    {sipName_LineHeightType, static_cast<int>(QTextFormat::LineHeightType), 304},
    {sipName_ListFormat, static_cast<int>(QTextFormat::ListFormat), 300},
    {sipName_ListIndent, static_cast<int>(QTextFormat::ListIndent), 304},
    {sipName_ListNumberPrefix, static_cast<int>(QTextFormat::ListNumberPrefix), 304},
    {sipName_ListNumberSuffix, static_cast<int>(QTextFormat::ListNumberSuffix), 304},
    {sipName_ListStyle, static_cast<int>(QTextFormat::ListStyle), 304},
    {sipName_NoObject, static_cast<int>(QTextFormat::NoObject), 301},
    {sipName_ObjectIndex, static_cast<int>(QTextFormat::ObjectIndex), 304},
    {sipName_ObjectType, static_cast<int>(QTextFormat::ObjectType), 304},
    {sipName_OutlinePen, static_cast<int>(QTextFormat::OutlinePen), 304},
    {sipName_PageBreakPolicy, static_cast<int>(QTextFormat::PageBreakPolicy), 304},
    {sipName_PageBreak_AlwaysAfter, static_cast<int>(QTextFormat::PageBreak_AlwaysAfter), 302},
    {sipName_PageBreak_AlwaysBefore, static_cast<int>(QTextFormat::PageBreak_AlwaysBefore), 302},
    {sipName_PageBreak_Auto, static_cast<int>(QTextFormat::PageBreak_Auto), 302},
    {sipName_TabPositions, static_cast<int>(QTextFormat::TabPositions), 304},
    {sipName_TableCellBottomPadding, static_cast<int>(QTextFormat::TableCellBottomPadding), 304},
    {sipName_TableCellColumnSpan, static_cast<int>(QTextFormat::TableCellColumnSpan), 304},
    {sipName_TableCellLeftPadding, static_cast<int>(QTextFormat::TableCellLeftPadding), 304},
    {sipName_TableCellObject, static_cast<int>(QTextFormat::TableCellObject), 301},
    {sipName_TableCellPadding, static_cast<int>(QTextFormat::TableCellPadding), 304},
    {sipName_TableCellRightPadding, static_cast<int>(QTextFormat::TableCellRightPadding), 304},
    {sipName_TableCellRowSpan, static_cast<int>(QTextFormat::TableCellRowSpan), 304},
    {sipName_TableCellSpacing, static_cast<int>(QTextFormat::TableCellSpacing), 304},
    {sipName_TableCellTopPadding, static_cast<int>(QTextFormat::TableCellTopPadding), 304},
    {sipName_TableColumnWidthConstraints, static_cast<int>(QTextFormat::TableColumnWidthConstraints), 304},
    {sipName_TableColumns, static_cast<int>(QTextFormat::TableColumns), 304},
    {sipName_TableFormat, static_cast<int>(QTextFormat::TableFormat), 300},
    {sipName_TableHeaderRowCount, static_cast<int>(QTextFormat::TableHeaderRowCount), 304},
    {sipName_TableObject, static_cast<int>(QTextFormat::TableObject), 301},
    {sipName_TextIndent, static_cast<int>(QTextFormat::TextIndent), 304},
    {sipName_TextOutline, static_cast<int>(QTextFormat::TextOutline), 304},
    {sipName_TextToolTip, static_cast<int>(QTextFormat::TextToolTip), 304},
    {sipName_TextUnderlineColor, static_cast<int>(QTextFormat::TextUnderlineColor), 304},
    {sipName_TextUnderlineStyle, static_cast<int>(QTextFormat::TextUnderlineStyle), 304},
    {sipName_TextVerticalAlignment, static_cast<int>(QTextFormat::TextVerticalAlignment), 304},
    {sipName_UserFormat, static_cast<int>(QTextFormat::UserFormat), 300},
    {sipName_UserObject, static_cast<int>(QTextFormat::UserObject), 301},
    {sipName_UserProperty, static_cast<int>(QTextFormat::UserProperty), 304},
};

PyDoc_STRVAR(doc_QTextFormat, "\1QTextFormat()\n"
    "QTextFormat(int)\n"
    "QTextFormat(QTextFormat)\n"
    "QTextFormat(Any)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextFormat,
        {0}
    },
    {
        sipNameNr_QTextFormat,
        {0, 0, 1},
        46, methods_QTextFormat,
        97, enummembers_QTextFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextFormat,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTextFormat,
    init_type_QTextFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextFormat,
    assign_QTextFormat,
    array_QTextFormat,
    copy_QTextFormat,
    release_QTextFormat,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
