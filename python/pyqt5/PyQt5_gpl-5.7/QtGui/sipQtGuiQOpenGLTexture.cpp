/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qopengltexture.sip"
#include <qopengltexture.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLTexture.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLTexture.cpp"
#line 127 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpygui_qpair.sip"
#include <qpair.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLTexture.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLTexture.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpygui_qpair.sip"
#include <QOpenGLTexture>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLTexture.cpp"
#line 133 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLTexture.cpp"
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qopenglpixeltransferoptions.sip"
#include <qopenglpixeltransferoptions.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLTexture.cpp"


PyDoc_STRVAR(doc_QOpenGLTexture_create, "create(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_create, doc_QOpenGLTexture_create);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_destroy, "destroy(self)");

extern "C" {static PyObject *meth_QOpenGLTexture_destroy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_destroy, doc_QOpenGLTexture_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isCreated, "isCreated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isCreated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isCreated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCreated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isCreated, doc_QOpenGLTexture_isCreated);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_textureId, "textureId(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_textureId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_textureId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            GLuint sipRes;

            sipRes = sipCpp->textureId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_textureId, doc_QOpenGLTexture_textureId);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_bind, "bind(self)\n"
    "bind(self, int, reset: QOpenGLTexture.TextureUnitReset = QOpenGLTexture.DontResetTextureUnit)");

extern "C" {static PyObject *meth_QOpenGLTexture_bind(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_bind(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->bind();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        uint a0;
        QOpenGLTexture::TextureUnitReset a1 = QOpenGLTexture::DontResetTextureUnit;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_reset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu|E", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, sipType_QOpenGLTexture_TextureUnitReset, &a1))
        {
            sipCpp->bind(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_bind, doc_QOpenGLTexture_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_release, "release(self)\n"
    "release(self, int, reset: QOpenGLTexture.TextureUnitReset = QOpenGLTexture.DontResetTextureUnit)");

extern "C" {static PyObject *meth_QOpenGLTexture_release(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_release(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->release();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        uint a0;
        QOpenGLTexture::TextureUnitReset a1 = QOpenGLTexture::DontResetTextureUnit;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_reset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu|E", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, sipType_QOpenGLTexture_TextureUnitReset, &a1))
        {
            sipCpp->release(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_release, doc_QOpenGLTexture_release);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isBound, "isBound(self) -> bool\n"
    "isBound(self, int) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isBound(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isBound(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBound();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        uint a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isBound(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isBound, doc_QOpenGLTexture_isBound);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_boundTextureId, "boundTextureId(QOpenGLTexture.BindingTarget) -> int\n"
    "boundTextureId(int, QOpenGLTexture.BindingTarget) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_boundTextureId(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_boundTextureId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::BindingTarget a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QOpenGLTexture_BindingTarget, &a0))
        {
            GLuint sipRes;

            sipRes = QOpenGLTexture::boundTextureId(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        uint a0;
        QOpenGLTexture::BindingTarget a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "uE", &a0, sipType_QOpenGLTexture_BindingTarget, &a1))
        {
            GLuint sipRes;

            sipRes = QOpenGLTexture::boundTextureId(a0,a1);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_boundTextureId, doc_QOpenGLTexture_boundTextureId);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setFormat, "setFormat(self, QOpenGLTexture.TextureFormat)");

extern "C" {static PyObject *meth_QOpenGLTexture_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::TextureFormat a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_TextureFormat, &a0))
        {
            sipCpp->setFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setFormat, doc_QOpenGLTexture_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_format, "format(self) -> QOpenGLTexture.TextureFormat");

extern "C" {static PyObject *meth_QOpenGLTexture_format(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QOpenGLTexture::TextureFormat sipRes;

            sipRes = sipCpp->format();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_TextureFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_format, doc_QOpenGLTexture_format);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setSize, "setSize(self, int, height: int = 1, depth: int = 1)");

extern "C" {static PyObject *meth_QOpenGLTexture_setSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 1;
        int a2 = 1;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_height,
            sipName_depth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|ii", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setSize(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setSize, doc_QOpenGLTexture_setSize);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_width, "width(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_width(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_width, doc_QOpenGLTexture_width);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_height, "height(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_height(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_height, doc_QOpenGLTexture_height);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_depth(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_depth, doc_QOpenGLTexture_depth);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipLevels, "setMipLevels(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMipLevels(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipLevels, doc_QOpenGLTexture_setMipLevels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipLevels, "mipLevels(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_mipLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mipLevels();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipLevels, doc_QOpenGLTexture_mipLevels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_maximumMipLevels, "maximumMipLevels(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_maximumMipLevels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_maximumMipLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumMipLevels();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_maximumMipLevels, doc_QOpenGLTexture_maximumMipLevels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setLayers, "setLayers(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setLayers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setLayers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setLayers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setLayers, doc_QOpenGLTexture_setLayers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_layers, "layers(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_layers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_layers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->layers();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_layers, doc_QOpenGLTexture_layers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_faces, "faces(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_faces(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_faces(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->faces();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_faces, doc_QOpenGLTexture_faces);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_allocateStorage, "allocateStorage(self)\n"
    "allocateStorage(self, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType)");

extern "C" {static PyObject *meth_QOpenGLTexture_allocateStorage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_allocateStorage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->allocateStorage();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QOpenGLTexture::PixelFormat a0;
        QOpenGLTexture::PixelType a1;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_PixelFormat, &a0, sipType_QOpenGLTexture_PixelType, &a1))
        {
            sipCpp->allocateStorage(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_allocateStorage, doc_QOpenGLTexture_allocateStorage);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isStorageAllocated, "isStorageAllocated(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isStorageAllocated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isStorageAllocated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStorageAllocated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isStorageAllocated, doc_QOpenGLTexture_isStorageAllocated);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_createTextureView, "createTextureView(self, QOpenGLTexture.Target, QOpenGLTexture.TextureFormat, int, int, int, int) -> QOpenGLTexture");

extern "C" {static PyObject *meth_QOpenGLTexture_createTextureView(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_createTextureView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::Target a0;
        QOpenGLTexture::TextureFormat a1;
        int a2;
        int a3;
        int a4;
        int a5;
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEiiii", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Target, &a0, sipType_QOpenGLTexture_TextureFormat, &a1, &a2, &a3, &a4, &a5))
        {
            QOpenGLTexture*sipRes;

            sipRes = sipCpp->createTextureView(a0,a1,a2,a3,a4,a5);

            return sipConvertFromNewType(sipRes,sipType_QOpenGLTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_createTextureView, doc_QOpenGLTexture_createTextureView);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isTextureView, "isTextureView(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isTextureView(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isTextureView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTextureView();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isTextureView, doc_QOpenGLTexture_isTextureView);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setData, "setData(self, int, int, QOpenGLTexture.CubeMapFace, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
    "setData(self, int, int, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
    "setData(self, int, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
    "setData(self, QOpenGLTexture.PixelFormat, QOpenGLTexture.PixelType, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
    "setData(self, QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = QOpenGLTexture.GenerateMipMaps)");

extern "C" {static PyObject *meth_QOpenGLTexture_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QOpenGLTexture::CubeMapFace a2;
        QOpenGLTexture::PixelFormat a3;
        QOpenGLTexture::PixelType a4;
        const void* a5;
        const QOpenGLPixelTransferOptions* const a6 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiEEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLTexture_CubeMapFace, &a2, sipType_QOpenGLTexture_PixelFormat, &a3, sipType_QOpenGLTexture_PixelType, &a4, &a5, sipType_QOpenGLPixelTransferOptions, &a6))
        {
            sipCpp->setData(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QOpenGLTexture::PixelFormat a2;
        QOpenGLTexture::PixelType a3;
        const void* a4;
        const QOpenGLPixelTransferOptions* const a5 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLTexture_PixelFormat, &a2, sipType_QOpenGLTexture_PixelType, &a3, &a4, sipType_QOpenGLPixelTransferOptions, &a5))
        {
            sipCpp->setData(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QOpenGLTexture::PixelFormat a1;
        QOpenGLTexture::PixelType a2;
        const void* a3;
        const QOpenGLPixelTransferOptions* const a4 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, sipType_QOpenGLTexture_PixelFormat, &a1, sipType_QOpenGLTexture_PixelType, &a2, &a3, sipType_QOpenGLPixelTransferOptions, &a4))
        {
            sipCpp->setData(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QOpenGLTexture::PixelFormat a0;
        QOpenGLTexture::PixelType a1;
        const void* a2;
        const QOpenGLPixelTransferOptions* const a3 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEEv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_PixelFormat, &a0, sipType_QOpenGLTexture_PixelType, &a1, &a2, sipType_QOpenGLPixelTransferOptions, &a3))
        {
            sipCpp->setData(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QImage* a0;
        QOpenGLTexture::MipMapGeneration a1 = QOpenGLTexture::GenerateMipMaps;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_genMipMaps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QImage, &a0, sipType_QOpenGLTexture_MipMapGeneration, &a1))
        {
            sipCpp->setData(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setData, doc_QOpenGLTexture_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setCompressedData, "setCompressedData(self, int, int, QOpenGLTexture.CubeMapFace, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
    "setCompressedData(self, int, int, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
    "setCompressedData(self, int, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)\n"
    "setCompressedData(self, int, sip.voidptr, options: QOpenGLPixelTransferOptions = None)");

extern "C" {static PyObject *meth_QOpenGLTexture_setCompressedData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setCompressedData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QOpenGLTexture::CubeMapFace a2;
        int a3;
        const void* a4;
        const QOpenGLPixelTransferOptions* const a5 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiEiv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLTexture_CubeMapFace, &a2, &a3, &a4, sipType_QOpenGLPixelTransferOptions, &a5))
        {
            sipCpp->setCompressedData(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        const void* a3;
        const QOpenGLPixelTransferOptions* const a4 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2, &a3, sipType_QOpenGLPixelTransferOptions, &a4))
        {
            sipCpp->setCompressedData(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const void* a2;
        const QOpenGLPixelTransferOptions* const a3 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, &a2, sipType_QOpenGLPixelTransferOptions, &a3))
        {
            sipCpp->setCompressedData(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const void* a1;
        const QOpenGLPixelTransferOptions* const a2 = 0;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biv|J8", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1, sipType_QOpenGLPixelTransferOptions, &a2))
        {
            sipCpp->setCompressedData(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setCompressedData, doc_QOpenGLTexture_setCompressedData);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_hasFeature, "hasFeature(QOpenGLTexture.Feature) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_hasFeature(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::Feature a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QOpenGLTexture_Feature, &a0))
        {
            bool sipRes;

            sipRes = QOpenGLTexture::hasFeature(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_hasFeature, doc_QOpenGLTexture_hasFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipBaseLevel, "setMipBaseLevel(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipBaseLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipBaseLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMipBaseLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipBaseLevel, doc_QOpenGLTexture_setMipBaseLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipBaseLevel, "mipBaseLevel(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_mipBaseLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipBaseLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mipBaseLevel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipBaseLevel, doc_QOpenGLTexture_mipBaseLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipMaxLevel, "setMipMaxLevel(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipMaxLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipMaxLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMipMaxLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipMaxLevel, doc_QOpenGLTexture_setMipMaxLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipMaxLevel, "mipMaxLevel(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_mipMaxLevel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipMaxLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mipMaxLevel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipMaxLevel, doc_QOpenGLTexture_mipMaxLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMipLevelRange, "setMipLevelRange(self, int, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMipLevelRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMipLevelRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->setMipLevelRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMipLevelRange, doc_QOpenGLTexture_setMipLevelRange);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_mipLevelRange, "mipLevelRange(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QOpenGLTexture_mipLevelRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_mipLevelRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QPair<int,int>*sipRes;

            sipRes = new QPair<int,int>(sipCpp->mipLevelRange());

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_mipLevelRange, doc_QOpenGLTexture_mipLevelRange);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setAutoMipMapGenerationEnabled, "setAutoMipMapGenerationEnabled(self, bool)");

extern "C" {static PyObject *meth_QOpenGLTexture_setAutoMipMapGenerationEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setAutoMipMapGenerationEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setAutoMipMapGenerationEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setAutoMipMapGenerationEnabled, doc_QOpenGLTexture_setAutoMipMapGenerationEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isAutoMipMapGenerationEnabled, "isAutoMipMapGenerationEnabled(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isAutoMipMapGenerationEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isAutoMipMapGenerationEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAutoMipMapGenerationEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isAutoMipMapGenerationEnabled, doc_QOpenGLTexture_isAutoMipMapGenerationEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_generateMipMaps, "generateMipMaps(self)\n"
    "generateMipMaps(self, int, resetBaseLevel: bool = True)");

extern "C" {static PyObject *meth_QOpenGLTexture_generateMipMaps(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_generateMipMaps(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            sipCpp->generateMipMaps();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        bool a1 = 1;
        QOpenGLTexture *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_resetBaseLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|b", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->generateMipMaps(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_generateMipMaps, doc_QOpenGLTexture_generateMipMaps);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setSwizzleMask, "setSwizzleMask(self, QOpenGLTexture.SwizzleComponent, QOpenGLTexture.SwizzleValue)\n"
    "setSwizzleMask(self, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue, QOpenGLTexture.SwizzleValue)");

extern "C" {static PyObject *meth_QOpenGLTexture_setSwizzleMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setSwizzleMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::SwizzleComponent a0;
        QOpenGLTexture::SwizzleValue a1;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_SwizzleComponent, &a0, sipType_QOpenGLTexture_SwizzleValue, &a1))
        {
            sipCpp->setSwizzleMask(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QOpenGLTexture::SwizzleValue a0;
        QOpenGLTexture::SwizzleValue a1;
        QOpenGLTexture::SwizzleValue a2;
        QOpenGLTexture::SwizzleValue a3;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_SwizzleValue, &a0, sipType_QOpenGLTexture_SwizzleValue, &a1, sipType_QOpenGLTexture_SwizzleValue, &a2, sipType_QOpenGLTexture_SwizzleValue, &a3))
        {
            sipCpp->setSwizzleMask(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setSwizzleMask, doc_QOpenGLTexture_setSwizzleMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_swizzleMask, "swizzleMask(self, QOpenGLTexture.SwizzleComponent) -> QOpenGLTexture.SwizzleValue");

extern "C" {static PyObject *meth_QOpenGLTexture_swizzleMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_swizzleMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::SwizzleComponent a0;
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_SwizzleComponent, &a0))
        {
            QOpenGLTexture::SwizzleValue sipRes;

            sipRes = sipCpp->swizzleMask(a0);

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_SwizzleValue);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_swizzleMask, doc_QOpenGLTexture_swizzleMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setDepthStencilMode, "setDepthStencilMode(self, QOpenGLTexture.DepthStencilMode)");

extern "C" {static PyObject *meth_QOpenGLTexture_setDepthStencilMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setDepthStencilMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::DepthStencilMode a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_DepthStencilMode, &a0))
        {
            sipCpp->setDepthStencilMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setDepthStencilMode, doc_QOpenGLTexture_setDepthStencilMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_depthStencilMode, "depthStencilMode(self) -> QOpenGLTexture.DepthStencilMode");

extern "C" {static PyObject *meth_QOpenGLTexture_depthStencilMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_depthStencilMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QOpenGLTexture::DepthStencilMode sipRes;

            sipRes = sipCpp->depthStencilMode();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_DepthStencilMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_depthStencilMode, doc_QOpenGLTexture_depthStencilMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMinificationFilter, "setMinificationFilter(self, QOpenGLTexture.Filter)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMinificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMinificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::Filter a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Filter, &a0))
        {
            sipCpp->setMinificationFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMinificationFilter, doc_QOpenGLTexture_setMinificationFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_minificationFilter, "minificationFilter(self) -> QOpenGLTexture.Filter");

extern "C" {static PyObject *meth_QOpenGLTexture_minificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_minificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QOpenGLTexture::Filter sipRes;

            sipRes = sipCpp->minificationFilter();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_Filter);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_minificationFilter, doc_QOpenGLTexture_minificationFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMagnificationFilter, "setMagnificationFilter(self, QOpenGLTexture.Filter)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMagnificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMagnificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::Filter a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Filter, &a0))
        {
            sipCpp->setMagnificationFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMagnificationFilter, doc_QOpenGLTexture_setMagnificationFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_magnificationFilter, "magnificationFilter(self) -> QOpenGLTexture.Filter");

extern "C" {static PyObject *meth_QOpenGLTexture_magnificationFilter(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_magnificationFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QOpenGLTexture::Filter sipRes;

            sipRes = sipCpp->magnificationFilter();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_Filter);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_magnificationFilter, doc_QOpenGLTexture_magnificationFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMinMagFilters, "setMinMagFilters(self, QOpenGLTexture.Filter, QOpenGLTexture.Filter)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMinMagFilters(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMinMagFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::Filter a0;
        QOpenGLTexture::Filter a1;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_Filter, &a0, sipType_QOpenGLTexture_Filter, &a1))
        {
            sipCpp->setMinMagFilters(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMinMagFilters, doc_QOpenGLTexture_setMinMagFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_minMagFilters, "minMagFilters(self) -> Tuple[QOpenGLTexture.Filter, QOpenGLTexture.Filter]");

extern "C" {static PyObject *meth_QOpenGLTexture_minMagFilters(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_minMagFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QPair<QOpenGLTexture::Filter,QOpenGLTexture::Filter>*sipRes;

            sipRes = new QPair<QOpenGLTexture::Filter,QOpenGLTexture::Filter>(sipCpp->minMagFilters());

            return sipConvertFromNewType(sipRes,sipType_QPair_0100QOpenGLTexture_Filter_0100QOpenGLTexture_Filter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_minMagFilters, doc_QOpenGLTexture_minMagFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMaximumAnisotropy, "setMaximumAnisotropy(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMaximumAnisotropy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMaximumAnisotropy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMaximumAnisotropy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMaximumAnisotropy, doc_QOpenGLTexture_setMaximumAnisotropy);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_maximumAnisotropy, "maximumAnisotropy(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_maximumAnisotropy(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_maximumAnisotropy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->maximumAnisotropy();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_maximumAnisotropy, doc_QOpenGLTexture_maximumAnisotropy);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setWrapMode, "setWrapMode(self, QOpenGLTexture.WrapMode)\n"
    "setWrapMode(self, QOpenGLTexture.CoordinateDirection, QOpenGLTexture.WrapMode)");

extern "C" {static PyObject *meth_QOpenGLTexture_setWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::WrapMode a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_WrapMode, &a0))
        {
            sipCpp->setWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QOpenGLTexture::CoordinateDirection a0;
        QOpenGLTexture::WrapMode a1;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_CoordinateDirection, &a0, sipType_QOpenGLTexture_WrapMode, &a1))
        {
            sipCpp->setWrapMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setWrapMode, doc_QOpenGLTexture_setWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_wrapMode, "wrapMode(self, QOpenGLTexture.CoordinateDirection) -> QOpenGLTexture.WrapMode");

extern "C" {static PyObject *meth_QOpenGLTexture_wrapMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_wrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::CoordinateDirection a0;
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_CoordinateDirection, &a0))
        {
            QOpenGLTexture::WrapMode sipRes;

            sipRes = sipCpp->wrapMode(a0);

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_wrapMode, doc_QOpenGLTexture_wrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setBorderColor, "setBorderColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QOpenGLTexture_setBorderColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setBorderColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QColor* a0;
        int a0State = 0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBorderColor(*a0);
            sipReleaseType(a0,sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setBorderColor, doc_QOpenGLTexture_setBorderColor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_borderColor, "borderColor(self) -> QColor");

extern "C" {static PyObject *meth_QOpenGLTexture_borderColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_borderColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->borderColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_borderColor, doc_QOpenGLTexture_borderColor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMinimumLevelOfDetail, "setMinimumLevelOfDetail(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMinimumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMinimumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMinimumLevelOfDetail(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMinimumLevelOfDetail, doc_QOpenGLTexture_setMinimumLevelOfDetail);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_minimumLevelOfDetail, "minimumLevelOfDetail(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_minimumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_minimumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->minimumLevelOfDetail();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_minimumLevelOfDetail, doc_QOpenGLTexture_minimumLevelOfDetail);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setMaximumLevelOfDetail, "setMaximumLevelOfDetail(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setMaximumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setMaximumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setMaximumLevelOfDetail(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setMaximumLevelOfDetail, doc_QOpenGLTexture_setMaximumLevelOfDetail);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_maximumLevelOfDetail, "maximumLevelOfDetail(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_maximumLevelOfDetail(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_maximumLevelOfDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->maximumLevelOfDetail();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_maximumLevelOfDetail, doc_QOpenGLTexture_maximumLevelOfDetail);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setLevelOfDetailRange, "setLevelOfDetailRange(self, float, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setLevelOfDetailRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setLevelOfDetailRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0, &a1))
        {
            sipCpp->setLevelOfDetailRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setLevelOfDetailRange, doc_QOpenGLTexture_setLevelOfDetailRange);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_levelOfDetailRange, "levelOfDetailRange(self) -> Tuple[float, float]");

extern "C" {static PyObject *meth_QOpenGLTexture_levelOfDetailRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_levelOfDetailRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QPair<float,float>*sipRes;

            sipRes = new QPair<float,float>(sipCpp->levelOfDetailRange());

            return sipConvertFromNewType(sipRes,sipType_QPair_2200_2200,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_levelOfDetailRange, doc_QOpenGLTexture_levelOfDetailRange);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setLevelofDetailBias, "setLevelofDetailBias(self, float)");

extern "C" {static PyObject *meth_QOpenGLTexture_setLevelofDetailBias(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setLevelofDetailBias(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setLevelofDetailBias(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setLevelofDetailBias, doc_QOpenGLTexture_setLevelofDetailBias);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_levelofDetailBias, "levelofDetailBias(self) -> float");

extern "C" {static PyObject *meth_QOpenGLTexture_levelofDetailBias(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_levelofDetailBias(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->levelofDetailBias();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_levelofDetailBias, doc_QOpenGLTexture_levelofDetailBias);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_target, "target(self) -> QOpenGLTexture.Target");

extern "C" {static PyObject *meth_QOpenGLTexture_target(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QOpenGLTexture::Target sipRes;

            sipRes = sipCpp->target();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_Target);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_target, doc_QOpenGLTexture_target);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setSamples, "setSamples(self, int)");

extern "C" {static PyObject *meth_QOpenGLTexture_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setSamples, doc_QOpenGLTexture_setSamples);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_samples, "samples(self) -> int");

extern "C" {static PyObject *meth_QOpenGLTexture_samples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_samples, doc_QOpenGLTexture_samples);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setFixedSamplePositions, "setFixedSamplePositions(self, bool)");

extern "C" {static PyObject *meth_QOpenGLTexture_setFixedSamplePositions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setFixedSamplePositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLTexture, &sipCpp, &a0))
        {
            sipCpp->setFixedSamplePositions(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setFixedSamplePositions, doc_QOpenGLTexture_setFixedSamplePositions);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_isFixedSamplePositions, "isFixedSamplePositions(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLTexture_isFixedSamplePositions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_isFixedSamplePositions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFixedSamplePositions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_isFixedSamplePositions, doc_QOpenGLTexture_isFixedSamplePositions);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setComparisonFunction, "setComparisonFunction(self, QOpenGLTexture.ComparisonFunction)");

extern "C" {static PyObject *meth_QOpenGLTexture_setComparisonFunction(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setComparisonFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::ComparisonFunction a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_ComparisonFunction, &a0))
        {
            sipCpp->setComparisonFunction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setComparisonFunction, doc_QOpenGLTexture_setComparisonFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_comparisonFunction, "comparisonFunction(self) -> QOpenGLTexture.ComparisonFunction");

extern "C" {static PyObject *meth_QOpenGLTexture_comparisonFunction(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_comparisonFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QOpenGLTexture::ComparisonFunction sipRes;

            sipRes = sipCpp->comparisonFunction();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_ComparisonFunction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_comparisonFunction, doc_QOpenGLTexture_comparisonFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_setComparisonMode, "setComparisonMode(self, QOpenGLTexture.ComparisonMode)");

extern "C" {static PyObject *meth_QOpenGLTexture_setComparisonMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_setComparisonMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLTexture::ComparisonMode a0;
        QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLTexture, &sipCpp, sipType_QOpenGLTexture_ComparisonMode, &a0))
        {
            sipCpp->setComparisonMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_setComparisonMode, doc_QOpenGLTexture_setComparisonMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLTexture_comparisonMode, "comparisonMode(self) -> QOpenGLTexture.ComparisonMode");

extern "C" {static PyObject *meth_QOpenGLTexture_comparisonMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLTexture_comparisonMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLTexture, &sipCpp))
        {
            QOpenGLTexture::ComparisonMode sipRes;

            sipRes = sipCpp->comparisonMode();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLTexture_ComparisonMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLTexture, sipName_comparisonMode, doc_QOpenGLTexture_comparisonMode);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLTexture(void *, int);}
static void release_QOpenGLTexture(void *sipCppV,int)
{
    delete reinterpret_cast<QOpenGLTexture *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLTexture(sipSimpleWrapper *);}
static void dealloc_QOpenGLTexture(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLTexture(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QOpenGLTexture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLTexture(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QOpenGLTexture *sipCpp = 0;

    {
        QOpenGLTexture::Target a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "E", sipType_QOpenGLTexture_Target, &a0))
        {
            sipCpp = new QOpenGLTexture(a0);

            return sipCpp;
        }
    }

    {
        const QImage* a0;
        QOpenGLTexture::MipMapGeneration a1 = QOpenGLTexture::GenerateMipMaps;

        static const char *sipKwdList[] = {
            NULL,
            sipName_genMipMaps,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QImage, &a0, sipType_QOpenGLTexture_MipMapGeneration, &a1))
        {
            sipCpp = new QOpenGLTexture(*a0,a1);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QOpenGLTexture[] = {
    {SIP_MLNAME_CAST(sipName_allocateStorage), meth_QOpenGLTexture_allocateStorage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_allocateStorage)},
    {SIP_MLNAME_CAST(sipName_bind), (PyCFunction)meth_QOpenGLTexture_bind, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_bind)},
    {SIP_MLNAME_CAST(sipName_borderColor), meth_QOpenGLTexture_borderColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_borderColor)},
    {SIP_MLNAME_CAST(sipName_boundTextureId), meth_QOpenGLTexture_boundTextureId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_boundTextureId)},
    {SIP_MLNAME_CAST(sipName_comparisonFunction), meth_QOpenGLTexture_comparisonFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_comparisonFunction)},
    {SIP_MLNAME_CAST(sipName_comparisonMode), meth_QOpenGLTexture_comparisonMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_comparisonMode)},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLTexture_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_create)},
    {SIP_MLNAME_CAST(sipName_createTextureView), meth_QOpenGLTexture_createTextureView, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_createTextureView)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QOpenGLTexture_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_depth)},
    {SIP_MLNAME_CAST(sipName_depthStencilMode), meth_QOpenGLTexture_depthStencilMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_depthStencilMode)},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QOpenGLTexture_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_destroy)},
    {SIP_MLNAME_CAST(sipName_faces), meth_QOpenGLTexture_faces, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_faces)},
    {SIP_MLNAME_CAST(sipName_format), meth_QOpenGLTexture_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_format)},
    {SIP_MLNAME_CAST(sipName_generateMipMaps), (PyCFunction)meth_QOpenGLTexture_generateMipMaps, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_generateMipMaps)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QOpenGLTexture_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_hasFeature)},
    {SIP_MLNAME_CAST(sipName_height), meth_QOpenGLTexture_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_height)},
    {SIP_MLNAME_CAST(sipName_isAutoMipMapGenerationEnabled), meth_QOpenGLTexture_isAutoMipMapGenerationEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isAutoMipMapGenerationEnabled)},
    {SIP_MLNAME_CAST(sipName_isBound), meth_QOpenGLTexture_isBound, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isBound)},
    {SIP_MLNAME_CAST(sipName_isCreated), meth_QOpenGLTexture_isCreated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isCreated)},
    {SIP_MLNAME_CAST(sipName_isFixedSamplePositions), meth_QOpenGLTexture_isFixedSamplePositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isFixedSamplePositions)},
    {SIP_MLNAME_CAST(sipName_isStorageAllocated), meth_QOpenGLTexture_isStorageAllocated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isStorageAllocated)},
    {SIP_MLNAME_CAST(sipName_isTextureView), meth_QOpenGLTexture_isTextureView, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_isTextureView)},
    {SIP_MLNAME_CAST(sipName_layers), meth_QOpenGLTexture_layers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_layers)},
    {SIP_MLNAME_CAST(sipName_levelOfDetailRange), meth_QOpenGLTexture_levelOfDetailRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_levelOfDetailRange)},
    {SIP_MLNAME_CAST(sipName_levelofDetailBias), meth_QOpenGLTexture_levelofDetailBias, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_levelofDetailBias)},
    {SIP_MLNAME_CAST(sipName_magnificationFilter), meth_QOpenGLTexture_magnificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_magnificationFilter)},
    {SIP_MLNAME_CAST(sipName_maximumAnisotropy), meth_QOpenGLTexture_maximumAnisotropy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_maximumAnisotropy)},
    {SIP_MLNAME_CAST(sipName_maximumLevelOfDetail), meth_QOpenGLTexture_maximumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_maximumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_maximumMipLevels), meth_QOpenGLTexture_maximumMipLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_maximumMipLevels)},
    {SIP_MLNAME_CAST(sipName_minMagFilters), meth_QOpenGLTexture_minMagFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_minMagFilters)},
    {SIP_MLNAME_CAST(sipName_minificationFilter), meth_QOpenGLTexture_minificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_minificationFilter)},
    {SIP_MLNAME_CAST(sipName_minimumLevelOfDetail), meth_QOpenGLTexture_minimumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_minimumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_mipBaseLevel), meth_QOpenGLTexture_mipBaseLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipBaseLevel)},
    {SIP_MLNAME_CAST(sipName_mipLevelRange), meth_QOpenGLTexture_mipLevelRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipLevelRange)},
    {SIP_MLNAME_CAST(sipName_mipLevels), meth_QOpenGLTexture_mipLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipLevels)},
    {SIP_MLNAME_CAST(sipName_mipMaxLevel), meth_QOpenGLTexture_mipMaxLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_mipMaxLevel)},
    {SIP_MLNAME_CAST(sipName_release), (PyCFunction)meth_QOpenGLTexture_release, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_release)},
    {SIP_MLNAME_CAST(sipName_samples), meth_QOpenGLTexture_samples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_samples)},
    {SIP_MLNAME_CAST(sipName_setAutoMipMapGenerationEnabled), meth_QOpenGLTexture_setAutoMipMapGenerationEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setAutoMipMapGenerationEnabled)},
    {SIP_MLNAME_CAST(sipName_setBorderColor), meth_QOpenGLTexture_setBorderColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setBorderColor)},
    {SIP_MLNAME_CAST(sipName_setComparisonFunction), meth_QOpenGLTexture_setComparisonFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setComparisonFunction)},
    {SIP_MLNAME_CAST(sipName_setComparisonMode), meth_QOpenGLTexture_setComparisonMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setComparisonMode)},
    {SIP_MLNAME_CAST(sipName_setCompressedData), (PyCFunction)meth_QOpenGLTexture_setCompressedData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setCompressedData)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QOpenGLTexture_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setData)},
    {SIP_MLNAME_CAST(sipName_setDepthStencilMode), meth_QOpenGLTexture_setDepthStencilMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setDepthStencilMode)},
    {SIP_MLNAME_CAST(sipName_setFixedSamplePositions), meth_QOpenGLTexture_setFixedSamplePositions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setFixedSamplePositions)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QOpenGLTexture_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setFormat)},
    {SIP_MLNAME_CAST(sipName_setLayers), meth_QOpenGLTexture_setLayers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setLayers)},
    {SIP_MLNAME_CAST(sipName_setLevelOfDetailRange), meth_QOpenGLTexture_setLevelOfDetailRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setLevelOfDetailRange)},
    {SIP_MLNAME_CAST(sipName_setLevelofDetailBias), meth_QOpenGLTexture_setLevelofDetailBias, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setLevelofDetailBias)},
    {SIP_MLNAME_CAST(sipName_setMagnificationFilter), meth_QOpenGLTexture_setMagnificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMagnificationFilter)},
    {SIP_MLNAME_CAST(sipName_setMaximumAnisotropy), meth_QOpenGLTexture_setMaximumAnisotropy, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMaximumAnisotropy)},
    {SIP_MLNAME_CAST(sipName_setMaximumLevelOfDetail), meth_QOpenGLTexture_setMaximumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMaximumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_setMinMagFilters), meth_QOpenGLTexture_setMinMagFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMinMagFilters)},
    {SIP_MLNAME_CAST(sipName_setMinificationFilter), meth_QOpenGLTexture_setMinificationFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMinificationFilter)},
    {SIP_MLNAME_CAST(sipName_setMinimumLevelOfDetail), meth_QOpenGLTexture_setMinimumLevelOfDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMinimumLevelOfDetail)},
    {SIP_MLNAME_CAST(sipName_setMipBaseLevel), meth_QOpenGLTexture_setMipBaseLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipBaseLevel)},
    {SIP_MLNAME_CAST(sipName_setMipLevelRange), meth_QOpenGLTexture_setMipLevelRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipLevelRange)},
    {SIP_MLNAME_CAST(sipName_setMipLevels), meth_QOpenGLTexture_setMipLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipLevels)},
    {SIP_MLNAME_CAST(sipName_setMipMaxLevel), meth_QOpenGLTexture_setMipMaxLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setMipMaxLevel)},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QOpenGLTexture_setSamples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setSamples)},
    {SIP_MLNAME_CAST(sipName_setSize), (PyCFunction)meth_QOpenGLTexture_setSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setSize)},
    {SIP_MLNAME_CAST(sipName_setSwizzleMask), meth_QOpenGLTexture_setSwizzleMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setSwizzleMask)},
    {SIP_MLNAME_CAST(sipName_setWrapMode), meth_QOpenGLTexture_setWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_setWrapMode)},
    {SIP_MLNAME_CAST(sipName_swizzleMask), meth_QOpenGLTexture_swizzleMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_swizzleMask)},
    {SIP_MLNAME_CAST(sipName_target), meth_QOpenGLTexture_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_target)},
    {SIP_MLNAME_CAST(sipName_textureId), meth_QOpenGLTexture_textureId, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_textureId)},
    {SIP_MLNAME_CAST(sipName_width), meth_QOpenGLTexture_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_width)},
    {SIP_MLNAME_CAST(sipName_wrapMode), meth_QOpenGLTexture_wrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLTexture_wrapMode)}
};

static sipEnumMemberDef enummembers_QOpenGLTexture[] = {
    {sipName_Alpha, static_cast<int>(QOpenGLTexture::Alpha), 162},
    {sipName_AlphaFormat, static_cast<int>(QOpenGLTexture::AlphaFormat), 167},
    {sipName_AlphaValue, static_cast<int>(QOpenGLTexture::AlphaValue), 165},
    {sipName_AnisotropicFiltering, static_cast<int>(QOpenGLTexture::AnisotropicFiltering), 158},
    {sipName_BGR, static_cast<int>(QOpenGLTexture::BGR), 162},
    {sipName_BGRA, static_cast<int>(QOpenGLTexture::BGRA), 162},
    {sipName_BGRA_Integer, static_cast<int>(QOpenGLTexture::BGRA_Integer), 162},
    {sipName_BGR_Integer, static_cast<int>(QOpenGLTexture::BGR_Integer), 162},
    {sipName_BindingTarget1D, static_cast<int>(QOpenGLTexture::BindingTarget1D), 152},
    {sipName_BindingTarget1DArray, static_cast<int>(QOpenGLTexture::BindingTarget1DArray), 152},
    {sipName_BindingTarget2D, static_cast<int>(QOpenGLTexture::BindingTarget2D), 152},
    {sipName_BindingTarget2DArray, static_cast<int>(QOpenGLTexture::BindingTarget2DArray), 152},
    {sipName_BindingTarget2DMultisample, static_cast<int>(QOpenGLTexture::BindingTarget2DMultisample), 152},
    {sipName_BindingTarget2DMultisampleArray, static_cast<int>(QOpenGLTexture::BindingTarget2DMultisampleArray), 152},
    {sipName_BindingTarget3D, static_cast<int>(QOpenGLTexture::BindingTarget3D), 152},
    {sipName_BindingTargetBuffer, static_cast<int>(QOpenGLTexture::BindingTargetBuffer), 152},
    {sipName_BindingTargetCubeMap, static_cast<int>(QOpenGLTexture::BindingTargetCubeMap), 152},
    {sipName_BindingTargetCubeMapArray, static_cast<int>(QOpenGLTexture::BindingTargetCubeMapArray), 152},
    {sipName_BindingTargetRectangle, static_cast<int>(QOpenGLTexture::BindingTargetRectangle), 152},
    {sipName_BlueValue, static_cast<int>(QOpenGLTexture::BlueValue), 165},
    {sipName_ClampToBorder, static_cast<int>(QOpenGLTexture::ClampToBorder), 169},
    {sipName_ClampToEdge, static_cast<int>(QOpenGLTexture::ClampToEdge), 169},
    {sipName_CommpareNotEqual, static_cast<int>(QOpenGLTexture::CommpareNotEqual), 153},
    {sipName_CompareAlways, static_cast<int>(QOpenGLTexture::CompareAlways), 153},
    {sipName_CompareEqual, static_cast<int>(QOpenGLTexture::CompareEqual), 153},
    {sipName_CompareGreater, static_cast<int>(QOpenGLTexture::CompareGreater), 153},
    {sipName_CompareGreaterEqual, static_cast<int>(QOpenGLTexture::CompareGreaterEqual), 153},
    {sipName_CompareLess, static_cast<int>(QOpenGLTexture::CompareLess), 153},
    {sipName_CompareLessEqual, static_cast<int>(QOpenGLTexture::CompareLessEqual), 153},
    {sipName_CompareNever, static_cast<int>(QOpenGLTexture::CompareNever), 153},
    {sipName_CompareNone, static_cast<int>(QOpenGLTexture::CompareNone), 154},
    {sipName_CompareRefToTexture, static_cast<int>(QOpenGLTexture::CompareRefToTexture), 154},
    {sipName_CubeMapNegativeX, static_cast<int>(QOpenGLTexture::CubeMapNegativeX), 156},
    {sipName_CubeMapNegativeY, static_cast<int>(QOpenGLTexture::CubeMapNegativeY), 156},
    {sipName_CubeMapNegativeZ, static_cast<int>(QOpenGLTexture::CubeMapNegativeZ), 156},
    {sipName_CubeMapPositiveX, static_cast<int>(QOpenGLTexture::CubeMapPositiveX), 156},
    {sipName_CubeMapPositiveY, static_cast<int>(QOpenGLTexture::CubeMapPositiveY), 156},
    {sipName_CubeMapPositiveZ, static_cast<int>(QOpenGLTexture::CubeMapPositiveZ), 156},
    {sipName_D16, static_cast<int>(QOpenGLTexture::D16), 167},
    {sipName_D24, static_cast<int>(QOpenGLTexture::D24), 167},
    {sipName_D24S8, static_cast<int>(QOpenGLTexture::D24S8), 167},
    {sipName_D32, static_cast<int>(QOpenGLTexture::D32), 167},
    {sipName_D32F, static_cast<int>(QOpenGLTexture::D32F), 167},
    {sipName_D32FS8X24, static_cast<int>(QOpenGLTexture::D32FS8X24), 167},
    {sipName_Depth, static_cast<int>(QOpenGLTexture::Depth), 162},
    {sipName_DepthFormat, static_cast<int>(QOpenGLTexture::DepthFormat), 167},
    {sipName_DepthMode, static_cast<int>(QOpenGLTexture::DepthMode), 157},
    {sipName_DepthStencil, static_cast<int>(QOpenGLTexture::DepthStencil), 162},
    {sipName_DirectionR, static_cast<int>(QOpenGLTexture::DirectionR), 155},
    {sipName_DirectionS, static_cast<int>(QOpenGLTexture::DirectionS), 155},
    {sipName_DirectionT, static_cast<int>(QOpenGLTexture::DirectionT), 155},
    {sipName_DontGenerateMipMaps, static_cast<int>(QOpenGLTexture::DontGenerateMipMaps), 161},
    {sipName_DontResetTextureUnit, static_cast<int>(QOpenGLTexture::DontResetTextureUnit), 168},
    {sipName_Float16, static_cast<int>(QOpenGLTexture::Float16), 163},
    {sipName_Float16OES, static_cast<int>(QOpenGLTexture::Float16OES), 163},
    {sipName_Float32, static_cast<int>(QOpenGLTexture::Float32), 163},
    {sipName_Float32_D32_UInt32_S8_X24, static_cast<int>(QOpenGLTexture::Float32_D32_UInt32_S8_X24), 163},
    {sipName_GenerateMipMaps, static_cast<int>(QOpenGLTexture::GenerateMipMaps), 161},
    {sipName_GreenValue, static_cast<int>(QOpenGLTexture::GreenValue), 165},
    {sipName_ImmutableMultisampleStorage, static_cast<int>(QOpenGLTexture::ImmutableMultisampleStorage), 158},
    {sipName_ImmutableStorage, static_cast<int>(QOpenGLTexture::ImmutableStorage), 158},
    {sipName_Int16, static_cast<int>(QOpenGLTexture::Int16), 163},
    {sipName_Int32, static_cast<int>(QOpenGLTexture::Int32), 163},
    {sipName_Int8, static_cast<int>(QOpenGLTexture::Int8), 163},
    {sipName_Linear, static_cast<int>(QOpenGLTexture::Linear), 160},
    {sipName_LinearMipMapLinear, static_cast<int>(QOpenGLTexture::LinearMipMapLinear), 160},
    {sipName_LinearMipMapNearest, static_cast<int>(QOpenGLTexture::LinearMipMapNearest), 160},
    {sipName_Luminance, static_cast<int>(QOpenGLTexture::Luminance), 162},
    {sipName_LuminanceAlpha, static_cast<int>(QOpenGLTexture::LuminanceAlpha), 162},
    {sipName_LuminanceAlphaFormat, static_cast<int>(QOpenGLTexture::LuminanceAlphaFormat), 167},
    {sipName_LuminanceFormat, static_cast<int>(QOpenGLTexture::LuminanceFormat), 167},
    {sipName_MirroredRepeat, static_cast<int>(QOpenGLTexture::MirroredRepeat), 169},
    {sipName_NPOTTextureRepeat, static_cast<int>(QOpenGLTexture::NPOTTextureRepeat), 158},
    {sipName_NPOTTextures, static_cast<int>(QOpenGLTexture::NPOTTextures), 158},
    {sipName_Nearest, static_cast<int>(QOpenGLTexture::Nearest), 160},
    {sipName_NearestMipMapLinear, static_cast<int>(QOpenGLTexture::NearestMipMapLinear), 160},
    {sipName_NearestMipMapNearest, static_cast<int>(QOpenGLTexture::NearestMipMapNearest), 160},
    {sipName_NoFormat, static_cast<int>(QOpenGLTexture::NoFormat), 167},
    {sipName_NoPixelType, static_cast<int>(QOpenGLTexture::NoPixelType), 163},
    {sipName_NoSourceFormat, static_cast<int>(QOpenGLTexture::NoSourceFormat), 162},
    {sipName_OneValue, static_cast<int>(QOpenGLTexture::OneValue), 165},
    {sipName_R11_EAC_SNorm, static_cast<int>(QOpenGLTexture::R11_EAC_SNorm), 167},
    {sipName_R11_EAC_UNorm, static_cast<int>(QOpenGLTexture::R11_EAC_UNorm), 167},
    {sipName_R16F, static_cast<int>(QOpenGLTexture::R16F), 167},
    {sipName_R16I, static_cast<int>(QOpenGLTexture::R16I), 167},
    {sipName_R16U, static_cast<int>(QOpenGLTexture::R16U), 167},
    {sipName_R16_SNorm, static_cast<int>(QOpenGLTexture::R16_SNorm), 167},
    {sipName_R16_UNorm, static_cast<int>(QOpenGLTexture::R16_UNorm), 167},
    {sipName_R32F, static_cast<int>(QOpenGLTexture::R32F), 167},
    {sipName_R32I, static_cast<int>(QOpenGLTexture::R32I), 167},
    {sipName_R32U, static_cast<int>(QOpenGLTexture::R32U), 167},
    {sipName_R5G6B5, static_cast<int>(QOpenGLTexture::R5G6B5), 167},
    {sipName_R8I, static_cast<int>(QOpenGLTexture::R8I), 167},
    {sipName_R8U, static_cast<int>(QOpenGLTexture::R8U), 167},
    {sipName_R8_SNorm, static_cast<int>(QOpenGLTexture::R8_SNorm), 167},
    {sipName_R8_UNorm, static_cast<int>(QOpenGLTexture::R8_UNorm), 167},
    {sipName_RG, static_cast<int>(QOpenGLTexture::RG), 162},
    {sipName_RG11B10F, static_cast<int>(QOpenGLTexture::RG11B10F), 167},
    {sipName_RG11_EAC_SNorm, static_cast<int>(QOpenGLTexture::RG11_EAC_SNorm), 167},
    {sipName_RG11_EAC_UNorm, static_cast<int>(QOpenGLTexture::RG11_EAC_UNorm), 167},
    {sipName_RG16F, static_cast<int>(QOpenGLTexture::RG16F), 167},
    {sipName_RG16I, static_cast<int>(QOpenGLTexture::RG16I), 167},
    {sipName_RG16U, static_cast<int>(QOpenGLTexture::RG16U), 167},
    {sipName_RG16_SNorm, static_cast<int>(QOpenGLTexture::RG16_SNorm), 167},
    {sipName_RG16_UNorm, static_cast<int>(QOpenGLTexture::RG16_UNorm), 167},
    {sipName_RG32F, static_cast<int>(QOpenGLTexture::RG32F), 167},
    {sipName_RG32I, static_cast<int>(QOpenGLTexture::RG32I), 167},
    {sipName_RG32U, static_cast<int>(QOpenGLTexture::RG32U), 167},
    {sipName_RG3B2, static_cast<int>(QOpenGLTexture::RG3B2), 167},
    {sipName_RG8I, static_cast<int>(QOpenGLTexture::RG8I), 167},
    {sipName_RG8U, static_cast<int>(QOpenGLTexture::RG8U), 167},
    {sipName_RG8_SNorm, static_cast<int>(QOpenGLTexture::RG8_SNorm), 167},
    {sipName_RG8_UNorm, static_cast<int>(QOpenGLTexture::RG8_UNorm), 167},
    {sipName_RGB, static_cast<int>(QOpenGLTexture::RGB), 162},
    {sipName_RGB10A2, static_cast<int>(QOpenGLTexture::RGB10A2), 167},
    {sipName_RGB16F, static_cast<int>(QOpenGLTexture::RGB16F), 167},
    {sipName_RGB16I, static_cast<int>(QOpenGLTexture::RGB16I), 167},
    {sipName_RGB16U, static_cast<int>(QOpenGLTexture::RGB16U), 167},
    {sipName_RGB16_SNorm, static_cast<int>(QOpenGLTexture::RGB16_SNorm), 167},
    {sipName_RGB16_UNorm, static_cast<int>(QOpenGLTexture::RGB16_UNorm), 167},
    {sipName_RGB32F, static_cast<int>(QOpenGLTexture::RGB32F), 167},
    {sipName_RGB32I, static_cast<int>(QOpenGLTexture::RGB32I), 167},
    {sipName_RGB32U, static_cast<int>(QOpenGLTexture::RGB32U), 167},
    {sipName_RGB5A1, static_cast<int>(QOpenGLTexture::RGB5A1), 167},
    {sipName_RGB8I, static_cast<int>(QOpenGLTexture::RGB8I), 167},
    {sipName_RGB8U, static_cast<int>(QOpenGLTexture::RGB8U), 167},
    {sipName_RGB8_ETC1, static_cast<int>(QOpenGLTexture::RGB8_ETC1), 167},
    {sipName_RGB8_ETC2, static_cast<int>(QOpenGLTexture::RGB8_ETC2), 167},
    {sipName_RGB8_PunchThrough_Alpha1_ETC2, static_cast<int>(QOpenGLTexture::RGB8_PunchThrough_Alpha1_ETC2), 167},
    {sipName_RGB8_SNorm, static_cast<int>(QOpenGLTexture::RGB8_SNorm), 167},
    {sipName_RGB8_UNorm, static_cast<int>(QOpenGLTexture::RGB8_UNorm), 167},
    {sipName_RGB9E5, static_cast<int>(QOpenGLTexture::RGB9E5), 167},
    {sipName_RGBA, static_cast<int>(QOpenGLTexture::RGBA), 162},
    {sipName_RGBA16F, static_cast<int>(QOpenGLTexture::RGBA16F), 167},
    {sipName_RGBA16I, static_cast<int>(QOpenGLTexture::RGBA16I), 167},
    {sipName_RGBA16U, static_cast<int>(QOpenGLTexture::RGBA16U), 167},
    {sipName_RGBA16_SNorm, static_cast<int>(QOpenGLTexture::RGBA16_SNorm), 167},
    {sipName_RGBA16_UNorm, static_cast<int>(QOpenGLTexture::RGBA16_UNorm), 167},
    {sipName_RGBA32F, static_cast<int>(QOpenGLTexture::RGBA32F), 167},
    {sipName_RGBA32I, static_cast<int>(QOpenGLTexture::RGBA32I), 167},
    {sipName_RGBA32U, static_cast<int>(QOpenGLTexture::RGBA32U), 167},
    {sipName_RGBA4, static_cast<int>(QOpenGLTexture::RGBA4), 167},
    {sipName_RGBA8I, static_cast<int>(QOpenGLTexture::RGBA8I), 167},
    {sipName_RGBA8U, static_cast<int>(QOpenGLTexture::RGBA8U), 167},
    {sipName_RGBA8_ETC2_EAC, static_cast<int>(QOpenGLTexture::RGBA8_ETC2_EAC), 167},
    {sipName_RGBA8_SNorm, static_cast<int>(QOpenGLTexture::RGBA8_SNorm), 167},
    {sipName_RGBA8_UNorm, static_cast<int>(QOpenGLTexture::RGBA8_UNorm), 167},
    {sipName_RGBAFormat, static_cast<int>(QOpenGLTexture::RGBAFormat), 167},
    {sipName_RGBA_DXT1, static_cast<int>(QOpenGLTexture::RGBA_DXT1), 167},
    {sipName_RGBA_DXT3, static_cast<int>(QOpenGLTexture::RGBA_DXT3), 167},
    {sipName_RGBA_DXT5, static_cast<int>(QOpenGLTexture::RGBA_DXT5), 167},
    {sipName_RGBA_Integer, static_cast<int>(QOpenGLTexture::RGBA_Integer), 162},
    {sipName_RGBFormat, static_cast<int>(QOpenGLTexture::RGBFormat), 167},
    {sipName_RGB_BP_SIGNED_FLOAT, static_cast<int>(QOpenGLTexture::RGB_BP_SIGNED_FLOAT), 167},
    {sipName_RGB_BP_UNSIGNED_FLOAT, static_cast<int>(QOpenGLTexture::RGB_BP_UNSIGNED_FLOAT), 167},
    {sipName_RGB_BP_UNorm, static_cast<int>(QOpenGLTexture::RGB_BP_UNorm), 167},
    {sipName_RGB_DXT1, static_cast<int>(QOpenGLTexture::RGB_DXT1), 167},
    {sipName_RGB_Integer, static_cast<int>(QOpenGLTexture::RGB_Integer), 162},
    {sipName_RG_ATI2N_SNorm, static_cast<int>(QOpenGLTexture::RG_ATI2N_SNorm), 167},
    {sipName_RG_ATI2N_UNorm, static_cast<int>(QOpenGLTexture::RG_ATI2N_UNorm), 167},
    {sipName_RG_Integer, static_cast<int>(QOpenGLTexture::RG_Integer), 162},
    {sipName_R_ATI1N_SNorm, static_cast<int>(QOpenGLTexture::R_ATI1N_SNorm), 167},
    {sipName_R_ATI1N_UNorm, static_cast<int>(QOpenGLTexture::R_ATI1N_UNorm), 167},
    {sipName_Red, static_cast<int>(QOpenGLTexture::Red), 162},
    {sipName_RedValue, static_cast<int>(QOpenGLTexture::RedValue), 165},
    {sipName_Red_Integer, static_cast<int>(QOpenGLTexture::Red_Integer), 162},
    {sipName_Repeat, static_cast<int>(QOpenGLTexture::Repeat), 169},
    {sipName_ResetTextureUnit, static_cast<int>(QOpenGLTexture::ResetTextureUnit), 168},
    {sipName_S8, static_cast<int>(QOpenGLTexture::S8), 167},
    {sipName_SRGB8, static_cast<int>(QOpenGLTexture::SRGB8), 167},
    {sipName_SRGB8_Alpha8, static_cast<int>(QOpenGLTexture::SRGB8_Alpha8), 167},
    {sipName_SRGB8_Alpha8_ETC2_EAC, static_cast<int>(QOpenGLTexture::SRGB8_Alpha8_ETC2_EAC), 167},
    {sipName_SRGB8_ETC2, static_cast<int>(QOpenGLTexture::SRGB8_ETC2), 167},
    {sipName_SRGB8_PunchThrough_Alpha1_ETC2, static_cast<int>(QOpenGLTexture::SRGB8_PunchThrough_Alpha1_ETC2), 167},
    {sipName_SRGB_Alpha_DXT1, static_cast<int>(QOpenGLTexture::SRGB_Alpha_DXT1), 167},
    {sipName_SRGB_Alpha_DXT3, static_cast<int>(QOpenGLTexture::SRGB_Alpha_DXT3), 167},
    {sipName_SRGB_Alpha_DXT5, static_cast<int>(QOpenGLTexture::SRGB_Alpha_DXT5), 167},
    {sipName_SRGB_BP_UNorm, static_cast<int>(QOpenGLTexture::SRGB_BP_UNorm), 167},
    {sipName_SRGB_DXT1, static_cast<int>(QOpenGLTexture::SRGB_DXT1), 167},
    {sipName_Stencil, static_cast<int>(QOpenGLTexture::Stencil), 162},
    {sipName_StencilMode, static_cast<int>(QOpenGLTexture::StencilMode), 157},
    {sipName_StencilTexturing, static_cast<int>(QOpenGLTexture::StencilTexturing), 158},
    {sipName_Swizzle, static_cast<int>(QOpenGLTexture::Swizzle), 158},
    {sipName_SwizzleAlpha, static_cast<int>(QOpenGLTexture::SwizzleAlpha), 164},
    {sipName_SwizzleBlue, static_cast<int>(QOpenGLTexture::SwizzleBlue), 164},
    {sipName_SwizzleGreen, static_cast<int>(QOpenGLTexture::SwizzleGreen), 164},
    {sipName_SwizzleRed, static_cast<int>(QOpenGLTexture::SwizzleRed), 164},
    {sipName_Target1D, static_cast<int>(QOpenGLTexture::Target1D), 166},
    {sipName_Target1DArray, static_cast<int>(QOpenGLTexture::Target1DArray), 166},
    {sipName_Target2D, static_cast<int>(QOpenGLTexture::Target2D), 166},
    {sipName_Target2DArray, static_cast<int>(QOpenGLTexture::Target2DArray), 166},
    {sipName_Target2DMultisample, static_cast<int>(QOpenGLTexture::Target2DMultisample), 166},
    {sipName_Target2DMultisampleArray, static_cast<int>(QOpenGLTexture::Target2DMultisampleArray), 166},
    {sipName_Target3D, static_cast<int>(QOpenGLTexture::Target3D), 166},
    {sipName_TargetBuffer, static_cast<int>(QOpenGLTexture::TargetBuffer), 166},
    {sipName_TargetCubeMap, static_cast<int>(QOpenGLTexture::TargetCubeMap), 166},
    {sipName_TargetCubeMapArray, static_cast<int>(QOpenGLTexture::TargetCubeMapArray), 166},
    {sipName_TargetRectangle, static_cast<int>(QOpenGLTexture::TargetRectangle), 166},
    {sipName_Texture1D, static_cast<int>(QOpenGLTexture::Texture1D), 158},
    {sipName_Texture3D, static_cast<int>(QOpenGLTexture::Texture3D), 158},
    {sipName_TextureArrays, static_cast<int>(QOpenGLTexture::TextureArrays), 158},
    {sipName_TextureBuffer, static_cast<int>(QOpenGLTexture::TextureBuffer), 158},
    {sipName_TextureComparisonOperators, static_cast<int>(QOpenGLTexture::TextureComparisonOperators), 158},
    {sipName_TextureCubeMapArrays, static_cast<int>(QOpenGLTexture::TextureCubeMapArrays), 158},
    {sipName_TextureMipMapLevel, static_cast<int>(QOpenGLTexture::TextureMipMapLevel), 158},
    {sipName_TextureMultisample, static_cast<int>(QOpenGLTexture::TextureMultisample), 158},
    {sipName_TextureRectangle, static_cast<int>(QOpenGLTexture::TextureRectangle), 158},
    {sipName_UInt16, static_cast<int>(QOpenGLTexture::UInt16), 163},
    {sipName_UInt16_R5G6B5, static_cast<int>(QOpenGLTexture::UInt16_R5G6B5), 163},
    {sipName_UInt16_R5G6B5_Rev, static_cast<int>(QOpenGLTexture::UInt16_R5G6B5_Rev), 163},
    {sipName_UInt16_RGB5A1, static_cast<int>(QOpenGLTexture::UInt16_RGB5A1), 163},
    {sipName_UInt16_RGB5A1_Rev, static_cast<int>(QOpenGLTexture::UInt16_RGB5A1_Rev), 163},
    {sipName_UInt16_RGBA4, static_cast<int>(QOpenGLTexture::UInt16_RGBA4), 163},
    {sipName_UInt16_RGBA4_Rev, static_cast<int>(QOpenGLTexture::UInt16_RGBA4_Rev), 163},
    {sipName_UInt32, static_cast<int>(QOpenGLTexture::UInt32), 163},
    {sipName_UInt32_D24S8, static_cast<int>(QOpenGLTexture::UInt32_D24S8), 163},
    {sipName_UInt32_RG11B10F, static_cast<int>(QOpenGLTexture::UInt32_RG11B10F), 163},
    {sipName_UInt32_RGB10A2, static_cast<int>(QOpenGLTexture::UInt32_RGB10A2), 163},
    {sipName_UInt32_RGB10A2_Rev, static_cast<int>(QOpenGLTexture::UInt32_RGB10A2_Rev), 163},
    {sipName_UInt32_RGB9_E5, static_cast<int>(QOpenGLTexture::UInt32_RGB9_E5), 163},
    {sipName_UInt32_RGBA8, static_cast<int>(QOpenGLTexture::UInt32_RGBA8), 163},
    {sipName_UInt32_RGBA8_Rev, static_cast<int>(QOpenGLTexture::UInt32_RGBA8_Rev), 163},
    {sipName_UInt8, static_cast<int>(QOpenGLTexture::UInt8), 163},
    {sipName_UInt8_RG3B2, static_cast<int>(QOpenGLTexture::UInt8_RG3B2), 163},
    {sipName_UInt8_RG3B2_Rev, static_cast<int>(QOpenGLTexture::UInt8_RG3B2_Rev), 163},
    {sipName_ZeroValue, static_cast<int>(QOpenGLTexture::ZeroValue), 165},
};

PyDoc_STRVAR(doc_QOpenGLTexture, "\1QOpenGLTexture(QOpenGLTexture.Target)\n"
    "QOpenGLTexture(QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = QOpenGLTexture.GenerateMipMaps)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOpenGLTexture = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLTexture,
        {0}
    },
    {
        sipNameNr_QOpenGLTexture,
        {0, 0, 1},
        69, methods_QOpenGLTexture,
        226, enummembers_QOpenGLTexture,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLTexture,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QOpenGLTexture,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLTexture,
    0,
    0,
    0,
    release_QOpenGLTexture,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
