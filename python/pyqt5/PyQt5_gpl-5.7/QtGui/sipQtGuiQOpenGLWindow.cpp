/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qopenglwindow.sip"
#include <qopenglwindow.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 46 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 413 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 386 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 768 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 293 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 711 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 253 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 205 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 351 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 459 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 448 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 372 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 400 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 144 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 147 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 150 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 153 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 156 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 159 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 162 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 52 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 165 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQOpenGLWindow.cpp"


class sipQOpenGLWindow : public QOpenGLWindow
{
public:
    sipQOpenGLWindow(QOpenGLWindow::UpdateBehavior,QWindow*);
    sipQOpenGLWindow(QOpenGLContext*,QOpenGLWindow::UpdateBehavior,QWindow*);
    virtual ~sipQOpenGLWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QPaintEngine* paintEngine() const;
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void tabletEvent(QTabletEvent*);
    void touchEvent(QTouchEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void moveEvent(QMoveEvent*);
    QObject* focusObject() const;
    QSize size() const;
    QSurfaceFormat format() const;
    QSurface::SurfaceType surfaceType() const;
    bool event(QEvent*);
    void exposeEvent(QExposeEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void resizeEvent(QResizeEvent*);
    void paintEvent(QPaintEvent*);
    void paintOverGL();
    void paintUnderGL();
    void paintGL();
    void resizeGL(int,int);
    void initializeGL();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLWindow(const sipQOpenGLWindow &);
    sipQOpenGLWindow &operator = (const sipQOpenGLWindow &);

    char sipPyMethods[35];
};

sipQOpenGLWindow::sipQOpenGLWindow(QOpenGLWindow::UpdateBehavior a0,QWindow*a1): QOpenGLWindow(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLWindow::sipQOpenGLWindow(QOpenGLContext*a0,QOpenGLWindow::UpdateBehavior a1,QWindow*a2): QOpenGLWindow(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLWindow::~sipQOpenGLWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQOpenGLWindow::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLWindow);

    return QOpenGLWindow::metaObject();
}

int sipQOpenGLWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QOpenGLWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLWindow,_c,_id,_a);

    return _id;
}

void *sipQOpenGLWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLWindow, _clname, &sipCpp) ? sipCpp : QOpenGLWindow::qt_metacast(_clname));
}

QPaintEngine* sipQOpenGLWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QOpenGLWindow,sipName_paintEngine);

    if (!sipMeth)
        return 0;

    extern QPaintEngine* sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_29(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QOpenGLWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QOpenGLWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQOpenGLWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QOpenGLWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_0(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    sipVH_QtGui_1(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_2(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_4(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_4(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_5(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_6(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_7(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_7(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_8(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQOpenGLWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_focusObject);

    if (!sipMeth)
        return QOpenGLWindow::focusObject();

    extern QObject* sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_11(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQOpenGLWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QOpenGLWindow::size();

    extern QSize sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_12(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurfaceFormat sipQOpenGLWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_format);

    if (!sipMeth)
        return QOpenGLWindow::format();

    extern QSurfaceFormat sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_13(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurface::SurfaceType sipQOpenGLWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_surfaceType);

    if (!sipMeth)
        return QOpenGLWindow::surfaceType();

    extern QSurface::SurfaceType sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_14(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQOpenGLWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QOpenGLWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::exposeEvent(QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_exposeEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QExposeEvent*);

    sipVH_QtGui_10(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQOpenGLWindow::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QOpenGLWindow::metric(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_28(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_9(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_52(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::paintOverGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_paintOverGL);

    if (!sipMeth)
    {
        QOpenGLWindow::paintOverGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::paintUnderGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_paintUnderGL);

    if (!sipMeth)
    {
        QOpenGLWindow::paintUnderGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::paintGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_paintGL);

    if (!sipMeth)
    {
        QOpenGLWindow::paintGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::resizeGL(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_resizeGL);

    if (!sipMeth)
    {
        QOpenGLWindow::resizeGL(a0,a1);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_17(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLWindow::initializeGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_initializeGL);

    if (!sipMeth)
    {
        QOpenGLWindow::initializeGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QOpenGLWindow_updateBehavior, "updateBehavior(self) -> QOpenGLWindow.UpdateBehavior");

extern "C" {static PyObject *meth_QOpenGLWindow_updateBehavior(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_updateBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QOpenGLWindow::UpdateBehavior sipRes;

            sipRes = sipCpp->updateBehavior();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLWindow_UpdateBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_updateBehavior, doc_QOpenGLWindow_updateBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QOpenGLWindow_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_isValid, doc_QOpenGLWindow_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_makeCurrent, "makeCurrent(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->makeCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_makeCurrent, doc_QOpenGLWindow_makeCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_doneCurrent, "doneCurrent(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_doneCurrent, doc_QOpenGLWindow_doneCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_context, "context(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLWindow_context(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QOpenGLContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_context, doc_QOpenGLWindow_context);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_defaultFramebufferObject, "defaultFramebufferObject(self) -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_defaultFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_defaultFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            GLuint sipRes;

            sipRes = sipCpp->defaultFramebufferObject();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_defaultFramebufferObject, doc_QOpenGLWindow_defaultFramebufferObject);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_grabFramebuffer, "grabFramebuffer(self) -> QImage");

extern "C" {static PyObject *meth_QOpenGLWindow_grabFramebuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_grabFramebuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->grabFramebuffer());

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_grabFramebuffer, doc_QOpenGLWindow_grabFramebuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_shareContext, "shareContext(self) -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLWindow_shareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_shareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QOpenGLContext*sipRes;

            sipRes = sipCpp->shareContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_shareContext, doc_QOpenGLWindow_shareContext);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_initializeGL, "initializeGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_initializeGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_initializeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QOpenGLWindow::initializeGL() : sipCpp->initializeGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_initializeGL, doc_QOpenGLWindow_initializeGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_resizeGL, "resizeGL(self, int, int)");

extern "C" {static PyObject *meth_QOpenGLWindow_resizeGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_resizeGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QOpenGLWindow, &sipCpp, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QOpenGLWindow::resizeGL(a0,a1) : sipCpp->resizeGL(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_resizeGL, doc_QOpenGLWindow_resizeGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintGL, "paintGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QOpenGLWindow::paintGL() : sipCpp->paintGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintGL, doc_QOpenGLWindow_paintGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintUnderGL, "paintUnderGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintUnderGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintUnderGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QOpenGLWindow::paintUnderGL() : sipCpp->paintUnderGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintUnderGL, doc_QOpenGLWindow_paintUnderGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintOverGL, "paintOverGL(self)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintOverGL(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintOverGL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QOpenGLWindow::paintOverGL() : sipCpp->paintOverGL());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintOverGL, doc_QOpenGLWindow_paintOverGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QOpenGLWindow::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintEvent, doc_QOpenGLWindow_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp->QOpenGLWindow::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_resizeEvent, doc_QOpenGLWindow_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_metric(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QOpenGLWindow::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_metric, doc_QOpenGLWindow_metric);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QOpenGLWindow(void *, const sipTypeDef *);}
static void *cast_QOpenGLWindow(void *sipCppV, const sipTypeDef *targetType)
{
    QOpenGLWindow *sipCpp = reinterpret_cast<QOpenGLWindow *>(sipCppV);

    if (targetType == sipType_QSurface)
        return static_cast<QSurface *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLWindow(void *, int);}
static void release_QOpenGLWindow(void *sipCppV,int)
{
    QOpenGLWindow *sipCpp = reinterpret_cast<QOpenGLWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLWindow(sipSimpleWrapper *);}
static void dealloc_QOpenGLWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQOpenGLWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QOpenGLWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLWindow *sipCpp = 0;

    {
        QOpenGLWindow::UpdateBehavior a0 = QOpenGLWindow::NoPartialUpdate;
        QWindow* a1 = 0;

        static const char *sipKwdList[] = {
            sipName_updateBehavior,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|EJH", sipType_QOpenGLWindow_UpdateBehavior, &a0, sipType_QWindow, &a1, sipOwner))
        {
            sipCpp = new sipQOpenGLWindow(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QOpenGLContext* a0;
        QOpenGLWindow::UpdateBehavior a1 = QOpenGLWindow::NoPartialUpdate;
        QWindow* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_updateBehavior,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|EJH", sipType_QOpenGLContext, &a0, sipType_QOpenGLWindow_UpdateBehavior, &a1, sipType_QWindow, &a2, sipOwner))
        {
            sipCpp = new sipQOpenGLWindow(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLWindow[] = {{190, 255, 1}};


static PyMethodDef methods_QOpenGLWindow[] = {
    {SIP_MLNAME_CAST(sipName_context), meth_QOpenGLWindow_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_context)},
    {SIP_MLNAME_CAST(sipName_defaultFramebufferObject), meth_QOpenGLWindow_defaultFramebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_defaultFramebufferObject)},
    {SIP_MLNAME_CAST(sipName_doneCurrent), meth_QOpenGLWindow_doneCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_doneCurrent)},
    {SIP_MLNAME_CAST(sipName_grabFramebuffer), meth_QOpenGLWindow_grabFramebuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_grabFramebuffer)},
    {SIP_MLNAME_CAST(sipName_initializeGL), meth_QOpenGLWindow_initializeGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_initializeGL)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOpenGLWindow_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_isValid)},
    {SIP_MLNAME_CAST(sipName_makeCurrent), meth_QOpenGLWindow_makeCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_makeCurrent)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QOpenGLWindow_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_metric)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QOpenGLWindow_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paintGL), meth_QOpenGLWindow_paintGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintGL)},
    {SIP_MLNAME_CAST(sipName_paintOverGL), meth_QOpenGLWindow_paintOverGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintOverGL)},
    {SIP_MLNAME_CAST(sipName_paintUnderGL), meth_QOpenGLWindow_paintUnderGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintUnderGL)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QOpenGLWindow_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeGL), meth_QOpenGLWindow_resizeGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_resizeGL)},
    {SIP_MLNAME_CAST(sipName_shareContext), meth_QOpenGLWindow_shareContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_shareContext)},
    {SIP_MLNAME_CAST(sipName_updateBehavior), meth_QOpenGLWindow_updateBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_updateBehavior)}
};

static sipEnumMemberDef enummembers_QOpenGLWindow[] = {
    {sipName_NoPartialUpdate, static_cast<int>(QOpenGLWindow::NoPartialUpdate), 176},
    {sipName_PartialUpdateBlend, static_cast<int>(QOpenGLWindow::PartialUpdateBlend), 176},
    {sipName_PartialUpdateBlit, static_cast<int>(QOpenGLWindow::PartialUpdateBlit), 176},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLWindow[] = {
    {"frameSwapped()", "\1frameSwapped(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QOpenGLWindow, "\1QOpenGLWindow(updateBehavior: QOpenGLWindow.UpdateBehavior = QOpenGLWindow.NoPartialUpdate, parent: QWindow = None)\n"
    "QOpenGLWindow(QOpenGLContext, updateBehavior: QOpenGLWindow.UpdateBehavior = QOpenGLWindow.NoPartialUpdate, parent: QWindow = None)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOpenGLWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLWindow,
        {0}
    },
    {
        sipNameNr_QOpenGLWindow,
        {0, 0, 1},
        16, methods_QOpenGLWindow,
        3, enummembers_QOpenGLWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLWindow,
    -1,
    -1,
    supers_QOpenGLWindow,
    0,
    init_type_QOpenGLWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLWindow,
    0,
    0,
    0,
    release_QOpenGLWindow,
    cast_QOpenGLWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QOpenGLWindow::staticMetaObject,
    0,
    signals_QOpenGLWindow,
    0
};
