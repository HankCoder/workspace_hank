/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"

#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 97 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 184 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQScreen.cpp"


PyDoc_STRVAR(doc_QScreen_name, "name(self) -> str");

extern "C" {static PyObject *meth_QScreen_name(PyObject *, PyObject *);}
static PyObject *meth_QScreen_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_name, doc_QScreen_name);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QScreen_depth(PyObject *, PyObject *);}
static PyObject *meth_QScreen_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_depth, doc_QScreen_depth);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_size(PyObject *, PyObject *);}
static PyObject *meth_QScreen_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_size, doc_QScreen_size);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_geometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_geometry, doc_QScreen_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_physicalSize, "physicalSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QScreen_physicalSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QSizeF*sipRes;

            sipRes = new QSizeF(sipCpp->physicalSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalSize, doc_QScreen_physicalSize);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_physicalDotsPerInchX, "physicalDotsPerInchX(self) -> float");

extern "C" {static PyObject *meth_QScreen_physicalDotsPerInchX(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalDotsPerInchX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->physicalDotsPerInchX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalDotsPerInchX, doc_QScreen_physicalDotsPerInchX);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_physicalDotsPerInchY, "physicalDotsPerInchY(self) -> float");

extern "C" {static PyObject *meth_QScreen_physicalDotsPerInchY(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalDotsPerInchY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->physicalDotsPerInchY();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalDotsPerInchY, doc_QScreen_physicalDotsPerInchY);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_physicalDotsPerInch, "physicalDotsPerInch(self) -> float");

extern "C" {static PyObject *meth_QScreen_physicalDotsPerInch(PyObject *, PyObject *);}
static PyObject *meth_QScreen_physicalDotsPerInch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->physicalDotsPerInch();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_physicalDotsPerInch, doc_QScreen_physicalDotsPerInch);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_logicalDotsPerInchX, "logicalDotsPerInchX(self) -> float");

extern "C" {static PyObject *meth_QScreen_logicalDotsPerInchX(PyObject *, PyObject *);}
static PyObject *meth_QScreen_logicalDotsPerInchX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->logicalDotsPerInchX();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_logicalDotsPerInchX, doc_QScreen_logicalDotsPerInchX);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_logicalDotsPerInchY, "logicalDotsPerInchY(self) -> float");

extern "C" {static PyObject *meth_QScreen_logicalDotsPerInchY(PyObject *, PyObject *);}
static PyObject *meth_QScreen_logicalDotsPerInchY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->logicalDotsPerInchY();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_logicalDotsPerInchY, doc_QScreen_logicalDotsPerInchY);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_logicalDotsPerInch, "logicalDotsPerInch(self) -> float");

extern "C" {static PyObject *meth_QScreen_logicalDotsPerInch(PyObject *, PyObject *);}
static PyObject *meth_QScreen_logicalDotsPerInch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->logicalDotsPerInch();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_logicalDotsPerInch, doc_QScreen_logicalDotsPerInch);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_availableSize, "availableSize(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_availableSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->availableSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableSize, doc_QScreen_availableSize);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_availableGeometry, "availableGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_availableGeometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->availableGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableGeometry, doc_QScreen_availableGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_virtualSiblings, "virtualSiblings(self) -> List[QScreen]");

extern "C" {static PyObject *meth_QScreen_virtualSiblings(PyObject *, PyObject *);}
static PyObject *meth_QScreen_virtualSiblings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QList<QScreen*>*sipRes;

            sipRes = new QList<QScreen*>(sipCpp->virtualSiblings());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QScreen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_virtualSiblings, doc_QScreen_virtualSiblings);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_virtualSize, "virtualSize(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_virtualSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_virtualSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->virtualSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_virtualSize, doc_QScreen_virtualSize);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_virtualGeometry, "virtualGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_virtualGeometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_virtualGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->virtualGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_virtualGeometry, doc_QScreen_virtualGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_availableVirtualSize, "availableVirtualSize(self) -> QSize");

extern "C" {static PyObject *meth_QScreen_availableVirtualSize(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableVirtualSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->availableVirtualSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableVirtualSize, doc_QScreen_availableVirtualSize);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_availableVirtualGeometry, "availableVirtualGeometry(self) -> QRect");

extern "C" {static PyObject *meth_QScreen_availableVirtualGeometry(PyObject *, PyObject *);}
static PyObject *meth_QScreen_availableVirtualGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->availableVirtualGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_availableVirtualGeometry, doc_QScreen_availableVirtualGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_nativeOrientation, "nativeOrientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QScreen_nativeOrientation(PyObject *, PyObject *);}
static PyObject *meth_QScreen_nativeOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->nativeOrientation();

            return sipConvertFromEnum(sipRes,sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_nativeOrientation, doc_QScreen_nativeOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_primaryOrientation, "primaryOrientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QScreen_primaryOrientation(PyObject *, PyObject *);}
static PyObject *meth_QScreen_primaryOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->primaryOrientation();

            return sipConvertFromEnum(sipRes,sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_primaryOrientation, doc_QScreen_primaryOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_orientation, "orientation(self) -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QScreen_orientation(PyObject *, PyObject *);}
static PyObject *meth_QScreen_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(sipRes,sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_orientation, doc_QScreen_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_orientationUpdateMask, "orientationUpdateMask(self) -> Qt.ScreenOrientations");

extern "C" {static PyObject *meth_QScreen_orientationUpdateMask(PyObject *, PyObject *);}
static PyObject *meth_QScreen_orientationUpdateMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            Qt::ScreenOrientations*sipRes;

            sipRes = new Qt::ScreenOrientations(sipCpp->orientationUpdateMask());

            return sipConvertFromNewType(sipRes,sipType_Qt_ScreenOrientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_orientationUpdateMask, doc_QScreen_orientationUpdateMask);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_setOrientationUpdateMask, "setOrientationUpdateMask(self, Union[Qt.ScreenOrientations, Qt.ScreenOrientation])");

extern "C" {static PyObject *meth_QScreen_setOrientationUpdateMask(PyObject *, PyObject *);}
static PyObject *meth_QScreen_setOrientationUpdateMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ScreenOrientations* a0;
        int a0State = 0;
        QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientations, &a0, &a0State))
        {
            sipCpp->setOrientationUpdateMask(*a0);
            sipReleaseType(a0,sipType_Qt_ScreenOrientations,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_setOrientationUpdateMask, doc_QScreen_setOrientationUpdateMask);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_angleBetween, "angleBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation) -> int");

extern "C" {static PyObject *meth_QScreen_angleBetween(PyObject *, PyObject *);}
static PyObject *meth_QScreen_angleBetween(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ScreenOrientation a0;
        Qt::ScreenOrientation a1;
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0, sipType_Qt_ScreenOrientation, &a1))
        {
            int sipRes;

            sipRes = sipCpp->angleBetween(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_angleBetween, doc_QScreen_angleBetween);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_transformBetween, "transformBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation, QRect) -> QTransform");

extern "C" {static PyObject *meth_QScreen_transformBetween(PyObject *, PyObject *);}
static PyObject *meth_QScreen_transformBetween(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ScreenOrientation a0;
        Qt::ScreenOrientation a1;
        const QRect* a2;
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ9", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0, sipType_Qt_ScreenOrientation, &a1, sipType_QRect, &a2))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->transformBetween(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_transformBetween, doc_QScreen_transformBetween);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_mapBetween, "mapBetween(self, Qt.ScreenOrientation, Qt.ScreenOrientation, QRect) -> QRect");

extern "C" {static PyObject *meth_QScreen_mapBetween(PyObject *, PyObject *);}
static PyObject *meth_QScreen_mapBetween(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ScreenOrientation a0;
        Qt::ScreenOrientation a1;
        const QRect* a2;
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ9", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0, sipType_Qt_ScreenOrientation, &a1, sipType_QRect, &a2))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->mapBetween(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_mapBetween, doc_QScreen_mapBetween);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_isPortrait, "isPortrait(self, Qt.ScreenOrientation) -> bool");

extern "C" {static PyObject *meth_QScreen_isPortrait(PyObject *, PyObject *);}
static PyObject *meth_QScreen_isPortrait(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ScreenOrientation a0;
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isPortrait(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_isPortrait, doc_QScreen_isPortrait);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_isLandscape, "isLandscape(self, Qt.ScreenOrientation) -> bool");

extern "C" {static PyObject *meth_QScreen_isLandscape(PyObject *, PyObject *);}
static PyObject *meth_QScreen_isLandscape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ScreenOrientation a0;
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScreen, &sipCpp, sipType_Qt_ScreenOrientation, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isLandscape(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_isLandscape, doc_QScreen_isLandscape);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_grabWindow, "grabWindow(self, sip.voidptr, x: int = 0, y: int = 0, width: int = -1, height: int = -1) -> QPixmap");

extern "C" {static PyObject *meth_QScreen_grabWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScreen_grabWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId* a0;
        int a0State = 0;
        int a1 = 0;
        int a2 = 0;
        int a3 = -1;
        int a4 = -1;
        QScreen *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iiii", &sipSelf, sipType_QScreen, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2, &a3, &a4))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap(sipCpp->grabWindow(*a0,a1,a2,a3,a4));
            sipReleaseType(a0,sipType_quintptr,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_grabWindow, doc_QScreen_grabWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_refreshRate, "refreshRate(self) -> float");

extern "C" {static PyObject *meth_QScreen_refreshRate(PyObject *, PyObject *);}
static PyObject *meth_QScreen_refreshRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->refreshRate();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_refreshRate, doc_QScreen_refreshRate);

    return NULL;
}


PyDoc_STRVAR(doc_QScreen_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QScreen_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QScreen_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScreen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScreen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScreen, sipName_devicePixelRatio, doc_QScreen_devicePixelRatio);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScreen(void *, int);}
static void release_QScreen(void *sipCppV,int)
{
    QScreen *sipCpp = reinterpret_cast<QScreen *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QScreen(sipSimpleWrapper *);}
static void dealloc_QScreen(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QScreen(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScreen[] = {{165, 0, 1}};


static PyMethodDef methods_QScreen[] = {
    {SIP_MLNAME_CAST(sipName_angleBetween), meth_QScreen_angleBetween, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_angleBetween)},
    {SIP_MLNAME_CAST(sipName_availableGeometry), meth_QScreen_availableGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableGeometry)},
    {SIP_MLNAME_CAST(sipName_availableSize), meth_QScreen_availableSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableSize)},
    {SIP_MLNAME_CAST(sipName_availableVirtualGeometry), meth_QScreen_availableVirtualGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableVirtualGeometry)},
    {SIP_MLNAME_CAST(sipName_availableVirtualSize), meth_QScreen_availableVirtualSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_availableVirtualSize)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QScreen_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_depth)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QScreen_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QScreen_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_geometry)},
    {SIP_MLNAME_CAST(sipName_grabWindow), (PyCFunction)meth_QScreen_grabWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScreen_grabWindow)},
    {SIP_MLNAME_CAST(sipName_isLandscape), meth_QScreen_isLandscape, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_isLandscape)},
    {SIP_MLNAME_CAST(sipName_isPortrait), meth_QScreen_isPortrait, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_isPortrait)},
    {SIP_MLNAME_CAST(sipName_logicalDotsPerInch), meth_QScreen_logicalDotsPerInch, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_logicalDotsPerInch)},
    {SIP_MLNAME_CAST(sipName_logicalDotsPerInchX), meth_QScreen_logicalDotsPerInchX, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_logicalDotsPerInchX)},
    {SIP_MLNAME_CAST(sipName_logicalDotsPerInchY), meth_QScreen_logicalDotsPerInchY, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_logicalDotsPerInchY)},
    {SIP_MLNAME_CAST(sipName_mapBetween), meth_QScreen_mapBetween, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_mapBetween)},
    {SIP_MLNAME_CAST(sipName_name), meth_QScreen_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_name)},
    {SIP_MLNAME_CAST(sipName_nativeOrientation), meth_QScreen_nativeOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_nativeOrientation)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QScreen_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_orientation)},
    {SIP_MLNAME_CAST(sipName_orientationUpdateMask), meth_QScreen_orientationUpdateMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_orientationUpdateMask)},
    {SIP_MLNAME_CAST(sipName_physicalDotsPerInch), meth_QScreen_physicalDotsPerInch, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalDotsPerInch)},
    {SIP_MLNAME_CAST(sipName_physicalDotsPerInchX), meth_QScreen_physicalDotsPerInchX, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalDotsPerInchX)},
    {SIP_MLNAME_CAST(sipName_physicalDotsPerInchY), meth_QScreen_physicalDotsPerInchY, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalDotsPerInchY)},
    {SIP_MLNAME_CAST(sipName_physicalSize), meth_QScreen_physicalSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_physicalSize)},
    {SIP_MLNAME_CAST(sipName_primaryOrientation), meth_QScreen_primaryOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_primaryOrientation)},
    {SIP_MLNAME_CAST(sipName_refreshRate), meth_QScreen_refreshRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_refreshRate)},
    {SIP_MLNAME_CAST(sipName_setOrientationUpdateMask), meth_QScreen_setOrientationUpdateMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_setOrientationUpdateMask)},
    {SIP_MLNAME_CAST(sipName_size), meth_QScreen_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_size)},
    {SIP_MLNAME_CAST(sipName_transformBetween), meth_QScreen_transformBetween, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_transformBetween)},
    {SIP_MLNAME_CAST(sipName_virtualGeometry), meth_QScreen_virtualGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_virtualGeometry)},
    {SIP_MLNAME_CAST(sipName_virtualSiblings), meth_QScreen_virtualSiblings, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_virtualSiblings)},
    {SIP_MLNAME_CAST(sipName_virtualSize), meth_QScreen_virtualSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QScreen_virtualSize)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QScreen[] = {
    {"availableGeometryChanged(QRect)", "\1availableGeometryChanged(self, QRect)", 0, 0},
    {"virtualGeometryChanged(QRect)", "\1virtualGeometryChanged(self, QRect)", 0, 0},
    {"physicalSizeChanged(QSizeF)", "\1physicalSizeChanged(self, QSizeF)", 0, 0},
    {"refreshRateChanged(qreal)", "\1refreshRateChanged(self, float)", 0, 0},
    {"orientationChanged(Qt::ScreenOrientation)", "\1orientationChanged(self, Qt.ScreenOrientation)", 0, 0},
    {"primaryOrientationChanged(Qt::ScreenOrientation)", "\1primaryOrientationChanged(self, Qt.ScreenOrientation)", 0, 0},
    {"logicalDotsPerInchChanged(qreal)", "\1logicalDotsPerInchChanged(self, float)", 0, 0},
    {"physicalDotsPerInchChanged(qreal)", "\1physicalDotsPerInchChanged(self, float)", 0, 0},
    {"geometryChanged(QRect)", "\1geometryChanged(self, QRect)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtGui_QScreen = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QScreen,
        {0}
    },
    {
        sipNameNr_QScreen,
        {0, 0, 1},
        31, methods_QScreen,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QScreen,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScreen,
    0,
    0,
    0,
    release_QScreen,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QScreen::staticMetaObject,
    0,
    signals_QScreen,
    0
};
