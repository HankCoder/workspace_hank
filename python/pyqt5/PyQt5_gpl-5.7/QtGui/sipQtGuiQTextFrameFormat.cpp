/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 446 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 59 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 59 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 535 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 429 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 509 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 397 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 249 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 352 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpen.sip"
#include <qpen.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQTextFrameFormat.cpp"


PyDoc_STRVAR(doc_QTextFrameFormat_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextFrameFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_isValid, doc_QTextFrameFormat_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setPosition, "setPosition(self, QTextFrameFormat.Position)");

extern "C" {static PyObject *meth_QTextFrameFormat_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFrameFormat::Position a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextFrameFormat_Position, &a0))
        {
            sipCpp->setPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setPosition, doc_QTextFrameFormat_setPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_position, "position(self) -> QTextFrameFormat.Position");

extern "C" {static PyObject *meth_QTextFrameFormat_position(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            QTextFrameFormat::Position sipRes;

            sipRes = sipCpp->position();

            return sipConvertFromEnum(sipRes,sipType_QTextFrameFormat_Position);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_position, doc_QTextFrameFormat_position);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_border, "border(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_border(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_border(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->border();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_border, doc_QTextFrameFormat_border);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_margin, "margin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_margin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_margin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->margin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_margin, doc_QTextFrameFormat_margin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_padding, "padding(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_padding(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_padding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->padding();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_padding, doc_QTextFrameFormat_padding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setWidth, "setWidth(self, QTextLength)\n"
    "setWidth(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLength* a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextLength, &a0))
        {
            sipCpp->setWidth(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setWidth, doc_QTextFrameFormat_setWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_width, "width(self) -> QTextLength");

extern "C" {static PyObject *meth_QTextFrameFormat_width(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            QTextLength*sipRes;

            sipRes = new QTextLength(sipCpp->width());

            return sipConvertFromNewType(sipRes,sipType_QTextLength,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_width, doc_QTextFrameFormat_width);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_height, "height(self) -> QTextLength");

extern "C" {static PyObject *meth_QTextFrameFormat_height(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            QTextLength*sipRes;

            sipRes = new QTextLength(sipCpp->height());

            return sipConvertFromNewType(sipRes,sipType_QTextLength,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_height, doc_QTextFrameFormat_height);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBorder, "setBorder(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setBorder(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setBorder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBorder, doc_QTextFrameFormat_setBorder);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setMargin, "setMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setMargin, doc_QTextFrameFormat_setMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setPadding, "setPadding(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setPadding(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setPadding, doc_QTextFrameFormat_setPadding);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setHeight, "setHeight(self, float)\n"
    "setHeight(self, QTextLength)");

extern "C" {static PyObject *meth_QTextFrameFormat_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextLength* a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextLength, &a0))
        {
            sipCpp->setHeight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setHeight, doc_QTextFrameFormat_setHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setPageBreakPolicy, "setPageBreakPolicy(self, Union[QTextFormat.PageBreakFlags, QTextFormat.PageBreakFlag])");

extern "C" {static PyObject *meth_QTextFrameFormat_setPageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setPageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFormat::PageBreakFlags* a0;
        int a0State = 0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextFormat_PageBreakFlags, &a0, &a0State))
        {
            sipCpp->setPageBreakPolicy(*a0);
            sipReleaseType(a0,sipType_QTextFormat_PageBreakFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setPageBreakPolicy, doc_QTextFrameFormat_setPageBreakPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_pageBreakPolicy, "pageBreakPolicy(self) -> QTextFormat.PageBreakFlags");

extern "C" {static PyObject *meth_QTextFrameFormat_pageBreakPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_pageBreakPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            QTextFormat::PageBreakFlags*sipRes;

            sipRes = new QTextFormat::PageBreakFlags(sipCpp->pageBreakPolicy());

            return sipConvertFromNewType(sipRes,sipType_QTextFormat_PageBreakFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_pageBreakPolicy, doc_QTextFrameFormat_pageBreakPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBorderBrush, "setBorderBrush(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextFrameFormat_setBorderBrush(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBorderBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBorderBrush(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBorderBrush, doc_QTextFrameFormat_setBorderBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_borderBrush, "borderBrush(self) -> QBrush");

extern "C" {static PyObject *meth_QTextFrameFormat_borderBrush(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_borderBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->borderBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_borderBrush, doc_QTextFrameFormat_borderBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBorderStyle, "setBorderStyle(self, QTextFrameFormat.BorderStyle)");

extern "C" {static PyObject *meth_QTextFrameFormat_setBorderStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBorderStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextFrameFormat::BorderStyle a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextFrameFormat, &sipCpp, sipType_QTextFrameFormat_BorderStyle, &a0))
        {
            sipCpp->setBorderStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBorderStyle, doc_QTextFrameFormat_setBorderStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_borderStyle, "borderStyle(self) -> QTextFrameFormat.BorderStyle");

extern "C" {static PyObject *meth_QTextFrameFormat_borderStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_borderStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            QTextFrameFormat::BorderStyle sipRes;

            sipRes = sipCpp->borderStyle();

            return sipConvertFromEnum(sipRes,sipType_QTextFrameFormat_BorderStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_borderStyle, doc_QTextFrameFormat_borderStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_topMargin, "topMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_topMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_topMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->topMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_topMargin, doc_QTextFrameFormat_topMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_bottomMargin, "bottomMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_bottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_bottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->bottomMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_bottomMargin, doc_QTextFrameFormat_bottomMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_leftMargin, "leftMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_leftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_leftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->leftMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_leftMargin, doc_QTextFrameFormat_leftMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_rightMargin, "rightMargin(self) -> float");

extern "C" {static PyObject *meth_QTextFrameFormat_rightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_rightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextFrameFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->rightMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_rightMargin, doc_QTextFrameFormat_rightMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setTopMargin, "setTopMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setTopMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setTopMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setTopMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setTopMargin, doc_QTextFrameFormat_setTopMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setBottomMargin, "setBottomMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setBottomMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setBottomMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setBottomMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setBottomMargin, doc_QTextFrameFormat_setBottomMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setLeftMargin, "setLeftMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setLeftMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setLeftMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setLeftMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setLeftMargin, doc_QTextFrameFormat_setLeftMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextFrameFormat_setRightMargin, "setRightMargin(self, float)");

extern "C" {static PyObject *meth_QTextFrameFormat_setRightMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextFrameFormat_setRightMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextFrameFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextFrameFormat, &sipCpp, &a0))
        {
            sipCpp->setRightMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextFrameFormat, sipName_setRightMargin, doc_QTextFrameFormat_setRightMargin);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextFrameFormat(void *, int);}
static void release_QTextFrameFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QTextFrameFormat *>(sipCppV);
}


extern "C" {static void assign_QTextFrameFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextFrameFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextFrameFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextFrameFormat *>(sipSrc);
}


extern "C" {static void *array_QTextFrameFormat(SIP_SSIZE_T);}
static void *array_QTextFrameFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextFrameFormat[sipNrElem];
}


extern "C" {static void *copy_QTextFrameFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextFrameFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextFrameFormat(reinterpret_cast<const QTextFrameFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextFrameFormat(sipSimpleWrapper *);}
static void dealloc_QTextFrameFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextFrameFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextFrameFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextFrameFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextFrameFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextFrameFormat();

            return sipCpp;
        }
    }

    {
        const QTextFrameFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextFrameFormat, &a0))
        {
            sipCpp = new QTextFrameFormat(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextFrameFormat[] = {{299, 255, 1}};


static PyMethodDef methods_QTextFrameFormat[] = {
    {SIP_MLNAME_CAST(sipName_border), meth_QTextFrameFormat_border, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_border)},
    {SIP_MLNAME_CAST(sipName_borderBrush), meth_QTextFrameFormat_borderBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_borderBrush)},
    {SIP_MLNAME_CAST(sipName_borderStyle), meth_QTextFrameFormat_borderStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_borderStyle)},
    {SIP_MLNAME_CAST(sipName_bottomMargin), meth_QTextFrameFormat_bottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_bottomMargin)},
    {SIP_MLNAME_CAST(sipName_height), meth_QTextFrameFormat_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_height)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextFrameFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_leftMargin), meth_QTextFrameFormat_leftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_leftMargin)},
    {SIP_MLNAME_CAST(sipName_margin), meth_QTextFrameFormat_margin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_margin)},
    {SIP_MLNAME_CAST(sipName_padding), meth_QTextFrameFormat_padding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_padding)},
    {SIP_MLNAME_CAST(sipName_pageBreakPolicy), meth_QTextFrameFormat_pageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_pageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextFrameFormat_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_position)},
    {SIP_MLNAME_CAST(sipName_rightMargin), meth_QTextFrameFormat_rightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_rightMargin)},
    {SIP_MLNAME_CAST(sipName_setBorder), meth_QTextFrameFormat_setBorder, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBorder)},
    {SIP_MLNAME_CAST(sipName_setBorderBrush), meth_QTextFrameFormat_setBorderBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBorderBrush)},
    {SIP_MLNAME_CAST(sipName_setBorderStyle), meth_QTextFrameFormat_setBorderStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBorderStyle)},
    {SIP_MLNAME_CAST(sipName_setBottomMargin), meth_QTextFrameFormat_setBottomMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setBottomMargin)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QTextFrameFormat_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setHeight)},
    {SIP_MLNAME_CAST(sipName_setLeftMargin), meth_QTextFrameFormat_setLeftMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setLeftMargin)},
    {SIP_MLNAME_CAST(sipName_setMargin), meth_QTextFrameFormat_setMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setMargin)},
    {SIP_MLNAME_CAST(sipName_setPadding), meth_QTextFrameFormat_setPadding, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setPadding)},
    {SIP_MLNAME_CAST(sipName_setPageBreakPolicy), meth_QTextFrameFormat_setPageBreakPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setPageBreakPolicy)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextFrameFormat_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setPosition)},
    {SIP_MLNAME_CAST(sipName_setRightMargin), meth_QTextFrameFormat_setRightMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setRightMargin)},
    {SIP_MLNAME_CAST(sipName_setTopMargin), meth_QTextFrameFormat_setTopMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setTopMargin)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QTextFrameFormat_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_setWidth)},
    {SIP_MLNAME_CAST(sipName_topMargin), meth_QTextFrameFormat_topMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_topMargin)},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextFrameFormat_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextFrameFormat_width)}
};

static sipEnumMemberDef enummembers_QTextFrameFormat[] = {
    {sipName_BorderStyle_Dashed, static_cast<int>(QTextFrameFormat::BorderStyle_Dashed), 309},
    {sipName_BorderStyle_DotDash, static_cast<int>(QTextFrameFormat::BorderStyle_DotDash), 309},
    {sipName_BorderStyle_DotDotDash, static_cast<int>(QTextFrameFormat::BorderStyle_DotDotDash), 309},
    {sipName_BorderStyle_Dotted, static_cast<int>(QTextFrameFormat::BorderStyle_Dotted), 309},
    {sipName_BorderStyle_Double, static_cast<int>(QTextFrameFormat::BorderStyle_Double), 309},
    {sipName_BorderStyle_Groove, static_cast<int>(QTextFrameFormat::BorderStyle_Groove), 309},
    {sipName_BorderStyle_Inset, static_cast<int>(QTextFrameFormat::BorderStyle_Inset), 309},
    {sipName_BorderStyle_None, static_cast<int>(QTextFrameFormat::BorderStyle_None), 309},
    {sipName_BorderStyle_Outset, static_cast<int>(QTextFrameFormat::BorderStyle_Outset), 309},
    {sipName_BorderStyle_Ridge, static_cast<int>(QTextFrameFormat::BorderStyle_Ridge), 309},
    {sipName_BorderStyle_Solid, static_cast<int>(QTextFrameFormat::BorderStyle_Solid), 309},
    {sipName_FloatLeft, static_cast<int>(QTextFrameFormat::FloatLeft), 310},
    {sipName_FloatRight, static_cast<int>(QTextFrameFormat::FloatRight), 310},
    {sipName_InFlow, static_cast<int>(QTextFrameFormat::InFlow), 310},
};

PyDoc_STRVAR(doc_QTextFrameFormat, "\1QTextFrameFormat()\n"
    "QTextFrameFormat(QTextFrameFormat)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextFrameFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextFrameFormat,
        {0}
    },
    {
        sipNameNr_QTextFrameFormat,
        {0, 0, 1},
        27, methods_QTextFrameFormat,
        14, enummembers_QTextFrameFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextFrameFormat,
    -1,
    -1,
    supers_QTextFrameFormat,
    0,
    init_type_QTextFrameFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextFrameFormat,
    assign_QTextFrameFormat,
    array_QTextFrameFormat,
    copy_QTextFrameFormat,
    release_QTextFrameFormat,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
