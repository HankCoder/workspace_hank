/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"

#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 34 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpixelformat.sip"
#include <qpixelformat.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 30 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 52 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"


class sipQImage : public QImage
{
public:
    sipQImage();
    sipQImage(const QSize&,QImage::Format);
    sipQImage(int,int,QImage::Format);
    sipQImage(const uchar*,int,int,QImage::Format);
    sipQImage(uchar*,int,int,QImage::Format);
    sipQImage(const uchar*,int,int,int,QImage::Format);
    sipQImage(uchar*,int,int,int,QImage::Format);
    sipQImage(const char**);
    sipQImage(const QString&,const char*);
    sipQImage(const QImage&);
    virtual ~sipQImage();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int metric(QPaintDevice::PaintDeviceMetric) const;
    QPaintEngine* paintEngine() const;
    int devType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQImage(const sipQImage &);
    sipQImage &operator = (const sipQImage &);

    char sipPyMethods[3];
};

sipQImage::sipQImage(): QImage(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const QSize& a0,QImage::Format a1): QImage(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(int a0,int a1,QImage::Format a2): QImage(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const uchar*a0,int a1,int a2,QImage::Format a3): QImage(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(uchar*a0,int a1,int a2,QImage::Format a3): QImage(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const uchar*a0,int a1,int a2,int a3,QImage::Format a4): QImage(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(uchar*a0,int a1,int a2,int a3,QImage::Format a4): QImage(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const char**a0): QImage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const QString& a0,const char*a1): QImage(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const QImage& a0): QImage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::~sipQImage()
{
    sipCommonDtor(sipPySelf);
}

int sipQImage::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QImage::metric(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_28(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQImage::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QImage::paintEngine();

    extern QPaintEngine* sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_29(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQImage::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QImage::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QImage_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QImage_isNull(PyObject *, PyObject *);}
static PyObject *meth_QImage_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_isNull, doc_QImage_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_devType, "devType(self) -> int");

extern "C" {static PyObject *meth_QImage_devType(PyObject *, PyObject *);}
static PyObject *meth_QImage_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QImage::devType() : sipCpp->devType());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_devType, doc_QImage_devType);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_detach, "detach(self)");

extern "C" {static PyObject *meth_QImage_detach(PyObject *, PyObject *);}
static PyObject *meth_QImage_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            sipCpp->detach();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_detach, doc_QImage_detach);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QImage_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QImage_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_isDetached, doc_QImage_isDetached);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_copy, "copy(self, rect: QRect = QRect()) -> QImage\n"
    "copy(self, int, int, int, int) -> QImage");

extern "C" {static PyObject *meth_QImage_copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect& a0def = QRect();
        const QRect* a0 = &a0def;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QImage, &sipCpp, sipType_QRect, &a0))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->copy(*a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QImage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->copy(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_copy, doc_QImage_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_format, "format(self) -> QImage.Format");

extern "C" {static PyObject *meth_QImage_format(PyObject *, PyObject *);}
static PyObject *meth_QImage_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QImage::Format sipRes;

            sipRes = sipCpp->format();

            return sipConvertFromEnum(sipRes,sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_format, doc_QImage_format);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_convertToFormat, "convertToFormat(self, QImage.Format, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QImage\n"
    "convertToFormat(self, QImage.Format, Iterable[int], flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QImage");

extern "C" {static PyObject *meth_QImage_convertToFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_convertToFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QImage::Format a0;
        Qt::ImageConversionFlags a1def = Qt::AutoColor;
        Qt::ImageConversionFlags* a1 = &a1def;
        int a1State = 0;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage_Format, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->convertToFormat(a0,*a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        QImage::Format a0;
        const QVector<uint>* a1;
        int a1State = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags* a2 = &a2def;
        int a2State = 0;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage_Format, &a0, sipType_QVector_1900,&a1, &a1State, sipType_Qt_ImageConversionFlags, &a2, &a2State))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->convertToFormat(a0,*a1,*a2));
            sipReleaseType(const_cast<QVector<uint> *>(a1),sipType_QVector_1900,a1State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_convertToFormat, doc_QImage_convertToFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_width, "width(self) -> int");

extern "C" {static PyObject *meth_QImage_width(PyObject *, PyObject *);}
static PyObject *meth_QImage_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_width, doc_QImage_width);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_height, "height(self) -> int");

extern "C" {static PyObject *meth_QImage_height(PyObject *, PyObject *);}
static PyObject *meth_QImage_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_height, doc_QImage_height);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QImage_size(PyObject *, PyObject *);}
static PyObject *meth_QImage_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_size, doc_QImage_size);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_rect, "rect(self) -> QRect");

extern "C" {static PyObject *meth_QImage_rect(PyObject *, PyObject *);}
static PyObject *meth_QImage_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_rect, doc_QImage_rect);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_depth, "depth(self) -> int");

extern "C" {static PyObject *meth_QImage_depth(PyObject *, PyObject *);}
static PyObject *meth_QImage_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_depth, doc_QImage_depth);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_color, "color(self, int) -> int");

extern "C" {static PyObject *meth_QImage_color(PyObject *, PyObject *);}
static PyObject *meth_QImage_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            QRgb sipRes;

            sipRes = sipCpp->color(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_color, doc_QImage_color);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setColor, "setColor(self, int, int)");

extern "C" {static PyObject *meth_QImage_setColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QRgb a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biu", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            sipCpp->setColor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setColor, doc_QImage_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_allGray, "allGray(self) -> bool");

extern "C" {static PyObject *meth_QImage_allGray(PyObject *, PyObject *);}
static PyObject *meth_QImage_allGray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->allGray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_allGray, doc_QImage_allGray);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_isGrayscale, "isGrayscale(self) -> bool");

extern "C" {static PyObject *meth_QImage_isGrayscale(PyObject *, PyObject *);}
static PyObject *meth_QImage_isGrayscale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isGrayscale();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_isGrayscale, doc_QImage_isGrayscale);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_bits, "bits(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_bits(PyObject *, PyObject *);}
static PyObject *meth_QImage_bits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->bits();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_bits, doc_QImage_bits);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_constBits, "constBits(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_constBits(PyObject *, PyObject *);}
static PyObject *meth_QImage_constBits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            const void*sipRes;

            sipRes = sipCpp->constBits();

            return sipConvertFromConstVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_constBits, doc_QImage_constBits);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_scanLine, "scanLine(self, int) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_scanLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_scanLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            void*sipRes;

            sipRes = sipCpp->scanLine(a0);

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scanLine, doc_QImage_scanLine);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_constScanLine, "constScanLine(self, int) -> sip.voidptr");

extern "C" {static PyObject *meth_QImage_constScanLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_constScanLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            const void*sipRes;

            sipRes = sipCpp->constScanLine(a0);

            return sipConvertFromConstVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_constScanLine, doc_QImage_constScanLine);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_bytesPerLine, "bytesPerLine(self) -> int");

extern "C" {static PyObject *meth_QImage_bytesPerLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_bytesPerLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bytesPerLine();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_bytesPerLine, doc_QImage_bytesPerLine);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_valid, "valid(self, QPoint) -> bool\n"
    "valid(self, int, int) -> bool");

extern "C" {static PyObject *meth_QImage_valid(PyObject *, PyObject *);}
static PyObject *meth_QImage_valid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->valid(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->valid(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_valid, doc_QImage_valid);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_pixelIndex, "pixelIndex(self, QPoint) -> int\n"
    "pixelIndex(self, int, int) -> int");

extern "C" {static PyObject *meth_QImage_pixelIndex(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            sipRes = sipCpp->pixelIndex(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->pixelIndex(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixelIndex, doc_QImage_pixelIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_pixel, "pixel(self, QPoint) -> int\n"
    "pixel(self, int, int) -> int");

extern "C" {static PyObject *meth_QImage_pixel(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            QRgb sipRes;

            sipRes = sipCpp->pixel(*a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            QRgb sipRes;

            sipRes = sipCpp->pixel(a0,a1);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixel, doc_QImage_pixel);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setPixel, "setPixel(self, QPoint, int)\n"
    "setPixel(self, int, int, int)");

extern "C" {static PyObject *meth_QImage_setPixel(PyObject *, PyObject *);}
static PyObject *meth_QImage_setPixel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        uint a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9u", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            sipCpp->setPixel(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        uint a2;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiu", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setPixel(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setPixel, doc_QImage_setPixel);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_colorTable, "colorTable(self) -> List[int]");

extern "C" {static PyObject *meth_QImage_colorTable(PyObject *, PyObject *);}
static PyObject *meth_QImage_colorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QVector<uint>*sipRes;

            sipRes = new QVector<uint>(sipCpp->colorTable());

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_colorTable, doc_QImage_colorTable);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setColorTable, "setColorTable(self, Iterable[int])");

extern "C" {static PyObject *meth_QImage_setColorTable(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector<uint>* a0;
        int a0State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImage, &sipCpp, sipType_QVector_1900,&a0, &a0State))
        {
            sipCpp->setColorTable(*a0);
            sipReleaseType(const_cast<QVector<uint> *>(a0),sipType_QVector_1900,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setColorTable, doc_QImage_setColorTable);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_fill, "fill(self, Qt.GlobalColor)\n"
    "fill(self, Union[QColor, Qt.GlobalColor, QGradient])\n"
    "fill(self, int)");

extern "C" {static PyObject *meth_QImage_fill(PyObject *, PyObject *);}
static PyObject *meth_QImage_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::GlobalColor a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXE", &sipSelf, sipType_QImage, &sipCpp, sipType_Qt_GlobalColor, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QColor* a0;
        int a0State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImage, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->fill(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        uint a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_fill, doc_QImage_fill);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_hasAlphaChannel, "hasAlphaChannel(self) -> bool");

extern "C" {static PyObject *meth_QImage_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QImage_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlphaChannel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_hasAlphaChannel, doc_QImage_hasAlphaChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_createAlphaMask, "createAlphaMask(self, flags: Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag] = Qt.AutoColor) -> QImage");

extern "C" {static PyObject *meth_QImage_createAlphaMask(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_createAlphaMask(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ImageConversionFlags a0def = Qt::AutoColor;
        Qt::ImageConversionFlags* a0 = &a0def;
        int a0State = 0;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_Qt_ImageConversionFlags, &a0, &a0State))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->createAlphaMask(*a0));
            sipReleaseType(a0,sipType_Qt_ImageConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_createAlphaMask, doc_QImage_createAlphaMask);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_createHeuristicMask, "createHeuristicMask(self, clipTight: bool = True) -> QImage");

extern "C" {static PyObject *meth_QImage_createHeuristicMask(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_createHeuristicMask(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clipTight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->createHeuristicMask(a0));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_createHeuristicMask, doc_QImage_createHeuristicMask);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_scaled, "scaled(self, int, int, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QImage\n"
    "scaled(self, QSize, aspectRatioMode: Qt.AspectRatioMode = Qt.IgnoreAspectRatio, transformMode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_scaled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_scaled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        Qt::AspectRatioMode a2 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a3 = Qt::FastTransformation;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|EE", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2, sipType_Qt_TransformationMode, &a3))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->scaled(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        const QSize* a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a2 = Qt::FastTransformation;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_aspectRatioMode,
            sipName_transformMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EE", &sipSelf, sipType_QImage, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1, sipType_Qt_TransformationMode, &a2))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->scaled(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scaled, doc_QImage_scaled);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_scaledToWidth, "scaledToWidth(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_scaledToWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_scaledToWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QImage, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->scaledToWidth(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scaledToWidth, doc_QImage_scaledToWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_scaledToHeight, "scaledToHeight(self, int, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_scaledToHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_scaledToHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QImage, &sipCpp, &a0, sipType_Qt_TransformationMode, &a1))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->scaledToHeight(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_scaledToHeight, doc_QImage_scaledToHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_mirrored, "mirrored(self, horizontal: bool = False, vertical: bool = True) -> QImage");

extern "C" {static PyObject *meth_QImage_mirrored(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_mirrored(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        bool a1 = 1;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_horizontal,
            sipName_vertical,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->mirrored(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_mirrored, doc_QImage_mirrored);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_rgbSwapped, "rgbSwapped(self) -> QImage");

extern "C" {static PyObject *meth_QImage_rgbSwapped(PyObject *, PyObject *);}
static PyObject *meth_QImage_rgbSwapped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->rgbSwapped());

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_rgbSwapped, doc_QImage_rgbSwapped);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_invertPixels, "invertPixels(self, mode: QImage.InvertMode = QImage.InvertRgb)");

extern "C" {static PyObject *meth_QImage_invertPixels(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_invertPixels(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QImage::InvertMode a0 = QImage::InvertRgb;
        QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage_InvertMode, &a0))
        {
            sipCpp->invertPixels(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_invertPixels, doc_QImage_invertPixels);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_load, "load(self, QIODevice, str) -> bool\n"
    "load(self, str, format: str = None) -> bool");

extern "C" {static PyObject *meth_QImage_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        const char* a1;
        PyObject *a1Keep;
        QImage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8AA", &sipSelf, sipType_QImage, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0,a1);
            Py_END_ALLOW_THREADS
            Py_DECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|AA", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_load, doc_QImage_load);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_loadFromData, "loadFromData(self, bytes, format: str = None) -> bool\n"
    "loadFromData(self, Union[QByteArray, bytes, bytearray], format: str = None) -> bool");

extern "C" {static PyObject *meth_QImage_loadFromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_loadFromData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const uchar* a0;
        SIP_SSIZE_T a1;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
        QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bk|AA", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, &a2Keep, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(a0,(int)a1,a2);
            Py_XDECREF(a2Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|AA", &sipSelf, sipType_QImage, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1Keep, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->loadFromData(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_loadFromData, doc_QImage_loadFromData);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_save, "save(self, str, format: str = None, quality: int = -1) -> bool\n"
    "save(self, QIODevice, format: str = None, quality: int = -1) -> bool");

extern "C" {static PyObject *meth_QImage_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|AAi", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QIODevice* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_quality,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|AAi", &sipSelf, sipType_QImage, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(a0,a1,a2);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_save, doc_QImage_save);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_fromData, "fromData(bytes, format: str = None) -> QImage\n"
    "fromData(Union[QByteArray, bytes, bytearray], format: str = None) -> QImage");

extern "C" {static PyObject *meth_QImage_fromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_fromData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const uchar* a0;
        SIP_SSIZE_T a1;
        const char* a2 = 0;
        PyObject *a2Keep = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "k|AA", &a0, &a1, &a2Keep, &a2))
        {
            QImage*sipRes;

            sipRes = new QImage(QImage::fromData(a0,(int)a1,a2));
            Py_XDECREF(a2Keep);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|AA", sipType_QByteArray, &a0, &a0State, &a1Keep, &a1))
        {
            QImage*sipRes;

            sipRes = new QImage(QImage::fromData(*a0,a1));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            Py_XDECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_fromData, doc_QImage_fromData);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_paintEngine, "paintEngine(self) -> QPaintEngine");

extern "C" {static PyObject *meth_QImage_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QImage_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QImage::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_paintEngine, doc_QImage_paintEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_dotsPerMeterX, "dotsPerMeterX(self) -> int");

extern "C" {static PyObject *meth_QImage_dotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QImage_dotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dotsPerMeterX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_dotsPerMeterX, doc_QImage_dotsPerMeterX);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_dotsPerMeterY, "dotsPerMeterY(self) -> int");

extern "C" {static PyObject *meth_QImage_dotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QImage_dotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dotsPerMeterY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_dotsPerMeterY, doc_QImage_dotsPerMeterY);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setDotsPerMeterX, "setDotsPerMeterX(self, int)");

extern "C" {static PyObject *meth_QImage_setDotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setDotsPerMeterX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setDotsPerMeterX, doc_QImage_setDotsPerMeterX);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setDotsPerMeterY, "setDotsPerMeterY(self, int)");

extern "C" {static PyObject *meth_QImage_setDotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setDotsPerMeterY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setDotsPerMeterY, doc_QImage_setDotsPerMeterY);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_offset, "offset(self) -> QPoint");

extern "C" {static PyObject *meth_QImage_offset(PyObject *, PyObject *);}
static PyObject *meth_QImage_offset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->offset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_offset, doc_QImage_offset);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setOffset, "setOffset(self, QPoint)");

extern "C" {static PyObject *meth_QImage_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QImage_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setOffset(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setOffset, doc_QImage_setOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_textKeys, "textKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QImage_textKeys(PyObject *, PyObject *);}
static PyObject *meth_QImage_textKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->textKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_textKeys, doc_QImage_textKeys);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_text, "text(self, key: str = '') -> str");

extern "C" {static PyObject *meth_QImage_text(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_text(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_key,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_text, doc_QImage_text);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setText, "setText(self, str, str)");

extern "C" {static PyObject *meth_QImage_setText(PyObject *, PyObject *);}
static PyObject *meth_QImage_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setText, doc_QImage_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_metric, "metric(self, QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QImage_metric(PyObject *, PyObject *);}
static PyObject *meth_QImage_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QImage, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QImage::metric(a0) : sipCpp->metric(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_metric, doc_QImage_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_smoothScaled, "smoothScaled(self, int, int) -> QImage");

extern "C" {static PyObject *meth_QImage_smoothScaled(PyObject *, PyObject *);}
static PyObject *meth_QImage_smoothScaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->smoothScaled(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_smoothScaled, doc_QImage_smoothScaled);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_createMaskFromColor, "createMaskFromColor(self, int, mode: Qt.MaskMode = Qt.MaskInColor) -> QImage");

extern "C" {static PyObject *meth_QImage_createMaskFromColor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_createMaskFromColor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QRgb a0;
        Qt::MaskMode a1 = Qt::MaskInColor;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu|E", &sipSelf, sipType_QImage, &sipCpp, &a0, sipType_Qt_MaskMode, &a1))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->createMaskFromColor(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_createMaskFromColor, doc_QImage_createMaskFromColor);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_transformed, "transformed(self, QTransform, mode: Qt.TransformationMode = Qt.FastTransformation) -> QImage");

extern "C" {static PyObject *meth_QImage_transformed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QImage_transformed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        const QImage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QImage, &sipCpp, sipType_QTransform, &a0, sipType_Qt_TransformationMode, &a1))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->transformed(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_transformed, doc_QImage_transformed);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_trueMatrix, "trueMatrix(QTransform, int, int) -> QTransform");

extern "C" {static PyObject *meth_QImage_trueMatrix(PyObject *, PyObject *);}
static PyObject *meth_QImage_trueMatrix(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9ii", sipType_QTransform, &a0, &a1, &a2))
        {
            QTransform*sipRes;

            sipRes = new QTransform(QImage::trueMatrix(*a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_trueMatrix, doc_QImage_trueMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_cacheKey, "cacheKey(self) -> int");

extern "C" {static PyObject *meth_QImage_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QImage_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->cacheKey();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_cacheKey, doc_QImage_cacheKey);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_colorCount, "colorCount(self) -> int");

extern "C" {static PyObject *meth_QImage_colorCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_colorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->colorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_colorCount, doc_QImage_colorCount);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setColorCount, "setColorCount(self, int)");

extern "C" {static PyObject *meth_QImage_setColorCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setColorCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setColorCount, doc_QImage_setColorCount);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_byteCount, "byteCount(self) -> int");

extern "C" {static PyObject *meth_QImage_byteCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_byteCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->byteCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_byteCount, doc_QImage_byteCount);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_bitPlaneCount, "bitPlaneCount(self) -> int");

extern "C" {static PyObject *meth_QImage_bitPlaneCount(PyObject *, PyObject *);}
static PyObject *meth_QImage_bitPlaneCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bitPlaneCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_bitPlaneCount, doc_QImage_bitPlaneCount);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_swap, "swap(self, QImage)");

extern "C" {static PyObject *meth_QImage_swap(PyObject *, PyObject *);}
static PyObject *meth_QImage_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImage* a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QImage, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_swap, doc_QImage_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_devicePixelRatio, "devicePixelRatio(self) -> float");

extern "C" {static PyObject *meth_QImage_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QImage_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_devicePixelRatio, doc_QImage_devicePixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setDevicePixelRatio, "setDevicePixelRatio(self, float)");

extern "C" {static PyObject *meth_QImage_setDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QImage, &sipCpp, &a0))
        {
            sipCpp->setDevicePixelRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setDevicePixelRatio, doc_QImage_setDevicePixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_pixelFormat, "pixelFormat(self) -> QPixelFormat");

extern "C" {static PyObject *meth_QImage_pixelFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixelFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImage, &sipCpp))
        {
            QPixelFormat*sipRes;

            sipRes = new QPixelFormat(sipCpp->pixelFormat());

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixelFormat, doc_QImage_pixelFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_toPixelFormat, "toPixelFormat(QImage.Format) -> QPixelFormat");

extern "C" {static PyObject *meth_QImage_toPixelFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_toPixelFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImage::Format a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QImage_Format, &a0))
        {
            QPixelFormat*sipRes;

            sipRes = new QPixelFormat(QImage::toPixelFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QPixelFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_toPixelFormat, doc_QImage_toPixelFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_toImageFormat, "toImageFormat(QPixelFormat) -> QImage.Format");

extern "C" {static PyObject *meth_QImage_toImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_toImageFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPixelFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPixelFormat, &a0))
        {
            QImage::Format sipRes;

            sipRes = QImage::toImageFormat(*a0);

            return sipConvertFromEnum(sipRes,sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_toImageFormat, doc_QImage_toImageFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_pixelColor, "pixelColor(self, int, int) -> QColor\n"
    "pixelColor(self, QPoint) -> QColor");

extern "C" {static PyObject *meth_QImage_pixelColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixelColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->pixelColor(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    {
        const QPoint* a0;
        const QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->pixelColor(*a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_pixelColor, doc_QImage_pixelColor);

    return NULL;
}


PyDoc_STRVAR(doc_QImage_setPixelColor, "setPixelColor(self, int, int, Union[QColor, Qt.GlobalColor, QGradient])\n"
    "setPixelColor(self, QPoint, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QImage_setPixelColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_setPixelColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QColor* a2;
        int a2State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QImage, &sipCpp, &a0, &a1, sipType_QColor, &a2, &a2State))
        {
            sipCpp->setPixelColor(a0,a1,*a2);
            sipReleaseType(const_cast<QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QColor* a1;
        int a1State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QImage, &sipCpp, sipType_QPoint, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setPixelColor(*a0,*a1);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImage, sipName_setPixelColor, doc_QImage_setPixelColor);

    return NULL;
}


extern "C" {static PyObject *slot_QImage___ne__(PyObject *,PyObject *);}
static PyObject *slot_QImage___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QImage *sipCpp = reinterpret_cast<QImage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImage));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QImage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QImage::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QImage,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QImage___eq__(PyObject *,PyObject *);}
static PyObject *slot_QImage___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QImage *sipCpp = reinterpret_cast<QImage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImage));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QImage, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QImage::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QImage,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QImage(void *, int);}
static void release_QImage(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQImage *>(sipCppV);
    else
        delete reinterpret_cast<QImage *>(sipCppV);
}


extern "C" {static void assign_QImage(void *, SIP_SSIZE_T, const void *);}
static void assign_QImage(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QImage *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QImage *>(sipSrc);
}


extern "C" {static void *array_QImage(SIP_SSIZE_T);}
static void *array_QImage(SIP_SSIZE_T sipNrElem)
{
    return new QImage[sipNrElem];
}


extern "C" {static void *copy_QImage(const void *, SIP_SSIZE_T);}
static void *copy_QImage(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QImage(reinterpret_cast<const QImage *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QImage(sipSimpleWrapper *);}
static void dealloc_QImage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQImage *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QImage(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QImage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQImage *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQImage();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QSize* a0;
        QImage::Format a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9E", sipType_QSize, &a0, sipType_QImage_Format, &a1))
        {
            sipCpp = new sipQImage(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        QImage::Format a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iiE", &a0, &a1, sipType_QImage_Format, &a2))
        {
            sipCpp = new sipQImage(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const uchar* a0;
        PyObject *a0Keep;
        int a1;
        int a2;
        QImage::Format a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "@siiE", &a0Keep, &a0, &a1, &a2, sipType_QImage_Format, &a3))
        {
            sipCpp = new sipQImage(a0,a1,a2,a3);

            sipKeepReference((PyObject *)sipSelf, -1, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        void* a0;
        int a1;
        int a2;
        QImage::Format a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "viiE", &a0, &a1, &a2, sipType_QImage_Format, &a3))
        {
            sipCpp = new sipQImage(reinterpret_cast<uchar *>(a0),a1,a2,a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const uchar* a0;
        PyObject *a0Keep;
        int a1;
        int a2;
        int a3;
        QImage::Format a4;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "@siiiE", &a0Keep, &a0, &a1, &a2, &a3, sipType_QImage_Format, &a4))
        {
            sipCpp = new sipQImage(a0,a1,a2,a3,a4);

            sipKeepReference((PyObject *)sipSelf, -2, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        void* a0;
        int a1;
        int a2;
        int a3;
        QImage::Format a4;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "viiiE", &a0, &a1, &a2, &a3, sipType_QImage_Format, &a4))
        {
            sipCpp = new sipQImage(reinterpret_cast<uchar *>(a0),a1,a2,a3,a4);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 92 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qimage.sip"
        // The Python interface is a list of strings that make up the image.
        
        const char **str = QtGui_ListToArray(a0);
        
        if (str)
        {
            sipCpp = new sipQImage(str);
            QtGui_DeleteArray(str);
        }
        else
            sipIsErr = 1;
#line 2863 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|AA", sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            Py_XDECREF(a1Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QImage* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QImage, &a0))
        {
            sipCpp = new sipQImage(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "@J1", &a0Wrapper, sipType_QVariant, &a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 109 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtGui/qimage.sip"
        if (a0->canConvert<QImage>())
            sipCpp = new sipQImage(a0->value<QImage>());
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 2934 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtGui/sipQtGuiQImage.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
            {
                sipCpp->sipPySelf = sipSelf;

                return sipCpp;
            }

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return NULL;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QImage[] = {{188, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QImage[] = {
    {(void *)slot_QImage___ne__, ne_slot},
    {(void *)slot_QImage___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QImage[] = {
    {SIP_MLNAME_CAST(sipName_allGray), meth_QImage_allGray, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_allGray)},
    {SIP_MLNAME_CAST(sipName_bitPlaneCount), meth_QImage_bitPlaneCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_bitPlaneCount)},
    {SIP_MLNAME_CAST(sipName_bits), meth_QImage_bits, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_bits)},
    {SIP_MLNAME_CAST(sipName_byteCount), meth_QImage_byteCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_byteCount)},
    {SIP_MLNAME_CAST(sipName_bytesPerLine), meth_QImage_bytesPerLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_bytesPerLine)},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QImage_cacheKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_cacheKey)},
    {SIP_MLNAME_CAST(sipName_color), meth_QImage_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_color)},
    {SIP_MLNAME_CAST(sipName_colorCount), meth_QImage_colorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_colorCount)},
    {SIP_MLNAME_CAST(sipName_colorTable), meth_QImage_colorTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_colorTable)},
    {SIP_MLNAME_CAST(sipName_constBits), meth_QImage_constBits, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_constBits)},
    {SIP_MLNAME_CAST(sipName_constScanLine), meth_QImage_constScanLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_constScanLine)},
    {SIP_MLNAME_CAST(sipName_convertToFormat), (PyCFunction)meth_QImage_convertToFormat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_convertToFormat)},
    {SIP_MLNAME_CAST(sipName_copy), (PyCFunction)meth_QImage_copy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_copy)},
    {SIP_MLNAME_CAST(sipName_createAlphaMask), (PyCFunction)meth_QImage_createAlphaMask, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_createAlphaMask)},
    {SIP_MLNAME_CAST(sipName_createHeuristicMask), (PyCFunction)meth_QImage_createHeuristicMask, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_createHeuristicMask)},
    {SIP_MLNAME_CAST(sipName_createMaskFromColor), (PyCFunction)meth_QImage_createMaskFromColor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_createMaskFromColor)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QImage_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_depth)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QImage_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_detach)},
    {SIP_MLNAME_CAST(sipName_devType), meth_QImage_devType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_devType)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QImage_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterX), meth_QImage_dotsPerMeterX, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_dotsPerMeterX)},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterY), meth_QImage_dotsPerMeterY, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_dotsPerMeterY)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QImage_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_fill)},
    {SIP_MLNAME_CAST(sipName_format), meth_QImage_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_format)},
    {SIP_MLNAME_CAST(sipName_fromData), (PyCFunction)meth_QImage_fromData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_fromData)},
    {SIP_MLNAME_CAST(sipName_hasAlphaChannel), meth_QImage_hasAlphaChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_hasAlphaChannel)},
    {SIP_MLNAME_CAST(sipName_height), meth_QImage_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_height)},
    {SIP_MLNAME_CAST(sipName_invertPixels), (PyCFunction)meth_QImage_invertPixels, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_invertPixels)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QImage_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_isDetached)},
    {SIP_MLNAME_CAST(sipName_isGrayscale), meth_QImage_isGrayscale, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_isGrayscale)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QImage_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_isNull)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QImage_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_load)},
    {SIP_MLNAME_CAST(sipName_loadFromData), (PyCFunction)meth_QImage_loadFromData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_loadFromData)},
    {SIP_MLNAME_CAST(sipName_metric), meth_QImage_metric, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_metric)},
    {SIP_MLNAME_CAST(sipName_mirrored), (PyCFunction)meth_QImage_mirrored, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_mirrored)},
    {SIP_MLNAME_CAST(sipName_offset), meth_QImage_offset, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_offset)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QImage_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_paintEngine)},
    {SIP_MLNAME_CAST(sipName_pixel), meth_QImage_pixel, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixel)},
    {SIP_MLNAME_CAST(sipName_pixelColor), meth_QImage_pixelColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixelColor)},
    {SIP_MLNAME_CAST(sipName_pixelFormat), meth_QImage_pixelFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixelFormat)},
    {SIP_MLNAME_CAST(sipName_pixelIndex), meth_QImage_pixelIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_pixelIndex)},
    {SIP_MLNAME_CAST(sipName_rect), meth_QImage_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_rect)},
    {SIP_MLNAME_CAST(sipName_rgbSwapped), meth_QImage_rgbSwapped, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_rgbSwapped)},
    {SIP_MLNAME_CAST(sipName_save), (PyCFunction)meth_QImage_save, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_save)},
    {SIP_MLNAME_CAST(sipName_scaled), (PyCFunction)meth_QImage_scaled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_scaled)},
    {SIP_MLNAME_CAST(sipName_scaledToHeight), (PyCFunction)meth_QImage_scaledToHeight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_scaledToHeight)},
    {SIP_MLNAME_CAST(sipName_scaledToWidth), (PyCFunction)meth_QImage_scaledToWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_scaledToWidth)},
    {SIP_MLNAME_CAST(sipName_scanLine), meth_QImage_scanLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_scanLine)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QImage_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setColor)},
    {SIP_MLNAME_CAST(sipName_setColorCount), meth_QImage_setColorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setColorCount)},
    {SIP_MLNAME_CAST(sipName_setColorTable), meth_QImage_setColorTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setColorTable)},
    {SIP_MLNAME_CAST(sipName_setDevicePixelRatio), meth_QImage_setDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterX), meth_QImage_setDotsPerMeterX, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setDotsPerMeterX)},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterY), meth_QImage_setDotsPerMeterY, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setDotsPerMeterY)},
    {SIP_MLNAME_CAST(sipName_setOffset), meth_QImage_setOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setOffset)},
    {SIP_MLNAME_CAST(sipName_setPixel), meth_QImage_setPixel, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setPixel)},
    {SIP_MLNAME_CAST(sipName_setPixelColor), meth_QImage_setPixelColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setPixelColor)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QImage_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_setText)},
    {SIP_MLNAME_CAST(sipName_size), meth_QImage_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_size)},
    {SIP_MLNAME_CAST(sipName_smoothScaled), meth_QImage_smoothScaled, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_smoothScaled)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QImage_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_swap)},
    {SIP_MLNAME_CAST(sipName_text), (PyCFunction)meth_QImage_text, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_text)},
    {SIP_MLNAME_CAST(sipName_textKeys), meth_QImage_textKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_textKeys)},
    {SIP_MLNAME_CAST(sipName_toImageFormat), meth_QImage_toImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_toImageFormat)},
    {SIP_MLNAME_CAST(sipName_toPixelFormat), meth_QImage_toPixelFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_toPixelFormat)},
    {SIP_MLNAME_CAST(sipName_transformed), (PyCFunction)meth_QImage_transformed, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QImage_transformed)},
    {SIP_MLNAME_CAST(sipName_trueMatrix), meth_QImage_trueMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_trueMatrix)},
    {SIP_MLNAME_CAST(sipName_valid), meth_QImage_valid, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_valid)},
    {SIP_MLNAME_CAST(sipName_width), meth_QImage_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QImage_width)}
};

static sipEnumMemberDef enummembers_QImage[] = {
    {sipName_Format_A2BGR30_Premultiplied, static_cast<int>(QImage::Format_A2BGR30_Premultiplied), 65},
    {sipName_Format_A2RGB30_Premultiplied, static_cast<int>(QImage::Format_A2RGB30_Premultiplied), 65},
    {sipName_Format_ARGB32, static_cast<int>(QImage::Format_ARGB32), 65},
    {sipName_Format_ARGB32_Premultiplied, static_cast<int>(QImage::Format_ARGB32_Premultiplied), 65},
    {sipName_Format_ARGB4444_Premultiplied, static_cast<int>(QImage::Format_ARGB4444_Premultiplied), 65},
    {sipName_Format_ARGB6666_Premultiplied, static_cast<int>(QImage::Format_ARGB6666_Premultiplied), 65},
    {sipName_Format_ARGB8555_Premultiplied, static_cast<int>(QImage::Format_ARGB8555_Premultiplied), 65},
    {sipName_Format_ARGB8565_Premultiplied, static_cast<int>(QImage::Format_ARGB8565_Premultiplied), 65},
    {sipName_Format_Alpha8, static_cast<int>(QImage::Format_Alpha8), 65},
    {sipName_Format_BGR30, static_cast<int>(QImage::Format_BGR30), 65},
    {sipName_Format_Grayscale8, static_cast<int>(QImage::Format_Grayscale8), 65},
    {sipName_Format_Indexed8, static_cast<int>(QImage::Format_Indexed8), 65},
    {sipName_Format_Invalid, static_cast<int>(QImage::Format_Invalid), 65},
    {sipName_Format_Mono, static_cast<int>(QImage::Format_Mono), 65},
    {sipName_Format_MonoLSB, static_cast<int>(QImage::Format_MonoLSB), 65},
    {sipName_Format_RGB16, static_cast<int>(QImage::Format_RGB16), 65},
    {sipName_Format_RGB30, static_cast<int>(QImage::Format_RGB30), 65},
    {sipName_Format_RGB32, static_cast<int>(QImage::Format_RGB32), 65},
    {sipName_Format_RGB444, static_cast<int>(QImage::Format_RGB444), 65},
    {sipName_Format_RGB555, static_cast<int>(QImage::Format_RGB555), 65},
    {sipName_Format_RGB666, static_cast<int>(QImage::Format_RGB666), 65},
    {sipName_Format_RGB888, static_cast<int>(QImage::Format_RGB888), 65},
    {sipName_Format_RGBA8888, static_cast<int>(QImage::Format_RGBA8888), 65},
    {sipName_Format_RGBA8888_Premultiplied, static_cast<int>(QImage::Format_RGBA8888_Premultiplied), 65},
    {sipName_Format_RGBX8888, static_cast<int>(QImage::Format_RGBX8888), 65},
    {sipName_InvertRgb, static_cast<int>(QImage::InvertRgb), 66},
    {sipName_InvertRgba, static_cast<int>(QImage::InvertRgba), 66},
};

PyDoc_STRVAR(doc_QImage, "\1QImage()\n"
    "QImage(QSize, QImage.Format)\n"
    "QImage(int, int, QImage.Format)\n"
    "QImage(str, int, int, QImage.Format)\n"
    "QImage(sip.voidptr, int, int, QImage.Format)\n"
    "QImage(str, int, int, int, QImage.Format)\n"
    "QImage(sip.voidptr, int, int, int, QImage.Format)\n"
    "QImage(List[str])\n"
    "QImage(str, format: str = None)\n"
    "QImage(QImage)\n"
    "QImage(Any)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QImage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QImage,
        {0}
    },
    {
        sipNameNr_QImage,
        {0, 0, 1},
        69, methods_QImage,
        27, enummembers_QImage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QImage,
    -1,
    -1,
    supers_QImage,
    slots_QImage,
    init_type_QImage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QImage,
    assign_QImage,
    array_QImage,
    copy_QImage,
    release_QImage,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
