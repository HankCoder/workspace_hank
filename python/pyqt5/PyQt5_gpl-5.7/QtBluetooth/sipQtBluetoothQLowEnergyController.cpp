/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergycontroller.sip"
#include <qlowenergycontroller.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergyconnectionparameters.sip"
#include <qlowenergyconnectionparameters.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergyservice.sip"
#include <qlowenergyservice.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergyservicedata.sip"
#include <qlowenergyservicedata.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergyadvertisingparameters.sip"
#include <qlowenergyadvertisingparameters.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergyadvertisingdata.sip"
#include <qlowenergyadvertisingdata.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyController.cpp"


class sipQLowEnergyController : public QLowEnergyController
{
public:
    sipQLowEnergyController(const QBluetoothDeviceInfo&,QObject*);
    sipQLowEnergyController(const QBluetoothAddress&,QObject*);
    sipQLowEnergyController(const QBluetoothAddress&,const QBluetoothAddress&,QObject*);
    virtual ~sipQLowEnergyController();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLowEnergyController(const sipQLowEnergyController &);
    sipQLowEnergyController &operator = (const sipQLowEnergyController &);

    char sipPyMethods[7];
};

sipQLowEnergyController::sipQLowEnergyController(const QBluetoothDeviceInfo& a0,QObject*a1): QLowEnergyController(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLowEnergyController::sipQLowEnergyController(const QBluetoothAddress& a0,QObject*a1): QLowEnergyController(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLowEnergyController::sipQLowEnergyController(const QBluetoothAddress& a0,const QBluetoothAddress& a1,QObject*a2): QLowEnergyController(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLowEnergyController::~sipQLowEnergyController()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLowEnergyController::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QLowEnergyController);

    return QLowEnergyController::metaObject();
}

int sipQLowEnergyController::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QLowEnergyController::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QLowEnergyController,_c,_id,_a);

    return _id;
}

void *sipQLowEnergyController::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QLowEnergyController, _clname, &sipCpp) ? sipCpp : QLowEnergyController::qt_metacast(_clname));
}

void sipQLowEnergyController::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QLowEnergyController::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLowEnergyController::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QLowEnergyController::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLowEnergyController::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QLowEnergyController::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLowEnergyController::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QLowEnergyController::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLowEnergyController::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QLowEnergyController::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQLowEnergyController::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QLowEnergyController::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQLowEnergyController::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QLowEnergyController::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLowEnergyController_localAddress, "localAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QLowEnergyController_localAddress(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_localAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QBluetoothAddress*sipRes;

            sipRes = new QBluetoothAddress(sipCpp->localAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_localAddress, doc_QLowEnergyController_localAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_remoteAddress, "remoteAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QLowEnergyController_remoteAddress(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_remoteAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QBluetoothAddress*sipRes;

            sipRes = new QBluetoothAddress(sipCpp->remoteAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_remoteAddress, doc_QLowEnergyController_remoteAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_state, "state(self) -> QLowEnergyController.ControllerState");

extern "C" {static PyObject *meth_QLowEnergyController_state(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QLowEnergyController::ControllerState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QLowEnergyController_ControllerState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_state, doc_QLowEnergyController_state);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_remoteAddressType, "remoteAddressType(self) -> QLowEnergyController.RemoteAddressType");

extern "C" {static PyObject *meth_QLowEnergyController_remoteAddressType(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_remoteAddressType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QLowEnergyController::RemoteAddressType sipRes;

            sipRes = sipCpp->remoteAddressType();

            return sipConvertFromEnum(sipRes,sipType_QLowEnergyController_RemoteAddressType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_remoteAddressType, doc_QLowEnergyController_remoteAddressType);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_setRemoteAddressType, "setRemoteAddressType(self, QLowEnergyController.RemoteAddressType)");

extern "C" {static PyObject *meth_QLowEnergyController_setRemoteAddressType(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_setRemoteAddressType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyController::RemoteAddressType a0;
        QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLowEnergyController, &sipCpp, sipType_QLowEnergyController_RemoteAddressType, &a0))
        {
            sipCpp->setRemoteAddressType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_setRemoteAddressType, doc_QLowEnergyController_setRemoteAddressType);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_connectToDevice, "connectToDevice(self)");

extern "C" {static PyObject *meth_QLowEnergyController_connectToDevice(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_connectToDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            sipCpp->connectToDevice();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_connectToDevice, doc_QLowEnergyController_connectToDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_disconnectFromDevice, "disconnectFromDevice(self)");

extern "C" {static PyObject *meth_QLowEnergyController_disconnectFromDevice(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_disconnectFromDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            sipCpp->disconnectFromDevice();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_disconnectFromDevice, doc_QLowEnergyController_disconnectFromDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_discoverServices, "discoverServices(self)");

extern "C" {static PyObject *meth_QLowEnergyController_discoverServices(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_discoverServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            sipCpp->discoverServices();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_discoverServices, doc_QLowEnergyController_discoverServices);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_services, "services(self) -> List[QBluetoothUuid]");

extern "C" {static PyObject *meth_QLowEnergyController_services(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_services(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QList<QBluetoothUuid>*sipRes;

            sipRes = new QList<QBluetoothUuid>(sipCpp->services());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothUuid,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_services, doc_QLowEnergyController_services);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_createServiceObject, "createServiceObject(self, QBluetoothUuid, parent: QObject = None) -> QLowEnergyService");

extern "C" {static PyObject *meth_QLowEnergyController_createServiceObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_createServiceObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothUuid* a0;
        QObject* a1 = 0;
        sipWrapper *sipOwner = 0;
        QLowEnergyController *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|JH", &sipSelf, sipType_QLowEnergyController, &sipCpp, sipType_QBluetoothUuid, &a0, sipType_QObject, &a1, &sipOwner))
        {
            QLowEnergyService*sipRes;

            sipRes = sipCpp->createServiceObject(*a0,a1);

            return sipConvertFromNewType(sipRes,sipType_QLowEnergyService,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_createServiceObject, doc_QLowEnergyController_createServiceObject);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_error, "error(self) -> QLowEnergyController.Error");

extern "C" {static PyObject *meth_QLowEnergyController_error(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QLowEnergyController::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QLowEnergyController_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_error, doc_QLowEnergyController_error);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QLowEnergyController_errorString(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_errorString, doc_QLowEnergyController_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_remoteName, "remoteName(self) -> str");

extern "C" {static PyObject *meth_QLowEnergyController_remoteName(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_remoteName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->remoteName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_remoteName, doc_QLowEnergyController_remoteName);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_createCentral, "createCentral(QBluetoothDeviceInfo, parent: QObject = None) -> QLowEnergyController");

extern "C" {static PyObject *meth_QLowEnergyController_createCentral(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_createCentral(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothDeviceInfo* a0;
        QObject* a1 = 0;
        sipWrapper *sipOwner = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J9|JH", sipType_QBluetoothDeviceInfo, &a0, sipType_QObject, &a1, &sipOwner))
        {
            QLowEnergyController*sipRes;

            sipRes = QLowEnergyController::createCentral(*a0,a1);

            return sipConvertFromNewType(sipRes,sipType_QLowEnergyController,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_createCentral, doc_QLowEnergyController_createCentral);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_createPeripheral, "createPeripheral(parent: QObject = None) -> QLowEnergyController");

extern "C" {static PyObject *meth_QLowEnergyController_createPeripheral(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_createPeripheral(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0 = 0;
        sipWrapper *sipOwner = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|JH", sipType_QObject, &a0, &sipOwner))
        {
            QLowEnergyController*sipRes;

            sipRes = QLowEnergyController::createPeripheral(a0);

            return sipConvertFromNewType(sipRes,sipType_QLowEnergyController,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_createPeripheral, doc_QLowEnergyController_createPeripheral);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_startAdvertising, "startAdvertising(self, QLowEnergyAdvertisingParameters, QLowEnergyAdvertisingData, scanResponseData: QLowEnergyAdvertisingData = QLowEnergyAdvertisingData())");

extern "C" {static PyObject *meth_QLowEnergyController_startAdvertising(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_startAdvertising(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyAdvertisingParameters* a0;
        const QLowEnergyAdvertisingData* a1;
        const QLowEnergyAdvertisingData& a2def = QLowEnergyAdvertisingData();
        const QLowEnergyAdvertisingData* a2 = &a2def;
        QLowEnergyController *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_scanResponseData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J9", &sipSelf, sipType_QLowEnergyController, &sipCpp, sipType_QLowEnergyAdvertisingParameters, &a0, sipType_QLowEnergyAdvertisingData, &a1, sipType_QLowEnergyAdvertisingData, &a2))
        {
            sipCpp->startAdvertising(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_startAdvertising, doc_QLowEnergyController_startAdvertising);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_stopAdvertising, "stopAdvertising(self)");

extern "C" {static PyObject *meth_QLowEnergyController_stopAdvertising(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_stopAdvertising(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            sipCpp->stopAdvertising();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_stopAdvertising, doc_QLowEnergyController_stopAdvertising);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_addService, "addService(self, QLowEnergyServiceData, parent: QObject = None) -> QLowEnergyService");

extern "C" {static PyObject *meth_QLowEnergyController_addService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_addService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyServiceData* a0;
        QObject* a1 = 0;
        sipWrapper *sipOwner = 0;
        QLowEnergyController *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|JH", &sipSelf, sipType_QLowEnergyController, &sipCpp, sipType_QLowEnergyServiceData, &a0, sipType_QObject, &a1, &sipOwner))
        {
            QLowEnergyService*sipRes;

            sipRes = sipCpp->addService(*a0,a1);

            return sipConvertFromNewType(sipRes,sipType_QLowEnergyService,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_addService, doc_QLowEnergyController_addService);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_requestConnectionUpdate, "requestConnectionUpdate(self, QLowEnergyConnectionParameters)");

extern "C" {static PyObject *meth_QLowEnergyController_requestConnectionUpdate(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_requestConnectionUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyConnectionParameters* a0;
        QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyController, &sipCpp, sipType_QLowEnergyConnectionParameters, &a0))
        {
            sipCpp->requestConnectionUpdate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_requestConnectionUpdate, doc_QLowEnergyController_requestConnectionUpdate);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyController_role, "role(self) -> QLowEnergyController.Role");

extern "C" {static PyObject *meth_QLowEnergyController_role(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyController_role(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyController, &sipCpp))
        {
            QLowEnergyController::Role sipRes;

            sipRes = sipCpp->role();

            return sipConvertFromEnum(sipRes,sipType_QLowEnergyController_Role);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyController, sipName_role, doc_QLowEnergyController_role);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyController(void *, int);}
static void release_QLowEnergyController(void *sipCppV,int)
{
    QLowEnergyController *sipCpp = reinterpret_cast<QLowEnergyController *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLowEnergyController(sipSimpleWrapper *);}
static void dealloc_QLowEnergyController(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQLowEnergyController *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QLowEnergyController(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QLowEnergyController(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyController(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLowEnergyController *sipCpp = 0;

    {
        const QBluetoothDeviceInfo* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothDeviceInfo, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQLowEnergyController(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QBluetoothAddress* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQLowEnergyController(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QBluetoothAddress* a0;
        const QBluetoothAddress* a1;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9|JH", sipType_QBluetoothAddress, &a0, sipType_QBluetoothAddress, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQLowEnergyController(*a0,*a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLowEnergyController[] = {{165, 0, 1}};


static PyMethodDef methods_QLowEnergyController[] = {
    {SIP_MLNAME_CAST(sipName_addService), (PyCFunction)meth_QLowEnergyController_addService, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLowEnergyController_addService)},
    {SIP_MLNAME_CAST(sipName_connectToDevice), meth_QLowEnergyController_connectToDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_connectToDevice)},
    {SIP_MLNAME_CAST(sipName_createCentral), (PyCFunction)meth_QLowEnergyController_createCentral, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLowEnergyController_createCentral)},
    {SIP_MLNAME_CAST(sipName_createPeripheral), (PyCFunction)meth_QLowEnergyController_createPeripheral, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLowEnergyController_createPeripheral)},
    {SIP_MLNAME_CAST(sipName_createServiceObject), (PyCFunction)meth_QLowEnergyController_createServiceObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLowEnergyController_createServiceObject)},
    {SIP_MLNAME_CAST(sipName_disconnectFromDevice), meth_QLowEnergyController_disconnectFromDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_disconnectFromDevice)},
    {SIP_MLNAME_CAST(sipName_discoverServices), meth_QLowEnergyController_discoverServices, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_discoverServices)},
    {SIP_MLNAME_CAST(sipName_error), meth_QLowEnergyController_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QLowEnergyController_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_errorString)},
    {SIP_MLNAME_CAST(sipName_localAddress), meth_QLowEnergyController_localAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_localAddress)},
    {SIP_MLNAME_CAST(sipName_remoteAddress), meth_QLowEnergyController_remoteAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_remoteAddress)},
    {SIP_MLNAME_CAST(sipName_remoteAddressType), meth_QLowEnergyController_remoteAddressType, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_remoteAddressType)},
    {SIP_MLNAME_CAST(sipName_remoteName), meth_QLowEnergyController_remoteName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_remoteName)},
    {SIP_MLNAME_CAST(sipName_requestConnectionUpdate), meth_QLowEnergyController_requestConnectionUpdate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_requestConnectionUpdate)},
    {SIP_MLNAME_CAST(sipName_role), meth_QLowEnergyController_role, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_role)},
    {SIP_MLNAME_CAST(sipName_services), meth_QLowEnergyController_services, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_services)},
    {SIP_MLNAME_CAST(sipName_setRemoteAddressType), meth_QLowEnergyController_setRemoteAddressType, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_setRemoteAddressType)},
    {SIP_MLNAME_CAST(sipName_startAdvertising), (PyCFunction)meth_QLowEnergyController_startAdvertising, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLowEnergyController_startAdvertising)},
    {SIP_MLNAME_CAST(sipName_state), meth_QLowEnergyController_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_state)},
    {SIP_MLNAME_CAST(sipName_stopAdvertising), meth_QLowEnergyController_stopAdvertising, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyController_stopAdvertising)}
};

static sipEnumMemberDef enummembers_QLowEnergyController[] = {
    {sipName_AdvertisingError, static_cast<int>(QLowEnergyController::AdvertisingError), 78},
    {sipName_AdvertisingState, static_cast<int>(QLowEnergyController::AdvertisingState), 77},
    {sipName_CentralRole, static_cast<int>(QLowEnergyController::CentralRole), 80},
    {sipName_ClosingState, static_cast<int>(QLowEnergyController::ClosingState), 77},
    {sipName_ConnectedState, static_cast<int>(QLowEnergyController::ConnectedState), 77},
    {sipName_ConnectingState, static_cast<int>(QLowEnergyController::ConnectingState), 77},
    {sipName_ConnectionError, static_cast<int>(QLowEnergyController::ConnectionError), 78},
    {sipName_DiscoveredState, static_cast<int>(QLowEnergyController::DiscoveredState), 77},
    {sipName_DiscoveringState, static_cast<int>(QLowEnergyController::DiscoveringState), 77},
    {sipName_InvalidBluetoothAdapterError, static_cast<int>(QLowEnergyController::InvalidBluetoothAdapterError), 78},
    {sipName_NetworkError, static_cast<int>(QLowEnergyController::NetworkError), 78},
    {sipName_NoError, static_cast<int>(QLowEnergyController::NoError), 78},
    {sipName_PeripheralRole, static_cast<int>(QLowEnergyController::PeripheralRole), 80},
    {sipName_PublicAddress, static_cast<int>(QLowEnergyController::PublicAddress), 79},
    {sipName_RandomAddress, static_cast<int>(QLowEnergyController::RandomAddress), 79},
    {sipName_UnconnectedState, static_cast<int>(QLowEnergyController::UnconnectedState), 77},
    {sipName_UnknownError, static_cast<int>(QLowEnergyController::UnknownError), 78},
    {sipName_UnknownRemoteDeviceError, static_cast<int>(QLowEnergyController::UnknownRemoteDeviceError), 78},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLowEnergyController[] = {
    {"connectionUpdated(QLowEnergyConnectionParameters)", "\1connectionUpdated(self, QLowEnergyConnectionParameters)", 0, 0},
    {"discoveryFinished()", "\1discoveryFinished(self)", 0, 0},
    {"serviceDiscovered(QBluetoothUuid)", "\1serviceDiscovered(self, QBluetoothUuid)", 0, 0},
    {"stateChanged(QLowEnergyController::ControllerState)", "\1stateChanged(self, QLowEnergyController.ControllerState)", 0, 0},
    {"disconnected()", "\1disconnected(self)", 0, 0},
    {"connected()", "\1connected(self)", 0, 0},
    {"error(QLowEnergyController::Error)", "\1error(self, QLowEnergyController.Error)", &methods_QLowEnergyController[7], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QLowEnergyController, "\1QLowEnergyController(QBluetoothDeviceInfo, parent: QObject = None)\n"
    "QLowEnergyController(QBluetoothAddress, parent: QObject = None)\n"
    "QLowEnergyController(QBluetoothAddress, QBluetoothAddress, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyController = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyController,
        {0}
    },
    {
        sipNameNr_QLowEnergyController,
        {0, 0, 1},
        20, methods_QLowEnergyController,
        18, enummembers_QLowEnergyController,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLowEnergyController,
    -1,
    -1,
    supers_QLowEnergyController,
    0,
    init_type_QLowEnergyController,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLowEnergyController,
    0,
    0,
    0,
    release_QLowEnergyController,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QLowEnergyController::staticMetaObject,
    0,
    signals_QLowEnergyController,
    0
};
