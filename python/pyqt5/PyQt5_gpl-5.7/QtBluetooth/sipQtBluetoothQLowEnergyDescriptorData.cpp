/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergydescriptordata.sip"
#include <qlowenergydescriptordata.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyDescriptorData.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyDescriptorData.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyDescriptorData.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyDescriptorData.cpp"


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_value, "value(self) -> QByteArray");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_value(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_value, doc_QLowEnergyDescriptorData_value);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_setValue, "setValue(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_setValue(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setValue(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_setValue, doc_QLowEnergyDescriptorData_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_uuid, "uuid(self) -> QBluetoothUuid");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_uuid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_uuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp))
        {
            QBluetoothUuid*sipRes;

            sipRes = new QBluetoothUuid(sipCpp->uuid());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothUuid,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_uuid, doc_QLowEnergyDescriptorData_uuid);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_setUuid, "setUuid(self, QBluetoothUuid)");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_setUuid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_setUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothUuid* a0;
        QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
            sipCpp->setUuid(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_setUuid, doc_QLowEnergyDescriptorData_setUuid);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_isValid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_isValid, doc_QLowEnergyDescriptorData_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_setReadPermissions, "setReadPermissions(self, bool, constraints: Union[QBluetooth.AttAccessConstraints, QBluetooth.AttAccessConstraint] = QBluetooth.AttAccessConstraints())");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_setReadPermissions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_setReadPermissions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QBluetooth::AttAccessConstraints a1def = QBluetooth::AttAccessConstraints();
        QBluetooth::AttAccessConstraints* a1 = &a1def;
        int a1State = 0;
        QLowEnergyDescriptorData *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_constraints,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|J1", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp, &a0, sipType_QBluetooth_AttAccessConstraints, &a1, &a1State))
        {
            sipCpp->setReadPermissions(a0,*a1);
            sipReleaseType(a1,sipType_QBluetooth_AttAccessConstraints,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_setReadPermissions, doc_QLowEnergyDescriptorData_setReadPermissions);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_isReadable, doc_QLowEnergyDescriptorData_isReadable);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_readConstraints, "readConstraints(self) -> QBluetooth.AttAccessConstraints");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_readConstraints(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_readConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp))
        {
            QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new QBluetooth::AttAccessConstraints(sipCpp->readConstraints());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_readConstraints, doc_QLowEnergyDescriptorData_readConstraints);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_setWritePermissions, "setWritePermissions(self, bool, constraints: Union[QBluetooth.AttAccessConstraints, QBluetooth.AttAccessConstraint] = QBluetooth.AttAccessConstraints())");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_setWritePermissions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_setWritePermissions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QBluetooth::AttAccessConstraints a1def = QBluetooth::AttAccessConstraints();
        QBluetooth::AttAccessConstraints* a1 = &a1def;
        int a1State = 0;
        QLowEnergyDescriptorData *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_constraints,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb|J1", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp, &a0, sipType_QBluetooth_AttAccessConstraints, &a1, &a1State))
        {
            sipCpp->setWritePermissions(a0,*a1);
            sipReleaseType(a1,sipType_QBluetooth_AttAccessConstraints,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_setWritePermissions, doc_QLowEnergyDescriptorData_setWritePermissions);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_isWritable, doc_QLowEnergyDescriptorData_isWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_writeConstraints, "writeConstraints(self) -> QBluetooth.AttAccessConstraints");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_writeConstraints(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_writeConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp))
        {
            QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new QBluetooth::AttAccessConstraints(sipCpp->writeConstraints());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_writeConstraints, doc_QLowEnergyDescriptorData_writeConstraints);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyDescriptorData_swap, "swap(self, QLowEnergyDescriptorData)");

extern "C" {static PyObject *meth_QLowEnergyDescriptorData_swap(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyDescriptorData_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyDescriptorData* a0;
        QLowEnergyDescriptorData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyDescriptorData, &sipCpp, sipType_QLowEnergyDescriptorData, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyDescriptorData, sipName_swap, doc_QLowEnergyDescriptorData_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QLowEnergyDescriptorData___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyDescriptorData___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLowEnergyDescriptorData *sipCpp = reinterpret_cast<QLowEnergyDescriptorData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyDescriptorData));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyDescriptorData, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth,eq_slot,sipType_QLowEnergyDescriptorData,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLowEnergyDescriptorData___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyDescriptorData___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLowEnergyDescriptorData *sipCpp = reinterpret_cast<QLowEnergyDescriptorData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyDescriptorData));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyDescriptorData, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth,ne_slot,sipType_QLowEnergyDescriptorData,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyDescriptorData(void *, int);}
static void release_QLowEnergyDescriptorData(void *sipCppV,int)
{
    delete reinterpret_cast<QLowEnergyDescriptorData *>(sipCppV);
}


extern "C" {static void assign_QLowEnergyDescriptorData(void *, SIP_SSIZE_T, const void *);}
static void assign_QLowEnergyDescriptorData(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QLowEnergyDescriptorData *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QLowEnergyDescriptorData *>(sipSrc);
}


extern "C" {static void *array_QLowEnergyDescriptorData(SIP_SSIZE_T);}
static void *array_QLowEnergyDescriptorData(SIP_SSIZE_T sipNrElem)
{
    return new QLowEnergyDescriptorData[sipNrElem];
}


extern "C" {static void *copy_QLowEnergyDescriptorData(const void *, SIP_SSIZE_T);}
static void *copy_QLowEnergyDescriptorData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QLowEnergyDescriptorData(reinterpret_cast<const QLowEnergyDescriptorData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLowEnergyDescriptorData(sipSimpleWrapper *);}
static void dealloc_QLowEnergyDescriptorData(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLowEnergyDescriptorData(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QLowEnergyDescriptorData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyDescriptorData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QLowEnergyDescriptorData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QLowEnergyDescriptorData();

            return sipCpp;
        }
    }

    {
        const QBluetoothUuid* a0;
        const QByteArray* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J1", sipType_QBluetoothUuid, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new QLowEnergyDescriptorData(*a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const QLowEnergyDescriptorData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLowEnergyDescriptorData, &a0))
        {
            sipCpp = new QLowEnergyDescriptorData(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLowEnergyDescriptorData[] = {
    {(void *)slot_QLowEnergyDescriptorData___eq__, eq_slot},
    {(void *)slot_QLowEnergyDescriptorData___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLowEnergyDescriptorData[] = {
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QLowEnergyDescriptorData_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_isReadable)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QLowEnergyDescriptorData_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_isValid)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QLowEnergyDescriptorData_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_isWritable)},
    {SIP_MLNAME_CAST(sipName_readConstraints), meth_QLowEnergyDescriptorData_readConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_readConstraints)},
    {SIP_MLNAME_CAST(sipName_setReadPermissions), (PyCFunction)meth_QLowEnergyDescriptorData_setReadPermissions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_setReadPermissions)},
    {SIP_MLNAME_CAST(sipName_setUuid), meth_QLowEnergyDescriptorData_setUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_setUuid)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QLowEnergyDescriptorData_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_setValue)},
    {SIP_MLNAME_CAST(sipName_setWritePermissions), (PyCFunction)meth_QLowEnergyDescriptorData_setWritePermissions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_setWritePermissions)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QLowEnergyDescriptorData_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_swap)},
    {SIP_MLNAME_CAST(sipName_uuid), meth_QLowEnergyDescriptorData_uuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_uuid)},
    {SIP_MLNAME_CAST(sipName_value), meth_QLowEnergyDescriptorData_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_value)},
    {SIP_MLNAME_CAST(sipName_writeConstraints), meth_QLowEnergyDescriptorData_writeConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyDescriptorData_writeConstraints)}
};

PyDoc_STRVAR(doc_QLowEnergyDescriptorData, "\1QLowEnergyDescriptorData()\n"
    "QLowEnergyDescriptorData(QBluetoothUuid, Union[QByteArray, bytes, bytearray])\n"
    "QLowEnergyDescriptorData(QLowEnergyDescriptorData)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyDescriptorData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyDescriptorData,
        {0}
    },
    {
        sipNameNr_QLowEnergyDescriptorData,
        {0, 0, 1},
        12, methods_QLowEnergyDescriptorData,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLowEnergyDescriptorData,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QLowEnergyDescriptorData,
    init_type_QLowEnergyDescriptorData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLowEnergyDescriptorData,
    assign_QLowEnergyDescriptorData,
    array_QLowEnergyDescriptorData,
    copy_QLowEnergyDescriptorData,
    release_QLowEnergyDescriptorData,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
