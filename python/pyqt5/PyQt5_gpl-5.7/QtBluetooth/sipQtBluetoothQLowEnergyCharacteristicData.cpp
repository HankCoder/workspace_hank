/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergycharacteristicdata.sip"
#include <qlowenergycharacteristicdata.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyCharacteristicData.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyCharacteristicData.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergydescriptordata.sip"
#include <qlowenergydescriptordata.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyCharacteristicData.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyCharacteristicData.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergycharacteristic.sip"
#include <qlowenergycharacteristic.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyCharacteristicData.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyCharacteristicData.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyCharacteristicData.cpp"


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_uuid, "uuid(self) -> QBluetoothUuid");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_uuid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_uuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            QBluetoothUuid*sipRes;

            sipRes = new QBluetoothUuid(sipCpp->uuid());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothUuid,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_uuid, doc_QLowEnergyCharacteristicData_uuid);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_setUuid, "setUuid(self, QBluetoothUuid)");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_setUuid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_setUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothUuid* a0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
            sipCpp->setUuid(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_setUuid, doc_QLowEnergyCharacteristicData_setUuid);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_value, "value(self) -> QByteArray");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_value(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_value, doc_QLowEnergyCharacteristicData_value);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_setValue, "setValue(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_setValue(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setValue(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_setValue, doc_QLowEnergyCharacteristicData_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_properties, "properties(self) -> QLowEnergyCharacteristic.PropertyTypes");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_properties(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_properties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            QLowEnergyCharacteristic::PropertyTypes*sipRes;

            sipRes = new QLowEnergyCharacteristic::PropertyTypes(sipCpp->properties());

            return sipConvertFromNewType(sipRes,sipType_QLowEnergyCharacteristic_PropertyTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_properties, doc_QLowEnergyCharacteristicData_properties);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_setProperties, "setProperties(self, Union[QLowEnergyCharacteristic.PropertyTypes, QLowEnergyCharacteristic.PropertyType])");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_setProperties(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_setProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyCharacteristic::PropertyTypes* a0;
        int a0State = 0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QLowEnergyCharacteristic_PropertyTypes, &a0, &a0State))
        {
            sipCpp->setProperties(*a0);
            sipReleaseType(a0,sipType_QLowEnergyCharacteristic_PropertyTypes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_setProperties, doc_QLowEnergyCharacteristicData_setProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_descriptors, "descriptors(self) -> object");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_descriptors(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_descriptors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            QList<QLowEnergyDescriptorData>*sipRes;

            sipRes = new QList<QLowEnergyDescriptorData>(sipCpp->descriptors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLowEnergyDescriptorData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_descriptors, doc_QLowEnergyCharacteristicData_descriptors);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_setDescriptors, "setDescriptors(self, Iterable[QLowEnergyDescriptorData])");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_setDescriptors(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_setDescriptors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QLowEnergyDescriptorData>* a0;
        int a0State = 0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QList_0100QLowEnergyDescriptorData,&a0, &a0State))
        {
            sipCpp->setDescriptors(*a0);
            sipReleaseType(const_cast<QList<QLowEnergyDescriptorData> *>(a0),sipType_QList_0100QLowEnergyDescriptorData,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_setDescriptors, doc_QLowEnergyCharacteristicData_setDescriptors);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_addDescriptor, "addDescriptor(self, QLowEnergyDescriptorData)");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_addDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_addDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyDescriptorData* a0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QLowEnergyDescriptorData, &a0))
        {
            sipCpp->addDescriptor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_addDescriptor, doc_QLowEnergyCharacteristicData_addDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_setReadConstraints, "setReadConstraints(self, Union[QBluetooth.AttAccessConstraints, QBluetooth.AttAccessConstraint])");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_setReadConstraints(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_setReadConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QBluetooth_AttAccessConstraints, &a0, &a0State))
        {
            sipCpp->setReadConstraints(*a0);
            sipReleaseType(a0,sipType_QBluetooth_AttAccessConstraints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_setReadConstraints, doc_QLowEnergyCharacteristicData_setReadConstraints);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_readConstraints, "readConstraints(self) -> QBluetooth.AttAccessConstraints");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_readConstraints(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_readConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new QBluetooth::AttAccessConstraints(sipCpp->readConstraints());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_readConstraints, doc_QLowEnergyCharacteristicData_readConstraints);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_setWriteConstraints, "setWriteConstraints(self, Union[QBluetooth.AttAccessConstraints, QBluetooth.AttAccessConstraint])");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_setWriteConstraints(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_setWriteConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QBluetooth_AttAccessConstraints, &a0, &a0State))
        {
            sipCpp->setWriteConstraints(*a0);
            sipReleaseType(a0,sipType_QBluetooth_AttAccessConstraints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_setWriteConstraints, doc_QLowEnergyCharacteristicData_setWriteConstraints);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_writeConstraints, "writeConstraints(self) -> QBluetooth.AttAccessConstraints");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_writeConstraints(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_writeConstraints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new QBluetooth::AttAccessConstraints(sipCpp->writeConstraints());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_writeConstraints, doc_QLowEnergyCharacteristicData_writeConstraints);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_setValueLength, "setValueLength(self, int, int)");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_setValueLength(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_setValueLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, &a0, &a1))
        {
            sipCpp->setValueLength(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_setValueLength, doc_QLowEnergyCharacteristicData_setValueLength);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_minimumValueLength, "minimumValueLength(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_minimumValueLength(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_minimumValueLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumValueLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_minimumValueLength, doc_QLowEnergyCharacteristicData_minimumValueLength);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_maximumValueLength, "maximumValueLength(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_maximumValueLength(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_maximumValueLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumValueLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_maximumValueLength, doc_QLowEnergyCharacteristicData_maximumValueLength);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_isValid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_isValid, doc_QLowEnergyCharacteristicData_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristicData_swap, "swap(self, QLowEnergyCharacteristicData)");

extern "C" {static PyObject *meth_QLowEnergyCharacteristicData_swap(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristicData_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyCharacteristicData* a0;
        QLowEnergyCharacteristicData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyCharacteristicData, &sipCpp, sipType_QLowEnergyCharacteristicData, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristicData, sipName_swap, doc_QLowEnergyCharacteristicData_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QLowEnergyCharacteristicData___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyCharacteristicData___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLowEnergyCharacteristicData *sipCpp = reinterpret_cast<QLowEnergyCharacteristicData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyCharacteristicData));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyCharacteristicData, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth,eq_slot,sipType_QLowEnergyCharacteristicData,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLowEnergyCharacteristicData___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyCharacteristicData___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLowEnergyCharacteristicData *sipCpp = reinterpret_cast<QLowEnergyCharacteristicData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyCharacteristicData));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyCharacteristicData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyCharacteristicData, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth,ne_slot,sipType_QLowEnergyCharacteristicData,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyCharacteristicData(void *, int);}
static void release_QLowEnergyCharacteristicData(void *sipCppV,int)
{
    delete reinterpret_cast<QLowEnergyCharacteristicData *>(sipCppV);
}


extern "C" {static void assign_QLowEnergyCharacteristicData(void *, SIP_SSIZE_T, const void *);}
static void assign_QLowEnergyCharacteristicData(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QLowEnergyCharacteristicData *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QLowEnergyCharacteristicData *>(sipSrc);
}


extern "C" {static void *array_QLowEnergyCharacteristicData(SIP_SSIZE_T);}
static void *array_QLowEnergyCharacteristicData(SIP_SSIZE_T sipNrElem)
{
    return new QLowEnergyCharacteristicData[sipNrElem];
}


extern "C" {static void *copy_QLowEnergyCharacteristicData(const void *, SIP_SSIZE_T);}
static void *copy_QLowEnergyCharacteristicData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QLowEnergyCharacteristicData(reinterpret_cast<const QLowEnergyCharacteristicData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLowEnergyCharacteristicData(sipSimpleWrapper *);}
static void dealloc_QLowEnergyCharacteristicData(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLowEnergyCharacteristicData(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QLowEnergyCharacteristicData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyCharacteristicData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QLowEnergyCharacteristicData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QLowEnergyCharacteristicData();

            return sipCpp;
        }
    }

    {
        const QLowEnergyCharacteristicData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLowEnergyCharacteristicData, &a0))
        {
            sipCpp = new QLowEnergyCharacteristicData(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLowEnergyCharacteristicData[] = {
    {(void *)slot_QLowEnergyCharacteristicData___eq__, eq_slot},
    {(void *)slot_QLowEnergyCharacteristicData___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLowEnergyCharacteristicData[] = {
    {SIP_MLNAME_CAST(sipName_addDescriptor), meth_QLowEnergyCharacteristicData_addDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_addDescriptor)},
    {SIP_MLNAME_CAST(sipName_descriptors), meth_QLowEnergyCharacteristicData_descriptors, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_descriptors)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QLowEnergyCharacteristicData_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_isValid)},
    {SIP_MLNAME_CAST(sipName_maximumValueLength), meth_QLowEnergyCharacteristicData_maximumValueLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_maximumValueLength)},
    {SIP_MLNAME_CAST(sipName_minimumValueLength), meth_QLowEnergyCharacteristicData_minimumValueLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_minimumValueLength)},
    {SIP_MLNAME_CAST(sipName_properties), meth_QLowEnergyCharacteristicData_properties, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_properties)},
    {SIP_MLNAME_CAST(sipName_readConstraints), meth_QLowEnergyCharacteristicData_readConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_readConstraints)},
    {SIP_MLNAME_CAST(sipName_setDescriptors), meth_QLowEnergyCharacteristicData_setDescriptors, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_setDescriptors)},
    {SIP_MLNAME_CAST(sipName_setProperties), meth_QLowEnergyCharacteristicData_setProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_setProperties)},
    {SIP_MLNAME_CAST(sipName_setReadConstraints), meth_QLowEnergyCharacteristicData_setReadConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_setReadConstraints)},
    {SIP_MLNAME_CAST(sipName_setUuid), meth_QLowEnergyCharacteristicData_setUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_setUuid)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QLowEnergyCharacteristicData_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_setValue)},
    {SIP_MLNAME_CAST(sipName_setValueLength), meth_QLowEnergyCharacteristicData_setValueLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_setValueLength)},
    {SIP_MLNAME_CAST(sipName_setWriteConstraints), meth_QLowEnergyCharacteristicData_setWriteConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_setWriteConstraints)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QLowEnergyCharacteristicData_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_swap)},
    {SIP_MLNAME_CAST(sipName_uuid), meth_QLowEnergyCharacteristicData_uuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_uuid)},
    {SIP_MLNAME_CAST(sipName_value), meth_QLowEnergyCharacteristicData_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_value)},
    {SIP_MLNAME_CAST(sipName_writeConstraints), meth_QLowEnergyCharacteristicData_writeConstraints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristicData_writeConstraints)}
};

PyDoc_STRVAR(doc_QLowEnergyCharacteristicData, "\1QLowEnergyCharacteristicData()\n"
    "QLowEnergyCharacteristicData(QLowEnergyCharacteristicData)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyCharacteristicData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyCharacteristicData,
        {0}
    },
    {
        sipNameNr_QLowEnergyCharacteristicData,
        {0, 0, 1},
        18, methods_QLowEnergyCharacteristicData,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLowEnergyCharacteristicData,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QLowEnergyCharacteristicData,
    init_type_QLowEnergyCharacteristicData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLowEnergyCharacteristicData,
    assign_QLowEnergyCharacteristicData,
    array_QLowEnergyCharacteristicData,
    copy_QLowEnergyCharacteristicData,
    release_QLowEnergyCharacteristicData,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
