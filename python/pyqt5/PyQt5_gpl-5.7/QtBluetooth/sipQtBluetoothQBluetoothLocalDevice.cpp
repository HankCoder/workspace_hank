/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothlocaldevice.sip"
#include <qbluetoothlocaldevice.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qbluetoothhostinfo.sip"
#include <qbluetoothhostinfo.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQBluetoothLocalDevice.cpp"


class sipQBluetoothLocalDevice : public QBluetoothLocalDevice
{
public:
    sipQBluetoothLocalDevice(QObject*);
    sipQBluetoothLocalDevice(const QBluetoothAddress&,QObject*);
    virtual ~sipQBluetoothLocalDevice();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothLocalDevice(const sipQBluetoothLocalDevice &);
    sipQBluetoothLocalDevice &operator = (const sipQBluetoothLocalDevice &);

    char sipPyMethods[7];
};

sipQBluetoothLocalDevice::sipQBluetoothLocalDevice(QObject*a0): QBluetoothLocalDevice(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothLocalDevice::sipQBluetoothLocalDevice(const QBluetoothAddress& a0,QObject*a1): QBluetoothLocalDevice(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothLocalDevice::~sipQBluetoothLocalDevice()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQBluetoothLocalDevice::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothLocalDevice);

    return QBluetoothLocalDevice::metaObject();
}

int sipQBluetoothLocalDevice::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QBluetoothLocalDevice::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothLocalDevice,_c,_id,_a);

    return _id;
}

void *sipQBluetoothLocalDevice::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothLocalDevice, _clname, &sipCpp) ? sipCpp : QBluetoothLocalDevice::qt_metacast(_clname));
}

void sipQBluetoothLocalDevice::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QBluetoothLocalDevice::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QBluetoothLocalDevice::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QBluetoothLocalDevice::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QBluetoothLocalDevice::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QBluetoothLocalDevice::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBluetoothLocalDevice::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QBluetoothLocalDevice::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQBluetoothLocalDevice::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QBluetoothLocalDevice::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtBluetooth_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtBluetooth_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_isValid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_isValid, doc_QBluetoothLocalDevice_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_requestPairing, "requestPairing(self, QBluetoothAddress, QBluetoothLocalDevice.Pairing)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_requestPairing(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_requestPairing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothAddress* a0;
        QBluetoothLocalDevice::Pairing a1;
        QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, sipType_QBluetoothAddress, &a0, sipType_QBluetoothLocalDevice_Pairing, &a1))
        {
            sipCpp->requestPairing(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_requestPairing, doc_QBluetoothLocalDevice_requestPairing);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_pairingStatus, "pairingStatus(self, QBluetoothAddress) -> QBluetoothLocalDevice.Pairing");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_pairingStatus(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_pairingStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothAddress* a0;
        const QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, sipType_QBluetoothAddress, &a0))
        {
            QBluetoothLocalDevice::Pairing sipRes;

            sipRes = sipCpp->pairingStatus(*a0);

            return sipConvertFromEnum(sipRes,sipType_QBluetoothLocalDevice_Pairing);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_pairingStatus, doc_QBluetoothLocalDevice_pairingStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_setHostMode, "setHostMode(self, QBluetoothLocalDevice.HostMode)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_setHostMode(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_setHostMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothLocalDevice::HostMode a0;
        QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, sipType_QBluetoothLocalDevice_HostMode, &a0))
        {
            sipCpp->setHostMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_setHostMode, doc_QBluetoothLocalDevice_setHostMode);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_hostMode, "hostMode(self) -> QBluetoothLocalDevice.HostMode");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_hostMode(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_hostMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            QBluetoothLocalDevice::HostMode sipRes;

            sipRes = sipCpp->hostMode();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothLocalDevice_HostMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_hostMode, doc_QBluetoothLocalDevice_hostMode);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_powerOn, "powerOn(self)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_powerOn(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_powerOn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            sipCpp->powerOn();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_powerOn, doc_QBluetoothLocalDevice_powerOn);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_name, "name(self) -> str");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_name(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_name, doc_QBluetoothLocalDevice_name);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_address, "address(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_address(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_address(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            QBluetoothAddress*sipRes;

            sipRes = new QBluetoothAddress(sipCpp->address());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_address, doc_QBluetoothLocalDevice_address);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_allDevices, "allDevices() -> object");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_allDevices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_allDevices(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QBluetoothHostInfo>*sipRes;

            sipRes = new QList<QBluetoothHostInfo>(QBluetoothLocalDevice::allDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothHostInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_allDevices, doc_QBluetoothLocalDevice_allDevices);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_connectedDevices, "connectedDevices(self) -> object");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_connectedDevices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_connectedDevices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            QList<QBluetoothAddress>*sipRes;

            sipRes = new QList<QBluetoothAddress>(sipCpp->connectedDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_connectedDevices, doc_QBluetoothLocalDevice_connectedDevices);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_pairingConfirmation, "pairingConfirmation(self, bool)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_pairingConfirmation(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_pairingConfirmation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, &a0))
        {
            sipCpp->pairingConfirmation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_pairingConfirmation, doc_QBluetoothLocalDevice_pairingConfirmation);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothLocalDevice(void *, int);}
static void release_QBluetoothLocalDevice(void *sipCppV,int)
{
    QBluetoothLocalDevice *sipCpp = reinterpret_cast<QBluetoothLocalDevice *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothLocalDevice(sipSimpleWrapper *);}
static void dealloc_QBluetoothLocalDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQBluetoothLocalDevice *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QBluetoothLocalDevice(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QBluetoothLocalDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothLocalDevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothLocalDevice *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothLocalDevice(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QBluetoothAddress* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothLocalDevice(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothLocalDevice[] = {{165, 0, 1}};


static PyMethodDef methods_QBluetoothLocalDevice[] = {
    {SIP_MLNAME_CAST(sipName_address), meth_QBluetoothLocalDevice_address, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_address)},
    {SIP_MLNAME_CAST(sipName_allDevices), meth_QBluetoothLocalDevice_allDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_allDevices)},
    {SIP_MLNAME_CAST(sipName_connectedDevices), meth_QBluetoothLocalDevice_connectedDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_connectedDevices)},
    {SIP_MLNAME_CAST(sipName_hostMode), meth_QBluetoothLocalDevice_hostMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_hostMode)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QBluetoothLocalDevice_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_QBluetoothLocalDevice_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_name)},
    {SIP_MLNAME_CAST(sipName_pairingConfirmation), meth_QBluetoothLocalDevice_pairingConfirmation, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_pairingConfirmation)},
    {SIP_MLNAME_CAST(sipName_pairingStatus), meth_QBluetoothLocalDevice_pairingStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_pairingStatus)},
    {SIP_MLNAME_CAST(sipName_powerOn), meth_QBluetoothLocalDevice_powerOn, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_powerOn)},
    {SIP_MLNAME_CAST(sipName_requestPairing), meth_QBluetoothLocalDevice_requestPairing, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_requestPairing)},
    {SIP_MLNAME_CAST(sipName_setHostMode), meth_QBluetoothLocalDevice_setHostMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_setHostMode)}
};

static sipEnumMemberDef enummembers_QBluetoothLocalDevice[] = {
    {sipName_AuthorizedPaired, static_cast<int>(QBluetoothLocalDevice::AuthorizedPaired), 30},
    {sipName_HostConnectable, static_cast<int>(QBluetoothLocalDevice::HostConnectable), 29},
    {sipName_HostDiscoverable, static_cast<int>(QBluetoothLocalDevice::HostDiscoverable), 29},
    {sipName_HostDiscoverableLimitedInquiry, static_cast<int>(QBluetoothLocalDevice::HostDiscoverableLimitedInquiry), 29},
    {sipName_HostPoweredOff, static_cast<int>(QBluetoothLocalDevice::HostPoweredOff), 29},
    {sipName_NoError, static_cast<int>(QBluetoothLocalDevice::NoError), 28},
    {sipName_Paired, static_cast<int>(QBluetoothLocalDevice::Paired), 30},
    {sipName_PairingError, static_cast<int>(QBluetoothLocalDevice::PairingError), 28},
    {sipName_UnknownError, static_cast<int>(QBluetoothLocalDevice::UnknownError), 28},
    {sipName_Unpaired, static_cast<int>(QBluetoothLocalDevice::Unpaired), 30},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothLocalDevice[] = {
    {"deviceDisconnected(QBluetoothAddress)", "\1deviceDisconnected(self, QBluetoothAddress)", 0, 0},
    {"deviceConnected(QBluetoothAddress)", "\1deviceConnected(self, QBluetoothAddress)", 0, 0},
    {"error(QBluetoothLocalDevice::Error)", "\1error(self, QBluetoothLocalDevice.Error)", 0, 0},
    {"pairingDisplayConfirmation(QBluetoothAddress,QString)", "\1pairingDisplayConfirmation(self, QBluetoothAddress, str)", 0, 0},
    {"pairingDisplayPinCode(QBluetoothAddress,QString)", "\1pairingDisplayPinCode(self, QBluetoothAddress, str)", 0, 0},
    {"pairingFinished(QBluetoothAddress,QBluetoothLocalDevice::Pairing)", "\1pairingFinished(self, QBluetoothAddress, QBluetoothLocalDevice.Pairing)", 0, 0},
    {"hostModeStateChanged(QBluetoothLocalDevice::HostMode)", "\1hostModeStateChanged(self, QBluetoothLocalDevice.HostMode)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QBluetoothLocalDevice, "\1QBluetoothLocalDevice(parent: QObject = None)\n"
    "QBluetoothLocalDevice(QBluetoothAddress, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QBluetoothLocalDevice = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothLocalDevice,
        {0}
    },
    {
        sipNameNr_QBluetoothLocalDevice,
        {0, 0, 1},
        11, methods_QBluetoothLocalDevice,
        10, enummembers_QBluetoothLocalDevice,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBluetoothLocalDevice,
    -1,
    -1,
    supers_QBluetoothLocalDevice,
    0,
    init_type_QBluetoothLocalDevice,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBluetoothLocalDevice,
    0,
    0,
    0,
    release_QBluetoothLocalDevice,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QBluetoothLocalDevice::staticMetaObject,
    0,
    signals_QBluetoothLocalDevice,
    0
};
