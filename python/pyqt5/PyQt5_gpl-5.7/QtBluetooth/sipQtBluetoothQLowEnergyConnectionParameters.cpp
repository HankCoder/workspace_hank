/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtBluetooth/qlowenergyconnectionparameters.sip"
#include <qlowenergyconnectionparameters.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtBluetooth/sipQtBluetoothQLowEnergyConnectionParameters.cpp"



PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_setIntervalRange, "setIntervalRange(self, float, float)");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_setIntervalRange(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_setIntervalRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp, &a0, &a1))
        {
            sipCpp->setIntervalRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_setIntervalRange, doc_QLowEnergyConnectionParameters_setIntervalRange);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_minimumInterval, "minimumInterval(self) -> float");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_minimumInterval(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_minimumInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->minimumInterval();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_minimumInterval, doc_QLowEnergyConnectionParameters_minimumInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_maximumInterval, "maximumInterval(self) -> float");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_maximumInterval(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_maximumInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->maximumInterval();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_maximumInterval, doc_QLowEnergyConnectionParameters_maximumInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_setLatency, "setLatency(self, int)");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_setLatency(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_setLatency(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp, &a0))
        {
            sipCpp->setLatency(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_setLatency, doc_QLowEnergyConnectionParameters_setLatency);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_latency, "latency(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_latency(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_latency(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->latency();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_latency, doc_QLowEnergyConnectionParameters_latency);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_setSupervisionTimeout, "setSupervisionTimeout(self, int)");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_setSupervisionTimeout(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_setSupervisionTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp, &a0))
        {
            sipCpp->setSupervisionTimeout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_setSupervisionTimeout, doc_QLowEnergyConnectionParameters_setSupervisionTimeout);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_supervisionTimeout, "supervisionTimeout(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_supervisionTimeout(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_supervisionTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->supervisionTimeout();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_supervisionTimeout, doc_QLowEnergyConnectionParameters_supervisionTimeout);

    return NULL;
}


PyDoc_STRVAR(doc_QLowEnergyConnectionParameters_swap, "swap(self, QLowEnergyConnectionParameters)");

extern "C" {static PyObject *meth_QLowEnergyConnectionParameters_swap(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyConnectionParameters_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLowEnergyConnectionParameters* a0;
        QLowEnergyConnectionParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyConnectionParameters, &sipCpp, sipType_QLowEnergyConnectionParameters, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyConnectionParameters, sipName_swap, doc_QLowEnergyConnectionParameters_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QLowEnergyConnectionParameters___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyConnectionParameters___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLowEnergyConnectionParameters *sipCpp = reinterpret_cast<QLowEnergyConnectionParameters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyConnectionParameters));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyConnectionParameters* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyConnectionParameters, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth,eq_slot,sipType_QLowEnergyConnectionParameters,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLowEnergyConnectionParameters___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyConnectionParameters___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLowEnergyConnectionParameters *sipCpp = reinterpret_cast<QLowEnergyConnectionParameters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyConnectionParameters));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QLowEnergyConnectionParameters* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyConnectionParameters, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth,ne_slot,sipType_QLowEnergyConnectionParameters,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyConnectionParameters(void *, int);}
static void release_QLowEnergyConnectionParameters(void *sipCppV,int)
{
    delete reinterpret_cast<QLowEnergyConnectionParameters *>(sipCppV);
}


extern "C" {static void assign_QLowEnergyConnectionParameters(void *, SIP_SSIZE_T, const void *);}
static void assign_QLowEnergyConnectionParameters(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QLowEnergyConnectionParameters *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QLowEnergyConnectionParameters *>(sipSrc);
}


extern "C" {static void *array_QLowEnergyConnectionParameters(SIP_SSIZE_T);}
static void *array_QLowEnergyConnectionParameters(SIP_SSIZE_T sipNrElem)
{
    return new QLowEnergyConnectionParameters[sipNrElem];
}


extern "C" {static void *copy_QLowEnergyConnectionParameters(const void *, SIP_SSIZE_T);}
static void *copy_QLowEnergyConnectionParameters(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QLowEnergyConnectionParameters(reinterpret_cast<const QLowEnergyConnectionParameters *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLowEnergyConnectionParameters(sipSimpleWrapper *);}
static void dealloc_QLowEnergyConnectionParameters(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLowEnergyConnectionParameters(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QLowEnergyConnectionParameters(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyConnectionParameters(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QLowEnergyConnectionParameters *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QLowEnergyConnectionParameters();

            return sipCpp;
        }
    }

    {
        const QLowEnergyConnectionParameters* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLowEnergyConnectionParameters, &a0))
        {
            sipCpp = new QLowEnergyConnectionParameters(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLowEnergyConnectionParameters[] = {
    {(void *)slot_QLowEnergyConnectionParameters___eq__, eq_slot},
    {(void *)slot_QLowEnergyConnectionParameters___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLowEnergyConnectionParameters[] = {
    {SIP_MLNAME_CAST(sipName_latency), meth_QLowEnergyConnectionParameters_latency, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_latency)},
    {SIP_MLNAME_CAST(sipName_maximumInterval), meth_QLowEnergyConnectionParameters_maximumInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_maximumInterval)},
    {SIP_MLNAME_CAST(sipName_minimumInterval), meth_QLowEnergyConnectionParameters_minimumInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_minimumInterval)},
    {SIP_MLNAME_CAST(sipName_setIntervalRange), meth_QLowEnergyConnectionParameters_setIntervalRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_setIntervalRange)},
    {SIP_MLNAME_CAST(sipName_setLatency), meth_QLowEnergyConnectionParameters_setLatency, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_setLatency)},
    {SIP_MLNAME_CAST(sipName_setSupervisionTimeout), meth_QLowEnergyConnectionParameters_setSupervisionTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_setSupervisionTimeout)},
    {SIP_MLNAME_CAST(sipName_supervisionTimeout), meth_QLowEnergyConnectionParameters_supervisionTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_supervisionTimeout)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QLowEnergyConnectionParameters_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyConnectionParameters_swap)}
};

PyDoc_STRVAR(doc_QLowEnergyConnectionParameters, "\1QLowEnergyConnectionParameters()\n"
    "QLowEnergyConnectionParameters(QLowEnergyConnectionParameters)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyConnectionParameters = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyConnectionParameters,
        {0}
    },
    {
        sipNameNr_QLowEnergyConnectionParameters,
        {0, 0, 1},
        8, methods_QLowEnergyConnectionParameters,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLowEnergyConnectionParameters,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QLowEnergyConnectionParameters,
    init_type_QLowEnergyConnectionParameters,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLowEnergyConnectionParameters,
    assign_QLowEnergyConnectionParameters,
    array_QLowEnergyConnectionParameters,
    copy_QLowEnergyConnectionParameters,
    release_QLowEnergyConnectionParameters,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
