/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroute.sip"
#include <qgeoroute.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoute.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoute.cpp"
#line 28 "sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoute.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoute.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroutesegment.sip"
#include <qgeoroutesegment.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoute.cpp"
#line 28 "sip/QtPositioning/qgeorectangle.sip"
#include <qgeorectangle.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoute.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoute.cpp"


PyDoc_STRVAR(doc_QGeoRoute_setRouteId, "setRouteId(self, str)");

extern "C" {static PyObject *meth_QGeoRoute_setRouteId(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setRouteId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGeoRoute, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setRouteId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setRouteId, doc_QGeoRoute_setRouteId);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_routeId, "routeId(self) -> str");

extern "C" {static PyObject *meth_QGeoRoute_routeId(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_routeId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->routeId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_routeId, doc_QGeoRoute_routeId);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_setRequest, "setRequest(self, QGeoRouteRequest)");

extern "C" {static PyObject *meth_QGeoRoute_setRequest(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRouteRequest* a0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoRoute, &sipCpp, sipType_QGeoRouteRequest, &a0))
        {
            sipCpp->setRequest(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setRequest, doc_QGeoRoute_setRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_request, "request(self) -> QGeoRouteRequest");

extern "C" {static PyObject *meth_QGeoRoute_request(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            QGeoRouteRequest*sipRes;

            sipRes = new QGeoRouteRequest(sipCpp->request());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_request, doc_QGeoRoute_request);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_setBounds, "setBounds(self, QGeoRectangle)");

extern "C" {static PyObject *meth_QGeoRoute_setBounds(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setBounds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRectangle* a0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoRoute, &sipCpp, sipType_QGeoRectangle, &a0))
        {
            sipCpp->setBounds(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setBounds, doc_QGeoRoute_setBounds);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_bounds, "bounds(self) -> QGeoRectangle");

extern "C" {static PyObject *meth_QGeoRoute_bounds(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_bounds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            QGeoRectangle*sipRes;

            sipRes = new QGeoRectangle(sipCpp->bounds());

            return sipConvertFromNewType(sipRes,sipType_QGeoRectangle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_bounds, doc_QGeoRoute_bounds);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_setFirstRouteSegment, "setFirstRouteSegment(self, QGeoRouteSegment)");

extern "C" {static PyObject *meth_QGeoRoute_setFirstRouteSegment(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setFirstRouteSegment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRouteSegment* a0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoRoute, &sipCpp, sipType_QGeoRouteSegment, &a0))
        {
            sipCpp->setFirstRouteSegment(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setFirstRouteSegment, doc_QGeoRoute_setFirstRouteSegment);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_firstRouteSegment, "firstRouteSegment(self) -> QGeoRouteSegment");

extern "C" {static PyObject *meth_QGeoRoute_firstRouteSegment(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_firstRouteSegment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            QGeoRouteSegment*sipRes;

            sipRes = new QGeoRouteSegment(sipCpp->firstRouteSegment());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteSegment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_firstRouteSegment, doc_QGeoRoute_firstRouteSegment);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_setTravelTime, "setTravelTime(self, int)");

extern "C" {static PyObject *meth_QGeoRoute_setTravelTime(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setTravelTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGeoRoute, &sipCpp, &a0))
        {
            sipCpp->setTravelTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setTravelTime, doc_QGeoRoute_setTravelTime);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_travelTime, "travelTime(self) -> int");

extern "C" {static PyObject *meth_QGeoRoute_travelTime(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_travelTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->travelTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_travelTime, doc_QGeoRoute_travelTime);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_setDistance, "setDistance(self, float)");

extern "C" {static PyObject *meth_QGeoRoute_setDistance(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGeoRoute, &sipCpp, &a0))
        {
            sipCpp->setDistance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setDistance, doc_QGeoRoute_setDistance);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_distance, "distance(self) -> float");

extern "C" {static PyObject *meth_QGeoRoute_distance(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_distance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->distance();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_distance, doc_QGeoRoute_distance);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_setTravelMode, "setTravelMode(self, QGeoRouteRequest.TravelMode)");

extern "C" {static PyObject *meth_QGeoRoute_setTravelMode(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setTravelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoRouteRequest::TravelMode a0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGeoRoute, &sipCpp, sipType_QGeoRouteRequest_TravelMode, &a0))
        {
            sipCpp->setTravelMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setTravelMode, doc_QGeoRoute_setTravelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_travelMode, "travelMode(self) -> QGeoRouteRequest.TravelMode");

extern "C" {static PyObject *meth_QGeoRoute_travelMode(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_travelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            QGeoRouteRequest::TravelMode sipRes;

            sipRes = sipCpp->travelMode();

            return sipConvertFromEnum(sipRes,sipType_QGeoRouteRequest_TravelMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_travelMode, doc_QGeoRoute_travelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_setPath, "setPath(self, Iterable[QGeoCoordinate])");

extern "C" {static PyObject *meth_QGeoRoute_setPath(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QGeoCoordinate>* a0;
        int a0State = 0;
        QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGeoRoute, &sipCpp, sipType_QList_0100QGeoCoordinate,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(const_cast<QList<QGeoCoordinate> *>(a0),sipType_QList_0100QGeoCoordinate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_setPath, doc_QGeoRoute_setPath);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoute_path, "path(self) -> List[QGeoCoordinate]");

extern "C" {static PyObject *meth_QGeoRoute_path(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoute_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoute, &sipCpp))
        {
            QList<QGeoCoordinate>*sipRes;

            sipRes = new QList<QGeoCoordinate>(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGeoCoordinate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoute, sipName_path, doc_QGeoRoute_path);

    return NULL;
}


extern "C" {static PyObject *slot_QGeoRoute___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGeoRoute___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QGeoRoute *sipCpp = reinterpret_cast<QGeoRoute *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoRoute));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoRoute, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoRoute::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QGeoRoute,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QGeoRoute___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGeoRoute___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QGeoRoute *sipCpp = reinterpret_cast<QGeoRoute *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoRoute));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoRoute, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoRoute::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QGeoRoute,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoRoute(void *, int);}
static void release_QGeoRoute(void *sipCppV,int)
{
    delete reinterpret_cast<QGeoRoute *>(sipCppV);
}


extern "C" {static void assign_QGeoRoute(void *, SIP_SSIZE_T, const void *);}
static void assign_QGeoRoute(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QGeoRoute *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QGeoRoute *>(sipSrc);
}


extern "C" {static void *array_QGeoRoute(SIP_SSIZE_T);}
static void *array_QGeoRoute(SIP_SSIZE_T sipNrElem)
{
    return new QGeoRoute[sipNrElem];
}


extern "C" {static void *copy_QGeoRoute(const void *, SIP_SSIZE_T);}
static void *copy_QGeoRoute(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QGeoRoute(reinterpret_cast<const QGeoRoute *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGeoRoute(sipSimpleWrapper *);}
static void dealloc_QGeoRoute(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoRoute(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QGeoRoute(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoRoute(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QGeoRoute *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QGeoRoute();

            return sipCpp;
        }
    }

    {
        const QGeoRoute* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGeoRoute, &a0))
        {
            sipCpp = new QGeoRoute(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGeoRoute[] = {
    {(void *)slot_QGeoRoute___ne__, ne_slot},
    {(void *)slot_QGeoRoute___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGeoRoute[] = {
    {SIP_MLNAME_CAST(sipName_bounds), meth_QGeoRoute_bounds, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_bounds)},
    {SIP_MLNAME_CAST(sipName_distance), meth_QGeoRoute_distance, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_distance)},
    {SIP_MLNAME_CAST(sipName_firstRouteSegment), meth_QGeoRoute_firstRouteSegment, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_firstRouteSegment)},
    {SIP_MLNAME_CAST(sipName_path), meth_QGeoRoute_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_path)},
    {SIP_MLNAME_CAST(sipName_request), meth_QGeoRoute_request, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_request)},
    {SIP_MLNAME_CAST(sipName_routeId), meth_QGeoRoute_routeId, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_routeId)},
    {SIP_MLNAME_CAST(sipName_setBounds), meth_QGeoRoute_setBounds, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setBounds)},
    {SIP_MLNAME_CAST(sipName_setDistance), meth_QGeoRoute_setDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setDistance)},
    {SIP_MLNAME_CAST(sipName_setFirstRouteSegment), meth_QGeoRoute_setFirstRouteSegment, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setFirstRouteSegment)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QGeoRoute_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setPath)},
    {SIP_MLNAME_CAST(sipName_setRequest), meth_QGeoRoute_setRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setRequest)},
    {SIP_MLNAME_CAST(sipName_setRouteId), meth_QGeoRoute_setRouteId, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setRouteId)},
    {SIP_MLNAME_CAST(sipName_setTravelMode), meth_QGeoRoute_setTravelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setTravelMode)},
    {SIP_MLNAME_CAST(sipName_setTravelTime), meth_QGeoRoute_setTravelTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_setTravelTime)},
    {SIP_MLNAME_CAST(sipName_travelMode), meth_QGeoRoute_travelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_travelMode)},
    {SIP_MLNAME_CAST(sipName_travelTime), meth_QGeoRoute_travelTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoute_travelTime)}
};

PyDoc_STRVAR(doc_QGeoRoute, "\1QGeoRoute()\n"
    "QGeoRoute(QGeoRoute)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QGeoRoute = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoRoute,
        {0}
    },
    {
        sipNameNr_QGeoRoute,
        {0, 0, 1},
        16, methods_QGeoRoute,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoRoute,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QGeoRoute,
    init_type_QGeoRoute,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoRoute,
    assign_QGeoRoute,
    array_QGeoRoute,
    copy_QGeoRoute,
    release_QGeoRoute,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
