/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontactdetail.sip"
#include <qplacecontactdetail.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContactDetail.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContactDetail.cpp"


class sipQPlaceContactDetail : public QPlaceContactDetail
{
public:
    sipQPlaceContactDetail();
    sipQPlaceContactDetail(const QPlaceContactDetail&);
    ~sipQPlaceContactDetail();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceContactDetail(const sipQPlaceContactDetail &);
    sipQPlaceContactDetail &operator = (const sipQPlaceContactDetail &);
};

sipQPlaceContactDetail::sipQPlaceContactDetail(): QPlaceContactDetail(), sipPySelf(0)
{
}

sipQPlaceContactDetail::sipQPlaceContactDetail(const QPlaceContactDetail& a0): QPlaceContactDetail(a0), sipPySelf(0)
{
}

sipQPlaceContactDetail::~sipQPlaceContactDetail()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QPlaceContactDetail_label, "label(self) -> str");

extern "C" {static PyObject *meth_QPlaceContactDetail_label(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContactDetail_label(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContactDetail *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContactDetail, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->label());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContactDetail, sipName_label, doc_QPlaceContactDetail_label);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContactDetail_setLabel, "setLabel(self, str)");

extern "C" {static PyObject *meth_QPlaceContactDetail_setLabel(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContactDetail_setLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceContactDetail *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceContactDetail, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setLabel(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContactDetail, sipName_setLabel, doc_QPlaceContactDetail_setLabel);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContactDetail_value, "value(self) -> str");

extern "C" {static PyObject *meth_QPlaceContactDetail_value(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContactDetail_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContactDetail *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContactDetail, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContactDetail, sipName_value, doc_QPlaceContactDetail_value);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContactDetail_setValue, "setValue(self, str)");

extern "C" {static PyObject *meth_QPlaceContactDetail_setValue(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContactDetail_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceContactDetail *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceContactDetail, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setValue(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContactDetail, sipName_setValue, doc_QPlaceContactDetail_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContactDetail_clear, "clear(self)");

extern "C" {static PyObject *meth_QPlaceContactDetail_clear(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContactDetail_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContactDetail *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContactDetail, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContactDetail, sipName_clear, doc_QPlaceContactDetail_clear);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceContactDetail___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceContactDetail___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceContactDetail *sipCpp = reinterpret_cast<QPlaceContactDetail *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceContactDetail));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceContactDetail* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceContactDetail, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceContactDetail::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceContactDetail,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceContactDetail___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceContactDetail___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceContactDetail *sipCpp = reinterpret_cast<QPlaceContactDetail *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceContactDetail));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceContactDetail* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceContactDetail, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceContactDetail::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceContactDetail,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceContactDetail(void *, int);}
static void release_QPlaceContactDetail(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlaceContactDetail *>(sipCppV);
    else
        delete reinterpret_cast<QPlaceContactDetail *>(sipCppV);
}


extern "C" {static void assign_QPlaceContactDetail(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceContactDetail(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceContactDetail *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceContactDetail *>(sipSrc);
}


extern "C" {static void *array_QPlaceContactDetail(SIP_SSIZE_T);}
static void *array_QPlaceContactDetail(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceContactDetail[sipNrElem];
}


extern "C" {static void *copy_QPlaceContactDetail(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceContactDetail(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceContactDetail(reinterpret_cast<const QPlaceContactDetail *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceContactDetail(sipSimpleWrapper *);}
static void dealloc_QPlaceContactDetail(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceContactDetail *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceContactDetail(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceContactDetail(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceContactDetail(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlaceContactDetail *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQPlaceContactDetail();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPlaceContactDetail* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceContactDetail, &a0))
        {
            sipCpp = new sipQPlaceContactDetail(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceContactDetail[] = {
    {(void *)slot_QPlaceContactDetail___ne__, ne_slot},
    {(void *)slot_QPlaceContactDetail___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceContactDetail[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QPlaceContactDetail_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContactDetail_clear)},
    {SIP_MLNAME_CAST(sipName_label), meth_QPlaceContactDetail_label, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContactDetail_label)},
    {SIP_MLNAME_CAST(sipName_setLabel), meth_QPlaceContactDetail_setLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContactDetail_setLabel)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QPlaceContactDetail_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContactDetail_setValue)},
    {SIP_MLNAME_CAST(sipName_value), meth_QPlaceContactDetail_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContactDetail_value)}
};


extern "C" {static PyObject *varget_QPlaceContactDetail_Email(void *, PyObject *, PyObject *);}
static PyObject *varget_QPlaceContactDetail_Email(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const QString*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = new QString(QPlaceContactDetail::Email);

    sipPy = sipConvertFromNewType(const_cast<QString *>(sipVal), sipType_QString, NULL);
    Py_XINCREF(sipPy);

    return sipPy;
}


extern "C" {static PyObject *varget_QPlaceContactDetail_Fax(void *, PyObject *, PyObject *);}
static PyObject *varget_QPlaceContactDetail_Fax(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const QString*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = new QString(QPlaceContactDetail::Fax);

    sipPy = sipConvertFromNewType(const_cast<QString *>(sipVal), sipType_QString, NULL);
    Py_XINCREF(sipPy);

    return sipPy;
}


extern "C" {static PyObject *varget_QPlaceContactDetail_Phone(void *, PyObject *, PyObject *);}
static PyObject *varget_QPlaceContactDetail_Phone(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const QString*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = new QString(QPlaceContactDetail::Phone);

    sipPy = sipConvertFromNewType(const_cast<QString *>(sipVal), sipType_QString, NULL);
    Py_XINCREF(sipPy);

    return sipPy;
}


extern "C" {static PyObject *varget_QPlaceContactDetail_Website(void *, PyObject *, PyObject *);}
static PyObject *varget_QPlaceContactDetail_Website(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const QString*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = new QString(QPlaceContactDetail::Website);

    sipPy = sipConvertFromNewType(const_cast<QString *>(sipVal), sipType_QString, NULL);
    Py_XINCREF(sipPy);

    return sipPy;
}

sipVariableDef variables_QPlaceContactDetail[] = {
    {ClassVariable, sipName_Email, (PyMethodDef *)varget_QPlaceContactDetail_Email, NULL, NULL, NULL},
    {ClassVariable, sipName_Fax, (PyMethodDef *)varget_QPlaceContactDetail_Fax, NULL, NULL, NULL},
    {ClassVariable, sipName_Phone, (PyMethodDef *)varget_QPlaceContactDetail_Phone, NULL, NULL, NULL},
    {ClassVariable, sipName_Website, (PyMethodDef *)varget_QPlaceContactDetail_Website, NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_QPlaceContactDetail, "\1QPlaceContactDetail()\n"
    "QPlaceContactDetail(QPlaceContactDetail)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceContactDetail = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceContactDetail,
        {0}
    },
    {
        sipNameNr_QPlaceContactDetail,
        {0, 0, 1},
        5, methods_QPlaceContactDetail,
        0, 0,
        4, variables_QPlaceContactDetail,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceContactDetail,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceContactDetail,
    init_type_QPlaceContactDetail,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceContactDetail,
    assign_QPlaceContactDetail,
    array_QPlaceContactDetail,
    copy_QPlaceContactDetail,
    release_QPlaceContactDetail,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
