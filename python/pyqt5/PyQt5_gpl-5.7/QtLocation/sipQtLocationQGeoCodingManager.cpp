/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeocodingmanager.sip"
#include <qgeocodingmanager.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeocodereply.sip"
#include <qgeocodereply.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 28 "sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 28 "sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 28 "sip/QtPositioning/qgeoaddress.sip"
#include <qgeoaddress.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodingManager.cpp"


PyDoc_STRVAR(doc_QGeoCodingManager_managerName, "managerName(self) -> str");

extern "C" {static PyObject *meth_QGeoCodingManager_managerName(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManager_managerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodingManager, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->managerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManager, sipName_managerName, doc_QGeoCodingManager_managerName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManager_managerVersion, "managerVersion(self) -> int");

extern "C" {static PyObject *meth_QGeoCodingManager_managerVersion(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManager_managerVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodingManager, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->managerVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManager, sipName_managerVersion, doc_QGeoCodingManager_managerVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManager_geocode, "geocode(self, QGeoAddress, bounds: QGeoShape = QGeoShape()) -> QGeoCodeReply\n"
    "geocode(self, str, limit: int = -1, offset: int = 0, bounds: QGeoShape = QGeoShape()) -> QGeoCodeReply");

extern "C" {static PyObject *meth_QGeoCodingManager_geocode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManager_geocode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoAddress* a0;
        const QGeoShape& a1def = QGeoShape();
        const QGeoShape* a1 = &a1def;
        QGeoCodingManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_bounds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J9", &sipSelf, sipType_QGeoCodingManager, &sipCpp, sipType_QGeoAddress, &a0, sipType_QGeoShape, &a1))
        {
            QGeoCodeReply*sipRes;

            sipRes = sipCpp->geocode(*a0,*a1);

            return sipConvertFromNewType(sipRes,sipType_QGeoCodeReply,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1 = -1;
        int a2 = 0;
        const QGeoShape& a3def = QGeoShape();
        const QGeoShape* a3 = &a3def;
        QGeoCodingManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_limit,
            sipName_offset,
            sipName_bounds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iiJ9", &sipSelf, sipType_QGeoCodingManager, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2, sipType_QGeoShape, &a3))
        {
            QGeoCodeReply*sipRes;

            sipRes = sipCpp->geocode(*a0,a1,a2,*a3);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGeoCodeReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManager, sipName_geocode, doc_QGeoCodingManager_geocode);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManager_reverseGeocode, "reverseGeocode(self, QGeoCoordinate, bounds: QGeoShape = QGeoShape()) -> QGeoCodeReply");

extern "C" {static PyObject *meth_QGeoCodingManager_reverseGeocode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManager_reverseGeocode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCoordinate* a0;
        const QGeoShape& a1def = QGeoShape();
        const QGeoShape* a1 = &a1def;
        QGeoCodingManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_bounds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J9", &sipSelf, sipType_QGeoCodingManager, &sipCpp, sipType_QGeoCoordinate, &a0, sipType_QGeoShape, &a1))
        {
            QGeoCodeReply*sipRes;

            sipRes = sipCpp->reverseGeocode(*a0,*a1);

            return sipConvertFromNewType(sipRes,sipType_QGeoCodeReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManager, sipName_reverseGeocode, doc_QGeoCodingManager_reverseGeocode);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManager_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QGeoCodingManager_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManager_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;
        QGeoCodingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoCodingManager, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManager, sipName_setLocale, doc_QGeoCodingManager_setLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodingManager_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QGeoCodingManager_locale(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodingManager_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodingManager, &sipCpp))
        {
            QLocale*sipRes;

            sipRes = new QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodingManager, sipName_locale, doc_QGeoCodingManager_locale);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoCodingManager(void *, int);}
static void release_QGeoCodingManager(void *sipCppV,int)
{
    QGeoCodingManager *sipCpp = reinterpret_cast<QGeoCodingManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoCodingManager(sipSimpleWrapper *);}
static void dealloc_QGeoCodingManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoCodingManager(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoCodingManager[] = {{165, 0, 1}};


static PyMethodDef methods_QGeoCodingManager[] = {
    {SIP_MLNAME_CAST(sipName_geocode), (PyCFunction)meth_QGeoCodingManager_geocode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGeoCodingManager_geocode)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QGeoCodingManager_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManager_locale)},
    {SIP_MLNAME_CAST(sipName_managerName), meth_QGeoCodingManager_managerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManager_managerName)},
    {SIP_MLNAME_CAST(sipName_managerVersion), meth_QGeoCodingManager_managerVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManager_managerVersion)},
    {SIP_MLNAME_CAST(sipName_reverseGeocode), (PyCFunction)meth_QGeoCodingManager_reverseGeocode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGeoCodingManager_reverseGeocode)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QGeoCodingManager_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodingManager_setLocale)}
};


extern "C" {static int emit_QGeoCodingManager_error(void *, PyObject *);}

static int emit_QGeoCodingManager_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QGeoCodingManager *sipCpp = reinterpret_cast<QGeoCodingManager *>(sipCppV);

    {
        QGeoCodeReply* a0;
        QGeoCodeReply::Error a1;
        QString a2def = QString();
        QString* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E|J1", sipType_QGeoCodeReply, &a0, sipType_QGeoCodeReply_Error, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(a2,sipType_QString,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGeoCodingManager, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoCodingManager[] = {
    {"error(QGeoCodeReply*,QGeoCodeReply::Error,QString)", "\1error(self, QGeoCodeReply, QGeoCodeReply.Error, str = '')", 0, emit_QGeoCodingManager_error},
    {"finished(QGeoCodeReply*)", "\1finished(self, QGeoCodeReply)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtLocation_QGeoCodingManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoCodingManager,
        {0}
    },
    {
        sipNameNr_QGeoCodingManager,
        {0, 0, 1},
        6, methods_QGeoCodingManager,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGeoCodingManager,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoCodingManager,
    0,
    0,
    0,
    release_QGeoCodingManager,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGeoCodingManager::staticMetaObject,
    0,
    signals_QGeoCodingManager,
    0
};
