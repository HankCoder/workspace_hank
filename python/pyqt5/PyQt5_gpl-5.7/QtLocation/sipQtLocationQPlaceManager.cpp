/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacemanager.sip"
#include <qplacemanager.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecategory.sip"
#include <qplacecategory.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacereply.sip"
#include <qplacereply.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacematchreply.sip"
#include <qplacematchreply.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacematchrequest.sip"
#include <qplacematchrequest.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplace.sip"
#include <qplace.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceidreply.sip"
#include <qplaceidreply.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchsuggestionreply.sip"
#include <qplacesearchsuggestionreply.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchrequest.sip"
#include <qplacesearchrequest.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchreply.sip"
#include <qplacesearchreply.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontentreply.sip"
#include <qplacecontentreply.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontentrequest.sip"
#include <qplacecontentrequest.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacedetailsreply.sip"
#include <qplacedetailsreply.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManager.cpp"


PyDoc_STRVAR(doc_QPlaceManager_managerName, "managerName(self) -> str");

extern "C" {static PyObject *meth_QPlaceManager_managerName(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_managerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManager, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->managerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_managerName, doc_QPlaceManager_managerName);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_managerVersion, "managerVersion(self) -> int");

extern "C" {static PyObject *meth_QPlaceManager_managerVersion(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_managerVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManager, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->managerVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_managerVersion, doc_QPlaceManager_managerVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_getPlaceDetails, "getPlaceDetails(self, str) -> QPlaceDetailsReply");

extern "C" {static PyObject *meth_QPlaceManager_getPlaceDetails(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_getPlaceDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceDetailsReply*sipRes;

            sipRes = sipCpp->getPlaceDetails(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPlaceDetailsReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_getPlaceDetails, doc_QPlaceManager_getPlaceDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_getPlaceContent, "getPlaceContent(self, QPlaceContentRequest) -> QPlaceContentReply");

extern "C" {static PyObject *meth_QPlaceManager_getPlaceContent(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_getPlaceContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContentRequest* a0;
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QPlaceContentRequest, &a0))
        {
            QPlaceContentReply*sipRes;

            sipRes = sipCpp->getPlaceContent(*a0);

            return sipConvertFromType(sipRes,sipType_QPlaceContentReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_getPlaceContent, doc_QPlaceManager_getPlaceContent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_search, "search(self, QPlaceSearchRequest) -> QPlaceSearchReply");

extern "C" {static PyObject *meth_QPlaceManager_search(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_search(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest* a0;
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QPlaceSearchRequest, &a0))
        {
            QPlaceSearchReply*sipRes;

            sipRes = sipCpp->search(*a0);

            return sipConvertFromType(sipRes,sipType_QPlaceSearchReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_search, doc_QPlaceManager_search);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_searchSuggestions, "searchSuggestions(self, QPlaceSearchRequest) -> QPlaceSearchSuggestionReply");

extern "C" {static PyObject *meth_QPlaceManager_searchSuggestions(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_searchSuggestions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest* a0;
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QPlaceSearchRequest, &a0))
        {
            QPlaceSearchSuggestionReply*sipRes;

            sipRes = sipCpp->searchSuggestions(*a0);

            return sipConvertFromType(sipRes,sipType_QPlaceSearchSuggestionReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_searchSuggestions, doc_QPlaceManager_searchSuggestions);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_savePlace, "savePlace(self, QPlace) -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManager_savePlace(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_savePlace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace* a0;
        QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QPlace, &a0))
        {
            QPlaceIdReply*sipRes;

            sipRes = sipCpp->savePlace(*a0);

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_savePlace, doc_QPlaceManager_savePlace);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_removePlace, "removePlace(self, str) -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManager_removePlace(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_removePlace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceIdReply*sipRes;

            sipRes = sipCpp->removePlace(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_removePlace, doc_QPlaceManager_removePlace);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_saveCategory, "saveCategory(self, QPlaceCategory, parentId: str = '') -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManager_saveCategory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_saveCategory(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory* a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QPlaceManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parentId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QPlaceCategory, &a0, sipType_QString,&a1, &a1State))
        {
            QPlaceIdReply*sipRes;

            sipRes = sipCpp->saveCategory(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_saveCategory, doc_QPlaceManager_saveCategory);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_removeCategory, "removeCategory(self, str) -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManager_removeCategory(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_removeCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceIdReply*sipRes;

            sipRes = sipCpp->removeCategory(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_removeCategory, doc_QPlaceManager_removeCategory);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_initializeCategories, "initializeCategories(self) -> QPlaceReply");

extern "C" {static PyObject *meth_QPlaceManager_initializeCategories(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_initializeCategories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManager, &sipCpp))
        {
            QPlaceReply*sipRes;

            sipRes = sipCpp->initializeCategories();

            return sipConvertFromType(sipRes,sipType_QPlaceReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_initializeCategories, doc_QPlaceManager_initializeCategories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_parentCategoryId, "parentCategoryId(self, str) -> str");

extern "C" {static PyObject *meth_QPlaceManager_parentCategoryId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_parentCategoryId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->parentCategoryId(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_parentCategoryId, doc_QPlaceManager_parentCategoryId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_childCategoryIds, "childCategoryIds(self, parentId: str = '') -> List[str]");

extern "C" {static PyObject *meth_QPlaceManager_childCategoryIds(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_childCategoryIds(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QPlaceManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parentId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->childCategoryIds(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_childCategoryIds, doc_QPlaceManager_childCategoryIds);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_category, "category(self, str) -> QPlaceCategory");

extern "C" {static PyObject *meth_QPlaceManager_category(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_category(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceCategory*sipRes;

            sipRes = new QPlaceCategory(sipCpp->category(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPlaceCategory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_category, doc_QPlaceManager_category);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_childCategories, "childCategories(self, parentId: str = '') -> List[QPlaceCategory]");

extern "C" {static PyObject *meth_QPlaceManager_childCategories(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_childCategories(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QPlaceManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parentId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QList<QPlaceCategory>*sipRes;

            sipRes = new QList<QPlaceCategory>(sipCpp->childCategories(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPlaceCategory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_childCategories, doc_QPlaceManager_childCategories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_locales, "locales(self) -> List[QLocale]");

extern "C" {static PyObject *meth_QPlaceManager_locales(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_locales(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManager, &sipCpp))
        {
            QList<QLocale>*sipRes;

            sipRes = new QList<QLocale>(sipCpp->locales());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_locales, doc_QPlaceManager_locales);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QPlaceManager_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;
        QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_setLocale, doc_QPlaceManager_setLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_setLocales, "setLocales(self, Iterable[QLocale])");

extern "C" {static PyObject *meth_QPlaceManager_setLocales(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_setLocales(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QLocale>* a0;
        int a0State = 0;
        QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QList_0100QLocale,&a0, &a0State))
        {
            sipCpp->setLocales(*a0);
            sipReleaseType(const_cast<QList<QLocale> *>(a0),sipType_QList_0100QLocale,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_setLocales, doc_QPlaceManager_setLocales);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_compatiblePlace, "compatiblePlace(self, QPlace) -> QPlace");

extern "C" {static PyObject *meth_QPlaceManager_compatiblePlace(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_compatiblePlace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace* a0;
        QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QPlace, &a0))
        {
            QPlace*sipRes;

            sipRes = new QPlace(sipCpp->compatiblePlace(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPlace,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_compatiblePlace, doc_QPlaceManager_compatiblePlace);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManager_matchingPlaces, "matchingPlaces(self, QPlaceMatchRequest) -> QPlaceMatchReply");

extern "C" {static PyObject *meth_QPlaceManager_matchingPlaces(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManager_matchingPlaces(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceMatchRequest* a0;
        const QPlaceManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManager, &sipCpp, sipType_QPlaceMatchRequest, &a0))
        {
            QPlaceMatchReply*sipRes;

            sipRes = sipCpp->matchingPlaces(*a0);

            return sipConvertFromType(sipRes,sipType_QPlaceMatchReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_matchingPlaces, doc_QPlaceManager_matchingPlaces);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceManager(void *, int);}
static void release_QPlaceManager(void *sipCppV,int)
{
    QPlaceManager *sipCpp = reinterpret_cast<QPlaceManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPlaceManager(sipSimpleWrapper *);}
static void dealloc_QPlaceManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceManager(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlaceManager[] = {{165, 0, 1}};


static PyMethodDef methods_QPlaceManager[] = {
    {SIP_MLNAME_CAST(sipName_category), meth_QPlaceManager_category, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_category)},
    {SIP_MLNAME_CAST(sipName_childCategories), (PyCFunction)meth_QPlaceManager_childCategories, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPlaceManager_childCategories)},
    {SIP_MLNAME_CAST(sipName_childCategoryIds), (PyCFunction)meth_QPlaceManager_childCategoryIds, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPlaceManager_childCategoryIds)},
    {SIP_MLNAME_CAST(sipName_compatiblePlace), meth_QPlaceManager_compatiblePlace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_compatiblePlace)},
    {SIP_MLNAME_CAST(sipName_getPlaceContent), meth_QPlaceManager_getPlaceContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_getPlaceContent)},
    {SIP_MLNAME_CAST(sipName_getPlaceDetails), meth_QPlaceManager_getPlaceDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_getPlaceDetails)},
    {SIP_MLNAME_CAST(sipName_initializeCategories), meth_QPlaceManager_initializeCategories, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_initializeCategories)},
    {SIP_MLNAME_CAST(sipName_locales), meth_QPlaceManager_locales, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_locales)},
    {SIP_MLNAME_CAST(sipName_managerName), meth_QPlaceManager_managerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_managerName)},
    {SIP_MLNAME_CAST(sipName_managerVersion), meth_QPlaceManager_managerVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_managerVersion)},
    {SIP_MLNAME_CAST(sipName_matchingPlaces), meth_QPlaceManager_matchingPlaces, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_matchingPlaces)},
    {SIP_MLNAME_CAST(sipName_parentCategoryId), meth_QPlaceManager_parentCategoryId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_parentCategoryId)},
    {SIP_MLNAME_CAST(sipName_removeCategory), meth_QPlaceManager_removeCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_removeCategory)},
    {SIP_MLNAME_CAST(sipName_removePlace), meth_QPlaceManager_removePlace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_removePlace)},
    {SIP_MLNAME_CAST(sipName_saveCategory), (PyCFunction)meth_QPlaceManager_saveCategory, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPlaceManager_saveCategory)},
    {SIP_MLNAME_CAST(sipName_savePlace), meth_QPlaceManager_savePlace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_savePlace)},
    {SIP_MLNAME_CAST(sipName_search), meth_QPlaceManager_search, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_search)},
    {SIP_MLNAME_CAST(sipName_searchSuggestions), meth_QPlaceManager_searchSuggestions, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_searchSuggestions)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QPlaceManager_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_setLocale)},
    {SIP_MLNAME_CAST(sipName_setLocales), meth_QPlaceManager_setLocales, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManager_setLocales)}
};


extern "C" {static int emit_QPlaceManager_error(void *, PyObject *);}

static int emit_QPlaceManager_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QPlaceManager *sipCpp = reinterpret_cast<QPlaceManager *>(sipCppV);

    {
        QPlaceReply* a0;
        QPlaceReply::Error a1;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E|J1", sipType_QPlaceReply, &a0, sipType_QPlaceReply_Error, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlaceManager, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QPlaceManager[] = {
    {"dataChanged()", "\1dataChanged(self)", 0, 0},
    {"categoryRemoved(QString,QString)", "\1categoryRemoved(self, str, str)", 0, 0},
    {"categoryUpdated(QPlaceCategory,QString)", "\1categoryUpdated(self, QPlaceCategory, str)", 0, 0},
    {"categoryAdded(QPlaceCategory,QString)", "\1categoryAdded(self, QPlaceCategory, str)", 0, 0},
    {"placeRemoved(QString)", "\1placeRemoved(self, str)", 0, 0},
    {"placeUpdated(QString)", "\1placeUpdated(self, str)", 0, 0},
    {"placeAdded(QString)", "\1placeAdded(self, str)", 0, 0},
    {"error(QPlaceReply*,QPlaceReply::Error,QString)", "\1error(self, QPlaceReply, QPlaceReply.Error, str = '')", 0, emit_QPlaceManager_error},
    {"finished(QPlaceReply*)", "\1finished(self, QPlaceReply)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceManager,
        {0}
    },
    {
        sipNameNr_QPlaceManager,
        {0, 0, 1},
        20, methods_QPlaceManager,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QPlaceManager,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceManager,
    0,
    0,
    0,
    release_QPlaceManager,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QPlaceManager::staticMetaObject,
    0,
    signals_QPlaceManager,
    0
};
