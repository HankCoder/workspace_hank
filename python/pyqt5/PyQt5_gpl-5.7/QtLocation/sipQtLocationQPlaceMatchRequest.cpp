/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacematchrequest.sip"
#include <qplacematchrequest.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"
#line 27 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchresult.sip"
#include <qplacesearchresult.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplace.sip"
#include <qplace.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceMatchRequest.cpp"


PyDoc_STRVAR(doc_QPlaceMatchRequest_places, "places(self) -> List[QPlace]");

extern "C" {static PyObject *meth_QPlaceMatchRequest_places(PyObject *, PyObject *);}
static PyObject *meth_QPlaceMatchRequest_places(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceMatchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceMatchRequest, &sipCpp))
        {
            QList<QPlace>*sipRes;

            sipRes = new QList<QPlace>(sipCpp->places());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPlace,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceMatchRequest, sipName_places, doc_QPlaceMatchRequest_places);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceMatchRequest_setPlaces, "setPlaces(self, Iterable[QPlace])");

extern "C" {static PyObject *meth_QPlaceMatchRequest_setPlaces(PyObject *, PyObject *);}
static PyObject *meth_QPlaceMatchRequest_setPlaces(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPlace>* a0;
        int a0State = 0;
        QPlaceMatchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceMatchRequest, &sipCpp, sipType_QList_0100QPlace,&a0, &a0State))
        {
            sipCpp->setPlaces(*a0);
            sipReleaseType(const_cast<QList<QPlace> *>(a0),sipType_QList_0100QPlace,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceMatchRequest, sipName_setPlaces, doc_QPlaceMatchRequest_setPlaces);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceMatchRequest_setResults, "setResults(self, object)");

extern "C" {static PyObject *meth_QPlaceMatchRequest_setResults(PyObject *, PyObject *);}
static PyObject *meth_QPlaceMatchRequest_setResults(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPlaceSearchResult>* a0;
        int a0State = 0;
        QPlaceMatchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceMatchRequest, &sipCpp, sipType_QList_0100QPlaceSearchResult,&a0, &a0State))
        {
            sipCpp->setResults(*a0);
            sipReleaseType(const_cast<QList<QPlaceSearchResult> *>(a0),sipType_QList_0100QPlaceSearchResult,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceMatchRequest, sipName_setResults, doc_QPlaceMatchRequest_setResults);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceMatchRequest_parameters, "parameters(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QPlaceMatchRequest_parameters(PyObject *, PyObject *);}
static PyObject *meth_QPlaceMatchRequest_parameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceMatchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceMatchRequest, &sipCpp))
        {
            QVariantMap*sipRes;

            sipRes = new QVariantMap(sipCpp->parameters());

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceMatchRequest, sipName_parameters, doc_QPlaceMatchRequest_parameters);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceMatchRequest_setParameters, "setParameters(self, Dict[str, Any])");

extern "C" {static PyObject *meth_QPlaceMatchRequest_setParameters(PyObject *, PyObject *);}
static PyObject *meth_QPlaceMatchRequest_setParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantMap* a0;
        int a0State = 0;
        QPlaceMatchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceMatchRequest, &sipCpp, sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
            sipCpp->setParameters(*a0);
            sipReleaseType(const_cast<QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceMatchRequest, sipName_setParameters, doc_QPlaceMatchRequest_setParameters);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceMatchRequest_clear, "clear(self)");

extern "C" {static PyObject *meth_QPlaceMatchRequest_clear(PyObject *, PyObject *);}
static PyObject *meth_QPlaceMatchRequest_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceMatchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceMatchRequest, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceMatchRequest, sipName_clear, doc_QPlaceMatchRequest_clear);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceMatchRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceMatchRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceMatchRequest *sipCpp = reinterpret_cast<QPlaceMatchRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceMatchRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceMatchRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceMatchRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceMatchRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceMatchRequest,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceMatchRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceMatchRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceMatchRequest *sipCpp = reinterpret_cast<QPlaceMatchRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceMatchRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceMatchRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceMatchRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceMatchRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceMatchRequest,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceMatchRequest(void *, int);}
static void release_QPlaceMatchRequest(void *sipCppV,int)
{
    delete reinterpret_cast<QPlaceMatchRequest *>(sipCppV);
}


extern "C" {static void assign_QPlaceMatchRequest(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceMatchRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceMatchRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceMatchRequest *>(sipSrc);
}


extern "C" {static void *array_QPlaceMatchRequest(SIP_SSIZE_T);}
static void *array_QPlaceMatchRequest(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceMatchRequest[sipNrElem];
}


extern "C" {static void *copy_QPlaceMatchRequest(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceMatchRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceMatchRequest(reinterpret_cast<const QPlaceMatchRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceMatchRequest(sipSimpleWrapper *);}
static void dealloc_QPlaceMatchRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceMatchRequest(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPlaceMatchRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceMatchRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPlaceMatchRequest *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPlaceMatchRequest();

            return sipCpp;
        }
    }

    {
        const QPlaceMatchRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceMatchRequest, &a0))
        {
            sipCpp = new QPlaceMatchRequest(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceMatchRequest[] = {
    {(void *)slot_QPlaceMatchRequest___ne__, ne_slot},
    {(void *)slot_QPlaceMatchRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceMatchRequest[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QPlaceMatchRequest_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceMatchRequest_clear)},
    {SIP_MLNAME_CAST(sipName_parameters), meth_QPlaceMatchRequest_parameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceMatchRequest_parameters)},
    {SIP_MLNAME_CAST(sipName_places), meth_QPlaceMatchRequest_places, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceMatchRequest_places)},
    {SIP_MLNAME_CAST(sipName_setParameters), meth_QPlaceMatchRequest_setParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceMatchRequest_setParameters)},
    {SIP_MLNAME_CAST(sipName_setPlaces), meth_QPlaceMatchRequest_setPlaces, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceMatchRequest_setPlaces)},
    {SIP_MLNAME_CAST(sipName_setResults), meth_QPlaceMatchRequest_setResults, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceMatchRequest_setResults)}
};


extern "C" {static PyObject *varget_QPlaceMatchRequest_AlternativeId(void *, PyObject *, PyObject *);}
static PyObject *varget_QPlaceMatchRequest_AlternativeId(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const QString*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = new QString(QPlaceMatchRequest::AlternativeId);

    sipPy = sipConvertFromNewType(const_cast<QString *>(sipVal), sipType_QString, NULL);
    Py_XINCREF(sipPy);

    return sipPy;
}

sipVariableDef variables_QPlaceMatchRequest[] = {
    {ClassVariable, sipName_AlternativeId, (PyMethodDef *)varget_QPlaceMatchRequest_AlternativeId, NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_QPlaceMatchRequest, "\1QPlaceMatchRequest()\n"
    "QPlaceMatchRequest(QPlaceMatchRequest)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceMatchRequest = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceMatchRequest,
        {0}
    },
    {
        sipNameNr_QPlaceMatchRequest,
        {0, 0, 1},
        6, methods_QPlaceMatchRequest,
        0, 0,
        1, variables_QPlaceMatchRequest,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceMatchRequest,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceMatchRequest,
    init_type_QPlaceMatchRequest,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceMatchRequest,
    assign_QPlaceMatchRequest,
    array_QPlaceMatchRequest,
    copy_QPlaceMatchRequest,
    release_QPlaceMatchRequest,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
