/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceidreply.sip"
#include <qplaceidreply.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacereply.sip"
#include <qplacereply.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceIdReply.cpp"


class sipQPlaceIdReply : public QPlaceIdReply
{
public:
    sipQPlaceIdReply(QPlaceIdReply::OperationType,QObject*);
    virtual ~sipQPlaceIdReply();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void abort();
    QPlaceReply::Type type() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceIdReply(const sipQPlaceIdReply &);
    sipQPlaceIdReply &operator = (const sipQPlaceIdReply &);

    char sipPyMethods[9];
};

sipQPlaceIdReply::sipQPlaceIdReply(QPlaceIdReply::OperationType a0,QObject*a1): QPlaceIdReply(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlaceIdReply::~sipQPlaceIdReply()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlaceIdReply::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QPlaceIdReply);

    return QPlaceIdReply::metaObject();
}

int sipQPlaceIdReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPlaceIdReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QPlaceIdReply,_c,_id,_a);

    return _id;
}

void *sipQPlaceIdReply::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QPlaceIdReply, _clname, &sipCpp) ? sipCpp : QPlaceIdReply::qt_metacast(_clname));
}

void sipQPlaceIdReply::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QPlaceIdReply::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceIdReply::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QPlaceIdReply::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceIdReply::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QPlaceIdReply::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceIdReply::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QPlaceIdReply::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceIdReply::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QPlaceIdReply::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQPlaceIdReply::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QPlaceIdReply::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQPlaceIdReply::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QPlaceIdReply::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceIdReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_abort);

    if (!sipMeth)
    {
        QPlaceIdReply::abort();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QPlaceReply::Type sipQPlaceIdReply::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return QPlaceIdReply::type();

    extern QPlaceReply::Type sipVH_QtLocation_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtLocation_0(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QPlaceIdReply_type, "type(self) -> QPlaceReply.Type");

extern "C" {static PyObject *meth_QPlaceIdReply_type(PyObject *, PyObject *);}
static PyObject *meth_QPlaceIdReply_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceIdReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceIdReply, &sipCpp))
        {
            QPlaceReply::Type sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceIdReply::type() : sipCpp->type());

            return sipConvertFromEnum(sipRes,sipType_QPlaceReply_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceIdReply, sipName_type, doc_QPlaceIdReply_type);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceIdReply_operationType, "operationType(self) -> QPlaceIdReply.OperationType");

extern "C" {static PyObject *meth_QPlaceIdReply_operationType(PyObject *, PyObject *);}
static PyObject *meth_QPlaceIdReply_operationType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceIdReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceIdReply, &sipCpp))
        {
            QPlaceIdReply::OperationType sipRes;

            sipRes = sipCpp->operationType();

            return sipConvertFromEnum(sipRes,sipType_QPlaceIdReply_OperationType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceIdReply, sipName_operationType, doc_QPlaceIdReply_operationType);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceIdReply_id, "id(self) -> str");

extern "C" {static PyObject *meth_QPlaceIdReply_id(PyObject *, PyObject *);}
static PyObject *meth_QPlaceIdReply_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceIdReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceIdReply, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->id());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceIdReply, sipName_id, doc_QPlaceIdReply_id);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceIdReply_setId, "setId(self, str)");

extern "C" {static PyObject *meth_QPlaceIdReply_setId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceIdReply_setId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceIdReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QPlaceIdReply, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceIdReply, sipName_setId, doc_QPlaceIdReply_setId);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceIdReply(void *, int);}
static void release_QPlaceIdReply(void *sipCppV,int)
{
    QPlaceIdReply *sipCpp = reinterpret_cast<QPlaceIdReply *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPlaceIdReply(sipSimpleWrapper *);}
static void dealloc_QPlaceIdReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceIdReply *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceIdReply(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceIdReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceIdReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPlaceIdReply *sipCpp = 0;

    {
        QPlaceIdReply::OperationType a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QPlaceIdReply_OperationType, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQPlaceIdReply(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlaceIdReply[] = {{67, 255, 1}};


static PyMethodDef methods_QPlaceIdReply[] = {
    {SIP_MLNAME_CAST(sipName_id), meth_QPlaceIdReply_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceIdReply_id)},
    {SIP_MLNAME_CAST(sipName_operationType), meth_QPlaceIdReply_operationType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceIdReply_operationType)},
    {SIP_MLNAME_CAST(sipName_setId), meth_QPlaceIdReply_setId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceIdReply_setId)},
    {SIP_MLNAME_CAST(sipName_type), meth_QPlaceIdReply_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceIdReply_type)}
};

static sipEnumMemberDef enummembers_QPlaceIdReply[] = {
    {sipName_RemoveCategory, static_cast<int>(QPlaceIdReply::RemoveCategory), 59},
    {sipName_RemovePlace, static_cast<int>(QPlaceIdReply::RemovePlace), 59},
    {sipName_SaveCategory, static_cast<int>(QPlaceIdReply::SaveCategory), 59},
    {sipName_SavePlace, static_cast<int>(QPlaceIdReply::SavePlace), 59},
};

PyDoc_STRVAR(doc_QPlaceIdReply, "\1QPlaceIdReply(QPlaceIdReply.OperationType, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceIdReply = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceIdReply,
        {0}
    },
    {
        sipNameNr_QPlaceIdReply,
        {0, 0, 1},
        4, methods_QPlaceIdReply,
        4, enummembers_QPlaceIdReply,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceIdReply,
    -1,
    -1,
    supers_QPlaceIdReply,
    0,
    init_type_QPlaceIdReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceIdReply,
    0,
    0,
    0,
    release_QPlaceIdReply,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QPlaceIdReply::staticMetaObject,
    0,
    0,
    0
};
