/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontentrequest.sip"
#include <qplacecontentrequest.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContentRequest.cpp"

#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContentRequest.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContentRequest.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontent.sip"
#include <qplacecontent.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContentRequest.cpp"


PyDoc_STRVAR(doc_QPlaceContentRequest_contentType, "contentType(self) -> QPlaceContent.Type");

extern "C" {static PyObject *meth_QPlaceContentRequest_contentType(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_contentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContentRequest, &sipCpp))
        {
            QPlaceContent::Type sipRes;

            sipRes = sipCpp->contentType();

            return sipConvertFromEnum(sipRes,sipType_QPlaceContent_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_contentType, doc_QPlaceContentRequest_contentType);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_setContentType, "setContentType(self, QPlaceContent.Type)");

extern "C" {static PyObject *meth_QPlaceContentRequest_setContentType(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_setContentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContent::Type a0;
        QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlaceContentRequest, &sipCpp, sipType_QPlaceContent_Type, &a0))
        {
            sipCpp->setContentType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_setContentType, doc_QPlaceContentRequest_setContentType);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_placeId, "placeId(self) -> str");

extern "C" {static PyObject *meth_QPlaceContentRequest_placeId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_placeId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContentRequest, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->placeId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_placeId, doc_QPlaceContentRequest_placeId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_setPlaceId, "setPlaceId(self, str)");

extern "C" {static PyObject *meth_QPlaceContentRequest_setPlaceId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_setPlaceId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceContentRequest, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_setPlaceId, doc_QPlaceContentRequest_setPlaceId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_contentContext, "contentContext(self) -> Any");

extern "C" {static PyObject *meth_QPlaceContentRequest_contentContext(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_contentContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContentRequest, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->contentContext());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_contentContext, doc_QPlaceContentRequest_contentContext);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_setContentContext, "setContentContext(self, Any)");

extern "C" {static PyObject *meth_QPlaceContentRequest_setContentContext(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_setContentContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceContentRequest, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setContentContext(*a0);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_setContentContext, doc_QPlaceContentRequest_setContentContext);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_limit, "limit(self) -> int");

extern "C" {static PyObject *meth_QPlaceContentRequest_limit(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_limit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContentRequest, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->limit();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_limit, doc_QPlaceContentRequest_limit);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_setLimit, "setLimit(self, int)");

extern "C" {static PyObject *meth_QPlaceContentRequest_setLimit(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_setLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlaceContentRequest, &sipCpp, &a0))
        {
            sipCpp->setLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_setLimit, doc_QPlaceContentRequest_setLimit);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContentRequest_clear, "clear(self)");

extern "C" {static PyObject *meth_QPlaceContentRequest_clear(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContentRequest_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContentRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContentRequest, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContentRequest, sipName_clear, doc_QPlaceContentRequest_clear);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceContentRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceContentRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceContentRequest *sipCpp = reinterpret_cast<QPlaceContentRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceContentRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceContentRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceContentRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceContentRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceContentRequest,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceContentRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceContentRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceContentRequest *sipCpp = reinterpret_cast<QPlaceContentRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceContentRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceContentRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceContentRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceContentRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceContentRequest,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceContentRequest(void *, int);}
static void release_QPlaceContentRequest(void *sipCppV,int)
{
    delete reinterpret_cast<QPlaceContentRequest *>(sipCppV);
}


extern "C" {static void assign_QPlaceContentRequest(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceContentRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceContentRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceContentRequest *>(sipSrc);
}


extern "C" {static void *array_QPlaceContentRequest(SIP_SSIZE_T);}
static void *array_QPlaceContentRequest(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceContentRequest[sipNrElem];
}


extern "C" {static void *copy_QPlaceContentRequest(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceContentRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceContentRequest(reinterpret_cast<const QPlaceContentRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceContentRequest(sipSimpleWrapper *);}
static void dealloc_QPlaceContentRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceContentRequest(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPlaceContentRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceContentRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPlaceContentRequest *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPlaceContentRequest();

            return sipCpp;
        }
    }

    {
        const QPlaceContentRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceContentRequest, &a0))
        {
            sipCpp = new QPlaceContentRequest(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceContentRequest[] = {
    {(void *)slot_QPlaceContentRequest___ne__, ne_slot},
    {(void *)slot_QPlaceContentRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceContentRequest[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QPlaceContentRequest_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_clear)},
    {SIP_MLNAME_CAST(sipName_contentContext), meth_QPlaceContentRequest_contentContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_contentContext)},
    {SIP_MLNAME_CAST(sipName_contentType), meth_QPlaceContentRequest_contentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_contentType)},
    {SIP_MLNAME_CAST(sipName_limit), meth_QPlaceContentRequest_limit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_limit)},
    {SIP_MLNAME_CAST(sipName_placeId), meth_QPlaceContentRequest_placeId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_placeId)},
    {SIP_MLNAME_CAST(sipName_setContentContext), meth_QPlaceContentRequest_setContentContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_setContentContext)},
    {SIP_MLNAME_CAST(sipName_setContentType), meth_QPlaceContentRequest_setContentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_setContentType)},
    {SIP_MLNAME_CAST(sipName_setLimit), meth_QPlaceContentRequest_setLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_setLimit)},
    {SIP_MLNAME_CAST(sipName_setPlaceId), meth_QPlaceContentRequest_setPlaceId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContentRequest_setPlaceId)}
};

PyDoc_STRVAR(doc_QPlaceContentRequest, "\1QPlaceContentRequest()\n"
    "QPlaceContentRequest(QPlaceContentRequest)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceContentRequest = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceContentRequest,
        {0}
    },
    {
        sipNameNr_QPlaceContentRequest,
        {0, 0, 1},
        9, methods_QPlaceContentRequest,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceContentRequest,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceContentRequest,
    init_type_QPlaceContentRequest,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceContentRequest,
    assign_QPlaceContentRequest,
    array_QPlaceContentRequest,
    copy_QPlaceContentRequest,
    release_QPlaceContentRequest,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
