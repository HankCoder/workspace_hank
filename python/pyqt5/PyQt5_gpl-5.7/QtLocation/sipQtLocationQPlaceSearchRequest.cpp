/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchrequest.sip"
#include <qplacesearchrequest.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSearchRequest.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qlocation.sip"
#include <qlocation.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSearchRequest.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSearchRequest.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSearchRequest.cpp"
#line 28 "sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSearchRequest.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSearchRequest.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecategory.sip"
#include <qplacecategory.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSearchRequest.cpp"


PyDoc_STRVAR(doc_QPlaceSearchRequest_searchTerm, "searchTerm(self) -> str");

extern "C" {static PyObject *meth_QPlaceSearchRequest_searchTerm(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_searchTerm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->searchTerm());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_searchTerm, doc_QPlaceSearchRequest_searchTerm);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setSearchTerm, "setSearchTerm(self, str)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setSearchTerm(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setSearchTerm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setSearchTerm(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setSearchTerm, doc_QPlaceSearchRequest_setSearchTerm);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_categories, "categories(self) -> List[QPlaceCategory]");

extern "C" {static PyObject *meth_QPlaceSearchRequest_categories(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_categories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            QList<QPlaceCategory>*sipRes;

            sipRes = new QList<QPlaceCategory>(sipCpp->categories());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPlaceCategory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_categories, doc_QPlaceSearchRequest_categories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setCategory, "setCategory(self, QPlaceCategory)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setCategory(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory* a0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QPlaceCategory, &a0))
        {
            sipCpp->setCategory(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setCategory, doc_QPlaceSearchRequest_setCategory);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setCategories, "setCategories(self, Iterable[QPlaceCategory])");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setCategories(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setCategories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPlaceCategory>* a0;
        int a0State = 0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QList_0100QPlaceCategory,&a0, &a0State))
        {
            sipCpp->setCategories(*a0);
            sipReleaseType(const_cast<QList<QPlaceCategory> *>(a0),sipType_QList_0100QPlaceCategory,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setCategories, doc_QPlaceSearchRequest_setCategories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_searchArea, "searchArea(self) -> QGeoShape");

extern "C" {static PyObject *meth_QPlaceSearchRequest_searchArea(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_searchArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            QGeoShape*sipRes;

            sipRes = new QGeoShape(sipCpp->searchArea());

            return sipConvertFromNewType(sipRes,sipType_QGeoShape,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_searchArea, doc_QPlaceSearchRequest_searchArea);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setSearchArea, "setSearchArea(self, QGeoShape)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setSearchArea(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setSearchArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoShape* a0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QGeoShape, &a0))
        {
            sipCpp->setSearchArea(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setSearchArea, doc_QPlaceSearchRequest_setSearchArea);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_recommendationId, "recommendationId(self) -> str");

extern "C" {static PyObject *meth_QPlaceSearchRequest_recommendationId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_recommendationId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->recommendationId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_recommendationId, doc_QPlaceSearchRequest_recommendationId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setRecommendationId, "setRecommendationId(self, str)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setRecommendationId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setRecommendationId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setRecommendationId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setRecommendationId, doc_QPlaceSearchRequest_setRecommendationId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_searchContext, "searchContext(self) -> Any");

extern "C" {static PyObject *meth_QPlaceSearchRequest_searchContext(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_searchContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->searchContext());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_searchContext, doc_QPlaceSearchRequest_searchContext);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setSearchContext, "setSearchContext(self, Any)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setSearchContext(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setSearchContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setSearchContext(*a0);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setSearchContext, doc_QPlaceSearchRequest_setSearchContext);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_visibilityScope, "visibilityScope(self) -> QLocation.VisibilityScope");

extern "C" {static PyObject *meth_QPlaceSearchRequest_visibilityScope(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_visibilityScope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            QLocation::VisibilityScope*sipRes;

            sipRes = new QLocation::VisibilityScope(sipCpp->visibilityScope());

            return sipConvertFromNewType(sipRes,sipType_QLocation_VisibilityScope,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_visibilityScope, doc_QPlaceSearchRequest_visibilityScope);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setVisibilityScope, "setVisibilityScope(self, Union[QLocation.VisibilityScope, QLocation.Visibility])");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setVisibilityScope(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setVisibilityScope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocation::VisibilityScope* a0;
        int a0State = 0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QLocation_VisibilityScope, &a0, &a0State))
        {
            sipCpp->setVisibilityScope(*a0);
            sipReleaseType(a0,sipType_QLocation_VisibilityScope,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setVisibilityScope, doc_QPlaceSearchRequest_setVisibilityScope);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_relevanceHint, "relevanceHint(self) -> QPlaceSearchRequest.RelevanceHint");

extern "C" {static PyObject *meth_QPlaceSearchRequest_relevanceHint(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_relevanceHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            QPlaceSearchRequest::RelevanceHint sipRes;

            sipRes = sipCpp->relevanceHint();

            return sipConvertFromEnum(sipRes,sipType_QPlaceSearchRequest_RelevanceHint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_relevanceHint, doc_QPlaceSearchRequest_relevanceHint);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setRelevanceHint, "setRelevanceHint(self, QPlaceSearchRequest.RelevanceHint)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setRelevanceHint(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setRelevanceHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceSearchRequest::RelevanceHint a0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, sipType_QPlaceSearchRequest_RelevanceHint, &a0))
        {
            sipCpp->setRelevanceHint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setRelevanceHint, doc_QPlaceSearchRequest_setRelevanceHint);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_limit, "limit(self) -> int");

extern "C" {static PyObject *meth_QPlaceSearchRequest_limit(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_limit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->limit();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_limit, doc_QPlaceSearchRequest_limit);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_setLimit, "setLimit(self, int)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_setLimit(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_setLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp, &a0))
        {
            sipCpp->setLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_setLimit, doc_QPlaceSearchRequest_setLimit);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSearchRequest_clear, "clear(self)");

extern "C" {static PyObject *meth_QPlaceSearchRequest_clear(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSearchRequest_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceSearchRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSearchRequest, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSearchRequest, sipName_clear, doc_QPlaceSearchRequest_clear);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceSearchRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceSearchRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceSearchRequest *sipCpp = reinterpret_cast<QPlaceSearchRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceSearchRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceSearchRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceSearchRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceSearchRequest,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceSearchRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceSearchRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceSearchRequest *sipCpp = reinterpret_cast<QPlaceSearchRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceSearchRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceSearchRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceSearchRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceSearchRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceSearchRequest,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceSearchRequest(void *, int);}
static void release_QPlaceSearchRequest(void *sipCppV,int)
{
    delete reinterpret_cast<QPlaceSearchRequest *>(sipCppV);
}


extern "C" {static void assign_QPlaceSearchRequest(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceSearchRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceSearchRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceSearchRequest *>(sipSrc);
}


extern "C" {static void *array_QPlaceSearchRequest(SIP_SSIZE_T);}
static void *array_QPlaceSearchRequest(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceSearchRequest[sipNrElem];
}


extern "C" {static void *copy_QPlaceSearchRequest(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceSearchRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceSearchRequest(reinterpret_cast<const QPlaceSearchRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceSearchRequest(sipSimpleWrapper *);}
static void dealloc_QPlaceSearchRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceSearchRequest(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPlaceSearchRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceSearchRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPlaceSearchRequest *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPlaceSearchRequest();

            return sipCpp;
        }
    }

    {
        const QPlaceSearchRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceSearchRequest, &a0))
        {
            sipCpp = new QPlaceSearchRequest(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceSearchRequest[] = {
    {(void *)slot_QPlaceSearchRequest___ne__, ne_slot},
    {(void *)slot_QPlaceSearchRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceSearchRequest[] = {
    {SIP_MLNAME_CAST(sipName_categories), meth_QPlaceSearchRequest_categories, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_categories)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPlaceSearchRequest_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_clear)},
    {SIP_MLNAME_CAST(sipName_limit), meth_QPlaceSearchRequest_limit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_limit)},
    {SIP_MLNAME_CAST(sipName_recommendationId), meth_QPlaceSearchRequest_recommendationId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_recommendationId)},
    {SIP_MLNAME_CAST(sipName_relevanceHint), meth_QPlaceSearchRequest_relevanceHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_relevanceHint)},
    {SIP_MLNAME_CAST(sipName_searchArea), meth_QPlaceSearchRequest_searchArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_searchArea)},
    {SIP_MLNAME_CAST(sipName_searchContext), meth_QPlaceSearchRequest_searchContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_searchContext)},
    {SIP_MLNAME_CAST(sipName_searchTerm), meth_QPlaceSearchRequest_searchTerm, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_searchTerm)},
    {SIP_MLNAME_CAST(sipName_setCategories), meth_QPlaceSearchRequest_setCategories, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setCategories)},
    {SIP_MLNAME_CAST(sipName_setCategory), meth_QPlaceSearchRequest_setCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setCategory)},
    {SIP_MLNAME_CAST(sipName_setLimit), meth_QPlaceSearchRequest_setLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setLimit)},
    {SIP_MLNAME_CAST(sipName_setRecommendationId), meth_QPlaceSearchRequest_setRecommendationId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setRecommendationId)},
    {SIP_MLNAME_CAST(sipName_setRelevanceHint), meth_QPlaceSearchRequest_setRelevanceHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setRelevanceHint)},
    {SIP_MLNAME_CAST(sipName_setSearchArea), meth_QPlaceSearchRequest_setSearchArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setSearchArea)},
    {SIP_MLNAME_CAST(sipName_setSearchContext), meth_QPlaceSearchRequest_setSearchContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setSearchContext)},
    {SIP_MLNAME_CAST(sipName_setSearchTerm), meth_QPlaceSearchRequest_setSearchTerm, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setSearchTerm)},
    {SIP_MLNAME_CAST(sipName_setVisibilityScope), meth_QPlaceSearchRequest_setVisibilityScope, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_setVisibilityScope)},
    {SIP_MLNAME_CAST(sipName_visibilityScope), meth_QPlaceSearchRequest_visibilityScope, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSearchRequest_visibilityScope)}
};

static sipEnumMemberDef enummembers_QPlaceSearchRequest[] = {
    {sipName_DistanceHint, static_cast<int>(QPlaceSearchRequest::DistanceHint), 74},
    {sipName_LexicalPlaceNameHint, static_cast<int>(QPlaceSearchRequest::LexicalPlaceNameHint), 74},
    {sipName_UnspecifiedHint, static_cast<int>(QPlaceSearchRequest::UnspecifiedHint), 74},
};

PyDoc_STRVAR(doc_QPlaceSearchRequest, "\1QPlaceSearchRequest()\n"
    "QPlaceSearchRequest(QPlaceSearchRequest)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceSearchRequest = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceSearchRequest,
        {0}
    },
    {
        sipNameNr_QPlaceSearchRequest,
        {0, 0, 1},
        18, methods_QPlaceSearchRequest,
        3, enummembers_QPlaceSearchRequest,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceSearchRequest,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceSearchRequest,
    init_type_QPlaceSearchRequest,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceSearchRequest,
    assign_QPlaceSearchRequest,
    array_QPlaceSearchRequest,
    copy_QPlaceSearchRequest,
    release_QPlaceSearchRequest,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
