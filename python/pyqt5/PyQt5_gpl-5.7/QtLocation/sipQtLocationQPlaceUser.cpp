/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceuser.sip"
#include <qplaceuser.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceUser.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceUser.cpp"


PyDoc_STRVAR(doc_QPlaceUser_userId, "userId(self) -> str");

extern "C" {static PyObject *meth_QPlaceUser_userId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceUser_userId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceUser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceUser, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->userId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceUser, sipName_userId, doc_QPlaceUser_userId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceUser_setUserId, "setUserId(self, str)");

extern "C" {static PyObject *meth_QPlaceUser_setUserId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceUser_setUserId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceUser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceUser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setUserId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceUser, sipName_setUserId, doc_QPlaceUser_setUserId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceUser_name, "name(self) -> str");

extern "C" {static PyObject *meth_QPlaceUser_name(PyObject *, PyObject *);}
static PyObject *meth_QPlaceUser_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceUser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceUser, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceUser, sipName_name, doc_QPlaceUser_name);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceUser_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QPlaceUser_setName(PyObject *, PyObject *);}
static PyObject *meth_QPlaceUser_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceUser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceUser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceUser, sipName_setName, doc_QPlaceUser_setName);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceUser___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceUser___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceUser *sipCpp = reinterpret_cast<QPlaceUser *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceUser));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceUser* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceUser, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceUser::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceUser,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceUser___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceUser___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceUser *sipCpp = reinterpret_cast<QPlaceUser *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceUser));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceUser* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceUser, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceUser::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceUser,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceUser(void *, int);}
static void release_QPlaceUser(void *sipCppV,int)
{
    delete reinterpret_cast<QPlaceUser *>(sipCppV);
}


extern "C" {static void assign_QPlaceUser(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceUser(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceUser *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceUser *>(sipSrc);
}


extern "C" {static void *array_QPlaceUser(SIP_SSIZE_T);}
static void *array_QPlaceUser(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceUser[sipNrElem];
}


extern "C" {static void *copy_QPlaceUser(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceUser(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceUser(reinterpret_cast<const QPlaceUser *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceUser(sipSimpleWrapper *);}
static void dealloc_QPlaceUser(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceUser(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPlaceUser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceUser(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPlaceUser *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPlaceUser();

            return sipCpp;
        }
    }

    {
        const QPlaceUser* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceUser, &a0))
        {
            sipCpp = new QPlaceUser(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceUser[] = {
    {(void *)slot_QPlaceUser___ne__, ne_slot},
    {(void *)slot_QPlaceUser___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceUser[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QPlaceUser_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceUser_name)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QPlaceUser_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceUser_setName)},
    {SIP_MLNAME_CAST(sipName_setUserId), meth_QPlaceUser_setUserId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceUser_setUserId)},
    {SIP_MLNAME_CAST(sipName_userId), meth_QPlaceUser_userId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceUser_userId)}
};

PyDoc_STRVAR(doc_QPlaceUser, "\1QPlaceUser()\n"
    "QPlaceUser(QPlaceUser)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceUser = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceUser,
        {0}
    },
    {
        sipNameNr_QPlaceUser,
        {0, 0, 1},
        4, methods_QPlaceUser,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceUser,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceUser,
    init_type_QPlaceUser,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceUser,
    assign_QPlaceUser,
    array_QPlaceUser,
    copy_QPlaceUser,
    release_QPlaceUser,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
