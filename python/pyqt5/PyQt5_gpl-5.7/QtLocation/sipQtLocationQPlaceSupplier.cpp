/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesupplier.sip"
#include <qplacesupplier.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSupplier.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceicon.sip"
#include <qplaceicon.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSupplier.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSupplier.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceSupplier.cpp"


PyDoc_STRVAR(doc_QPlaceSupplier_name, "name(self) -> str");

extern "C" {static PyObject *meth_QPlaceSupplier_name(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSupplier, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_name, doc_QPlaceSupplier_name);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QPlaceSupplier_setName(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceSupplier, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_setName, doc_QPlaceSupplier_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_supplierId, "supplierId(self) -> str");

extern "C" {static PyObject *meth_QPlaceSupplier_supplierId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_supplierId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSupplier, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->supplierId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_supplierId, doc_QPlaceSupplier_supplierId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_setSupplierId, "setSupplierId(self, str)");

extern "C" {static PyObject *meth_QPlaceSupplier_setSupplierId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_setSupplierId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceSupplier, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setSupplierId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_setSupplierId, doc_QPlaceSupplier_setSupplierId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QPlaceSupplier_url(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSupplier, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_url, doc_QPlaceSupplier_url);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QPlaceSupplier_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceSupplier, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_setUrl, doc_QPlaceSupplier_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_icon, "icon(self) -> QPlaceIcon");

extern "C" {static PyObject *meth_QPlaceSupplier_icon(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSupplier, &sipCpp))
        {
            QPlaceIcon*sipRes;

            sipRes = new QPlaceIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QPlaceIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_icon, doc_QPlaceSupplier_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_setIcon, "setIcon(self, QPlaceIcon)");

extern "C" {static PyObject *meth_QPlaceSupplier_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceIcon* a0;
        QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceSupplier, &sipCpp, sipType_QPlaceIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_setIcon, doc_QPlaceSupplier_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceSupplier_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPlaceSupplier_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPlaceSupplier_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceSupplier, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceSupplier, sipName_isEmpty, doc_QPlaceSupplier_isEmpty);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceSupplier___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceSupplier___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceSupplier *sipCpp = reinterpret_cast<QPlaceSupplier *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceSupplier));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceSupplier, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceSupplier::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceSupplier,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceSupplier___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceSupplier___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceSupplier *sipCpp = reinterpret_cast<QPlaceSupplier *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceSupplier));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceSupplier, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceSupplier::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceSupplier,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceSupplier(void *, int);}
static void release_QPlaceSupplier(void *sipCppV,int)
{
    delete reinterpret_cast<QPlaceSupplier *>(sipCppV);
}


extern "C" {static void assign_QPlaceSupplier(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceSupplier(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceSupplier *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceSupplier *>(sipSrc);
}


extern "C" {static void *array_QPlaceSupplier(SIP_SSIZE_T);}
static void *array_QPlaceSupplier(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceSupplier[sipNrElem];
}


extern "C" {static void *copy_QPlaceSupplier(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceSupplier(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceSupplier(reinterpret_cast<const QPlaceSupplier *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceSupplier(sipSimpleWrapper *);}
static void dealloc_QPlaceSupplier(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceSupplier(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPlaceSupplier(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceSupplier(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPlaceSupplier *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPlaceSupplier();

            return sipCpp;
        }
    }

    {
        const QPlaceSupplier* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceSupplier, &a0))
        {
            sipCpp = new QPlaceSupplier(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceSupplier[] = {
    {(void *)slot_QPlaceSupplier___ne__, ne_slot},
    {(void *)slot_QPlaceSupplier___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceSupplier[] = {
    {SIP_MLNAME_CAST(sipName_icon), meth_QPlaceSupplier_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_icon)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPlaceSupplier_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_isEmpty)},
    {SIP_MLNAME_CAST(sipName_name), meth_QPlaceSupplier_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_name)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QPlaceSupplier_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_setIcon)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QPlaceSupplier_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_setName)},
    {SIP_MLNAME_CAST(sipName_setSupplierId), meth_QPlaceSupplier_setSupplierId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_setSupplierId)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QPlaceSupplier_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_setUrl)},
    {SIP_MLNAME_CAST(sipName_supplierId), meth_QPlaceSupplier_supplierId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_supplierId)},
    {SIP_MLNAME_CAST(sipName_url), meth_QPlaceSupplier_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceSupplier_url)}
};

PyDoc_STRVAR(doc_QPlaceSupplier, "\1QPlaceSupplier()\n"
    "QPlaceSupplier(QPlaceSupplier)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceSupplier = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceSupplier,
        {0}
    },
    {
        sipNameNr_QPlaceSupplier,
        {0, 0, 1},
        9, methods_QPlaceSupplier,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceSupplier,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceSupplier,
    init_type_QPlaceSupplier,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceSupplier,
    assign_QPlaceSupplier,
    array_QPlaceSupplier,
    copy_QPlaceSupplier,
    release_QPlaceSupplier,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
