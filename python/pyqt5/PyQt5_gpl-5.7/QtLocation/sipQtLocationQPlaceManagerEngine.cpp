/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacemanagerengine.sip"
#include <qplacemanagerengine.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"

#line 27 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacemanager.sip"
#include <qplacemanager.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecategory.sip"
#include <qplacecategory.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacereply.sip"
#include <qplacereply.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacematchreply.sip"
#include <qplacematchreply.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacematchrequest.sip"
#include <qplacematchrequest.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplace.sip"
#include <qplace.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceicon.sip"
#include <qplaceicon.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceidreply.sip"
#include <qplaceidreply.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchsuggestionreply.sip"
#include <qplacesearchsuggestionreply.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchrequest.sip"
#include <qplacesearchrequest.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesearchreply.sip"
#include <qplacesearchreply.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontentreply.sip"
#include <qplacecontentreply.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontentrequest.sip"
#include <qplacecontentrequest.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacedetailsreply.sip"
#include <qplacedetailsreply.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 117 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 120 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 123 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 129 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 135 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 138 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 141 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceManagerEngine.cpp"


class sipQPlaceManagerEngine : public QPlaceManagerEngine
{
public:
    sipQPlaceManagerEngine(const QVariantMap&,QObject*);
    virtual ~sipQPlaceManagerEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QPlaceMatchReply* matchingPlaces(const QPlaceMatchRequest&);
    QPlace compatiblePlace(const QPlace&) const;
    QUrl constructIconUrl(const QPlaceIcon&,const QSize&) const;
    void setLocales(const QList<QLocale>&);
    QList<QLocale> locales() const;
    QList<QPlaceCategory> childCategories(const QString&) const;
    QPlaceCategory category(const QString&) const;
    QStringList childCategoryIds(const QString&) const;
    QString parentCategoryId(const QString&) const;
    QPlaceReply* initializeCategories();
    QPlaceIdReply* removeCategory(const QString&);
    QPlaceIdReply* saveCategory(const QPlaceCategory&,const QString&);
    QPlaceIdReply* removePlace(const QString&);
    QPlaceIdReply* savePlace(const QPlace&);
    QPlaceSearchSuggestionReply* searchSuggestions(const QPlaceSearchRequest&);
    QPlaceSearchReply* search(const QPlaceSearchRequest&);
    QPlaceContentReply* getPlaceContent(const QPlaceContentRequest&);
    QPlaceDetailsReply* getPlaceDetails(const QString&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceManagerEngine(const sipQPlaceManagerEngine &);
    sipQPlaceManagerEngine &operator = (const sipQPlaceManagerEngine &);

    char sipPyMethods[25];
};

sipQPlaceManagerEngine::sipQPlaceManagerEngine(const QVariantMap& a0,QObject*a1): QPlaceManagerEngine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlaceManagerEngine::~sipQPlaceManagerEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlaceManagerEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QPlaceManagerEngine);

    return QPlaceManagerEngine::metaObject();
}

int sipQPlaceManagerEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPlaceManagerEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QPlaceManagerEngine,_c,_id,_a);

    return _id;
}

void *sipQPlaceManagerEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QPlaceManagerEngine, _clname, &sipCpp) ? sipCpp : QPlaceManagerEngine::qt_metacast(_clname));
}

void sipQPlaceManagerEngine::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QPlaceManagerEngine::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceManagerEngine::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QPlaceManagerEngine::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceManagerEngine::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QPlaceManagerEngine::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceManagerEngine::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QPlaceManagerEngine::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlaceManagerEngine::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QPlaceManagerEngine::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQPlaceManagerEngine::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QPlaceManagerEngine::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQPlaceManagerEngine::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QPlaceManagerEngine::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceMatchReply* sipQPlaceManagerEngine::matchingPlaces(const QPlaceMatchRequest& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_matchingPlaces);

    if (!sipMeth)
        return QPlaceManagerEngine::matchingPlaces(a0);

    extern QPlaceMatchReply* sipVH_QtLocation_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlaceMatchRequest&);

    return sipVH_QtLocation_1(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlace sipQPlaceManagerEngine::compatiblePlace(const QPlace& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_compatiblePlace);

    if (!sipMeth)
        return QPlaceManagerEngine::compatiblePlace(a0);

    extern QPlace sipVH_QtLocation_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlace&);

    return sipVH_QtLocation_2(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QUrl sipQPlaceManagerEngine::constructIconUrl(const QPlaceIcon& a0,const QSize& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_constructIconUrl);

    if (!sipMeth)
        return QPlaceManagerEngine::constructIconUrl(a0,a1);

    extern QUrl sipVH_QtLocation_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlaceIcon&,const QSize&);

    return sipVH_QtLocation_3(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPlaceManagerEngine::setLocales(const QList<QLocale>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setLocales);

    if (!sipMeth)
    {
        QPlaceManagerEngine::setLocales(a0);
        return;
    }

    extern void sipVH_QtLocation_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QLocale>&);

    sipVH_QtLocation_4(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QList<QLocale> sipQPlaceManagerEngine::locales() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_locales);

    if (!sipMeth)
        return QPlaceManagerEngine::locales();

    extern QList<QLocale> sipVH_QtLocation_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtLocation_5(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QList<QPlaceCategory> sipQPlaceManagerEngine::childCategories(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_childCategories);

    if (!sipMeth)
        return QPlaceManagerEngine::childCategories(a0);

    extern QList<QPlaceCategory> sipVH_QtLocation_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtLocation_6(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceCategory sipQPlaceManagerEngine::category(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_category);

    if (!sipMeth)
        return QPlaceManagerEngine::category(a0);

    extern QPlaceCategory sipVH_QtLocation_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtLocation_7(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStringList sipQPlaceManagerEngine::childCategoryIds(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_childCategoryIds);

    if (!sipMeth)
        return QPlaceManagerEngine::childCategoryIds(a0);

    extern QStringList sipVH_QtLocation_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtLocation_8(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QString sipQPlaceManagerEngine::parentCategoryId(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_parentCategoryId);

    if (!sipMeth)
        return QPlaceManagerEngine::parentCategoryId(a0);

    typedef QString (*sipVH_QtCore_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return ((sipVH_QtCore_0)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceReply* sipQPlaceManagerEngine::initializeCategories()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_initializeCategories);

    if (!sipMeth)
        return QPlaceManagerEngine::initializeCategories();

    extern QPlaceReply* sipVH_QtLocation_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtLocation_9(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QPlaceIdReply* sipQPlaceManagerEngine::removeCategory(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_removeCategory);

    if (!sipMeth)
        return QPlaceManagerEngine::removeCategory(a0);

    extern QPlaceIdReply* sipVH_QtLocation_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtLocation_10(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceIdReply* sipQPlaceManagerEngine::saveCategory(const QPlaceCategory& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_saveCategory);

    if (!sipMeth)
        return QPlaceManagerEngine::saveCategory(a0,a1);

    extern QPlaceIdReply* sipVH_QtLocation_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlaceCategory&,const QString&);

    return sipVH_QtLocation_11(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QPlaceIdReply* sipQPlaceManagerEngine::removePlace(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_removePlace);

    if (!sipMeth)
        return QPlaceManagerEngine::removePlace(a0);

    extern QPlaceIdReply* sipVH_QtLocation_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtLocation_10(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceIdReply* sipQPlaceManagerEngine::savePlace(const QPlace& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_savePlace);

    if (!sipMeth)
        return QPlaceManagerEngine::savePlace(a0);

    extern QPlaceIdReply* sipVH_QtLocation_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlace&);

    return sipVH_QtLocation_12(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceSearchSuggestionReply* sipQPlaceManagerEngine::searchSuggestions(const QPlaceSearchRequest& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_searchSuggestions);

    if (!sipMeth)
        return QPlaceManagerEngine::searchSuggestions(a0);

    extern QPlaceSearchSuggestionReply* sipVH_QtLocation_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlaceSearchRequest&);

    return sipVH_QtLocation_13(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceSearchReply* sipQPlaceManagerEngine::search(const QPlaceSearchRequest& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_search);

    if (!sipMeth)
        return QPlaceManagerEngine::search(a0);

    extern QPlaceSearchReply* sipVH_QtLocation_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlaceSearchRequest&);

    return sipVH_QtLocation_14(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceContentReply* sipQPlaceManagerEngine::getPlaceContent(const QPlaceContentRequest& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_getPlaceContent);

    if (!sipMeth)
        return QPlaceManagerEngine::getPlaceContent(a0);

    extern QPlaceContentReply* sipVH_QtLocation_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPlaceContentRequest&);

    return sipVH_QtLocation_15(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPlaceDetailsReply* sipQPlaceManagerEngine::getPlaceDetails(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_getPlaceDetails);

    if (!sipMeth)
        return QPlaceManagerEngine::getPlaceDetails(a0);

    extern QPlaceDetailsReply* sipVH_QtLocation_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtLocation_16(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_managerName, "managerName(self) -> str");

extern "C" {static PyObject *meth_QPlaceManagerEngine_managerName(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_managerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->managerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_managerName, doc_QPlaceManagerEngine_managerName);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_managerVersion, "managerVersion(self) -> int");

extern "C" {static PyObject *meth_QPlaceManagerEngine_managerVersion(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_managerVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->managerVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_managerVersion, doc_QPlaceManagerEngine_managerVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_getPlaceDetails, "getPlaceDetails(self, str) -> QPlaceDetailsReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_getPlaceDetails(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_getPlaceDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceDetailsReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::getPlaceDetails(*a0) : sipCpp->getPlaceDetails(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPlaceDetailsReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_getPlaceDetails, doc_QPlaceManagerEngine_getPlaceDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_getPlaceContent, "getPlaceContent(self, QPlaceContentRequest) -> QPlaceContentReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_getPlaceContent(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_getPlaceContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceContentRequest* a0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlaceContentRequest, &a0))
        {
            QPlaceContentReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::getPlaceContent(*a0) : sipCpp->getPlaceContent(*a0));

            return sipConvertFromType(sipRes,sipType_QPlaceContentReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_getPlaceContent, doc_QPlaceManagerEngine_getPlaceContent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_search, "search(self, QPlaceSearchRequest) -> QPlaceSearchReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_search(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_search(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceSearchRequest* a0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlaceSearchRequest, &a0))
        {
            QPlaceSearchReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::search(*a0) : sipCpp->search(*a0));

            return sipConvertFromType(sipRes,sipType_QPlaceSearchReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_search, doc_QPlaceManagerEngine_search);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_searchSuggestions, "searchSuggestions(self, QPlaceSearchRequest) -> QPlaceSearchSuggestionReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_searchSuggestions(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_searchSuggestions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceSearchRequest* a0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlaceSearchRequest, &a0))
        {
            QPlaceSearchSuggestionReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::searchSuggestions(*a0) : sipCpp->searchSuggestions(*a0));

            return sipConvertFromType(sipRes,sipType_QPlaceSearchSuggestionReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_searchSuggestions, doc_QPlaceManagerEngine_searchSuggestions);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_savePlace, "savePlace(self, QPlace) -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_savePlace(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_savePlace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlace* a0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlace, &a0))
        {
            QPlaceIdReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::savePlace(*a0) : sipCpp->savePlace(*a0));

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_savePlace, doc_QPlaceManagerEngine_savePlace);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_removePlace, "removePlace(self, str) -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_removePlace(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_removePlace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceIdReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::removePlace(*a0) : sipCpp->removePlace(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_removePlace, doc_QPlaceManagerEngine_removePlace);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_saveCategory, "saveCategory(self, QPlaceCategory, str) -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_saveCategory(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_saveCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceCategory* a0;
        const QString* a1;
        int a1State = 0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlaceCategory, &a0, sipType_QString,&a1, &a1State))
        {
            QPlaceIdReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::saveCategory(*a0,*a1) : sipCpp->saveCategory(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_saveCategory, doc_QPlaceManagerEngine_saveCategory);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_removeCategory, "removeCategory(self, str) -> QPlaceIdReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_removeCategory(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_removeCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceIdReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::removeCategory(*a0) : sipCpp->removeCategory(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPlaceIdReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_removeCategory, doc_QPlaceManagerEngine_removeCategory);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_initializeCategories, "initializeCategories(self) -> QPlaceReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_initializeCategories(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_initializeCategories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp))
        {
            QPlaceReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::initializeCategories() : sipCpp->initializeCategories());

            return sipConvertFromType(sipRes,sipType_QPlaceReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_initializeCategories, doc_QPlaceManagerEngine_initializeCategories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_parentCategoryId, "parentCategoryId(self, str) -> str");

extern "C" {static PyObject *meth_QPlaceManagerEngine_parentCategoryId(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_parentCategoryId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QPlaceManagerEngine::parentCategoryId(*a0) : sipCpp->parentCategoryId(*a0)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_parentCategoryId, doc_QPlaceManagerEngine_parentCategoryId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_childCategoryIds, "childCategoryIds(self, str) -> List[str]");

extern "C" {static PyObject *meth_QPlaceManagerEngine_childCategoryIds(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_childCategoryIds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QPlaceManagerEngine::childCategoryIds(*a0) : sipCpp->childCategoryIds(*a0)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_childCategoryIds, doc_QPlaceManagerEngine_childCategoryIds);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_category, "category(self, str) -> QPlaceCategory");

extern "C" {static PyObject *meth_QPlaceManagerEngine_category(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_category(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceCategory*sipRes;

            sipRes = new QPlaceCategory((sipSelfWasArg ? sipCpp->QPlaceManagerEngine::category(*a0) : sipCpp->category(*a0)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPlaceCategory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_category, doc_QPlaceManagerEngine_category);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_childCategories, "childCategories(self, str) -> List[QPlaceCategory]");

extern "C" {static PyObject *meth_QPlaceManagerEngine_childCategories(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_childCategories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QList<QPlaceCategory>*sipRes;

            sipRes = new QList<QPlaceCategory>((sipSelfWasArg ? sipCpp->QPlaceManagerEngine::childCategories(*a0) : sipCpp->childCategories(*a0)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPlaceCategory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_childCategories, doc_QPlaceManagerEngine_childCategories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_locales, "locales(self) -> List[QLocale]");

extern "C" {static PyObject *meth_QPlaceManagerEngine_locales(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_locales(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp))
        {
            QList<QLocale>*sipRes;

            sipRes = new QList<QLocale>((sipSelfWasArg ? sipCpp->QPlaceManagerEngine::locales() : sipCpp->locales()));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_locales, doc_QPlaceManagerEngine_locales);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_setLocales, "setLocales(self, Iterable[QLocale])");

extern "C" {static PyObject *meth_QPlaceManagerEngine_setLocales(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_setLocales(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QLocale>* a0;
        int a0State = 0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QList_0100QLocale,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::setLocales(*a0) : sipCpp->setLocales(*a0));
            sipReleaseType(const_cast<QList<QLocale> *>(a0),sipType_QList_0100QLocale,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_setLocales, doc_QPlaceManagerEngine_setLocales);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_constructIconUrl, "constructIconUrl(self, QPlaceIcon, QSize) -> QUrl");

extern "C" {static PyObject *meth_QPlaceManagerEngine_constructIconUrl(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_constructIconUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceIcon* a0;
        const QSize* a1;
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlaceIcon, &a0, sipType_QSize, &a1))
        {
            QUrl*sipRes;

            sipRes = new QUrl((sipSelfWasArg ? sipCpp->QPlaceManagerEngine::constructIconUrl(*a0,*a1) : sipCpp->constructIconUrl(*a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_constructIconUrl, doc_QPlaceManagerEngine_constructIconUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_compatiblePlace, "compatiblePlace(self, QPlace) -> QPlace");

extern "C" {static PyObject *meth_QPlaceManagerEngine_compatiblePlace(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_compatiblePlace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlace* a0;
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlace, &a0))
        {
            QPlace*sipRes;

            sipRes = new QPlace((sipSelfWasArg ? sipCpp->QPlaceManagerEngine::compatiblePlace(*a0) : sipCpp->compatiblePlace(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QPlace,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_compatiblePlace, doc_QPlaceManagerEngine_compatiblePlace);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_matchingPlaces, "matchingPlaces(self, QPlaceMatchRequest) -> QPlaceMatchReply");

extern "C" {static PyObject *meth_QPlaceManagerEngine_matchingPlaces(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_matchingPlaces(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlaceMatchRequest* a0;
        QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp, sipType_QPlaceMatchRequest, &a0))
        {
            QPlaceMatchReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlaceManagerEngine::matchingPlaces(*a0) : sipCpp->matchingPlaces(*a0));

            return sipConvertFromType(sipRes,sipType_QPlaceMatchReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_matchingPlaces, doc_QPlaceManagerEngine_matchingPlaces);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceManagerEngine_manager, "manager(self) -> QPlaceManager");

extern "C" {static PyObject *meth_QPlaceManagerEngine_manager(PyObject *, PyObject *);}
static PyObject *meth_QPlaceManagerEngine_manager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlaceManagerEngine, &sipCpp))
        {
            QPlaceManager*sipRes;

            sipRes = sipCpp->manager();

            return sipConvertFromType(sipRes,sipType_QPlaceManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_manager, doc_QPlaceManagerEngine_manager);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceManagerEngine(void *, int);}
static void release_QPlaceManagerEngine(void *sipCppV,int)
{
    QPlaceManagerEngine *sipCpp = reinterpret_cast<QPlaceManagerEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPlaceManagerEngine(sipSimpleWrapper *);}
static void dealloc_QPlaceManagerEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceManagerEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceManagerEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceManagerEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceManagerEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPlaceManagerEngine *sipCpp = 0;

    {
        const QVariantMap* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QMap_0100QString_0100QVariant,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQPlaceManagerEngine(*a0,a1);
            sipReleaseType(const_cast<QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlaceManagerEngine[] = {{165, 0, 1}};


static PyMethodDef methods_QPlaceManagerEngine[] = {
    {SIP_MLNAME_CAST(sipName_category), meth_QPlaceManagerEngine_category, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_category)},
    {SIP_MLNAME_CAST(sipName_childCategories), meth_QPlaceManagerEngine_childCategories, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_childCategories)},
    {SIP_MLNAME_CAST(sipName_childCategoryIds), meth_QPlaceManagerEngine_childCategoryIds, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_childCategoryIds)},
    {SIP_MLNAME_CAST(sipName_compatiblePlace), meth_QPlaceManagerEngine_compatiblePlace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_compatiblePlace)},
    {SIP_MLNAME_CAST(sipName_constructIconUrl), meth_QPlaceManagerEngine_constructIconUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_constructIconUrl)},
    {SIP_MLNAME_CAST(sipName_getPlaceContent), meth_QPlaceManagerEngine_getPlaceContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_getPlaceContent)},
    {SIP_MLNAME_CAST(sipName_getPlaceDetails), meth_QPlaceManagerEngine_getPlaceDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_getPlaceDetails)},
    {SIP_MLNAME_CAST(sipName_initializeCategories), meth_QPlaceManagerEngine_initializeCategories, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_initializeCategories)},
    {SIP_MLNAME_CAST(sipName_locales), meth_QPlaceManagerEngine_locales, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_locales)},
    {SIP_MLNAME_CAST(sipName_manager), meth_QPlaceManagerEngine_manager, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_manager)},
    {SIP_MLNAME_CAST(sipName_managerName), meth_QPlaceManagerEngine_managerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_managerName)},
    {SIP_MLNAME_CAST(sipName_managerVersion), meth_QPlaceManagerEngine_managerVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_managerVersion)},
    {SIP_MLNAME_CAST(sipName_matchingPlaces), meth_QPlaceManagerEngine_matchingPlaces, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_matchingPlaces)},
    {SIP_MLNAME_CAST(sipName_parentCategoryId), meth_QPlaceManagerEngine_parentCategoryId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_parentCategoryId)},
    {SIP_MLNAME_CAST(sipName_removeCategory), meth_QPlaceManagerEngine_removeCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_removeCategory)},
    {SIP_MLNAME_CAST(sipName_removePlace), meth_QPlaceManagerEngine_removePlace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_removePlace)},
    {SIP_MLNAME_CAST(sipName_saveCategory), meth_QPlaceManagerEngine_saveCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_saveCategory)},
    {SIP_MLNAME_CAST(sipName_savePlace), meth_QPlaceManagerEngine_savePlace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_savePlace)},
    {SIP_MLNAME_CAST(sipName_search), meth_QPlaceManagerEngine_search, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_search)},
    {SIP_MLNAME_CAST(sipName_searchSuggestions), meth_QPlaceManagerEngine_searchSuggestions, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_searchSuggestions)},
    {SIP_MLNAME_CAST(sipName_setLocales), meth_QPlaceManagerEngine_setLocales, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceManagerEngine_setLocales)}
};


extern "C" {static int emit_QPlaceManagerEngine_error(void *, PyObject *);}

static int emit_QPlaceManagerEngine_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QPlaceManagerEngine *sipCpp = reinterpret_cast<QPlaceManagerEngine *>(sipCppV);

    {
        QPlaceReply* a0;
        QPlaceReply::Error a1;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E|J1", sipType_QPlaceReply, &a0, sipType_QPlaceReply_Error, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QPlaceManagerEngine, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QPlaceManagerEngine[] = {
    {"dataChanged()", "\1dataChanged(self)", 0, 0},
    {"categoryRemoved(QString,QString)", "\1categoryRemoved(self, str, str)", 0, 0},
    {"categoryUpdated(QPlaceCategory,QString)", "\1categoryUpdated(self, QPlaceCategory, str)", 0, 0},
    {"categoryAdded(QPlaceCategory,QString)", "\1categoryAdded(self, QPlaceCategory, str)", 0, 0},
    {"placeRemoved(QString)", "\1placeRemoved(self, str)", 0, 0},
    {"placeUpdated(QString)", "\1placeUpdated(self, str)", 0, 0},
    {"placeAdded(QString)", "\1placeAdded(self, str)", 0, 0},
    {"error(QPlaceReply*,QPlaceReply::Error,QString)", "\1error(self, QPlaceReply, QPlaceReply.Error, str = '')", 0, emit_QPlaceManagerEngine_error},
    {"finished(QPlaceReply*)", "\1finished(self, QPlaceReply)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QPlaceManagerEngine, "\1QPlaceManagerEngine(Dict[str, Any], parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceManagerEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceManagerEngine,
        {0}
    },
    {
        sipNameNr_QPlaceManagerEngine,
        {0, 0, 1},
        21, methods_QPlaceManagerEngine,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceManagerEngine,
    -1,
    -1,
    supers_QPlaceManagerEngine,
    0,
    init_type_QPlaceManagerEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceManagerEngine,
    0,
    0,
    0,
    release_QPlaceManagerEngine,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QPlaceManagerEngine::staticMetaObject,
    0,
    signals_QPlaceManagerEngine,
    0
};
