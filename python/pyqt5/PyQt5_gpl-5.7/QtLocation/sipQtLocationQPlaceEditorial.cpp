/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceeditorial.sip"
#include <qplaceeditorial.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceEditorial.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontent.sip"
#include <qplacecontent.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceEditorial.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceEditorial.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceuser.sip"
#include <qplaceuser.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceEditorial.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesupplier.sip"
#include <qplacesupplier.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceEditorial.cpp"


class sipQPlaceEditorial : public QPlaceEditorial
{
public:
    sipQPlaceEditorial();
    sipQPlaceEditorial(const QPlaceContent&);
    sipQPlaceEditorial(const QPlaceEditorial&);
    ~sipQPlaceEditorial();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceEditorial(const sipQPlaceEditorial &);
    sipQPlaceEditorial &operator = (const sipQPlaceEditorial &);
};

sipQPlaceEditorial::sipQPlaceEditorial(): QPlaceEditorial(), sipPySelf(0)
{
}

sipQPlaceEditorial::sipQPlaceEditorial(const QPlaceContent& a0): QPlaceEditorial(a0), sipPySelf(0)
{
}

sipQPlaceEditorial::sipQPlaceEditorial(const QPlaceEditorial& a0): QPlaceEditorial(a0), sipPySelf(0)
{
}

sipQPlaceEditorial::~sipQPlaceEditorial()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QPlaceEditorial_text, "text(self) -> str");

extern "C" {static PyObject *meth_QPlaceEditorial_text(PyObject *, PyObject *);}
static PyObject *meth_QPlaceEditorial_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceEditorial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceEditorial, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceEditorial, sipName_text, doc_QPlaceEditorial_text);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceEditorial_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QPlaceEditorial_setText(PyObject *, PyObject *);}
static PyObject *meth_QPlaceEditorial_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceEditorial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceEditorial, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceEditorial, sipName_setText, doc_QPlaceEditorial_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceEditorial_title, "title(self) -> str");

extern "C" {static PyObject *meth_QPlaceEditorial_title(PyObject *, PyObject *);}
static PyObject *meth_QPlaceEditorial_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceEditorial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceEditorial, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceEditorial, sipName_title, doc_QPlaceEditorial_title);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceEditorial_setTitle, "setTitle(self, str)");

extern "C" {static PyObject *meth_QPlaceEditorial_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QPlaceEditorial_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceEditorial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceEditorial, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceEditorial, sipName_setTitle, doc_QPlaceEditorial_setTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceEditorial_language, "language(self) -> str");

extern "C" {static PyObject *meth_QPlaceEditorial_language(PyObject *, PyObject *);}
static PyObject *meth_QPlaceEditorial_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceEditorial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceEditorial, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->language());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceEditorial, sipName_language, doc_QPlaceEditorial_language);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceEditorial_setLanguage, "setLanguage(self, str)");

extern "C" {static PyObject *meth_QPlaceEditorial_setLanguage(PyObject *, PyObject *);}
static PyObject *meth_QPlaceEditorial_setLanguage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceEditorial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceEditorial, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setLanguage(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceEditorial, sipName_setLanguage, doc_QPlaceEditorial_setLanguage);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceEditorial(void *, int);}
static void release_QPlaceEditorial(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlaceEditorial *>(sipCppV);
    else
        delete reinterpret_cast<QPlaceEditorial *>(sipCppV);
}


extern "C" {static void assign_QPlaceEditorial(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceEditorial(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceEditorial *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceEditorial *>(sipSrc);
}


extern "C" {static void *array_QPlaceEditorial(SIP_SSIZE_T);}
static void *array_QPlaceEditorial(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceEditorial[sipNrElem];
}


extern "C" {static void *copy_QPlaceEditorial(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceEditorial(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceEditorial(reinterpret_cast<const QPlaceEditorial *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceEditorial(sipSimpleWrapper *);}
static void dealloc_QPlaceEditorial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceEditorial *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceEditorial(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceEditorial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceEditorial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlaceEditorial *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQPlaceEditorial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPlaceContent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceContent, &a0))
        {
            sipCpp = new sipQPlaceEditorial(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPlaceEditorial* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceEditorial, &a0))
        {
            sipCpp = new sipQPlaceEditorial(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlaceEditorial[] = {{51, 255, 1}};


static PyMethodDef methods_QPlaceEditorial[] = {
    {SIP_MLNAME_CAST(sipName_language), meth_QPlaceEditorial_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceEditorial_language)},
    {SIP_MLNAME_CAST(sipName_setLanguage), meth_QPlaceEditorial_setLanguage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceEditorial_setLanguage)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QPlaceEditorial_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceEditorial_setText)},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_QPlaceEditorial_setTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceEditorial_setTitle)},
    {SIP_MLNAME_CAST(sipName_text), meth_QPlaceEditorial_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceEditorial_text)},
    {SIP_MLNAME_CAST(sipName_title), meth_QPlaceEditorial_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceEditorial_title)}
};

PyDoc_STRVAR(doc_QPlaceEditorial, "\1QPlaceEditorial()\n"
    "QPlaceEditorial(QPlaceContent)\n"
    "QPlaceEditorial(QPlaceEditorial)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceEditorial = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceEditorial,
        {0}
    },
    {
        sipNameNr_QPlaceEditorial,
        {0, 0, 1},
        6, methods_QPlaceEditorial,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceEditorial,
    -1,
    -1,
    supers_QPlaceEditorial,
    0,
    init_type_QPlaceEditorial,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceEditorial,
    assign_QPlaceEditorial,
    array_QPlaceEditorial,
    copy_QPlaceEditorial,
    release_QPlaceEditorial,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
