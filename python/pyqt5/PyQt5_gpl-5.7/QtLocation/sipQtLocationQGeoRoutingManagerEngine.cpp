/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroutingmanagerengine.sip"
#include <qgeoroutingmanagerengine.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"

#line 27 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroutereply.sip"
#include <qgeoroutereply.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroute.sip"
#include <qgeoroute.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManagerEngine.cpp"


class sipQGeoRoutingManagerEngine : public QGeoRoutingManagerEngine
{
public:
    sipQGeoRoutingManagerEngine(const QVariantMap&,QObject*);
    virtual ~sipQGeoRoutingManagerEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QGeoRouteReply* updateRoute(const QGeoRoute&,const QGeoCoordinate&);
    QGeoRouteReply* calculateRoute(const QGeoRouteRequest&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoRoutingManagerEngine(const sipQGeoRoutingManagerEngine &);
    sipQGeoRoutingManagerEngine &operator = (const sipQGeoRoutingManagerEngine &);

    char sipPyMethods[9];
};

sipQGeoRoutingManagerEngine::sipQGeoRoutingManagerEngine(const QVariantMap& a0,QObject*a1): QGeoRoutingManagerEngine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoRoutingManagerEngine::~sipQGeoRoutingManagerEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGeoRoutingManagerEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QGeoRoutingManagerEngine);

    return QGeoRoutingManagerEngine::metaObject();
}

int sipQGeoRoutingManagerEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGeoRoutingManagerEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QGeoRoutingManagerEngine,_c,_id,_a);

    return _id;
}

void *sipQGeoRoutingManagerEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QGeoRoutingManagerEngine, _clname, &sipCpp) ? sipCpp : QGeoRoutingManagerEngine::qt_metacast(_clname));
}

void sipQGeoRoutingManagerEngine::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGeoRoutingManagerEngine::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoRoutingManagerEngine::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGeoRoutingManagerEngine::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoRoutingManagerEngine::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGeoRoutingManagerEngine::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoRoutingManagerEngine::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGeoRoutingManagerEngine::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoRoutingManagerEngine::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGeoRoutingManagerEngine::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGeoRoutingManagerEngine::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGeoRoutingManagerEngine::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGeoRoutingManagerEngine::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGeoRoutingManagerEngine::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QGeoRouteReply* sipQGeoRoutingManagerEngine::updateRoute(const QGeoRoute& a0,const QGeoCoordinate& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_updateRoute);

    if (!sipMeth)
        return QGeoRoutingManagerEngine::updateRoute(a0,a1);

    extern QGeoRouteReply* sipVH_QtLocation_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QGeoRoute&,const QGeoCoordinate&);

    return sipVH_QtLocation_17(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QGeoRouteReply* sipQGeoRoutingManagerEngine::calculateRoute(const QGeoRouteRequest& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QGeoRoutingManagerEngine,sipName_calculateRoute);

    if (!sipMeth)
        return 0;

    extern QGeoRouteReply* sipVH_QtLocation_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QGeoRouteRequest&);

    return sipVH_QtLocation_18(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_managerName, "managerName(self) -> str");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_managerName(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_managerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->managerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_managerName, doc_QGeoRoutingManagerEngine_managerName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_managerVersion, "managerVersion(self) -> int");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_managerVersion(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_managerVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->managerVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_managerVersion, doc_QGeoRoutingManagerEngine_managerVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_calculateRoute, "calculateRoute(self, QGeoRouteRequest) -> QGeoRouteReply");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_calculateRoute(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_calculateRoute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QGeoRouteRequest* a0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRouteRequest, &a0))
        {
            QGeoRouteReply*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoRoutingManagerEngine, sipName_calculateRoute);
                return NULL;
            }

            sipRes = sipCpp->calculateRoute(*a0);

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_calculateRoute, doc_QGeoRoutingManagerEngine_calculateRoute);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_updateRoute, "updateRoute(self, QGeoRoute, QGeoCoordinate) -> QGeoRouteReply");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_updateRoute(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_updateRoute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QGeoRoute* a0;
        const QGeoCoordinate* a1;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRoute, &a0, sipType_QGeoCoordinate, &a1))
        {
            QGeoRouteReply*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QGeoRoutingManagerEngine::updateRoute(*a0,*a1) : sipCpp->updateRoute(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_updateRoute, doc_QGeoRoutingManagerEngine_updateRoute);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_supportedTravelModes, "supportedTravelModes(self) -> QGeoRouteRequest.TravelModes");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_supportedTravelModes(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_supportedTravelModes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QGeoRouteRequest::TravelModes*sipRes;

            sipRes = new QGeoRouteRequest::TravelModes(sipCpp->supportedTravelModes());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_TravelModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_supportedTravelModes, doc_QGeoRoutingManagerEngine_supportedTravelModes);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_supportedFeatureTypes, "supportedFeatureTypes(self) -> QGeoRouteRequest.FeatureTypes");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_supportedFeatureTypes(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_supportedFeatureTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QGeoRouteRequest::FeatureTypes*sipRes;

            sipRes = new QGeoRouteRequest::FeatureTypes(sipCpp->supportedFeatureTypes());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_FeatureTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_supportedFeatureTypes, doc_QGeoRoutingManagerEngine_supportedFeatureTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_supportedFeatureWeights, "supportedFeatureWeights(self) -> QGeoRouteRequest.FeatureWeights");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_supportedFeatureWeights(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_supportedFeatureWeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QGeoRouteRequest::FeatureWeights*sipRes;

            sipRes = new QGeoRouteRequest::FeatureWeights(sipCpp->supportedFeatureWeights());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_FeatureWeights,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_supportedFeatureWeights, doc_QGeoRoutingManagerEngine_supportedFeatureWeights);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_supportedRouteOptimizations, "supportedRouteOptimizations(self) -> QGeoRouteRequest.RouteOptimizations");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_supportedRouteOptimizations(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_supportedRouteOptimizations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QGeoRouteRequest::RouteOptimizations*sipRes;

            sipRes = new QGeoRouteRequest::RouteOptimizations(sipCpp->supportedRouteOptimizations());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_RouteOptimizations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_supportedRouteOptimizations, doc_QGeoRoutingManagerEngine_supportedRouteOptimizations);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_supportedSegmentDetails, "supportedSegmentDetails(self) -> QGeoRouteRequest.SegmentDetails");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_supportedSegmentDetails(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_supportedSegmentDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QGeoRouteRequest::SegmentDetails*sipRes;

            sipRes = new QGeoRouteRequest::SegmentDetails(sipCpp->supportedSegmentDetails());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_SegmentDetails,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_supportedSegmentDetails, doc_QGeoRoutingManagerEngine_supportedSegmentDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_supportedManeuverDetails, "supportedManeuverDetails(self) -> QGeoRouteRequest.ManeuverDetails");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_supportedManeuverDetails(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_supportedManeuverDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QGeoRouteRequest::ManeuverDetails*sipRes;

            sipRes = new QGeoRouteRequest::ManeuverDetails(sipCpp->supportedManeuverDetails());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_ManeuverDetails,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_supportedManeuverDetails, doc_QGeoRoutingManagerEngine_supportedManeuverDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setLocale, doc_QGeoRoutingManagerEngine_setLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_locale(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QLocale*sipRes;

            sipRes = new QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_locale, doc_QGeoRoutingManagerEngine_locale);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setMeasurementSystem, "setMeasurementSystem(self, QLocale.MeasurementSystem)");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setMeasurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setMeasurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::MeasurementSystem a0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QLocale_MeasurementSystem, &a0))
        {
            sipCpp->setMeasurementSystem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setMeasurementSystem, doc_QGeoRoutingManagerEngine_setMeasurementSystem);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_measurementSystem, "measurementSystem(self) -> QLocale.MeasurementSystem");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_measurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_measurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp))
        {
            QLocale::MeasurementSystem sipRes;

            sipRes = sipCpp->measurementSystem();

            return sipConvertFromEnum(sipRes,sipType_QLocale_MeasurementSystem);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_measurementSystem, doc_QGeoRoutingManagerEngine_measurementSystem);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setSupportedTravelModes, "setSupportedTravelModes(self, Union[QGeoRouteRequest.TravelModes, QGeoRouteRequest.TravelMode])");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setSupportedTravelModes(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setSupportedTravelModes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoRouteRequest::TravelModes* a0;
        int a0State = 0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRouteRequest_TravelModes, &a0, &a0State))
        {
            sipCpp->setSupportedTravelModes(*a0);
            sipReleaseType(a0,sipType_QGeoRouteRequest_TravelModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setSupportedTravelModes, doc_QGeoRoutingManagerEngine_setSupportedTravelModes);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setSupportedFeatureTypes, "setSupportedFeatureTypes(self, Union[QGeoRouteRequest.FeatureTypes, QGeoRouteRequest.FeatureType])");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setSupportedFeatureTypes(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setSupportedFeatureTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoRouteRequest::FeatureTypes* a0;
        int a0State = 0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRouteRequest_FeatureTypes, &a0, &a0State))
        {
            sipCpp->setSupportedFeatureTypes(*a0);
            sipReleaseType(a0,sipType_QGeoRouteRequest_FeatureTypes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setSupportedFeatureTypes, doc_QGeoRoutingManagerEngine_setSupportedFeatureTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setSupportedFeatureWeights, "setSupportedFeatureWeights(self, Union[QGeoRouteRequest.FeatureWeights, QGeoRouteRequest.FeatureWeight])");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setSupportedFeatureWeights(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setSupportedFeatureWeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoRouteRequest::FeatureWeights* a0;
        int a0State = 0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRouteRequest_FeatureWeights, &a0, &a0State))
        {
            sipCpp->setSupportedFeatureWeights(*a0);
            sipReleaseType(a0,sipType_QGeoRouteRequest_FeatureWeights,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setSupportedFeatureWeights, doc_QGeoRoutingManagerEngine_setSupportedFeatureWeights);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setSupportedRouteOptimizations, "setSupportedRouteOptimizations(self, Union[QGeoRouteRequest.RouteOptimizations, QGeoRouteRequest.RouteOptimization])");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setSupportedRouteOptimizations(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setSupportedRouteOptimizations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoRouteRequest::RouteOptimizations* a0;
        int a0State = 0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRouteRequest_RouteOptimizations, &a0, &a0State))
        {
            sipCpp->setSupportedRouteOptimizations(*a0);
            sipReleaseType(a0,sipType_QGeoRouteRequest_RouteOptimizations,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setSupportedRouteOptimizations, doc_QGeoRoutingManagerEngine_setSupportedRouteOptimizations);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setSupportedSegmentDetails, "setSupportedSegmentDetails(self, Union[QGeoRouteRequest.SegmentDetails, QGeoRouteRequest.SegmentDetail])");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setSupportedSegmentDetails(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setSupportedSegmentDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoRouteRequest::SegmentDetails* a0;
        int a0State = 0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRouteRequest_SegmentDetails, &a0, &a0State))
        {
            sipCpp->setSupportedSegmentDetails(*a0);
            sipReleaseType(a0,sipType_QGeoRouteRequest_SegmentDetails,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setSupportedSegmentDetails, doc_QGeoRoutingManagerEngine_setSupportedSegmentDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManagerEngine_setSupportedManeuverDetails, "setSupportedManeuverDetails(self, Union[QGeoRouteRequest.ManeuverDetails, QGeoRouteRequest.ManeuverDetail])");

extern "C" {static PyObject *meth_QGeoRoutingManagerEngine_setSupportedManeuverDetails(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManagerEngine_setSupportedManeuverDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoRouteRequest::ManeuverDetails* a0;
        int a0State = 0;
        QGeoRoutingManagerEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGeoRoutingManagerEngine, &sipCpp, sipType_QGeoRouteRequest_ManeuverDetails, &a0, &a0State))
        {
            sipCpp->setSupportedManeuverDetails(*a0);
            sipReleaseType(a0,sipType_QGeoRouteRequest_ManeuverDetails,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_setSupportedManeuverDetails, doc_QGeoRoutingManagerEngine_setSupportedManeuverDetails);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoRoutingManagerEngine(void *, int);}
static void release_QGeoRoutingManagerEngine(void *sipCppV,int)
{
    QGeoRoutingManagerEngine *sipCpp = reinterpret_cast<QGeoRoutingManagerEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoRoutingManagerEngine(sipSimpleWrapper *);}
static void dealloc_QGeoRoutingManagerEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGeoRoutingManagerEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoRoutingManagerEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGeoRoutingManagerEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoRoutingManagerEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGeoRoutingManagerEngine *sipCpp = 0;

    {
        const QVariantMap* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QMap_0100QString_0100QVariant,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQGeoRoutingManagerEngine(*a0,a1);
            sipReleaseType(const_cast<QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoRoutingManagerEngine[] = {{165, 0, 1}};


static PyMethodDef methods_QGeoRoutingManagerEngine[] = {
    {SIP_MLNAME_CAST(sipName_calculateRoute), meth_QGeoRoutingManagerEngine_calculateRoute, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_calculateRoute)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QGeoRoutingManagerEngine_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_locale)},
    {SIP_MLNAME_CAST(sipName_managerName), meth_QGeoRoutingManagerEngine_managerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_managerName)},
    {SIP_MLNAME_CAST(sipName_managerVersion), meth_QGeoRoutingManagerEngine_managerVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_managerVersion)},
    {SIP_MLNAME_CAST(sipName_measurementSystem), meth_QGeoRoutingManagerEngine_measurementSystem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_measurementSystem)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QGeoRoutingManagerEngine_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setLocale)},
    {SIP_MLNAME_CAST(sipName_setMeasurementSystem), meth_QGeoRoutingManagerEngine_setMeasurementSystem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setMeasurementSystem)},
    {SIP_MLNAME_CAST(sipName_setSupportedFeatureTypes), meth_QGeoRoutingManagerEngine_setSupportedFeatureTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setSupportedFeatureTypes)},
    {SIP_MLNAME_CAST(sipName_setSupportedFeatureWeights), meth_QGeoRoutingManagerEngine_setSupportedFeatureWeights, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setSupportedFeatureWeights)},
    {SIP_MLNAME_CAST(sipName_setSupportedManeuverDetails), meth_QGeoRoutingManagerEngine_setSupportedManeuverDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setSupportedManeuverDetails)},
    {SIP_MLNAME_CAST(sipName_setSupportedRouteOptimizations), meth_QGeoRoutingManagerEngine_setSupportedRouteOptimizations, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setSupportedRouteOptimizations)},
    {SIP_MLNAME_CAST(sipName_setSupportedSegmentDetails), meth_QGeoRoutingManagerEngine_setSupportedSegmentDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setSupportedSegmentDetails)},
    {SIP_MLNAME_CAST(sipName_setSupportedTravelModes), meth_QGeoRoutingManagerEngine_setSupportedTravelModes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_setSupportedTravelModes)},
    {SIP_MLNAME_CAST(sipName_supportedFeatureTypes), meth_QGeoRoutingManagerEngine_supportedFeatureTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_supportedFeatureTypes)},
    {SIP_MLNAME_CAST(sipName_supportedFeatureWeights), meth_QGeoRoutingManagerEngine_supportedFeatureWeights, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_supportedFeatureWeights)},
    {SIP_MLNAME_CAST(sipName_supportedManeuverDetails), meth_QGeoRoutingManagerEngine_supportedManeuverDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_supportedManeuverDetails)},
    {SIP_MLNAME_CAST(sipName_supportedRouteOptimizations), meth_QGeoRoutingManagerEngine_supportedRouteOptimizations, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_supportedRouteOptimizations)},
    {SIP_MLNAME_CAST(sipName_supportedSegmentDetails), meth_QGeoRoutingManagerEngine_supportedSegmentDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_supportedSegmentDetails)},
    {SIP_MLNAME_CAST(sipName_supportedTravelModes), meth_QGeoRoutingManagerEngine_supportedTravelModes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_supportedTravelModes)},
    {SIP_MLNAME_CAST(sipName_updateRoute), meth_QGeoRoutingManagerEngine_updateRoute, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManagerEngine_updateRoute)}
};


extern "C" {static int emit_QGeoRoutingManagerEngine_error(void *, PyObject *);}

static int emit_QGeoRoutingManagerEngine_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QGeoRoutingManagerEngine *sipCpp = reinterpret_cast<QGeoRoutingManagerEngine *>(sipCppV);

    {
        QGeoRouteReply* a0;
        QGeoRouteReply::Error a1;
        QString a2def = QString();
        QString* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E|J1", sipType_QGeoRouteReply, &a0, sipType_QGeoRouteReply_Error, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(a2,sipType_QString,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGeoRoutingManagerEngine, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoRoutingManagerEngine[] = {
    {"error(QGeoRouteReply*,QGeoRouteReply::Error,QString)", "\1error(self, QGeoRouteReply, QGeoRouteReply.Error, str = '')", 0, emit_QGeoRoutingManagerEngine_error},
    {"finished(QGeoRouteReply*)", "\1finished(self, QGeoRouteReply)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGeoRoutingManagerEngine, "\1QGeoRoutingManagerEngine(Dict[str, Any], parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QGeoRoutingManagerEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoRoutingManagerEngine,
        {0}
    },
    {
        sipNameNr_QGeoRoutingManagerEngine,
        {0, 0, 1},
        20, methods_QGeoRoutingManagerEngine,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoRoutingManagerEngine,
    -1,
    -1,
    supers_QGeoRoutingManagerEngine,
    0,
    init_type_QGeoRoutingManagerEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoRoutingManagerEngine,
    0,
    0,
    0,
    release_QGeoRoutingManagerEngine,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGeoRoutingManagerEngine::staticMetaObject,
    0,
    signals_QGeoRoutingManagerEngine,
    0
};
