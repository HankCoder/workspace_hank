/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontent.sip"
#include <qplacecontent.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContent.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContent.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceuser.sip"
#include <qplaceuser.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContent.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesupplier.sip"
#include <qplacesupplier.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlaceContent.cpp"


class sipQPlaceContent : public QPlaceContent
{
public:
    sipQPlaceContent();
    sipQPlaceContent(const QPlaceContent&);
    ~sipQPlaceContent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlaceContent(const sipQPlaceContent &);
    sipQPlaceContent &operator = (const sipQPlaceContent &);
};

sipQPlaceContent::sipQPlaceContent(): QPlaceContent(), sipPySelf(0)
{
}

sipQPlaceContent::sipQPlaceContent(const QPlaceContent& a0): QPlaceContent(a0), sipPySelf(0)
{
}

sipQPlaceContent::~sipQPlaceContent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QPlaceContent_type, "type(self) -> QPlaceContent.Type");

extern "C" {static PyObject *meth_QPlaceContent_type(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContent_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContent, &sipCpp))
        {
            QPlaceContent::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_QPlaceContent_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContent, sipName_type, doc_QPlaceContent_type);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContent_supplier, "supplier(self) -> QPlaceSupplier");

extern "C" {static PyObject *meth_QPlaceContent_supplier(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContent_supplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContent, &sipCpp))
        {
            QPlaceSupplier*sipRes;

            sipRes = new QPlaceSupplier(sipCpp->supplier());

            return sipConvertFromNewType(sipRes,sipType_QPlaceSupplier,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContent, sipName_supplier, doc_QPlaceContent_supplier);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContent_setSupplier, "setSupplier(self, QPlaceSupplier)");

extern "C" {static PyObject *meth_QPlaceContent_setSupplier(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContent_setSupplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier* a0;
        QPlaceContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceContent, &sipCpp, sipType_QPlaceSupplier, &a0))
        {
            sipCpp->setSupplier(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContent, sipName_setSupplier, doc_QPlaceContent_setSupplier);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContent_user, "user(self) -> QPlaceUser");

extern "C" {static PyObject *meth_QPlaceContent_user(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContent_user(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContent, &sipCpp))
        {
            QPlaceUser*sipRes;

            sipRes = new QPlaceUser(sipCpp->user());

            return sipConvertFromNewType(sipRes,sipType_QPlaceUser,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContent, sipName_user, doc_QPlaceContent_user);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContent_setUser, "setUser(self, QPlaceUser)");

extern "C" {static PyObject *meth_QPlaceContent_setUser(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContent_setUser(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceUser* a0;
        QPlaceContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlaceContent, &sipCpp, sipType_QPlaceUser, &a0))
        {
            sipCpp->setUser(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContent, sipName_setUser, doc_QPlaceContent_setUser);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContent_attribution, "attribution(self) -> str");

extern "C" {static PyObject *meth_QPlaceContent_attribution(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContent_attribution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlaceContent, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->attribution());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContent, sipName_attribution, doc_QPlaceContent_attribution);

    return NULL;
}


PyDoc_STRVAR(doc_QPlaceContent_setAttribution, "setAttribution(self, str)");

extern "C" {static PyObject *meth_QPlaceContent_setAttribution(PyObject *, PyObject *);}
static PyObject *meth_QPlaceContent_setAttribution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlaceContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlaceContent, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAttribution(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlaceContent, sipName_setAttribution, doc_QPlaceContent_setAttribution);

    return NULL;
}


extern "C" {static PyObject *slot_QPlaceContent___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceContent___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceContent *sipCpp = reinterpret_cast<QPlaceContent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceContent));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceContent* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceContent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceContent::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlaceContent,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlaceContent___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlaceContent___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlaceContent *sipCpp = reinterpret_cast<QPlaceContent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlaceContent));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlaceContent* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlaceContent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlaceContent::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlaceContent,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlaceContent(void *, int);}
static void release_QPlaceContent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlaceContent *>(sipCppV);
    else
        delete reinterpret_cast<QPlaceContent *>(sipCppV);
}


extern "C" {static void assign_QPlaceContent(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlaceContent(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlaceContent *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlaceContent *>(sipSrc);
}


extern "C" {static void *array_QPlaceContent(SIP_SSIZE_T);}
static void *array_QPlaceContent(SIP_SSIZE_T sipNrElem)
{
    return new QPlaceContent[sipNrElem];
}


extern "C" {static void *copy_QPlaceContent(const void *, SIP_SSIZE_T);}
static void *copy_QPlaceContent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlaceContent(reinterpret_cast<const QPlaceContent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlaceContent(sipSimpleWrapper *);}
static void dealloc_QPlaceContent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlaceContent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlaceContent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlaceContent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlaceContent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlaceContent *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQPlaceContent();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPlaceContent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlaceContent, &a0))
        {
            sipCpp = new sipQPlaceContent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlaceContent[] = {
    {(void *)slot_QPlaceContent___ne__, ne_slot},
    {(void *)slot_QPlaceContent___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlaceContent[] = {
    {SIP_MLNAME_CAST(sipName_attribution), meth_QPlaceContent_attribution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContent_attribution)},
    {SIP_MLNAME_CAST(sipName_setAttribution), meth_QPlaceContent_setAttribution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContent_setAttribution)},
    {SIP_MLNAME_CAST(sipName_setSupplier), meth_QPlaceContent_setSupplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContent_setSupplier)},
    {SIP_MLNAME_CAST(sipName_setUser), meth_QPlaceContent_setUser, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContent_setUser)},
    {SIP_MLNAME_CAST(sipName_supplier), meth_QPlaceContent_supplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContent_supplier)},
    {SIP_MLNAME_CAST(sipName_type), meth_QPlaceContent_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContent_type)},
    {SIP_MLNAME_CAST(sipName_user), meth_QPlaceContent_user, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlaceContent_user)}
};

static sipEnumMemberDef enummembers_QPlaceContent[] = {
    {sipName_EditorialType, static_cast<int>(QPlaceContent::EditorialType), 52},
    {sipName_ImageType, static_cast<int>(QPlaceContent::ImageType), 52},
    {sipName_NoType, static_cast<int>(QPlaceContent::NoType), 52},
    {sipName_ReviewType, static_cast<int>(QPlaceContent::ReviewType), 52},
};

PyDoc_STRVAR(doc_QPlaceContent, "\1QPlaceContent()\n"
    "QPlaceContent(QPlaceContent)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlaceContent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlaceContent,
        {0}
    },
    {
        sipNameNr_QPlaceContent,
        {0, 0, 1},
        7, methods_QPlaceContent,
        4, enummembers_QPlaceContent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlaceContent,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlaceContent,
    init_type_QPlaceContent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlaceContent,
    assign_QPlaceContent,
    array_QPlaceContent,
    copy_QPlaceContent,
    release_QPlaceContent,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
