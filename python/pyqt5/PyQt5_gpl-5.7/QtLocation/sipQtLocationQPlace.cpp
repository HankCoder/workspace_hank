/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplace.sip"
#include <qplace.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qlocation.sip"
#include <qlocation.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontactdetail.sip"
#include <qplacecontactdetail.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceattribute.sip"
#include <qplaceattribute.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecontent.sip"
#include <qplacecontent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 146 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceicon.sip"
#include <qplaceicon.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacesupplier.sip"
#include <qplacesupplier.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplaceratings.sip"
#include <qplaceratings.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "sip/QtPositioning/qgeolocation.sip"
#include <qgeolocation.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacecategory.sip"
#include <qplacecategory.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQPlace.cpp"


PyDoc_STRVAR(doc_QPlace_categories, "categories(self) -> object");

extern "C" {static PyObject *meth_QPlace_categories(PyObject *, PyObject *);}
static PyObject *meth_QPlace_categories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QList<QPlaceCategory>*sipRes;

            sipRes = new QList<QPlaceCategory>(sipCpp->categories());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPlaceCategory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_categories, doc_QPlace_categories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setCategory, "setCategory(self, QPlaceCategory)");

extern "C" {static PyObject *meth_QPlace_setCategory(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceCategory* a0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceCategory, &a0))
        {
            sipCpp->setCategory(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setCategory, doc_QPlace_setCategory);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setCategories, "setCategories(self, Iterable[QPlaceCategory])");

extern "C" {static PyObject *meth_QPlace_setCategories(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setCategories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QPlaceCategory>* a0;
        int a0State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QList_0100QPlaceCategory,&a0, &a0State))
        {
            sipCpp->setCategories(*a0);
            sipReleaseType(const_cast<QList<QPlaceCategory> *>(a0),sipType_QList_0100QPlaceCategory,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setCategories, doc_QPlace_setCategories);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_location, "location(self) -> QGeoLocation");

extern "C" {static PyObject *meth_QPlace_location(PyObject *, PyObject *);}
static PyObject *meth_QPlace_location(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QGeoLocation*sipRes;

            sipRes = new QGeoLocation(sipCpp->location());

            return sipConvertFromNewType(sipRes,sipType_QGeoLocation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_location, doc_QPlace_location);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setLocation, "setLocation(self, QGeoLocation)");

extern "C" {static PyObject *meth_QPlace_setLocation(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoLocation* a0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlace, &sipCpp, sipType_QGeoLocation, &a0))
        {
            sipCpp->setLocation(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setLocation, doc_QPlace_setLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_ratings, "ratings(self) -> QPlaceRatings");

extern "C" {static PyObject *meth_QPlace_ratings(PyObject *, PyObject *);}
static PyObject *meth_QPlace_ratings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QPlaceRatings*sipRes;

            sipRes = new QPlaceRatings(sipCpp->ratings());

            return sipConvertFromNewType(sipRes,sipType_QPlaceRatings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_ratings, doc_QPlace_ratings);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setRatings, "setRatings(self, QPlaceRatings)");

extern "C" {static PyObject *meth_QPlace_setRatings(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setRatings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceRatings* a0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceRatings, &a0))
        {
            sipCpp->setRatings(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setRatings, doc_QPlace_setRatings);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_supplier, "supplier(self) -> QPlaceSupplier");

extern "C" {static PyObject *meth_QPlace_supplier(PyObject *, PyObject *);}
static PyObject *meth_QPlace_supplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QPlaceSupplier*sipRes;

            sipRes = new QPlaceSupplier(sipCpp->supplier());

            return sipConvertFromNewType(sipRes,sipType_QPlaceSupplier,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_supplier, doc_QPlace_supplier);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setSupplier, "setSupplier(self, QPlaceSupplier)");

extern "C" {static PyObject *meth_QPlace_setSupplier(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setSupplier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceSupplier* a0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceSupplier, &a0))
        {
            sipCpp->setSupplier(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setSupplier, doc_QPlace_setSupplier);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_attribution, "attribution(self) -> str");

extern "C" {static PyObject *meth_QPlace_attribution(PyObject *, PyObject *);}
static PyObject *meth_QPlace_attribution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->attribution());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_attribution, doc_QPlace_attribution);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setAttribution, "setAttribution(self, str)");

extern "C" {static PyObject *meth_QPlace_setAttribution(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setAttribution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAttribution(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setAttribution, doc_QPlace_setAttribution);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_icon, "icon(self) -> QPlaceIcon");

extern "C" {static PyObject *meth_QPlace_icon(PyObject *, PyObject *);}
static PyObject *meth_QPlace_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QPlaceIcon*sipRes;

            sipRes = new QPlaceIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QPlaceIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_icon, doc_QPlace_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setIcon, "setIcon(self, QPlaceIcon)");

extern "C" {static PyObject *meth_QPlace_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlaceIcon* a0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setIcon, doc_QPlace_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_content, "content(self, QPlaceContent.Type) -> Dict[int, QPlaceContent]");

extern "C" {static PyObject *meth_QPlace_content(PyObject *, PyObject *);}
static PyObject *meth_QPlace_content(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContent::Type a0;
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceContent_Type, &a0))
        {
            QMap<int,QPlaceContent>*sipRes;

            sipRes = new QMap<int,QPlaceContent>(sipCpp->content(a0));

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QPlaceContent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_content, doc_QPlace_content);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setContent, "setContent(self, QPlaceContent.Type, Dict[int, QPlaceContent])");

extern "C" {static PyObject *meth_QPlace_setContent(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContent::Type a0;
        const QMap<int,QPlaceContent>* a1;
        int a1State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceContent_Type, &a0, sipType_QMap_1800_0100QPlaceContent,&a1, &a1State))
        {
            sipCpp->setContent(a0,*a1);
            sipReleaseType(const_cast<QMap<int,QPlaceContent> *>(a1),sipType_QMap_1800_0100QPlaceContent,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setContent, doc_QPlace_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_insertContent, "insertContent(self, QPlaceContent.Type, Dict[int, QPlaceContent])");

extern "C" {static PyObject *meth_QPlace_insertContent(PyObject *, PyObject *);}
static PyObject *meth_QPlace_insertContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContent::Type a0;
        const QMap<int,QPlaceContent>* a1;
        int a1State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceContent_Type, &a0, sipType_QMap_1800_0100QPlaceContent,&a1, &a1State))
        {
            sipCpp->insertContent(a0,*a1);
            sipReleaseType(const_cast<QMap<int,QPlaceContent> *>(a1),sipType_QMap_1800_0100QPlaceContent,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_insertContent, doc_QPlace_insertContent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_totalContentCount, "totalContentCount(self, QPlaceContent.Type) -> int");

extern "C" {static PyObject *meth_QPlace_totalContentCount(PyObject *, PyObject *);}
static PyObject *meth_QPlace_totalContentCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContent::Type a0;
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceContent_Type, &a0))
        {
            int sipRes;

            sipRes = sipCpp->totalContentCount(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_totalContentCount, doc_QPlace_totalContentCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setTotalContentCount, "setTotalContentCount(self, QPlaceContent.Type, int)");

extern "C" {static PyObject *meth_QPlace_setTotalContentCount(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setTotalContentCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlaceContent::Type a0;
        int a1;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEi", &sipSelf, sipType_QPlace, &sipCpp, sipType_QPlaceContent_Type, &a0, &a1))
        {
            sipCpp->setTotalContentCount(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setTotalContentCount, doc_QPlace_setTotalContentCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_name, "name(self) -> str");

extern "C" {static PyObject *meth_QPlace_name(PyObject *, PyObject *);}
static PyObject *meth_QPlace_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_name, doc_QPlace_name);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QPlace_setName(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setName, doc_QPlace_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_placeId, "placeId(self) -> str");

extern "C" {static PyObject *meth_QPlace_placeId(PyObject *, PyObject *);}
static PyObject *meth_QPlace_placeId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->placeId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_placeId, doc_QPlace_placeId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setPlaceId, "setPlaceId(self, str)");

extern "C" {static PyObject *meth_QPlace_setPlaceId(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setPlaceId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceId(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setPlaceId, doc_QPlace_setPlaceId);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_primaryPhone, "primaryPhone(self) -> str");

extern "C" {static PyObject *meth_QPlace_primaryPhone(PyObject *, PyObject *);}
static PyObject *meth_QPlace_primaryPhone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->primaryPhone());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_primaryPhone, doc_QPlace_primaryPhone);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_primaryFax, "primaryFax(self) -> str");

extern "C" {static PyObject *meth_QPlace_primaryFax(PyObject *, PyObject *);}
static PyObject *meth_QPlace_primaryFax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->primaryFax());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_primaryFax, doc_QPlace_primaryFax);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_primaryEmail, "primaryEmail(self) -> str");

extern "C" {static PyObject *meth_QPlace_primaryEmail(PyObject *, PyObject *);}
static PyObject *meth_QPlace_primaryEmail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->primaryEmail());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_primaryEmail, doc_QPlace_primaryEmail);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_primaryWebsite, "primaryWebsite(self) -> QUrl");

extern "C" {static PyObject *meth_QPlace_primaryWebsite(PyObject *, PyObject *);}
static PyObject *meth_QPlace_primaryWebsite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->primaryWebsite());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_primaryWebsite, doc_QPlace_primaryWebsite);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_detailsFetched, "detailsFetched(self) -> bool");

extern "C" {static PyObject *meth_QPlace_detailsFetched(PyObject *, PyObject *);}
static PyObject *meth_QPlace_detailsFetched(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->detailsFetched();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_detailsFetched, doc_QPlace_detailsFetched);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setDetailsFetched, "setDetailsFetched(self, bool)");

extern "C" {static PyObject *meth_QPlace_setDetailsFetched(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setDetailsFetched(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlace, &sipCpp, &a0))
        {
            sipCpp->setDetailsFetched(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setDetailsFetched, doc_QPlace_setDetailsFetched);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_extendedAttributeTypes, "extendedAttributeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QPlace_extendedAttributeTypes(PyObject *, PyObject *);}
static PyObject *meth_QPlace_extendedAttributeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->extendedAttributeTypes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_extendedAttributeTypes, doc_QPlace_extendedAttributeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_extendedAttribute, "extendedAttribute(self, str) -> QPlaceAttribute");

extern "C" {static PyObject *meth_QPlace_extendedAttribute(PyObject *, PyObject *);}
static PyObject *meth_QPlace_extendedAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QPlaceAttribute*sipRes;

            sipRes = new QPlaceAttribute(sipCpp->extendedAttribute(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPlaceAttribute,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_extendedAttribute, doc_QPlace_extendedAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setExtendedAttribute, "setExtendedAttribute(self, str, QPlaceAttribute)");

extern "C" {static PyObject *meth_QPlace_setExtendedAttribute(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setExtendedAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceAttribute* a1;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State, sipType_QPlaceAttribute, &a1))
        {
            sipCpp->setExtendedAttribute(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setExtendedAttribute, doc_QPlace_setExtendedAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_removeExtendedAttribute, "removeExtendedAttribute(self, str)");

extern "C" {static PyObject *meth_QPlace_removeExtendedAttribute(PyObject *, PyObject *);}
static PyObject *meth_QPlace_removeExtendedAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeExtendedAttribute(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_removeExtendedAttribute, doc_QPlace_removeExtendedAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_contactTypes, "contactTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QPlace_contactTypes(PyObject *, PyObject *);}
static PyObject *meth_QPlace_contactTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->contactTypes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_contactTypes, doc_QPlace_contactTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_contactDetails, "contactDetails(self, str) -> object");

extern "C" {static PyObject *meth_QPlace_contactDetails(PyObject *, PyObject *);}
static PyObject *meth_QPlace_contactDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QList<QPlaceContactDetail>*sipRes;

            sipRes = new QList<QPlaceContactDetail>(sipCpp->contactDetails(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPlaceContactDetail,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_contactDetails, doc_QPlace_contactDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setContactDetails, "setContactDetails(self, str, Iterable[QPlaceContactDetail])");

extern "C" {static PyObject *meth_QPlace_setContactDetails(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setContactDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QList<QPlaceContactDetail>* a1;
        int a1State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State, sipType_QList_0100QPlaceContactDetail,&a1, &a1State))
        {
            sipCpp->setContactDetails(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QList_0100QPlaceContactDetail,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setContactDetails, doc_QPlace_setContactDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_appendContactDetail, "appendContactDetail(self, str, QPlaceContactDetail)");

extern "C" {static PyObject *meth_QPlace_appendContactDetail(PyObject *, PyObject *);}
static PyObject *meth_QPlace_appendContactDetail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QPlaceContactDetail* a1;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State, sipType_QPlaceContactDetail, &a1))
        {
            sipCpp->appendContactDetail(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_appendContactDetail, doc_QPlace_appendContactDetail);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_removeContactDetails, "removeContactDetails(self, str)");

extern "C" {static PyObject *meth_QPlace_removeContactDetails(PyObject *, PyObject *);}
static PyObject *meth_QPlace_removeContactDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlace, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeContactDetails(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_removeContactDetails, doc_QPlace_removeContactDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_visibility, "visibility(self) -> QLocation.Visibility");

extern "C" {static PyObject *meth_QPlace_visibility(PyObject *, PyObject *);}
static PyObject *meth_QPlace_visibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            QLocation::Visibility sipRes;

            sipRes = sipCpp->visibility();

            return sipConvertFromEnum(sipRes,sipType_QLocation_Visibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_visibility, doc_QPlace_visibility);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_setVisibility, "setVisibility(self, QLocation.Visibility)");

extern "C" {static PyObject *meth_QPlace_setVisibility(PyObject *, PyObject *);}
static PyObject *meth_QPlace_setVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocation::Visibility a0;
        QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlace, &sipCpp, sipType_QLocation_Visibility, &a0))
        {
            sipCpp->setVisibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_setVisibility, doc_QPlace_setVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_QPlace_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPlace_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPlace_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlace *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlace, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlace, sipName_isEmpty, doc_QPlace_isEmpty);

    return NULL;
}


extern "C" {static PyObject *slot_QPlace___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPlace___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlace *sipCpp = reinterpret_cast<QPlace *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlace));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlace* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlace, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlace::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,ne_slot,sipType_QPlace,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPlace___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPlace___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPlace *sipCpp = reinterpret_cast<QPlace *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPlace));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPlace* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPlace, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPlace::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtLocation,eq_slot,sipType_QPlace,sipSelf,sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlace(void *, int);}
static void release_QPlace(void *sipCppV,int)
{
    delete reinterpret_cast<QPlace *>(sipCppV);
}


extern "C" {static void assign_QPlace(void *, SIP_SSIZE_T, const void *);}
static void assign_QPlace(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPlace *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPlace *>(sipSrc);
}


extern "C" {static void *array_QPlace(SIP_SSIZE_T);}
static void *array_QPlace(SIP_SSIZE_T sipNrElem)
{
    return new QPlace[sipNrElem];
}


extern "C" {static void *copy_QPlace(const void *, SIP_SSIZE_T);}
static void *copy_QPlace(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPlace(reinterpret_cast<const QPlace *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPlace(sipSimpleWrapper *);}
static void dealloc_QPlace(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPlace(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPlace(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlace(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPlace *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPlace();

            return sipCpp;
        }
    }

    {
        const QPlace* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPlace, &a0))
        {
            sipCpp = new QPlace(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPlace[] = {
    {(void *)slot_QPlace___ne__, ne_slot},
    {(void *)slot_QPlace___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPlace[] = {
    {SIP_MLNAME_CAST(sipName_appendContactDetail), meth_QPlace_appendContactDetail, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_appendContactDetail)},
    {SIP_MLNAME_CAST(sipName_attribution), meth_QPlace_attribution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_attribution)},
    {SIP_MLNAME_CAST(sipName_categories), meth_QPlace_categories, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_categories)},
    {SIP_MLNAME_CAST(sipName_contactDetails), meth_QPlace_contactDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_contactDetails)},
    {SIP_MLNAME_CAST(sipName_contactTypes), meth_QPlace_contactTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_contactTypes)},
    {SIP_MLNAME_CAST(sipName_content), meth_QPlace_content, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_content)},
    {SIP_MLNAME_CAST(sipName_detailsFetched), meth_QPlace_detailsFetched, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_detailsFetched)},
    {SIP_MLNAME_CAST(sipName_extendedAttribute), meth_QPlace_extendedAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_extendedAttribute)},
    {SIP_MLNAME_CAST(sipName_extendedAttributeTypes), meth_QPlace_extendedAttributeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_extendedAttributeTypes)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QPlace_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_icon)},
    {SIP_MLNAME_CAST(sipName_insertContent), meth_QPlace_insertContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_insertContent)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPlace_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_isEmpty)},
    {SIP_MLNAME_CAST(sipName_location), meth_QPlace_location, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_location)},
    {SIP_MLNAME_CAST(sipName_name), meth_QPlace_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_name)},
    {SIP_MLNAME_CAST(sipName_placeId), meth_QPlace_placeId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_placeId)},
    {SIP_MLNAME_CAST(sipName_primaryEmail), meth_QPlace_primaryEmail, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_primaryEmail)},
    {SIP_MLNAME_CAST(sipName_primaryFax), meth_QPlace_primaryFax, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_primaryFax)},
    {SIP_MLNAME_CAST(sipName_primaryPhone), meth_QPlace_primaryPhone, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_primaryPhone)},
    {SIP_MLNAME_CAST(sipName_primaryWebsite), meth_QPlace_primaryWebsite, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_primaryWebsite)},
    {SIP_MLNAME_CAST(sipName_ratings), meth_QPlace_ratings, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_ratings)},
    {SIP_MLNAME_CAST(sipName_removeContactDetails), meth_QPlace_removeContactDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_removeContactDetails)},
    {SIP_MLNAME_CAST(sipName_removeExtendedAttribute), meth_QPlace_removeExtendedAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_removeExtendedAttribute)},
    {SIP_MLNAME_CAST(sipName_setAttribution), meth_QPlace_setAttribution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setAttribution)},
    {SIP_MLNAME_CAST(sipName_setCategories), meth_QPlace_setCategories, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setCategories)},
    {SIP_MLNAME_CAST(sipName_setCategory), meth_QPlace_setCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setCategory)},
    {SIP_MLNAME_CAST(sipName_setContactDetails), meth_QPlace_setContactDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setContactDetails)},
    {SIP_MLNAME_CAST(sipName_setContent), meth_QPlace_setContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setContent)},
    {SIP_MLNAME_CAST(sipName_setDetailsFetched), meth_QPlace_setDetailsFetched, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setDetailsFetched)},
    {SIP_MLNAME_CAST(sipName_setExtendedAttribute), meth_QPlace_setExtendedAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setExtendedAttribute)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QPlace_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setIcon)},
    {SIP_MLNAME_CAST(sipName_setLocation), meth_QPlace_setLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setLocation)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QPlace_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setName)},
    {SIP_MLNAME_CAST(sipName_setPlaceId), meth_QPlace_setPlaceId, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setPlaceId)},
    {SIP_MLNAME_CAST(sipName_setRatings), meth_QPlace_setRatings, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setRatings)},
    {SIP_MLNAME_CAST(sipName_setSupplier), meth_QPlace_setSupplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setSupplier)},
    {SIP_MLNAME_CAST(sipName_setTotalContentCount), meth_QPlace_setTotalContentCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setTotalContentCount)},
    {SIP_MLNAME_CAST(sipName_setVisibility), meth_QPlace_setVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_setVisibility)},
    {SIP_MLNAME_CAST(sipName_supplier), meth_QPlace_supplier, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_supplier)},
    {SIP_MLNAME_CAST(sipName_totalContentCount), meth_QPlace_totalContentCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_totalContentCount)},
    {SIP_MLNAME_CAST(sipName_visibility), meth_QPlace_visibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlace_visibility)}
};

PyDoc_STRVAR(doc_QPlace, "\1QPlace()\n"
    "QPlace(QPlace)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QPlace = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlace,
        {0}
    },
    {
        sipNameNr_QPlace,
        {0, 0, 1},
        40, methods_QPlace,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlace,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPlace,
    init_type_QPlace,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlace,
    assign_QPlace,
    array_QPlace,
    copy_QPlace,
    release_QPlace,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
