/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoserviceprovider.sip"
#include <qgeoserviceprovider.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 27 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qplacemanager.sip"
#include <qplacemanager.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroutingmanager.sip"
#include <qgeoroutingmanager.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeocodingmanager.sip"
#include <qgeocodingmanager.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoserviceprovider.sip"
#include <qgeoserviceprovider.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoserviceprovider.sip"
#include <qgeoserviceprovider.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoserviceprovider.sip"
#include <qgeoserviceprovider.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoserviceprovider.sip"
#include <qgeoserviceprovider.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoServiceProvider.cpp"


class sipQGeoServiceProvider : public QGeoServiceProvider
{
public:
    sipQGeoServiceProvider(const QString&,const QVariantMap&,bool);
    virtual ~sipQGeoServiceProvider();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoServiceProvider(const sipQGeoServiceProvider &);
    sipQGeoServiceProvider &operator = (const sipQGeoServiceProvider &);

    char sipPyMethods[7];
};

sipQGeoServiceProvider::sipQGeoServiceProvider(const QString& a0,const QVariantMap& a1,bool a2): QGeoServiceProvider(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoServiceProvider::~sipQGeoServiceProvider()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGeoServiceProvider::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QGeoServiceProvider);

    return QGeoServiceProvider::metaObject();
}

int sipQGeoServiceProvider::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGeoServiceProvider::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QGeoServiceProvider,_c,_id,_a);

    return _id;
}

void *sipQGeoServiceProvider::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QGeoServiceProvider, _clname, &sipCpp) ? sipCpp : QGeoServiceProvider::qt_metacast(_clname));
}

void sipQGeoServiceProvider::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGeoServiceProvider::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoServiceProvider::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGeoServiceProvider::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoServiceProvider::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGeoServiceProvider::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoServiceProvider::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGeoServiceProvider::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoServiceProvider::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGeoServiceProvider::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGeoServiceProvider::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGeoServiceProvider::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGeoServiceProvider::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGeoServiceProvider::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGeoServiceProvider_availableServiceProviders, "availableServiceProviders() -> List[str]");

extern "C" {static PyObject *meth_QGeoServiceProvider_availableServiceProviders(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_availableServiceProviders(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QGeoServiceProvider::availableServiceProviders());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_availableServiceProviders, doc_QGeoServiceProvider_availableServiceProviders);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_routingFeatures, "routingFeatures(self) -> QGeoServiceProvider.RoutingFeatures");

extern "C" {static PyObject *meth_QGeoServiceProvider_routingFeatures(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_routingFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QGeoServiceProvider::RoutingFeatures*sipRes;

            sipRes = new QGeoServiceProvider::RoutingFeatures(sipCpp->routingFeatures());

            return sipConvertFromNewType(sipRes,sipType_QGeoServiceProvider_RoutingFeatures,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_routingFeatures, doc_QGeoServiceProvider_routingFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_geocodingFeatures, "geocodingFeatures(self) -> QGeoServiceProvider.GeocodingFeatures");

extern "C" {static PyObject *meth_QGeoServiceProvider_geocodingFeatures(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_geocodingFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QGeoServiceProvider::GeocodingFeatures*sipRes;

            sipRes = new QGeoServiceProvider::GeocodingFeatures(sipCpp->geocodingFeatures());

            return sipConvertFromNewType(sipRes,sipType_QGeoServiceProvider_GeocodingFeatures,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_geocodingFeatures, doc_QGeoServiceProvider_geocodingFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_mappingFeatures, "mappingFeatures(self) -> QGeoServiceProvider.MappingFeatures");

extern "C" {static PyObject *meth_QGeoServiceProvider_mappingFeatures(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_mappingFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QGeoServiceProvider::MappingFeatures*sipRes;

            sipRes = new QGeoServiceProvider::MappingFeatures(sipCpp->mappingFeatures());

            return sipConvertFromNewType(sipRes,sipType_QGeoServiceProvider_MappingFeatures,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_mappingFeatures, doc_QGeoServiceProvider_mappingFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_placesFeatures, "placesFeatures(self) -> QGeoServiceProvider.PlacesFeatures");

extern "C" {static PyObject *meth_QGeoServiceProvider_placesFeatures(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_placesFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QGeoServiceProvider::PlacesFeatures*sipRes;

            sipRes = new QGeoServiceProvider::PlacesFeatures(sipCpp->placesFeatures());

            return sipConvertFromNewType(sipRes,sipType_QGeoServiceProvider_PlacesFeatures,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_placesFeatures, doc_QGeoServiceProvider_placesFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_geocodingManager, "geocodingManager(self) -> QGeoCodingManager");

extern "C" {static PyObject *meth_QGeoServiceProvider_geocodingManager(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_geocodingManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QGeoCodingManager*sipRes;

            sipRes = sipCpp->geocodingManager();

            return sipConvertFromType(sipRes,sipType_QGeoCodingManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_geocodingManager, doc_QGeoServiceProvider_geocodingManager);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_routingManager, "routingManager(self) -> QGeoRoutingManager");

extern "C" {static PyObject *meth_QGeoServiceProvider_routingManager(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_routingManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QGeoRoutingManager*sipRes;

            sipRes = sipCpp->routingManager();

            return sipConvertFromType(sipRes,sipType_QGeoRoutingManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_routingManager, doc_QGeoServiceProvider_routingManager);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_placeManager, "placeManager(self) -> QPlaceManager");

extern "C" {static PyObject *meth_QGeoServiceProvider_placeManager(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_placeManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QPlaceManager*sipRes;

            sipRes = sipCpp->placeManager();

            return sipConvertFromType(sipRes,sipType_QPlaceManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_placeManager, doc_QGeoServiceProvider_placeManager);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_error, "error(self) -> QGeoServiceProvider.Error");

extern "C" {static PyObject *meth_QGeoServiceProvider_error(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QGeoServiceProvider::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QGeoServiceProvider_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_error, doc_QGeoServiceProvider_error);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QGeoServiceProvider_errorString(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoServiceProvider, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_errorString, doc_QGeoServiceProvider_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_setParameters, "setParameters(self, Dict[str, Any])");

extern "C" {static PyObject *meth_QGeoServiceProvider_setParameters(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_setParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantMap* a0;
        int a0State = 0;
        QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGeoServiceProvider, &sipCpp, sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
            sipCpp->setParameters(*a0);
            sipReleaseType(const_cast<QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_setParameters, doc_QGeoServiceProvider_setParameters);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QGeoServiceProvider_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;
        QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoServiceProvider, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_setLocale, doc_QGeoServiceProvider_setLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoServiceProvider_setAllowExperimental, "setAllowExperimental(self, bool)");

extern "C" {static PyObject *meth_QGeoServiceProvider_setAllowExperimental(PyObject *, PyObject *);}
static PyObject *meth_QGeoServiceProvider_setAllowExperimental(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGeoServiceProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGeoServiceProvider, &sipCpp, &a0))
        {
            sipCpp->setAllowExperimental(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoServiceProvider, sipName_setAllowExperimental, doc_QGeoServiceProvider_setAllowExperimental);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoServiceProvider(void *, int);}
static void release_QGeoServiceProvider(void *sipCppV,int)
{
    QGeoServiceProvider *sipCpp = reinterpret_cast<QGeoServiceProvider *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoServiceProvider(sipSimpleWrapper *);}
static void dealloc_QGeoServiceProvider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGeoServiceProvider *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoServiceProvider(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGeoServiceProvider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoServiceProvider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQGeoServiceProvider *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        const QVariantMap& a1def = QMap<QString,QVariant>();
        const QVariantMap* a1 = &a1def;
        int a1State = 0;
        bool a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parameters,
            sipName_allowExperimental,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1b", sipType_QString,&a0, &a0State, sipType_QMap_0100QString_0100QVariant,&a1, &a1State, &a2))
        {
            sipCpp = new sipQGeoServiceProvider(*a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariantMap *>(a1),sipType_QMap_0100QString_0100QVariant,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoServiceProvider[] = {{165, 0, 1}};


static PyMethodDef methods_QGeoServiceProvider[] = {
    {SIP_MLNAME_CAST(sipName_availableServiceProviders), meth_QGeoServiceProvider_availableServiceProviders, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_availableServiceProviders)},
    {SIP_MLNAME_CAST(sipName_error), meth_QGeoServiceProvider_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QGeoServiceProvider_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_errorString)},
    {SIP_MLNAME_CAST(sipName_geocodingFeatures), meth_QGeoServiceProvider_geocodingFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_geocodingFeatures)},
    {SIP_MLNAME_CAST(sipName_geocodingManager), meth_QGeoServiceProvider_geocodingManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_geocodingManager)},
    {SIP_MLNAME_CAST(sipName_mappingFeatures), meth_QGeoServiceProvider_mappingFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_mappingFeatures)},
    {SIP_MLNAME_CAST(sipName_placeManager), meth_QGeoServiceProvider_placeManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_placeManager)},
    {SIP_MLNAME_CAST(sipName_placesFeatures), meth_QGeoServiceProvider_placesFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_placesFeatures)},
    {SIP_MLNAME_CAST(sipName_routingFeatures), meth_QGeoServiceProvider_routingFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_routingFeatures)},
    {SIP_MLNAME_CAST(sipName_routingManager), meth_QGeoServiceProvider_routingManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_routingManager)},
    {SIP_MLNAME_CAST(sipName_setAllowExperimental), meth_QGeoServiceProvider_setAllowExperimental, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_setAllowExperimental)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QGeoServiceProvider_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_setLocale)},
    {SIP_MLNAME_CAST(sipName_setParameters), meth_QGeoServiceProvider_setParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoServiceProvider_setParameters)}
};

static sipEnumMemberDef enummembers_QGeoServiceProvider[] = {
    {sipName_AlternativeRoutesFeature, static_cast<int>(QGeoServiceProvider::AlternativeRoutesFeature), 33},
    {sipName_AnyGeocodingFeatures, static_cast<int>(QGeoServiceProvider::AnyGeocodingFeatures), 27},
    {sipName_AnyMappingFeatures, static_cast<int>(QGeoServiceProvider::AnyMappingFeatures), 29},
    {sipName_AnyPlacesFeatures, static_cast<int>(QGeoServiceProvider::AnyPlacesFeatures), 31},
    {sipName_AnyRoutingFeatures, static_cast<int>(QGeoServiceProvider::AnyRoutingFeatures), 33},
    {sipName_ConnectionError, static_cast<int>(QGeoServiceProvider::ConnectionError), 26},
    {sipName_ExcludeAreasRoutingFeature, static_cast<int>(QGeoServiceProvider::ExcludeAreasRoutingFeature), 33},
    {sipName_LocalizedGeocodingFeature, static_cast<int>(QGeoServiceProvider::LocalizedGeocodingFeature), 27},
    {sipName_LocalizedMappingFeature, static_cast<int>(QGeoServiceProvider::LocalizedMappingFeature), 29},
    {sipName_LocalizedPlacesFeature, static_cast<int>(QGeoServiceProvider::LocalizedPlacesFeature), 31},
    {sipName_LocalizedRoutingFeature, static_cast<int>(QGeoServiceProvider::LocalizedRoutingFeature), 33},
    {sipName_MissingRequiredParameterError, static_cast<int>(QGeoServiceProvider::MissingRequiredParameterError), 26},
    {sipName_NoError, static_cast<int>(QGeoServiceProvider::NoError), 26},
    {sipName_NoGeocodingFeatures, static_cast<int>(QGeoServiceProvider::NoGeocodingFeatures), 27},
    {sipName_NoMappingFeatures, static_cast<int>(QGeoServiceProvider::NoMappingFeatures), 29},
    {sipName_NoPlacesFeatures, static_cast<int>(QGeoServiceProvider::NoPlacesFeatures), 31},
    {sipName_NoRoutingFeatures, static_cast<int>(QGeoServiceProvider::NoRoutingFeatures), 33},
    {sipName_NotSupportedError, static_cast<int>(QGeoServiceProvider::NotSupportedError), 26},
    {sipName_NotificationsFeature, static_cast<int>(QGeoServiceProvider::NotificationsFeature), 31},
    {sipName_OfflineGeocodingFeature, static_cast<int>(QGeoServiceProvider::OfflineGeocodingFeature), 27},
    {sipName_OfflineMappingFeature, static_cast<int>(QGeoServiceProvider::OfflineMappingFeature), 29},
    {sipName_OfflinePlacesFeature, static_cast<int>(QGeoServiceProvider::OfflinePlacesFeature), 31},
    {sipName_OfflineRoutingFeature, static_cast<int>(QGeoServiceProvider::OfflineRoutingFeature), 33},
    {sipName_OnlineGeocodingFeature, static_cast<int>(QGeoServiceProvider::OnlineGeocodingFeature), 27},
    {sipName_OnlineMappingFeature, static_cast<int>(QGeoServiceProvider::OnlineMappingFeature), 29},
    {sipName_OnlinePlacesFeature, static_cast<int>(QGeoServiceProvider::OnlinePlacesFeature), 31},
    {sipName_OnlineRoutingFeature, static_cast<int>(QGeoServiceProvider::OnlineRoutingFeature), 33},
    {sipName_PlaceMatchingFeature, static_cast<int>(QGeoServiceProvider::PlaceMatchingFeature), 31},
    {sipName_PlaceRecommendationsFeature, static_cast<int>(QGeoServiceProvider::PlaceRecommendationsFeature), 31},
    {sipName_RemoveCategoryFeature, static_cast<int>(QGeoServiceProvider::RemoveCategoryFeature), 31},
    {sipName_RemovePlaceFeature, static_cast<int>(QGeoServiceProvider::RemovePlaceFeature), 31},
    {sipName_ReverseGeocodingFeature, static_cast<int>(QGeoServiceProvider::ReverseGeocodingFeature), 27},
    {sipName_RouteUpdatesFeature, static_cast<int>(QGeoServiceProvider::RouteUpdatesFeature), 33},
    {sipName_SaveCategoryFeature, static_cast<int>(QGeoServiceProvider::SaveCategoryFeature), 31},
    {sipName_SavePlaceFeature, static_cast<int>(QGeoServiceProvider::SavePlaceFeature), 31},
    {sipName_SearchSuggestionsFeature, static_cast<int>(QGeoServiceProvider::SearchSuggestionsFeature), 31},
    {sipName_UnknownParameterError, static_cast<int>(QGeoServiceProvider::UnknownParameterError), 26},
};

PyDoc_STRVAR(doc_QGeoServiceProvider, "\1QGeoServiceProvider(str, parameters: Dict[str, Any] = QMap&lt;QString,QVariant&gt;(), allowExperimental: bool = False)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QGeoServiceProvider = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoServiceProvider,
        {0}
    },
    {
        sipNameNr_QGeoServiceProvider,
        {0, 0, 1},
        13, methods_QGeoServiceProvider,
        37, enummembers_QGeoServiceProvider,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoServiceProvider,
    -1,
    -1,
    supers_QGeoServiceProvider,
    0,
    init_type_QGeoServiceProvider,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoServiceProvider,
    0,
    0,
    0,
    release_QGeoServiceProvider,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGeoServiceProvider::staticMetaObject,
    0,
    0,
    0
};
