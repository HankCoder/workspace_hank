/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeocodereply.sip"
#include <qgeocodereply.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 28 "sip/QtPositioning/qgeolocation.sip"
#include <qgeolocation.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 28 "sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoCodeReply.cpp"


class sipQGeoCodeReply : public QGeoCodeReply
{
public:
    sipQGeoCodeReply(QGeoCodeReply::Error,const QString&,QObject*);
    sipQGeoCodeReply(QObject*);
    virtual ~sipQGeoCodeReply();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void abort();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoCodeReply(const sipQGeoCodeReply &);
    sipQGeoCodeReply &operator = (const sipQGeoCodeReply &);

    char sipPyMethods[8];
};

sipQGeoCodeReply::sipQGeoCodeReply(QGeoCodeReply::Error a0,const QString& a1,QObject*a2): QGeoCodeReply(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoCodeReply::sipQGeoCodeReply(QObject*a0): QGeoCodeReply(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoCodeReply::~sipQGeoCodeReply()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGeoCodeReply::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtLocation_qt_metaobject(sipPySelf,sipType_QGeoCodeReply);

    return QGeoCodeReply::metaObject();
}

int sipQGeoCodeReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGeoCodeReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtLocation_qt_metacall(sipPySelf,sipType_QGeoCodeReply,_c,_id,_a);

    return _id;
}

void *sipQGeoCodeReply::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtLocation_qt_metacast(sipPySelf, sipType_QGeoCodeReply, _clname, &sipCpp) ? sipCpp : QGeoCodeReply::qt_metacast(_clname));
}

void sipQGeoCodeReply::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGeoCodeReply::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoCodeReply::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGeoCodeReply::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoCodeReply::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGeoCodeReply::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoCodeReply::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGeoCodeReply::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoCodeReply::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGeoCodeReply::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGeoCodeReply::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGeoCodeReply::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGeoCodeReply::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGeoCodeReply::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoCodeReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_abort);

    if (!sipMeth)
    {
        QGeoCodeReply::abort();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtLocation_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtLocation_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QGeoCodeReply_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QGeoCodeReply_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_isFinished, doc_QGeoCodeReply_isFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_error, "error(self) -> QGeoCodeReply.Error");

extern "C" {static PyObject *meth_QGeoCodeReply_error(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            QGeoCodeReply::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QGeoCodeReply_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_error, doc_QGeoCodeReply_error);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QGeoCodeReply_errorString(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_errorString, doc_QGeoCodeReply_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_viewport, "viewport(self) -> QGeoShape");

extern "C" {static PyObject *meth_QGeoCodeReply_viewport(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_viewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            QGeoShape*sipRes;

            sipRes = new QGeoShape(sipCpp->viewport());

            return sipConvertFromNewType(sipRes,sipType_QGeoShape,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_viewport, doc_QGeoCodeReply_viewport);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_locations, "locations(self) -> object");

extern "C" {static PyObject *meth_QGeoCodeReply_locations(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_locations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            QList<QGeoLocation>*sipRes;

            sipRes = new QList<QGeoLocation>(sipCpp->locations());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGeoLocation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_locations, doc_QGeoCodeReply_locations);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_limit, "limit(self) -> int");

extern "C" {static PyObject *meth_QGeoCodeReply_limit(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_limit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->limit();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_limit, doc_QGeoCodeReply_limit);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_offset, "offset(self) -> int");

extern "C" {static PyObject *meth_QGeoCodeReply_offset(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_offset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->offset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_offset, doc_QGeoCodeReply_offset);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_abort, "abort(self)");

extern "C" {static PyObject *meth_QGeoCodeReply_abort(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCodeReply, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGeoCodeReply::abort() : sipCpp->abort());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_abort, doc_QGeoCodeReply_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_setError, "setError(self, QGeoCodeReply.Error, str)");

extern "C" {static PyObject *meth_QGeoCodeReply_setError(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoCodeReply::Error a0;
        const QString* a1;
        int a1State = 0;
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QGeoCodeReply, &sipCpp, sipType_QGeoCodeReply_Error, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setError(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_setError, doc_QGeoCodeReply_setError);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_setFinished, "setFinished(self, bool)");

extern "C" {static PyObject *meth_QGeoCodeReply_setFinished(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_setFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QGeoCodeReply, &sipCpp, &a0))
        {
            sipCpp->setFinished(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_setFinished, doc_QGeoCodeReply_setFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_setViewport, "setViewport(self, QGeoShape)");

extern "C" {static PyObject *meth_QGeoCodeReply_setViewport(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_setViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoShape* a0;
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QGeoCodeReply, &sipCpp, sipType_QGeoShape, &a0))
        {
            sipCpp->setViewport(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_setViewport, doc_QGeoCodeReply_setViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_addLocation, "addLocation(self, QGeoLocation)");

extern "C" {static PyObject *meth_QGeoCodeReply_addLocation(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_addLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoLocation* a0;
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QGeoCodeReply, &sipCpp, sipType_QGeoLocation, &a0))
        {
            sipCpp->addLocation(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_addLocation, doc_QGeoCodeReply_addLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_setLocations, "setLocations(self, Iterable[QGeoLocation])");

extern "C" {static PyObject *meth_QGeoCodeReply_setLocations(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_setLocations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QGeoLocation>* a0;
        int a0State = 0;
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QGeoCodeReply, &sipCpp, sipType_QList_0100QGeoLocation,&a0, &a0State))
        {
            sipCpp->setLocations(*a0);
            sipReleaseType(const_cast<QList<QGeoLocation> *>(a0),sipType_QList_0100QGeoLocation,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_setLocations, doc_QGeoCodeReply_setLocations);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_setLimit, "setLimit(self, int)");

extern "C" {static PyObject *meth_QGeoCodeReply_setLimit(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_setLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QGeoCodeReply, &sipCpp, &a0))
        {
            sipCpp->setLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_setLimit, doc_QGeoCodeReply_setLimit);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCodeReply_setOffset, "setOffset(self, int)");

extern "C" {static PyObject *meth_QGeoCodeReply_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QGeoCodeReply_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGeoCodeReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QGeoCodeReply, &sipCpp, &a0))
        {
            sipCpp->setOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_setOffset, doc_QGeoCodeReply_setOffset);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoCodeReply(void *, int);}
static void release_QGeoCodeReply(void *sipCppV,int)
{
    QGeoCodeReply *sipCpp = reinterpret_cast<QGeoCodeReply *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoCodeReply(sipSimpleWrapper *);}
static void dealloc_QGeoCodeReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGeoCodeReply *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoCodeReply(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGeoCodeReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoCodeReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGeoCodeReply *sipCpp = 0;

    {
        QGeoCodeReply::Error a0;
        const QString* a1;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1|JH", sipType_QGeoCodeReply_Error, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQGeoCodeReply(a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGeoCodeReply(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoCodeReply[] = {{165, 0, 1}};


static PyMethodDef methods_QGeoCodeReply[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QGeoCodeReply_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_abort)},
    {SIP_MLNAME_CAST(sipName_addLocation), meth_QGeoCodeReply_addLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_addLocation)},
    {SIP_MLNAME_CAST(sipName_error), meth_QGeoCodeReply_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QGeoCodeReply_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_errorString)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QGeoCodeReply_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_isFinished)},
    {SIP_MLNAME_CAST(sipName_limit), meth_QGeoCodeReply_limit, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_limit)},
    {SIP_MLNAME_CAST(sipName_locations), meth_QGeoCodeReply_locations, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_locations)},
    {SIP_MLNAME_CAST(sipName_offset), meth_QGeoCodeReply_offset, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_offset)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QGeoCodeReply_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_setError)},
    {SIP_MLNAME_CAST(sipName_setFinished), meth_QGeoCodeReply_setFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_setFinished)},
    {SIP_MLNAME_CAST(sipName_setLimit), meth_QGeoCodeReply_setLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_setLimit)},
    {SIP_MLNAME_CAST(sipName_setLocations), meth_QGeoCodeReply_setLocations, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_setLocations)},
    {SIP_MLNAME_CAST(sipName_setOffset), meth_QGeoCodeReply_setOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_setOffset)},
    {SIP_MLNAME_CAST(sipName_setViewport), meth_QGeoCodeReply_setViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_setViewport)},
    {SIP_MLNAME_CAST(sipName_viewport), meth_QGeoCodeReply_viewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCodeReply_viewport)}
};

static sipEnumMemberDef enummembers_QGeoCodeReply[] = {
    {sipName_CombinationError, static_cast<int>(QGeoCodeReply::CombinationError), 1},
    {sipName_CommunicationError, static_cast<int>(QGeoCodeReply::CommunicationError), 1},
    {sipName_EngineNotSetError, static_cast<int>(QGeoCodeReply::EngineNotSetError), 1},
    {sipName_NoError, static_cast<int>(QGeoCodeReply::NoError), 1},
    {sipName_ParseError, static_cast<int>(QGeoCodeReply::ParseError), 1},
    {sipName_UnknownError, static_cast<int>(QGeoCodeReply::UnknownError), 1},
    {sipName_UnsupportedOptionError, static_cast<int>(QGeoCodeReply::UnsupportedOptionError), 1},
};


extern "C" {static int emit_QGeoCodeReply_error(void *, PyObject *);}

static int emit_QGeoCodeReply_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QGeoCodeReply *sipCpp = reinterpret_cast<QGeoCodeReply *>(sipCppV);

    {
        QGeoCodeReply::Error a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E|J1", sipType_QGeoCodeReply_Error, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGeoCodeReply, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoCodeReply[] = {
    {"finished()", "\1finished(self)", 0, 0},
    {"error(QGeoCodeReply::Error,QString)", "\1error(self, QGeoCodeReply.Error, str = '')", &methods_QGeoCodeReply[2], emit_QGeoCodeReply_error},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGeoCodeReply, "\1QGeoCodeReply(QGeoCodeReply.Error, str, parent: QObject = None)\n"
    "QGeoCodeReply(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtLocation_QGeoCodeReply = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoCodeReply,
        {0}
    },
    {
        sipNameNr_QGeoCodeReply,
        {0, 0, 1},
        15, methods_QGeoCodeReply,
        7, enummembers_QGeoCodeReply,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoCodeReply,
    -1,
    -1,
    supers_QGeoCodeReply,
    0,
    init_type_QGeoCodeReply,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoCodeReply,
    0,
    0,
    0,
    release_QGeoCodeReply,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGeoCodeReply::staticMetaObject,
    0,
    signals_QGeoCodeReply,
    0
};
