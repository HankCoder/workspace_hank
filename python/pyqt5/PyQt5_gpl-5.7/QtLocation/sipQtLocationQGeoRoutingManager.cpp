/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtLocation.h"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroutingmanager.sip"
#include <qgeoroutingmanager.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"

#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroutereply.sip"
#include <qgeoroutereply.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeoroute.sip"
#include <qgeoroute.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtLocation/qgeorouterequest.sip"
#include <qgeorouterequest.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtLocation/sipQtLocationQGeoRoutingManager.cpp"


PyDoc_STRVAR(doc_QGeoRoutingManager_managerName, "managerName(self) -> str");

extern "C" {static PyObject *meth_QGeoRoutingManager_managerName(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_managerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->managerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_managerName, doc_QGeoRoutingManager_managerName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_managerVersion, "managerVersion(self) -> int");

extern "C" {static PyObject *meth_QGeoRoutingManager_managerVersion(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_managerVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->managerVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_managerVersion, doc_QGeoRoutingManager_managerVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_calculateRoute, "calculateRoute(self, QGeoRouteRequest) -> QGeoRouteReply");

extern "C" {static PyObject *meth_QGeoRoutingManager_calculateRoute(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_calculateRoute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRouteRequest* a0;
        QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoRoutingManager, &sipCpp, sipType_QGeoRouteRequest, &a0))
        {
            QGeoRouteReply*sipRes;

            sipRes = sipCpp->calculateRoute(*a0);

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_calculateRoute, doc_QGeoRoutingManager_calculateRoute);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_updateRoute, "updateRoute(self, QGeoRoute, QGeoCoordinate) -> QGeoRouteReply");

extern "C" {static PyObject *meth_QGeoRoutingManager_updateRoute(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_updateRoute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoute* a0;
        const QGeoCoordinate* a1;
        QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QGeoRoutingManager, &sipCpp, sipType_QGeoRoute, &a0, sipType_QGeoCoordinate, &a1))
        {
            QGeoRouteReply*sipRes;

            sipRes = sipCpp->updateRoute(*a0,*a1);

            sipTransferTo(sipSelf, NULL);

            return sipConvertFromType(sipRes,sipType_QGeoRouteReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_updateRoute, doc_QGeoRoutingManager_updateRoute);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_supportedTravelModes, "supportedTravelModes(self) -> QGeoRouteRequest.TravelModes");

extern "C" {static PyObject *meth_QGeoRoutingManager_supportedTravelModes(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_supportedTravelModes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QGeoRouteRequest::TravelModes*sipRes;

            sipRes = new QGeoRouteRequest::TravelModes(sipCpp->supportedTravelModes());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_TravelModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_supportedTravelModes, doc_QGeoRoutingManager_supportedTravelModes);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_supportedFeatureTypes, "supportedFeatureTypes(self) -> QGeoRouteRequest.FeatureTypes");

extern "C" {static PyObject *meth_QGeoRoutingManager_supportedFeatureTypes(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_supportedFeatureTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QGeoRouteRequest::FeatureTypes*sipRes;

            sipRes = new QGeoRouteRequest::FeatureTypes(sipCpp->supportedFeatureTypes());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_FeatureTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_supportedFeatureTypes, doc_QGeoRoutingManager_supportedFeatureTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_supportedFeatureWeights, "supportedFeatureWeights(self) -> QGeoRouteRequest.FeatureWeights");

extern "C" {static PyObject *meth_QGeoRoutingManager_supportedFeatureWeights(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_supportedFeatureWeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QGeoRouteRequest::FeatureWeights*sipRes;

            sipRes = new QGeoRouteRequest::FeatureWeights(sipCpp->supportedFeatureWeights());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_FeatureWeights,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_supportedFeatureWeights, doc_QGeoRoutingManager_supportedFeatureWeights);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_supportedRouteOptimizations, "supportedRouteOptimizations(self) -> QGeoRouteRequest.RouteOptimizations");

extern "C" {static PyObject *meth_QGeoRoutingManager_supportedRouteOptimizations(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_supportedRouteOptimizations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QGeoRouteRequest::RouteOptimizations*sipRes;

            sipRes = new QGeoRouteRequest::RouteOptimizations(sipCpp->supportedRouteOptimizations());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_RouteOptimizations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_supportedRouteOptimizations, doc_QGeoRoutingManager_supportedRouteOptimizations);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_supportedSegmentDetails, "supportedSegmentDetails(self) -> QGeoRouteRequest.SegmentDetails");

extern "C" {static PyObject *meth_QGeoRoutingManager_supportedSegmentDetails(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_supportedSegmentDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QGeoRouteRequest::SegmentDetails*sipRes;

            sipRes = new QGeoRouteRequest::SegmentDetails(sipCpp->supportedSegmentDetails());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_SegmentDetails,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_supportedSegmentDetails, doc_QGeoRoutingManager_supportedSegmentDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_supportedManeuverDetails, "supportedManeuverDetails(self) -> QGeoRouteRequest.ManeuverDetails");

extern "C" {static PyObject *meth_QGeoRoutingManager_supportedManeuverDetails(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_supportedManeuverDetails(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QGeoRouteRequest::ManeuverDetails*sipRes;

            sipRes = new QGeoRouteRequest::ManeuverDetails(sipCpp->supportedManeuverDetails());

            return sipConvertFromNewType(sipRes,sipType_QGeoRouteRequest_ManeuverDetails,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_supportedManeuverDetails, doc_QGeoRoutingManager_supportedManeuverDetails);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QGeoRoutingManager_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;
        QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoRoutingManager, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_setLocale, doc_QGeoRoutingManager_setLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QGeoRoutingManager_locale(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QLocale*sipRes;

            sipRes = new QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_locale, doc_QGeoRoutingManager_locale);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_setMeasurementSystem, "setMeasurementSystem(self, QLocale.MeasurementSystem)");

extern "C" {static PyObject *meth_QGeoRoutingManager_setMeasurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_setMeasurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocale::MeasurementSystem a0;
        QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGeoRoutingManager, &sipCpp, sipType_QLocale_MeasurementSystem, &a0))
        {
            sipCpp->setMeasurementSystem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_setMeasurementSystem, doc_QGeoRoutingManager_setMeasurementSystem);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoRoutingManager_measurementSystem, "measurementSystem(self) -> QLocale.MeasurementSystem");

extern "C" {static PyObject *meth_QGeoRoutingManager_measurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QGeoRoutingManager_measurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoRoutingManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoRoutingManager, &sipCpp))
        {
            QLocale::MeasurementSystem sipRes;

            sipRes = sipCpp->measurementSystem();

            return sipConvertFromEnum(sipRes,sipType_QLocale_MeasurementSystem);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_measurementSystem, doc_QGeoRoutingManager_measurementSystem);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoRoutingManager(void *, int);}
static void release_QGeoRoutingManager(void *sipCppV,int)
{
    QGeoRoutingManager *sipCpp = reinterpret_cast<QGeoRoutingManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoRoutingManager(sipSimpleWrapper *);}
static void dealloc_QGeoRoutingManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoRoutingManager(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoRoutingManager[] = {{165, 0, 1}};


static PyMethodDef methods_QGeoRoutingManager[] = {
    {SIP_MLNAME_CAST(sipName_calculateRoute), meth_QGeoRoutingManager_calculateRoute, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_calculateRoute)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QGeoRoutingManager_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_locale)},
    {SIP_MLNAME_CAST(sipName_managerName), meth_QGeoRoutingManager_managerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_managerName)},
    {SIP_MLNAME_CAST(sipName_managerVersion), meth_QGeoRoutingManager_managerVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_managerVersion)},
    {SIP_MLNAME_CAST(sipName_measurementSystem), meth_QGeoRoutingManager_measurementSystem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_measurementSystem)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QGeoRoutingManager_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_setLocale)},
    {SIP_MLNAME_CAST(sipName_setMeasurementSystem), meth_QGeoRoutingManager_setMeasurementSystem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_setMeasurementSystem)},
    {SIP_MLNAME_CAST(sipName_supportedFeatureTypes), meth_QGeoRoutingManager_supportedFeatureTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_supportedFeatureTypes)},
    {SIP_MLNAME_CAST(sipName_supportedFeatureWeights), meth_QGeoRoutingManager_supportedFeatureWeights, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_supportedFeatureWeights)},
    {SIP_MLNAME_CAST(sipName_supportedManeuverDetails), meth_QGeoRoutingManager_supportedManeuverDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_supportedManeuverDetails)},
    {SIP_MLNAME_CAST(sipName_supportedRouteOptimizations), meth_QGeoRoutingManager_supportedRouteOptimizations, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_supportedRouteOptimizations)},
    {SIP_MLNAME_CAST(sipName_supportedSegmentDetails), meth_QGeoRoutingManager_supportedSegmentDetails, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_supportedSegmentDetails)},
    {SIP_MLNAME_CAST(sipName_supportedTravelModes), meth_QGeoRoutingManager_supportedTravelModes, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_supportedTravelModes)},
    {SIP_MLNAME_CAST(sipName_updateRoute), meth_QGeoRoutingManager_updateRoute, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoRoutingManager_updateRoute)}
};


extern "C" {static int emit_QGeoRoutingManager_error(void *, PyObject *);}

static int emit_QGeoRoutingManager_error(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QGeoRoutingManager *sipCpp = reinterpret_cast<QGeoRoutingManager *>(sipCppV);

    {
        QGeoRouteReply* a0;
        QGeoRouteReply::Error a1;
        QString a2def = QString();
        QString* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E|J1", sipType_QGeoRouteReply, &a0, sipType_QGeoRouteReply_Error, &a1, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->error(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(a2,sipType_QString,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QGeoRoutingManager, sipName_error, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoRoutingManager[] = {
    {"error(QGeoRouteReply*,QGeoRouteReply::Error,QString)", "\1error(self, QGeoRouteReply, QGeoRouteReply.Error, str = '')", 0, emit_QGeoRoutingManager_error},
    {"finished(QGeoRouteReply*)", "\1finished(self, QGeoRouteReply)", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtLocation_QGeoRoutingManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoRoutingManager,
        {0}
    },
    {
        sipNameNr_QGeoRoutingManager,
        {0, 0, 1},
        14, methods_QGeoRoutingManager,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGeoRoutingManager,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoRoutingManager,
    0,
    0,
    0,
    release_QGeoRoutingManager,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGeoRoutingManager::staticMetaObject,
    0,
    signals_QGeoRoutingManager,
    0
};
