/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qradiotuner.sip"
#include <qradiotuner.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qradiodata.sip"
#include <qradiodata.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 133 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaservice.sip"
#include <qmediaservice.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioTuner.cpp"


class sipQRadioTuner : public QRadioTuner
{
public:
    sipQRadioTuner(QObject*);
    virtual ~sipQRadioTuner();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void unbind(QObject*);
    bool bind(QObject*);
    QMediaService* service() const;
    bool isAvailable() const;
    QMultimedia::AvailabilityStatus availability() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRadioTuner(const sipQRadioTuner &);
    sipQRadioTuner &operator = (const sipQRadioTuner &);

    char sipPyMethods[12];
};

sipQRadioTuner::sipQRadioTuner(QObject*a0): QRadioTuner(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRadioTuner::~sipQRadioTuner()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQRadioTuner::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QRadioTuner);

    return QRadioTuner::metaObject();
}

int sipQRadioTuner::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QRadioTuner::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QRadioTuner,_c,_id,_a);

    return _id;
}

void *sipQRadioTuner::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QRadioTuner, _clname, &sipCpp) ? sipCpp : QRadioTuner::qt_metacast(_clname));
}

void sipQRadioTuner::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QRadioTuner::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioTuner::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QRadioTuner::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioTuner::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QRadioTuner::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioTuner::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QRadioTuner::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioTuner::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QRadioTuner::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQRadioTuner::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QRadioTuner::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQRadioTuner::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QRadioTuner::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioTuner::unbind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_unbind);

    if (!sipMeth)
    {
        QRadioTuner::unbind(a0);
        return;
    }

    extern void sipVH_QtMultimedia_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtMultimedia_5(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQRadioTuner::bind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_bind);

    if (!sipMeth)
        return QRadioTuner::bind(a0);

    typedef bool (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaService* sipQRadioTuner::service() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_service);

    if (!sipMeth)
        return QRadioTuner::service();

    extern QMediaService* sipVH_QtMultimedia_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_6(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQRadioTuner::isAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_isAvailable);

    if (!sipMeth)
        return QRadioTuner::isAvailable();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QMultimedia::AvailabilityStatus sipQRadioTuner::availability() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_availability);

    if (!sipMeth)
        return QRadioTuner::availability();

    extern QMultimedia::AvailabilityStatus sipVH_QtMultimedia_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_0(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QRadioTuner_availability, "availability(self) -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QRadioTuner_availability(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QRadioTuner::availability() : sipCpp->availability());

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_availability, doc_QRadioTuner_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_state, "state(self) -> QRadioTuner.State");

extern "C" {static PyObject *meth_QRadioTuner_state(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            QRadioTuner::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QRadioTuner_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_state, doc_QRadioTuner_state);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_band, "band(self) -> QRadioTuner.Band");

extern "C" {static PyObject *meth_QRadioTuner_band(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_band(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            QRadioTuner::Band sipRes;

            sipRes = sipCpp->band();

            return sipConvertFromEnum(sipRes,sipType_QRadioTuner_Band);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_band, doc_QRadioTuner_band);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_isBandSupported, "isBandSupported(self, QRadioTuner.Band) -> bool");

extern "C" {static PyObject *meth_QRadioTuner_isBandSupported(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_isBandSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner::Band a0;
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRadioTuner, &sipCpp, sipType_QRadioTuner_Band, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isBandSupported(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_isBandSupported, doc_QRadioTuner_isBandSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_frequency, "frequency(self) -> int");

extern "C" {static PyObject *meth_QRadioTuner_frequency(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_frequency(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->frequency();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_frequency, doc_QRadioTuner_frequency);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_frequencyStep, "frequencyStep(self, QRadioTuner.Band) -> int");

extern "C" {static PyObject *meth_QRadioTuner_frequencyStep(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_frequencyStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner::Band a0;
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRadioTuner, &sipCpp, sipType_QRadioTuner_Band, &a0))
        {
            int sipRes;

            sipRes = sipCpp->frequencyStep(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_frequencyStep, doc_QRadioTuner_frequencyStep);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_frequencyRange, "frequencyRange(self, QRadioTuner.Band) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QRadioTuner_frequencyRange(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_frequencyRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner::Band a0;
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRadioTuner, &sipCpp, sipType_QRadioTuner_Band, &a0))
        {
            QPair<int,int>*sipRes;

            sipRes = new QPair<int,int>(sipCpp->frequencyRange(a0));

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_frequencyRange, doc_QRadioTuner_frequencyRange);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_isStereo, "isStereo(self) -> bool");

extern "C" {static PyObject *meth_QRadioTuner_isStereo(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_isStereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStereo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_isStereo, doc_QRadioTuner_isStereo);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_setStereoMode, "setStereoMode(self, QRadioTuner.StereoMode)");

extern "C" {static PyObject *meth_QRadioTuner_setStereoMode(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_setStereoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner::StereoMode a0;
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRadioTuner, &sipCpp, sipType_QRadioTuner_StereoMode, &a0))
        {
            sipCpp->setStereoMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_setStereoMode, doc_QRadioTuner_setStereoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_stereoMode, "stereoMode(self) -> QRadioTuner.StereoMode");

extern "C" {static PyObject *meth_QRadioTuner_stereoMode(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_stereoMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            QRadioTuner::StereoMode sipRes;

            sipRes = sipCpp->stereoMode();

            return sipConvertFromEnum(sipRes,sipType_QRadioTuner_StereoMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_stereoMode, doc_QRadioTuner_stereoMode);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_signalStrength, "signalStrength(self) -> int");

extern "C" {static PyObject *meth_QRadioTuner_signalStrength(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_signalStrength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->signalStrength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_signalStrength, doc_QRadioTuner_signalStrength);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_volume, "volume(self) -> int");

extern "C" {static PyObject *meth_QRadioTuner_volume(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->volume();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_volume, doc_QRadioTuner_volume);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_isMuted, "isMuted(self) -> bool");

extern "C" {static PyObject *meth_QRadioTuner_isMuted(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_isMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMuted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_isMuted, doc_QRadioTuner_isMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_isSearching, "isSearching(self) -> bool");

extern "C" {static PyObject *meth_QRadioTuner_isSearching(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_isSearching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSearching();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_isSearching, doc_QRadioTuner_isSearching);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_isAntennaConnected, "isAntennaConnected(self) -> bool");

extern "C" {static PyObject *meth_QRadioTuner_isAntennaConnected(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_isAntennaConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAntennaConnected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_isAntennaConnected, doc_QRadioTuner_isAntennaConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_error, "error(self) -> QRadioTuner.Error");

extern "C" {static PyObject *meth_QRadioTuner_error(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            QRadioTuner::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QRadioTuner_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_error, doc_QRadioTuner_error);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QRadioTuner_errorString(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_errorString, doc_QRadioTuner_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_radioData, "radioData(self) -> QRadioData");

extern "C" {static PyObject *meth_QRadioTuner_radioData(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_radioData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            QRadioData*sipRes;

            sipRes = sipCpp->radioData();

            return sipConvertFromType(sipRes,sipType_QRadioData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_radioData, doc_QRadioTuner_radioData);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_searchForward, "searchForward(self)");

extern "C" {static PyObject *meth_QRadioTuner_searchForward(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_searchForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            sipCpp->searchForward();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_searchForward, doc_QRadioTuner_searchForward);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_searchBackward, "searchBackward(self)");

extern "C" {static PyObject *meth_QRadioTuner_searchBackward(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_searchBackward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            sipCpp->searchBackward();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_searchBackward, doc_QRadioTuner_searchBackward);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_searchAllStations, "searchAllStations(self, searchMode: QRadioTuner.SearchMode = QRadioTuner.SearchFast)");

extern "C" {static PyObject *meth_QRadioTuner_searchAllStations(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_searchAllStations(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner::SearchMode a0 = QRadioTuner::SearchFast;
        QRadioTuner *sipCpp;

        static const char *sipKwdList[] = {
            sipName_searchMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QRadioTuner, &sipCpp, sipType_QRadioTuner_SearchMode, &a0))
        {
            sipCpp->searchAllStations(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_searchAllStations, doc_QRadioTuner_searchAllStations);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_cancelSearch, "cancelSearch(self)");

extern "C" {static PyObject *meth_QRadioTuner_cancelSearch(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_cancelSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            sipCpp->cancelSearch();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_cancelSearch, doc_QRadioTuner_cancelSearch);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_setBand, "setBand(self, QRadioTuner.Band)");

extern "C" {static PyObject *meth_QRadioTuner_setBand(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_setBand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner::Band a0;
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRadioTuner, &sipCpp, sipType_QRadioTuner_Band, &a0))
        {
            sipCpp->setBand(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_setBand, doc_QRadioTuner_setBand);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_setFrequency, "setFrequency(self, int)");

extern "C" {static PyObject *meth_QRadioTuner_setFrequency(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_setFrequency(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRadioTuner, &sipCpp, &a0))
        {
            sipCpp->setFrequency(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_setFrequency, doc_QRadioTuner_setFrequency);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_setVolume, "setVolume(self, int)");

extern "C" {static PyObject *meth_QRadioTuner_setVolume(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRadioTuner, &sipCpp, &a0))
        {
            sipCpp->setVolume(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_setVolume, doc_QRadioTuner_setVolume);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_setMuted, "setMuted(self, bool)");

extern "C" {static PyObject *meth_QRadioTuner_setMuted(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_setMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QRadioTuner, &sipCpp, &a0))
        {
            sipCpp->setMuted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_setMuted, doc_QRadioTuner_setMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_start, "start(self)");

extern "C" {static PyObject *meth_QRadioTuner_start(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_start, doc_QRadioTuner_start);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioTuner_stop, "stop(self)");

extern "C" {static PyObject *meth_QRadioTuner_stop(PyObject *, PyObject *);}
static PyObject *meth_QRadioTuner_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRadioTuner *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioTuner, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioTuner, sipName_stop, doc_QRadioTuner_stop);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRadioTuner(void *, int);}
static void release_QRadioTuner(void *sipCppV,int)
{
    QRadioTuner *sipCpp = reinterpret_cast<QRadioTuner *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QRadioTuner(sipSimpleWrapper *);}
static void dealloc_QRadioTuner(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQRadioTuner *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QRadioTuner(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QRadioTuner(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRadioTuner(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRadioTuner *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQRadioTuner(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRadioTuner[] = {{75, 255, 1}};


static PyMethodDef methods_QRadioTuner[] = {
    {SIP_MLNAME_CAST(sipName_availability), meth_QRadioTuner_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_availability)},
    {SIP_MLNAME_CAST(sipName_band), meth_QRadioTuner_band, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_band)},
    {SIP_MLNAME_CAST(sipName_cancelSearch), meth_QRadioTuner_cancelSearch, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_cancelSearch)},
    {SIP_MLNAME_CAST(sipName_error), meth_QRadioTuner_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QRadioTuner_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_errorString)},
    {SIP_MLNAME_CAST(sipName_frequency), meth_QRadioTuner_frequency, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_frequency)},
    {SIP_MLNAME_CAST(sipName_frequencyRange), meth_QRadioTuner_frequencyRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_frequencyRange)},
    {SIP_MLNAME_CAST(sipName_frequencyStep), meth_QRadioTuner_frequencyStep, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_frequencyStep)},
    {SIP_MLNAME_CAST(sipName_isAntennaConnected), meth_QRadioTuner_isAntennaConnected, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_isAntennaConnected)},
    {SIP_MLNAME_CAST(sipName_isBandSupported), meth_QRadioTuner_isBandSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_isBandSupported)},
    {SIP_MLNAME_CAST(sipName_isMuted), meth_QRadioTuner_isMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_isMuted)},
    {SIP_MLNAME_CAST(sipName_isSearching), meth_QRadioTuner_isSearching, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_isSearching)},
    {SIP_MLNAME_CAST(sipName_isStereo), meth_QRadioTuner_isStereo, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_isStereo)},
    {SIP_MLNAME_CAST(sipName_radioData), meth_QRadioTuner_radioData, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_radioData)},
    {SIP_MLNAME_CAST(sipName_searchAllStations), (PyCFunction)meth_QRadioTuner_searchAllStations, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRadioTuner_searchAllStations)},
    {SIP_MLNAME_CAST(sipName_searchBackward), meth_QRadioTuner_searchBackward, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_searchBackward)},
    {SIP_MLNAME_CAST(sipName_searchForward), meth_QRadioTuner_searchForward, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_searchForward)},
    {SIP_MLNAME_CAST(sipName_setBand), meth_QRadioTuner_setBand, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_setBand)},
    {SIP_MLNAME_CAST(sipName_setFrequency), meth_QRadioTuner_setFrequency, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_setFrequency)},
    {SIP_MLNAME_CAST(sipName_setMuted), meth_QRadioTuner_setMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_setMuted)},
    {SIP_MLNAME_CAST(sipName_setStereoMode), meth_QRadioTuner_setStereoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_setStereoMode)},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_QRadioTuner_setVolume, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_setVolume)},
    {SIP_MLNAME_CAST(sipName_signalStrength), meth_QRadioTuner_signalStrength, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_signalStrength)},
    {SIP_MLNAME_CAST(sipName_start), meth_QRadioTuner_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_start)},
    {SIP_MLNAME_CAST(sipName_state), meth_QRadioTuner_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_state)},
    {SIP_MLNAME_CAST(sipName_stereoMode), meth_QRadioTuner_stereoMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_stereoMode)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QRadioTuner_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_stop)},
    {SIP_MLNAME_CAST(sipName_volume), meth_QRadioTuner_volume, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioTuner_volume)}
};

static sipEnumMemberDef enummembers_QRadioTuner[] = {
    {sipName_AM, static_cast<int>(QRadioTuner::AM), 102},
    {sipName_ActiveState, static_cast<int>(QRadioTuner::ActiveState), 105},
    {sipName_Auto, static_cast<int>(QRadioTuner::Auto), 106},
    {sipName_FM, static_cast<int>(QRadioTuner::FM), 102},
    {sipName_FM2, static_cast<int>(QRadioTuner::FM2), 102},
    {sipName_ForceMono, static_cast<int>(QRadioTuner::ForceMono), 106},
    {sipName_ForceStereo, static_cast<int>(QRadioTuner::ForceStereo), 106},
    {sipName_LW, static_cast<int>(QRadioTuner::LW), 102},
    {sipName_NoError, static_cast<int>(QRadioTuner::NoError), 103},
    {sipName_OpenError, static_cast<int>(QRadioTuner::OpenError), 103},
    {sipName_OutOfRangeError, static_cast<int>(QRadioTuner::OutOfRangeError), 103},
    {sipName_ResourceError, static_cast<int>(QRadioTuner::ResourceError), 103},
    {sipName_SW, static_cast<int>(QRadioTuner::SW), 102},
    {sipName_SearchFast, static_cast<int>(QRadioTuner::SearchFast), 104},
    {sipName_SearchGetStationId, static_cast<int>(QRadioTuner::SearchGetStationId), 104},
    {sipName_StoppedState, static_cast<int>(QRadioTuner::StoppedState), 105},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QRadioTuner[] = {
    {"antennaConnectedChanged(bool)", "\1antennaConnectedChanged(self, bool)", 0, 0},
    {"stationFound(int,QString)", "\1stationFound(self, int, str)", 0, 0},
    {"mutedChanged(bool)", "\1mutedChanged(self, bool)", 0, 0},
    {"volumeChanged(int)", "\1volumeChanged(self, int)", 0, 0},
    {"signalStrengthChanged(int)", "\1signalStrengthChanged(self, int)", 0, 0},
    {"searchingChanged(bool)", "\1searchingChanged(self, bool)", 0, 0},
    {"stereoStatusChanged(bool)", "\1stereoStatusChanged(self, bool)", 0, 0},
    {"frequencyChanged(int)", "\1frequencyChanged(self, int)", 0, 0},
    {"bandChanged(QRadioTuner::Band)", "\1bandChanged(self, QRadioTuner.Band)", 0, 0},
    {"stateChanged(QRadioTuner::State)", "\1stateChanged(self, QRadioTuner.State)", 0, 0},
    {"error(QRadioTuner::Error)", "\1error(self, QRadioTuner.Error)", &methods_QRadioTuner[3], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QRadioTuner, "\1QRadioTuner(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QRadioTuner = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QRadioTuner,
        {0}
    },
    {
        sipNameNr_QRadioTuner,
        {0, 0, 1},
        28, methods_QRadioTuner,
        16, enummembers_QRadioTuner,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QRadioTuner,
    -1,
    -1,
    supers_QRadioTuner,
    0,
    init_type_QRadioTuner,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QRadioTuner,
    0,
    0,
    0,
    release_QRadioTuner,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QRadioTuner::staticMetaObject,
    0,
    signals_QRadioTuner,
    0
};
