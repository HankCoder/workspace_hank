/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaplaylist.sip"
#include <qmediaplaylist.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaobject.sip"
#include <qmediaobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediacontent.sip"
#include <qmediacontent.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlaylist.cpp"


class sipQMediaPlaylist : public QMediaPlaylist
{
public:
    sipQMediaPlaylist(QObject*);
    virtual ~sipQMediaPlaylist();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool setMediaObject(QMediaObject*);
    QMediaObject* mediaObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMediaPlaylist(const sipQMediaPlaylist &);
    sipQMediaPlaylist &operator = (const sipQMediaPlaylist &);

    char sipPyMethods[9];
};

sipQMediaPlaylist::sipQMediaPlaylist(QObject*a0): QMediaPlaylist(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMediaPlaylist::~sipQMediaPlaylist()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMediaPlaylist::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QMediaPlaylist);

    return QMediaPlaylist::metaObject();
}

int sipQMediaPlaylist::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMediaPlaylist::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QMediaPlaylist,_c,_id,_a);

    return _id;
}

void *sipQMediaPlaylist::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QMediaPlaylist, _clname, &sipCpp) ? sipCpp : QMediaPlaylist::qt_metacast(_clname));
}

void sipQMediaPlaylist::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMediaPlaylist::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlaylist::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMediaPlaylist::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlaylist::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMediaPlaylist::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlaylist::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMediaPlaylist::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlaylist::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMediaPlaylist::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaPlaylist::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMediaPlaylist::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQMediaPlaylist::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMediaPlaylist::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaPlaylist::setMediaObject(QMediaObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setMediaObject);

    if (!sipMeth)
        return QMediaPlaylist::setMediaObject(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMediaObject*);

    return sipVH_QtMultimedia_1(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaObject* sipQMediaPlaylist::mediaObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_mediaObject);

    if (!sipMeth)
        return QMediaPlaylist::mediaObject();

    extern QMediaObject* sipVH_QtMultimedia_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_2(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMediaPlaylist_mediaObject, "mediaObject(self) -> QMediaObject");

extern "C" {static PyObject *meth_QMediaPlaylist_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            QMediaObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaPlaylist::mediaObject() : sipCpp->mediaObject());

            return sipConvertFromType(sipRes,sipType_QMediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_mediaObject, doc_QMediaPlaylist_mediaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_playbackMode, "playbackMode(self) -> QMediaPlaylist.PlaybackMode");

extern "C" {static PyObject *meth_QMediaPlaylist_playbackMode(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_playbackMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            QMediaPlaylist::PlaybackMode sipRes;

            sipRes = sipCpp->playbackMode();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlaylist_PlaybackMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_playbackMode, doc_QMediaPlaylist_playbackMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_setPlaybackMode, "setPlaybackMode(self, QMediaPlaylist.PlaybackMode)");

extern "C" {static PyObject *meth_QMediaPlaylist_setPlaybackMode(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_setPlaybackMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlaylist::PlaybackMode a0;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QMediaPlaylist_PlaybackMode, &a0))
        {
            sipCpp->setPlaybackMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_setPlaybackMode, doc_QMediaPlaylist_setPlaybackMode);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_currentIndex, "currentIndex(self) -> int");

extern "C" {static PyObject *meth_QMediaPlaylist_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_currentIndex, doc_QMediaPlaylist_currentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_currentMedia, "currentMedia(self) -> QMediaContent");

extern "C" {static PyObject *meth_QMediaPlaylist_currentMedia(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_currentMedia(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            QMediaContent*sipRes;

            sipRes = new QMediaContent(sipCpp->currentMedia());

            return sipConvertFromNewType(sipRes,sipType_QMediaContent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_currentMedia, doc_QMediaPlaylist_currentMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_nextIndex, "nextIndex(self, steps: int = 1) -> int");

extern "C" {static PyObject *meth_QMediaPlaylist_nextIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_nextIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        const QMediaPlaylist *sipCpp;

        static const char *sipKwdList[] = {
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->nextIndex(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_nextIndex, doc_QMediaPlaylist_nextIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_previousIndex, "previousIndex(self, steps: int = 1) -> int");

extern "C" {static PyObject *meth_QMediaPlaylist_previousIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_previousIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        const QMediaPlaylist *sipCpp;

        static const char *sipKwdList[] = {
            sipName_steps,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->previousIndex(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_previousIndex, doc_QMediaPlaylist_previousIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_media, "media(self, int) -> QMediaContent");

extern "C" {static PyObject *meth_QMediaPlaylist_media(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_media(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0))
        {
            QMediaContent*sipRes;

            sipRes = new QMediaContent(sipCpp->media(a0));

            return sipConvertFromNewType(sipRes,sipType_QMediaContent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_media, doc_QMediaPlaylist_media);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_mediaCount, "mediaCount(self) -> int");

extern "C" {static PyObject *meth_QMediaPlaylist_mediaCount(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_mediaCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mediaCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_mediaCount, doc_QMediaPlaylist_mediaCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_isEmpty, doc_QMediaPlaylist_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_isReadOnly, doc_QMediaPlaylist_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_addMedia, "addMedia(self, QMediaContent) -> bool\n"
    "addMedia(self, object) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_addMedia(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_addMedia(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent* a0;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QMediaContent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addMedia(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QList<QMediaContent>* a0;
        int a0State = 0;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QList_0100QMediaContent,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->addMedia(*a0);
            sipReleaseType(const_cast<QList<QMediaContent> *>(a0),sipType_QList_0100QMediaContent,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_addMedia, doc_QMediaPlaylist_addMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_insertMedia, "insertMedia(self, int, QMediaContent) -> bool\n"
    "insertMedia(self, int, Iterable[QMediaContent]) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_insertMedia(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_insertMedia(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QMediaContent* a1;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0, sipType_QMediaContent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->insertMedia(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        const QList<QMediaContent>* a1;
        int a1State = 0;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0, sipType_QList_0100QMediaContent,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->insertMedia(a0,*a1);
            sipReleaseType(const_cast<QList<QMediaContent> *>(a1),sipType_QList_0100QMediaContent,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_insertMedia, doc_QMediaPlaylist_insertMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_removeMedia, "removeMedia(self, int) -> bool\n"
    "removeMedia(self, int, int) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_removeMedia(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_removeMedia(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->removeMedia(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->removeMedia(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_removeMedia, doc_QMediaPlaylist_removeMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_clear, "clear(self) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_clear(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->clear();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_clear, doc_QMediaPlaylist_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_load, "load(self, QNetworkRequest, format: str = None)\n"
    "load(self, QUrl, format: str = None)\n"
    "load(self, QIODevice, format: str = None)");

extern "C" {static PyObject *meth_QMediaPlaylist_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        QMediaPlaylist *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|AA", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QNetworkRequest, &a0, &a1Keep, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QUrl* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        QMediaPlaylist *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|AA", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QUrl, &a0, &a1Keep, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QIODevice* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        QMediaPlaylist *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|AA", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(a0,a1);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_load, doc_QMediaPlaylist_load);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_save, "save(self, QUrl, format: str = None) -> bool\n"
    "save(self, QIODevice, str) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_save(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_save(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        QMediaPlaylist *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|AA", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QUrl, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(*a0,a1);
            Py_END_ALLOW_THREADS
            Py_XDECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QIODevice* a0;
        const char* a1;
        PyObject *a1Keep;
        QMediaPlaylist *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8AA", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QIODevice, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(a0,a1);
            Py_END_ALLOW_THREADS
            Py_DECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_save, doc_QMediaPlaylist_save);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_error, "error(self) -> QMediaPlaylist.Error");

extern "C" {static PyObject *meth_QMediaPlaylist_error(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            QMediaPlaylist::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlaylist_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_error, doc_QMediaPlaylist_error);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QMediaPlaylist_errorString(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_errorString, doc_QMediaPlaylist_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_moveMedia, "moveMedia(self, int, int) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_moveMedia(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_moveMedia(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->moveMedia(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_moveMedia, doc_QMediaPlaylist_moveMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_shuffle, "shuffle(self)");

extern "C" {static PyObject *meth_QMediaPlaylist_shuffle(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_shuffle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            sipCpp->shuffle();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_shuffle, doc_QMediaPlaylist_shuffle);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_next, "next(self)");

extern "C" {static PyObject *meth_QMediaPlaylist_next(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            sipCpp->next();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_next, doc_QMediaPlaylist_next);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_previous, "previous(self)");

extern "C" {static PyObject *meth_QMediaPlaylist_previous(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_previous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlaylist, &sipCpp))
        {
            sipCpp->previous();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_previous, doc_QMediaPlaylist_previous);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_setCurrentIndex, "setCurrentIndex(self, int)");

extern "C" {static PyObject *meth_QMediaPlaylist_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaPlaylist, &sipCpp, &a0))
        {
            sipCpp->setCurrentIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_setCurrentIndex, doc_QMediaPlaylist_setCurrentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlaylist_setMediaObject, "setMediaObject(self, QMediaObject) -> bool");

extern "C" {static PyObject *meth_QMediaPlaylist_setMediaObject(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlaylist_setMediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMediaObject* a0;
        QMediaPlaylist *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMediaPlaylist, &sipCpp, sipType_QMediaObject, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaPlaylist::setMediaObject(a0) : sipCpp->setMediaObject(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlaylist, sipName_setMediaObject, doc_QMediaPlaylist_setMediaObject);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QMediaPlaylist(void *, const sipTypeDef *);}
static void *cast_QMediaPlaylist(void *sipCppV, const sipTypeDef *targetType)
{
    QMediaPlaylist *sipCpp = reinterpret_cast<QMediaPlaylist *>(sipCppV);

    if (targetType == sipType_QMediaBindableInterface)
        return static_cast<QMediaBindableInterface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaPlaylist(void *, int);}
static void release_QMediaPlaylist(void *sipCppV,int)
{
    QMediaPlaylist *sipCpp = reinterpret_cast<QMediaPlaylist *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMediaPlaylist(sipSimpleWrapper *);}
static void dealloc_QMediaPlaylist(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMediaPlaylist *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaPlaylist(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMediaPlaylist(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaPlaylist(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMediaPlaylist *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQMediaPlaylist(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMediaPlaylist[] = {{165, 0, 0}, {71, 255, 1}};


static PyMethodDef methods_QMediaPlaylist[] = {
    {SIP_MLNAME_CAST(sipName_addMedia), meth_QMediaPlaylist_addMedia, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_addMedia)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QMediaPlaylist_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_clear)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QMediaPlaylist_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_currentIndex)},
    {SIP_MLNAME_CAST(sipName_currentMedia), meth_QMediaPlaylist_currentMedia, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_currentMedia)},
    {SIP_MLNAME_CAST(sipName_error), meth_QMediaPlaylist_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QMediaPlaylist_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_errorString)},
    {SIP_MLNAME_CAST(sipName_insertMedia), meth_QMediaPlaylist_insertMedia, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_insertMedia)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QMediaPlaylist_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QMediaPlaylist_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QMediaPlaylist_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlaylist_load)},
    {SIP_MLNAME_CAST(sipName_media), meth_QMediaPlaylist_media, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_media)},
    {SIP_MLNAME_CAST(sipName_mediaCount), meth_QMediaPlaylist_mediaCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_mediaCount)},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_QMediaPlaylist_mediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_mediaObject)},
    {SIP_MLNAME_CAST(sipName_moveMedia), meth_QMediaPlaylist_moveMedia, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_moveMedia)},
    {SIP_MLNAME_CAST(sipName_next), meth_QMediaPlaylist_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_next)},
    {SIP_MLNAME_CAST(sipName_nextIndex), (PyCFunction)meth_QMediaPlaylist_nextIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlaylist_nextIndex)},
    {SIP_MLNAME_CAST(sipName_playbackMode), meth_QMediaPlaylist_playbackMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_playbackMode)},
    {SIP_MLNAME_CAST(sipName_previous), meth_QMediaPlaylist_previous, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_previous)},
    {SIP_MLNAME_CAST(sipName_previousIndex), (PyCFunction)meth_QMediaPlaylist_previousIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlaylist_previousIndex)},
    {SIP_MLNAME_CAST(sipName_removeMedia), meth_QMediaPlaylist_removeMedia, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_removeMedia)},
    {SIP_MLNAME_CAST(sipName_save), (PyCFunction)meth_QMediaPlaylist_save, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlaylist_save)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QMediaPlaylist_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setMediaObject), meth_QMediaPlaylist_setMediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_setMediaObject)},
    {SIP_MLNAME_CAST(sipName_setPlaybackMode), meth_QMediaPlaylist_setPlaybackMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_setPlaybackMode)},
    {SIP_MLNAME_CAST(sipName_shuffle), meth_QMediaPlaylist_shuffle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlaylist_shuffle)}
};

static sipEnumMemberDef enummembers_QMediaPlaylist[] = {
    {sipName_AccessDeniedError, static_cast<int>(QMediaPlaylist::AccessDeniedError), 83},
    {sipName_CurrentItemInLoop, static_cast<int>(QMediaPlaylist::CurrentItemInLoop), 84},
    {sipName_CurrentItemOnce, static_cast<int>(QMediaPlaylist::CurrentItemOnce), 84},
    {sipName_FormatError, static_cast<int>(QMediaPlaylist::FormatError), 83},
    {sipName_FormatNotSupportedError, static_cast<int>(QMediaPlaylist::FormatNotSupportedError), 83},
    {sipName_Loop, static_cast<int>(QMediaPlaylist::Loop), 84},
    {sipName_NetworkError, static_cast<int>(QMediaPlaylist::NetworkError), 83},
    {sipName_NoError, static_cast<int>(QMediaPlaylist::NoError), 83},
    {sipName_Random, static_cast<int>(QMediaPlaylist::Random), 84},
    {sipName_Sequential, static_cast<int>(QMediaPlaylist::Sequential), 84},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMediaPlaylist[] = {
    {"loadFailed()", "\1loadFailed(self)", 0, 0},
    {"loaded()", "\1loaded(self)", 0, 0},
    {"mediaChanged(int,int)", "\1mediaChanged(self, int, int)", 0, 0},
    {"mediaRemoved(int,int)", "\1mediaRemoved(self, int, int)", 0, 0},
    {"mediaAboutToBeRemoved(int,int)", "\1mediaAboutToBeRemoved(self, int, int)", 0, 0},
    {"mediaInserted(int,int)", "\1mediaInserted(self, int, int)", 0, 0},
    {"mediaAboutToBeInserted(int,int)", "\1mediaAboutToBeInserted(self, int, int)", 0, 0},
    {"currentMediaChanged(QMediaContent)", "\1currentMediaChanged(self, QMediaContent)", 0, 0},
    {"playbackModeChanged(QMediaPlaylist::PlaybackMode)", "\1playbackModeChanged(self, QMediaPlaylist.PlaybackMode)", 0, 0},
    {"currentIndexChanged(int)", "\1currentIndexChanged(self, int)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMediaPlaylist, "\1QMediaPlaylist(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaPlaylist = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaPlaylist,
        {0}
    },
    {
        sipNameNr_QMediaPlaylist,
        {0, 0, 1},
        25, methods_QMediaPlaylist,
        10, enummembers_QMediaPlaylist,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaPlaylist,
    -1,
    -1,
    supers_QMediaPlaylist,
    0,
    init_type_QMediaPlaylist,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaPlaylist,
    0,
    0,
    0,
    release_QMediaPlaylist,
    cast_QMediaPlaylist,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMediaPlaylist::staticMetaObject,
    0,
    signals_QMediaPlaylist,
    0
};
