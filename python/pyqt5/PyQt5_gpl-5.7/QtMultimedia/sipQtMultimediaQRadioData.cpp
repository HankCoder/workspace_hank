/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qradiodata.sip"
#include <qradiodata.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaobject.sip"
#include <qmediaobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQRadioData.cpp"


class sipQRadioData : public QRadioData
{
public:
    sipQRadioData(QMediaObject*,QObject*);
    virtual ~sipQRadioData();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool setMediaObject(QMediaObject*);
    QMediaObject* mediaObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRadioData(const sipQRadioData &);
    sipQRadioData &operator = (const sipQRadioData &);

    char sipPyMethods[9];
};

sipQRadioData::sipQRadioData(QMediaObject*a0,QObject*a1): QRadioData(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRadioData::~sipQRadioData()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQRadioData::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QRadioData);

    return QRadioData::metaObject();
}

int sipQRadioData::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QRadioData::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QRadioData,_c,_id,_a);

    return _id;
}

void *sipQRadioData::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QRadioData, _clname, &sipCpp) ? sipCpp : QRadioData::qt_metacast(_clname));
}

void sipQRadioData::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QRadioData::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QRadioData::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QRadioData::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QRadioData::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QRadioData::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQRadioData::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QRadioData::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQRadioData::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QRadioData::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQRadioData::setMediaObject(QMediaObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setMediaObject);

    if (!sipMeth)
        return QRadioData::setMediaObject(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMediaObject*);

    return sipVH_QtMultimedia_1(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaObject* sipQRadioData::mediaObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_mediaObject);

    if (!sipMeth)
        return QRadioData::mediaObject();

    extern QMediaObject* sipVH_QtMultimedia_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_2(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QRadioData_mediaObject, "mediaObject(self) -> QMediaObject");

extern "C" {static PyObject *meth_QRadioData_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QMediaObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QRadioData::mediaObject() : sipCpp->mediaObject());

            return sipConvertFromType(sipRes,sipType_QMediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_mediaObject, doc_QRadioData_mediaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_availability, "availability(self) -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QRadioData_availability(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = sipCpp->availability();

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_availability, doc_QRadioData_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_stationId, "stationId(self) -> str");

extern "C" {static PyObject *meth_QRadioData_stationId(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_stationId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->stationId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_stationId, doc_QRadioData_stationId);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_programType, "programType(self) -> QRadioData.ProgramType");

extern "C" {static PyObject *meth_QRadioData_programType(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_programType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QRadioData::ProgramType sipRes;

            sipRes = sipCpp->programType();

            return sipConvertFromEnum(sipRes,sipType_QRadioData_ProgramType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_programType, doc_QRadioData_programType);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_programTypeName, "programTypeName(self) -> str");

extern "C" {static PyObject *meth_QRadioData_programTypeName(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_programTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->programTypeName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_programTypeName, doc_QRadioData_programTypeName);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_stationName, "stationName(self) -> str");

extern "C" {static PyObject *meth_QRadioData_stationName(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_stationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->stationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_stationName, doc_QRadioData_stationName);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_radioText, "radioText(self) -> str");

extern "C" {static PyObject *meth_QRadioData_radioText(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_radioText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->radioText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_radioText, doc_QRadioData_radioText);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_isAlternativeFrequenciesEnabled, "isAlternativeFrequenciesEnabled(self) -> bool");

extern "C" {static PyObject *meth_QRadioData_isAlternativeFrequenciesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_isAlternativeFrequenciesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAlternativeFrequenciesEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_isAlternativeFrequenciesEnabled, doc_QRadioData_isAlternativeFrequenciesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_error, "error(self) -> QRadioData.Error");

extern "C" {static PyObject *meth_QRadioData_error(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QRadioData::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QRadioData_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_error, doc_QRadioData_error);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QRadioData_errorString(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_errorString, doc_QRadioData_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_setAlternativeFrequenciesEnabled, "setAlternativeFrequenciesEnabled(self, bool)");

extern "C" {static PyObject *meth_QRadioData_setAlternativeFrequenciesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_setAlternativeFrequenciesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QRadioData, &sipCpp, &a0))
        {
            sipCpp->setAlternativeFrequenciesEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_setAlternativeFrequenciesEnabled, doc_QRadioData_setAlternativeFrequenciesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_setMediaObject, "setMediaObject(self, QMediaObject) -> bool");

extern "C" {static PyObject *meth_QRadioData_setMediaObject(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_setMediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMediaObject* a0;
        QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QMediaObject, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QRadioData::setMediaObject(a0) : sipCpp->setMediaObject(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_setMediaObject, doc_QRadioData_setMediaObject);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QRadioData(void *, const sipTypeDef *);}
static void *cast_QRadioData(void *sipCppV, const sipTypeDef *targetType)
{
    QRadioData *sipCpp = reinterpret_cast<QRadioData *>(sipCppV);

    if (targetType == sipType_QMediaBindableInterface)
        return static_cast<QMediaBindableInterface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRadioData(void *, int);}
static void release_QRadioData(void *sipCppV,int)
{
    QRadioData *sipCpp = reinterpret_cast<QRadioData *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QRadioData(sipSimpleWrapper *);}
static void dealloc_QRadioData(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQRadioData *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QRadioData(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QRadioData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRadioData(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRadioData *sipCpp = 0;

    {
        QMediaObject* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QMediaObject, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQRadioData(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRadioData[] = {{165, 0, 0}, {71, 255, 1}};


static PyMethodDef methods_QRadioData[] = {
    {SIP_MLNAME_CAST(sipName_availability), meth_QRadioData_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_availability)},
    {SIP_MLNAME_CAST(sipName_error), meth_QRadioData_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QRadioData_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_errorString)},
    {SIP_MLNAME_CAST(sipName_isAlternativeFrequenciesEnabled), meth_QRadioData_isAlternativeFrequenciesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_isAlternativeFrequenciesEnabled)},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_QRadioData_mediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_mediaObject)},
    {SIP_MLNAME_CAST(sipName_programType), meth_QRadioData_programType, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_programType)},
    {SIP_MLNAME_CAST(sipName_programTypeName), meth_QRadioData_programTypeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_programTypeName)},
    {SIP_MLNAME_CAST(sipName_radioText), meth_QRadioData_radioText, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_radioText)},
    {SIP_MLNAME_CAST(sipName_setAlternativeFrequenciesEnabled), meth_QRadioData_setAlternativeFrequenciesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_setAlternativeFrequenciesEnabled)},
    {SIP_MLNAME_CAST(sipName_setMediaObject), meth_QRadioData_setMediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_setMediaObject)},
    {SIP_MLNAME_CAST(sipName_stationId), meth_QRadioData_stationId, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_stationId)},
    {SIP_MLNAME_CAST(sipName_stationName), meth_QRadioData_stationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_stationName)}
};

static sipEnumMemberDef enummembers_QRadioData[] = {
    {sipName_AdultHits, static_cast<int>(QRadioData::AdultHits), 100},
    {sipName_Alarm, static_cast<int>(QRadioData::Alarm), 100},
    {sipName_AlarmTest, static_cast<int>(QRadioData::AlarmTest), 100},
    {sipName_ChildrensProgrammes, static_cast<int>(QRadioData::ChildrensProgrammes), 100},
    {sipName_ClassicRock, static_cast<int>(QRadioData::ClassicRock), 100},
    {sipName_Classical, static_cast<int>(QRadioData::Classical), 100},
    {sipName_College, static_cast<int>(QRadioData::College), 100},
    {sipName_CountryMusic, static_cast<int>(QRadioData::CountryMusic), 100},
    {sipName_Culture, static_cast<int>(QRadioData::Culture), 100},
    {sipName_CurrentAffairs, static_cast<int>(QRadioData::CurrentAffairs), 100},
    {sipName_Documentary, static_cast<int>(QRadioData::Documentary), 100},
    {sipName_Drama, static_cast<int>(QRadioData::Drama), 100},
    {sipName_EasyListening, static_cast<int>(QRadioData::EasyListening), 100},
    {sipName_Education, static_cast<int>(QRadioData::Education), 100},
    {sipName_Finance, static_cast<int>(QRadioData::Finance), 100},
    {sipName_FolkMusic, static_cast<int>(QRadioData::FolkMusic), 100},
    {sipName_Information, static_cast<int>(QRadioData::Information), 100},
    {sipName_JazzMusic, static_cast<int>(QRadioData::JazzMusic), 100},
    {sipName_Language, static_cast<int>(QRadioData::Language), 100},
    {sipName_Leisure, static_cast<int>(QRadioData::Leisure), 100},
    {sipName_LightClassical, static_cast<int>(QRadioData::LightClassical), 100},
    {sipName_NationalMusic, static_cast<int>(QRadioData::NationalMusic), 100},
    {sipName_News, static_cast<int>(QRadioData::News), 100},
    {sipName_NoError, static_cast<int>(QRadioData::NoError), 99},
    {sipName_Nostalgia, static_cast<int>(QRadioData::Nostalgia), 100},
    {sipName_OldiesMusic, static_cast<int>(QRadioData::OldiesMusic), 100},
    {sipName_OpenError, static_cast<int>(QRadioData::OpenError), 99},
    {sipName_OtherMusic, static_cast<int>(QRadioData::OtherMusic), 100},
    {sipName_OutOfRangeError, static_cast<int>(QRadioData::OutOfRangeError), 99},
    {sipName_Personality, static_cast<int>(QRadioData::Personality), 100},
    {sipName_PhoneIn, static_cast<int>(QRadioData::PhoneIn), 100},
    {sipName_PopMusic, static_cast<int>(QRadioData::PopMusic), 100},
    {sipName_Public, static_cast<int>(QRadioData::Public), 100},
    {sipName_Religion, static_cast<int>(QRadioData::Religion), 100},
    {sipName_ReligiousMusic, static_cast<int>(QRadioData::ReligiousMusic), 100},
    {sipName_ReligiousTalk, static_cast<int>(QRadioData::ReligiousTalk), 100},
    {sipName_ResourceError, static_cast<int>(QRadioData::ResourceError), 99},
    {sipName_RhythmAndBlues, static_cast<int>(QRadioData::RhythmAndBlues), 100},
    {sipName_RockMusic, static_cast<int>(QRadioData::RockMusic), 100},
    {sipName_Science, static_cast<int>(QRadioData::Science), 100},
    {sipName_SeriousClassical, static_cast<int>(QRadioData::SeriousClassical), 100},
    {sipName_SocialAffairs, static_cast<int>(QRadioData::SocialAffairs), 100},
    {sipName_Soft, static_cast<int>(QRadioData::Soft), 100},
    {sipName_SoftRhythmAndBlues, static_cast<int>(QRadioData::SoftRhythmAndBlues), 100},
    {sipName_SoftRock, static_cast<int>(QRadioData::SoftRock), 100},
    {sipName_Sport, static_cast<int>(QRadioData::Sport), 100},
    {sipName_Talk, static_cast<int>(QRadioData::Talk), 100},
    {sipName_Top40, static_cast<int>(QRadioData::Top40), 100},
    {sipName_Travel, static_cast<int>(QRadioData::Travel), 100},
    {sipName_Undefined, static_cast<int>(QRadioData::Undefined), 100},
    {sipName_Varied, static_cast<int>(QRadioData::Varied), 100},
    {sipName_Weather, static_cast<int>(QRadioData::Weather), 100},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QRadioData[] = {
    {"alternativeFrequenciesEnabledChanged(bool)", "\1alternativeFrequenciesEnabledChanged(self, bool)", 0, 0},
    {"radioTextChanged(QString)", "\1radioTextChanged(self, str)", 0, 0},
    {"stationNameChanged(QString)", "\1stationNameChanged(self, str)", 0, 0},
    {"programTypeNameChanged(QString)", "\1programTypeNameChanged(self, str)", 0, 0},
    {"programTypeChanged(QRadioData::ProgramType)", "\1programTypeChanged(self, QRadioData.ProgramType)", 0, 0},
    {"stationIdChanged(QString)", "\1stationIdChanged(self, str)", 0, 0},
    {"error(QRadioData::Error)", "\1error(self, QRadioData.Error)", &methods_QRadioData[1], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QRadioData, "\1QRadioData(QMediaObject, parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QRadioData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QRadioData,
        {0}
    },
    {
        sipNameNr_QRadioData,
        {0, 0, 1},
        12, methods_QRadioData,
        52, enummembers_QRadioData,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QRadioData,
    -1,
    -1,
    supers_QRadioData,
    0,
    init_type_QRadioData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QRadioData,
    0,
    0,
    0,
    release_QRadioData,
    cast_QRadioData,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QRadioData::staticMetaObject,
    0,
    signals_QRadioData,
    0
};
