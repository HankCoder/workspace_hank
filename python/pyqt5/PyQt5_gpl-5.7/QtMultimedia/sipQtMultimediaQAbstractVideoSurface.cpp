/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qabstractvideosurface.sip"
#include <qabstractvideosurface.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qvideosurfaceformat.sip"
#include <qvideosurfaceformat.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qvideoframe.sip"
#include <qvideoframe.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 27 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qpymultimedia_qlist.sip"
#include <qvideoframe.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qabstractvideobuffer.sip"
#include <qabstractvideobuffer.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQAbstractVideoSurface.cpp"


class sipQAbstractVideoSurface : public QAbstractVideoSurface
{
public:
    sipQAbstractVideoSurface(QObject*);
    virtual ~sipQAbstractVideoSurface();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool present(const QVideoFrame&);
    void stop();
    bool start(const QVideoSurfaceFormat&);
    QVideoSurfaceFormat nearestFormat(const QVideoSurfaceFormat&) const;
    bool isFormatSupported(const QVideoSurfaceFormat&) const;
    QList<QVideoFrame::PixelFormat> supportedPixelFormats(QAbstractVideoBuffer::HandleType) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractVideoSurface(const sipQAbstractVideoSurface &);
    sipQAbstractVideoSurface &operator = (const sipQAbstractVideoSurface &);

    char sipPyMethods[13];
};

sipQAbstractVideoSurface::sipQAbstractVideoSurface(QObject*a0): QAbstractVideoSurface(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractVideoSurface::~sipQAbstractVideoSurface()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractVideoSurface::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QAbstractVideoSurface);

    return QAbstractVideoSurface::metaObject();
}

int sipQAbstractVideoSurface::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractVideoSurface::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QAbstractVideoSurface,_c,_id,_a);

    return _id;
}

void *sipQAbstractVideoSurface::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QAbstractVideoSurface, _clname, &sipCpp) ? sipCpp : QAbstractVideoSurface::qt_metacast(_clname));
}

void sipQAbstractVideoSurface::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractVideoSurface::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractVideoSurface::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractVideoSurface::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractVideoSurface::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractVideoSurface::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractVideoSurface::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractVideoSurface::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractVideoSurface::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractVideoSurface::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractVideoSurface::present(const QVideoFrame& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractVideoSurface,sipName_present);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtMultimedia_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoFrame&);

    return sipVH_QtMultimedia_7(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractVideoSurface::stop()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_stop);

    if (!sipMeth)
    {
        QAbstractVideoSurface::stop();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractVideoSurface::start(const QVideoSurfaceFormat& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_start);

    if (!sipMeth)
        return QAbstractVideoSurface::start(a0);

    extern bool sipVH_QtMultimedia_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoSurfaceFormat&);

    return sipVH_QtMultimedia_8(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVideoSurfaceFormat sipQAbstractVideoSurface::nearestFormat(const QVideoSurfaceFormat& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_nearestFormat);

    if (!sipMeth)
        return QAbstractVideoSurface::nearestFormat(a0);

    extern QVideoSurfaceFormat sipVH_QtMultimedia_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoSurfaceFormat&);

    return sipVH_QtMultimedia_9(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractVideoSurface::isFormatSupported(const QVideoSurfaceFormat& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isFormatSupported);

    if (!sipMeth)
        return QAbstractVideoSurface::isFormatSupported(a0);

    extern bool sipVH_QtMultimedia_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVideoSurfaceFormat&);

    return sipVH_QtMultimedia_8(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QList<QVideoFrame::PixelFormat> sipQAbstractVideoSurface::supportedPixelFormats(QAbstractVideoBuffer::HandleType a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_QAbstractVideoSurface,sipName_supportedPixelFormats);

    if (!sipMeth)
        return QList<QVideoFrame::PixelFormat>();

    extern QList<QVideoFrame::PixelFormat> sipVH_QtMultimedia_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractVideoBuffer::HandleType);

    return sipVH_QtMultimedia_10(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_supportedPixelFormats, "supportedPixelFormats(self, type: QAbstractVideoBuffer.HandleType = QAbstractVideoBuffer.NoHandle) -> List[QVideoFrame.PixelFormat]");

extern "C" {static PyObject *meth_QAbstractVideoSurface_supportedPixelFormats(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_supportedPixelFormats(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractVideoBuffer::HandleType a0 = QAbstractVideoBuffer::NoHandle;
        const QAbstractVideoSurface *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QAbstractVideoBuffer_HandleType, &a0))
        {
            QList<QVideoFrame::PixelFormat>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractVideoSurface, sipName_supportedPixelFormats);
                return NULL;
            }

            sipRes = new QList<QVideoFrame::PixelFormat>(sipCpp->supportedPixelFormats(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVideoFrame_PixelFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_supportedPixelFormats, doc_QAbstractVideoSurface_supportedPixelFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_isFormatSupported, "isFormatSupported(self, QVideoSurfaceFormat) -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_isFormatSupported(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_isFormatSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVideoSurfaceFormat* a0;
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractVideoSurface::isFormatSupported(*a0) : sipCpp->isFormatSupported(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_isFormatSupported, doc_QAbstractVideoSurface_isFormatSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_nearestFormat, "nearestFormat(self, QVideoSurfaceFormat) -> QVideoSurfaceFormat");

extern "C" {static PyObject *meth_QAbstractVideoSurface_nearestFormat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_nearestFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVideoSurfaceFormat* a0;
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoSurfaceFormat, &a0))
        {
            QVideoSurfaceFormat*sipRes;

            sipRes = new QVideoSurfaceFormat((sipSelfWasArg ? sipCpp->QAbstractVideoSurface::nearestFormat(*a0) : sipCpp->nearestFormat(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QVideoSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_nearestFormat, doc_QAbstractVideoSurface_nearestFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_surfaceFormat, "surfaceFormat(self) -> QVideoSurfaceFormat");

extern "C" {static PyObject *meth_QAbstractVideoSurface_surfaceFormat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_surfaceFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            QVideoSurfaceFormat*sipRes;

            sipRes = new QVideoSurfaceFormat(sipCpp->surfaceFormat());

            return sipConvertFromNewType(sipRes,sipType_QVideoSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_surfaceFormat, doc_QAbstractVideoSurface_surfaceFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_start, "start(self, QVideoSurfaceFormat) -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_start(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVideoSurfaceFormat* a0;
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractVideoSurface::start(*a0) : sipCpp->start(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_start, doc_QAbstractVideoSurface_start);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_stop, "stop(self)");

extern "C" {static PyObject *meth_QAbstractVideoSurface_stop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractVideoSurface::stop() : sipCpp->stop());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_stop, doc_QAbstractVideoSurface_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_isActive(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_isActive, doc_QAbstractVideoSurface_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_present, "present(self, QVideoFrame) -> bool");

extern "C" {static PyObject *meth_QAbstractVideoSurface_present(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_present(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QVideoFrame* a0;
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QVideoFrame, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractVideoSurface, sipName_present);
                return NULL;
            }

            sipRes = sipCpp->present(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_present, doc_QAbstractVideoSurface_present);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_error, "error(self) -> QAbstractVideoSurface.Error");

extern "C" {static PyObject *meth_QAbstractVideoSurface_error(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            QAbstractVideoSurface::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QAbstractVideoSurface_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_error, doc_QAbstractVideoSurface_error);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_setError, "setError(self, QAbstractVideoSurface.Error)");

extern "C" {static PyObject *meth_QAbstractVideoSurface_setError(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractVideoSurface::Error a0;
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QAbstractVideoSurface_Error, &a0))
        {
            sipCpp->setError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_setError, doc_QAbstractVideoSurface_setError);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_nativeResolution, "nativeResolution(self) -> QSize");

extern "C" {static PyObject *meth_QAbstractVideoSurface_nativeResolution(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_nativeResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->nativeResolution());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_nativeResolution, doc_QAbstractVideoSurface_nativeResolution);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractVideoSurface_setNativeResolution, "setNativeResolution(self, QSize)");

extern "C" {static PyObject *meth_QAbstractVideoSurface_setNativeResolution(PyObject *, PyObject *);}
static PyObject *meth_QAbstractVideoSurface_setNativeResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QAbstractVideoSurface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QAbstractVideoSurface, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setNativeResolution(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractVideoSurface, sipName_setNativeResolution, doc_QAbstractVideoSurface_setNativeResolution);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractVideoSurface(void *, int);}
static void release_QAbstractVideoSurface(void *sipCppV,int)
{
    QAbstractVideoSurface *sipCpp = reinterpret_cast<QAbstractVideoSurface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractVideoSurface(sipSimpleWrapper *);}
static void dealloc_QAbstractVideoSurface(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractVideoSurface *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractVideoSurface(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractVideoSurface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractVideoSurface(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractVideoSurface *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractVideoSurface(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractVideoSurface[] = {{165, 0, 1}};


static PyMethodDef methods_QAbstractVideoSurface[] = {
    {SIP_MLNAME_CAST(sipName_error), meth_QAbstractVideoSurface_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_error)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QAbstractVideoSurface_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_isActive)},
    {SIP_MLNAME_CAST(sipName_isFormatSupported), meth_QAbstractVideoSurface_isFormatSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_isFormatSupported)},
    {SIP_MLNAME_CAST(sipName_nativeResolution), meth_QAbstractVideoSurface_nativeResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_nativeResolution)},
    {SIP_MLNAME_CAST(sipName_nearestFormat), meth_QAbstractVideoSurface_nearestFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_nearestFormat)},
    {SIP_MLNAME_CAST(sipName_present), meth_QAbstractVideoSurface_present, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_present)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QAbstractVideoSurface_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_setError)},
    {SIP_MLNAME_CAST(sipName_setNativeResolution), meth_QAbstractVideoSurface_setNativeResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_setNativeResolution)},
    {SIP_MLNAME_CAST(sipName_start), meth_QAbstractVideoSurface_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QAbstractVideoSurface_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_stop)},
    {SIP_MLNAME_CAST(sipName_supportedPixelFormats), (PyCFunction)meth_QAbstractVideoSurface_supportedPixelFormats, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_supportedPixelFormats)},
    {SIP_MLNAME_CAST(sipName_surfaceFormat), meth_QAbstractVideoSurface_surfaceFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractVideoSurface_surfaceFormat)}
};

static sipEnumMemberDef enummembers_QAbstractVideoSurface[] = {
    {sipName_IncorrectFormatError, static_cast<int>(QAbstractVideoSurface::IncorrectFormatError), 5},
    {sipName_NoError, static_cast<int>(QAbstractVideoSurface::NoError), 5},
    {sipName_ResourceError, static_cast<int>(QAbstractVideoSurface::ResourceError), 5},
    {sipName_StoppedError, static_cast<int>(QAbstractVideoSurface::StoppedError), 5},
    {sipName_UnsupportedFormatError, static_cast<int>(QAbstractVideoSurface::UnsupportedFormatError), 5},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractVideoSurface[] = {
    {"nativeResolutionChanged(QSize)", "\1nativeResolutionChanged(self, QSize)", 0, 0},
    {"supportedFormatsChanged()", "\1supportedFormatsChanged(self)", 0, 0},
    {"surfaceFormatChanged(QVideoSurfaceFormat)", "\1surfaceFormatChanged(self, QVideoSurfaceFormat)", 0, 0},
    {"activeChanged(bool)", "\1activeChanged(self, bool)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractVideoSurface, "\1QAbstractVideoSurface(parent: QObject = None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QAbstractVideoSurface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractVideoSurface,
        {0}
    },
    {
        sipNameNr_QAbstractVideoSurface,
        {0, 0, 1},
        12, methods_QAbstractVideoSurface,
        5, enummembers_QAbstractVideoSurface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractVideoSurface,
    -1,
    -1,
    supers_QAbstractVideoSurface,
    0,
    init_type_QAbstractVideoSurface,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractVideoSurface,
    0,
    0,
    0,
    release_QAbstractVideoSurface,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractVideoSurface::staticMetaObject,
    0,
    signals_QAbstractVideoSurface,
    0
};
