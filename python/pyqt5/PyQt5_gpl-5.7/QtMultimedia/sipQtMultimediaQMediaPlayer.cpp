/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaplayer.sip"
#include <qmediaplayer.h>
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 29 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaplayer.sip"
#include <qmediaplayer.h>
#line 36 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qaudio.sip"
#include <qaudio.h>
#line 39 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 335 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qpymultimedia_qlist.sip"
#include <qaudio.h>
#line 42 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 45 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediacontent.sip"
#include <qmediacontent.h>
#line 48 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaplaylist.sip"
#include <qmediaplaylist.h>
#line 54 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 57 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 60 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qabstractvideosurface.sip"
#include <qabstractvideosurface.h>
#line 66 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 69 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/sip/QtMultimedia/qmediaservice.sip"
#include <qmediaservice.h>
#line 78 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 81 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 244 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 232 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 148 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 96 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 102 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 108 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 111 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 114 "/home/pythoner/workspace_hank/python/pyqt5/PyQt5_gpl-5.7/QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"


class sipQMediaPlayer : public QMediaPlayer
{
public:
    sipQMediaPlayer(QObject*,QMediaPlayer::Flags);
    virtual ~sipQMediaPlayer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QMediaService* service() const;
    bool isAvailable() const;
    void unbind(QObject*);
    bool bind(QObject*);
    QMultimedia::AvailabilityStatus availability() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMediaPlayer(const sipQMediaPlayer &);
    sipQMediaPlayer &operator = (const sipQMediaPlayer &);

    char sipPyMethods[12];
};

sipQMediaPlayer::sipQMediaPlayer(QObject*a0,QMediaPlayer::Flags a1): QMediaPlayer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMediaPlayer::~sipQMediaPlayer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMediaPlayer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QMediaPlayer);

    return QMediaPlayer::metaObject();
}

int sipQMediaPlayer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMediaPlayer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QMediaPlayer,_c,_id,_a);

    return _id;
}

void *sipQMediaPlayer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QMediaPlayer, _clname, &sipCpp) ? sipCpp : QMediaPlayer::qt_metacast(_clname));
}

void sipQMediaPlayer::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMediaPlayer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMediaPlayer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMediaPlayer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMediaPlayer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMediaPlayer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaPlayer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMediaPlayer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQMediaPlayer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMediaPlayer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaService* sipQMediaPlayer::service() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_service);

    if (!sipMeth)
        return QMediaPlayer::service();

    extern QMediaService* sipVH_QtMultimedia_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_6(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMediaPlayer::isAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_isAvailable);

    if (!sipMeth)
        return QMediaPlayer::isAvailable();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQMediaPlayer::unbind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_unbind);

    if (!sipMeth)
    {
        QMediaPlayer::unbind(a0);
        return;
    }

    extern void sipVH_QtMultimedia_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtMultimedia_5(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaPlayer::bind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_bind);

    if (!sipMeth)
        return QMediaPlayer::bind(a0);

    typedef bool (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMultimedia::AvailabilityStatus sipQMediaPlayer::availability() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_availability);

    if (!sipMeth)
        return QMediaPlayer::availability();

    extern QMultimedia::AvailabilityStatus sipVH_QtMultimedia_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_0(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMediaPlayer_hasSupport, "hasSupport(str, codecs: Iterable[str] = [], flags: Union[QMediaPlayer.Flags, QMediaPlayer.Flag] = 0) -> QMultimedia.SupportEstimate");

extern "C" {static PyObject *meth_QMediaPlayer_hasSupport(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_hasSupport(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList& a1def = QStringList();
        const QStringList* a1 = &a1def;
        int a1State = 0;
        QMediaPlayer::Flags a2def = 0;
        QMediaPlayer::Flags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_codecs,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QMediaPlayer_Flags, &a2, &a2State))
        {
            QMultimedia::SupportEstimate sipRes;

            sipRes = QMediaPlayer::hasSupport(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(a2,sipType_QMediaPlayer_Flags,a2State);

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_SupportEstimate);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_hasSupport, doc_QMediaPlayer_hasSupport);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_supportedMimeTypes, "supportedMimeTypes(flags: Union[QMediaPlayer.Flags, QMediaPlayer.Flag] = 0) -> List[str]");

extern "C" {static PyObject *meth_QMediaPlayer_supportedMimeTypes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_supportedMimeTypes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer::Flags a0def = 0;
        QMediaPlayer::Flags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J1", sipType_QMediaPlayer_Flags, &a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QMediaPlayer::supportedMimeTypes(*a0));
            sipReleaseType(a0,sipType_QMediaPlayer_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_supportedMimeTypes, doc_QMediaPlayer_supportedMimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setVideoOutput, "setVideoOutput(self, QVideoWidget)\n"
    "setVideoOutput(self, QGraphicsVideoItem)\n"
    "setVideoOutput(self, QAbstractVideoSurface)");

extern "C" {static PyObject *meth_QMediaPlayer_setVideoOutput(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setVideoOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVideoWidget* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QVideoWidget, &a0))
        {
            sipCpp->setVideoOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QGraphicsVideoItem* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QGraphicsVideoItem, &a0))
        {
            sipCpp->setVideoOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QAbstractVideoSurface* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QAbstractVideoSurface, &a0))
        {
            sipCpp->setVideoOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setVideoOutput, doc_QMediaPlayer_setVideoOutput);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_media, "media(self) -> QMediaContent");

extern "C" {static PyObject *meth_QMediaPlayer_media(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_media(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaContent*sipRes;

            sipRes = new QMediaContent(sipCpp->media());

            return sipConvertFromNewType(sipRes,sipType_QMediaContent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_media, doc_QMediaPlayer_media);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_mediaStream, "mediaStream(self) -> QIODevice");

extern "C" {static PyObject *meth_QMediaPlayer_mediaStream(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_mediaStream(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            const QIODevice*sipRes;

            sipRes = sipCpp->mediaStream();

            return sipConvertFromType(const_cast<QIODevice *>(sipRes),sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_mediaStream, doc_QMediaPlayer_mediaStream);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_playlist, "playlist(self) -> QMediaPlaylist");

extern "C" {static PyObject *meth_QMediaPlayer_playlist(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_playlist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlaylist*sipRes;

            sipRes = sipCpp->playlist();

            return sipConvertFromType(sipRes,sipType_QMediaPlaylist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_playlist, doc_QMediaPlayer_playlist);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_currentMedia, "currentMedia(self) -> QMediaContent");

extern "C" {static PyObject *meth_QMediaPlayer_currentMedia(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_currentMedia(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaContent*sipRes;

            sipRes = new QMediaContent(sipCpp->currentMedia());

            return sipConvertFromNewType(sipRes,sipType_QMediaContent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_currentMedia, doc_QMediaPlayer_currentMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_state, "state(self) -> QMediaPlayer.State");

extern "C" {static PyObject *meth_QMediaPlayer_state(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlayer::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlayer_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_state, doc_QMediaPlayer_state);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_mediaStatus, "mediaStatus(self) -> QMediaPlayer.MediaStatus");

extern "C" {static PyObject *meth_QMediaPlayer_mediaStatus(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_mediaStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlayer::MediaStatus sipRes;

            sipRes = sipCpp->mediaStatus();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlayer_MediaStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_mediaStatus, doc_QMediaPlayer_mediaStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QMediaPlayer_duration(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->duration();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_duration, doc_QMediaPlayer_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_position, "position(self) -> int");

extern "C" {static PyObject *meth_QMediaPlayer_position(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->position();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_position, doc_QMediaPlayer_position);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_volume, "volume(self) -> int");

extern "C" {static PyObject *meth_QMediaPlayer_volume(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->volume();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_volume, doc_QMediaPlayer_volume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isMuted, "isMuted(self) -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMuted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isMuted, doc_QMediaPlayer_isMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isAudioAvailable, "isAudioAvailable(self) -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isAudioAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isAudioAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAudioAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isAudioAvailable, doc_QMediaPlayer_isAudioAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isVideoAvailable, "isVideoAvailable(self) -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isVideoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isVideoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVideoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isVideoAvailable, doc_QMediaPlayer_isVideoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_bufferStatus, "bufferStatus(self) -> int");

extern "C" {static PyObject *meth_QMediaPlayer_bufferStatus(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_bufferStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bufferStatus();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_bufferStatus, doc_QMediaPlayer_bufferStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isSeekable, "isSeekable(self) -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isSeekable(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isSeekable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSeekable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isSeekable, doc_QMediaPlayer_isSeekable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_playbackRate, "playbackRate(self) -> float");

extern "C" {static PyObject *meth_QMediaPlayer_playbackRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_playbackRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->playbackRate();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_playbackRate, doc_QMediaPlayer_playbackRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_error, "error(self) -> QMediaPlayer.Error");

extern "C" {static PyObject *meth_QMediaPlayer_error(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlayer::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlayer_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_error, doc_QMediaPlayer_error);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QMediaPlayer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_errorString, doc_QMediaPlayer_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_currentNetworkConfiguration, "currentNetworkConfiguration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QMediaPlayer_currentNetworkConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_currentNetworkConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            sipRes = new QNetworkConfiguration(sipCpp->currentNetworkConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_currentNetworkConfiguration, doc_QMediaPlayer_currentNetworkConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_availability, "availability(self) -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QMediaPlayer_availability(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaPlayer::availability() : sipCpp->availability());

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_availability, doc_QMediaPlayer_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_play, "play(self)");

extern "C" {static PyObject *meth_QMediaPlayer_play(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_play(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            sipCpp->play();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_play, doc_QMediaPlayer_play);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_pause, "pause(self)");

extern "C" {static PyObject *meth_QMediaPlayer_pause(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            sipCpp->pause();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_pause, doc_QMediaPlayer_pause);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_stop, "stop(self)");

extern "C" {static PyObject *meth_QMediaPlayer_stop(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_stop, doc_QMediaPlayer_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setPosition, "setPosition(self, int)");

extern "C" {static PyObject *meth_QMediaPlayer_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setPosition, doc_QMediaPlayer_setPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setVolume, "setVolume(self, int)");

extern "C" {static PyObject *meth_QMediaPlayer_setVolume(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setVolume(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setVolume, doc_QMediaPlayer_setVolume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setMuted, "setMuted(self, bool)");

extern "C" {static PyObject *meth_QMediaPlayer_setMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setMuted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setMuted, doc_QMediaPlayer_setMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setPlaybackRate, "setPlaybackRate(self, float)");

extern "C" {static PyObject *meth_QMediaPlayer_setPlaybackRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setPlaybackRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setPlaybackRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setPlaybackRate, doc_QMediaPlayer_setPlaybackRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setMedia, "setMedia(self, QMediaContent, stream: QIODevice = None)");

extern "C" {static PyObject *meth_QMediaPlayer_setMedia(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setMedia(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent* a0;
        QIODevice* a1 = 0;
        QMediaPlayer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_stream,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QMediaContent, &a0, sipType_QIODevice, &a1))
        {
            sipCpp->setMedia(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setMedia, doc_QMediaPlayer_setMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setPlaylist, "setPlaylist(self, QMediaPlaylist)");

extern "C" {static PyObject *meth_QMediaPlayer_setPlaylist(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setPlaylist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlaylist* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QMediaPlaylist, &a0))
        {
            sipCpp->setPlaylist(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setPlaylist, doc_QMediaPlayer_setPlaylist);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setNetworkConfigurations, "setNetworkConfigurations(self, Iterable[QNetworkConfiguration])");

extern "C" {static PyObject *meth_QMediaPlayer_setNetworkConfigurations(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setNetworkConfigurations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QNetworkConfiguration>* a0;
        int a0State = 0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QList_0100QNetworkConfiguration,&a0, &a0State))
        {
            sipCpp->setNetworkConfigurations(*a0);
            sipReleaseType(const_cast<QList<QNetworkConfiguration> *>(a0),sipType_QList_0100QNetworkConfiguration,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setNetworkConfigurations, doc_QMediaPlayer_setNetworkConfigurations);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_bind, "bind(self, QObject) -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_bind(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaPlayer::bind(a0) : sipCpp->bind(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_bind, doc_QMediaPlayer_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_unbind, "unbind(self, QObject)");

extern "C" {static PyObject *meth_QMediaPlayer_unbind(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_unbind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QObject, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMediaPlayer::unbind(a0) : sipCpp->unbind(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_unbind, doc_QMediaPlayer_unbind);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_audioRole, "audioRole(self) -> QAudio.Role");

extern "C" {static PyObject *meth_QMediaPlayer_audioRole(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_audioRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QAudio::Role sipRes;

            sipRes = sipCpp->audioRole();

            return sipConvertFromEnum(sipRes,sipType_QAudio_Role);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_audioRole, doc_QMediaPlayer_audioRole);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setAudioRole, "setAudioRole(self, QAudio.Role)");

extern "C" {static PyObject *meth_QMediaPlayer_setAudioRole(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setAudioRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAudio::Role a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QAudio_Role, &a0))
        {
            sipCpp->setAudioRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setAudioRole, doc_QMediaPlayer_setAudioRole);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_supportedAudioRoles, "supportedAudioRoles(self) -> List[QAudio.Role]");

extern "C" {static PyObject *meth_QMediaPlayer_supportedAudioRoles(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_supportedAudioRoles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QList<QAudio::Role>*sipRes;

            sipRes = new QList<QAudio::Role>(sipCpp->supportedAudioRoles());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QAudio_Role,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_supportedAudioRoles, doc_QMediaPlayer_supportedAudioRoles);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaPlayer(void *, int);}
static void release_QMediaPlayer(void *sipCppV,int)
{
    QMediaPlayer *sipCpp = reinterpret_cast<QMediaPlayer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMediaPlayer(sipSimpleWrapper *);}
static void dealloc_QMediaPlayer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMediaPlayer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaPlayer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMediaPlayer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaPlayer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMediaPlayer *sipCpp = 0;

    {
        QObject* a0 = 0;
        QMediaPlayer::Flags a1def = 0;
        QMediaPlayer::Flags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QObject, &a0, sipOwner, sipType_QMediaPlayer_Flags, &a1, &a1State))
        {
            sipCpp = new sipQMediaPlayer(a0,*a1);
            sipReleaseType(a1,sipType_QMediaPlayer_Flags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMediaPlayer[] = {{75, 255, 1}};


static PyMethodDef methods_QMediaPlayer[] = {
    {SIP_MLNAME_CAST(sipName_audioRole), meth_QMediaPlayer_audioRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_audioRole)},
    {SIP_MLNAME_CAST(sipName_availability), meth_QMediaPlayer_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_availability)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QMediaPlayer_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_bind)},
    {SIP_MLNAME_CAST(sipName_bufferStatus), meth_QMediaPlayer_bufferStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_bufferStatus)},
    {SIP_MLNAME_CAST(sipName_currentMedia), meth_QMediaPlayer_currentMedia, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_currentMedia)},
    {SIP_MLNAME_CAST(sipName_currentNetworkConfiguration), meth_QMediaPlayer_currentNetworkConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_currentNetworkConfiguration)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QMediaPlayer_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_duration)},
    {SIP_MLNAME_CAST(sipName_error), meth_QMediaPlayer_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QMediaPlayer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_errorString)},
    {SIP_MLNAME_CAST(sipName_hasSupport), (PyCFunction)meth_QMediaPlayer_hasSupport, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlayer_hasSupport)},
    {SIP_MLNAME_CAST(sipName_isAudioAvailable), meth_QMediaPlayer_isAudioAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isAudioAvailable)},
    {SIP_MLNAME_CAST(sipName_isMuted), meth_QMediaPlayer_isMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isMuted)},
    {SIP_MLNAME_CAST(sipName_isSeekable), meth_QMediaPlayer_isSeekable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isSeekable)},
    {SIP_MLNAME_CAST(sipName_isVideoAvailable), meth_QMediaPlayer_isVideoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isVideoAvailable)},
    {SIP_MLNAME_CAST(sipName_media), meth_QMediaPlayer_media, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_media)},
    {SIP_MLNAME_CAST(sipName_mediaStatus), meth_QMediaPlayer_mediaStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_mediaStatus)},
    {SIP_MLNAME_CAST(sipName_mediaStream), meth_QMediaPlayer_mediaStream, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_mediaStream)},
    {SIP_MLNAME_CAST(sipName_pause), meth_QMediaPlayer_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_pause)},
    {SIP_MLNAME_CAST(sipName_play), meth_QMediaPlayer_play, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_play)},
    {SIP_MLNAME_CAST(sipName_playbackRate), meth_QMediaPlayer_playbackRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_playbackRate)},
    {SIP_MLNAME_CAST(sipName_playlist), meth_QMediaPlayer_playlist, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_playlist)},
    {SIP_MLNAME_CAST(sipName_position), meth_QMediaPlayer_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_position)},
    {SIP_MLNAME_CAST(sipName_setAudioRole), meth_QMediaPlayer_setAudioRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setAudioRole)},
    {SIP_MLNAME_CAST(sipName_setMedia), (PyCFunction)meth_QMediaPlayer_setMedia, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlayer_setMedia)},
    {SIP_MLNAME_CAST(sipName_setMuted), meth_QMediaPlayer_setMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setMuted)},
    {SIP_MLNAME_CAST(sipName_setNetworkConfigurations), meth_QMediaPlayer_setNetworkConfigurations, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setNetworkConfigurations)},
    {SIP_MLNAME_CAST(sipName_setPlaybackRate), meth_QMediaPlayer_setPlaybackRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setPlaybackRate)},
    {SIP_MLNAME_CAST(sipName_setPlaylist), meth_QMediaPlayer_setPlaylist, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setPlaylist)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QMediaPlayer_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setPosition)},
    {SIP_MLNAME_CAST(sipName_setVideoOutput), meth_QMediaPlayer_setVideoOutput, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setVideoOutput)},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_QMediaPlayer_setVolume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setVolume)},
    {SIP_MLNAME_CAST(sipName_state), meth_QMediaPlayer_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QMediaPlayer_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_stop)},
    {SIP_MLNAME_CAST(sipName_supportedAudioRoles), meth_QMediaPlayer_supportedAudioRoles, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_supportedAudioRoles)},
    {SIP_MLNAME_CAST(sipName_supportedMimeTypes), (PyCFunction)meth_QMediaPlayer_supportedMimeTypes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlayer_supportedMimeTypes)},
    {SIP_MLNAME_CAST(sipName_unbind), meth_QMediaPlayer_unbind, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_unbind)},
    {SIP_MLNAME_CAST(sipName_volume), meth_QMediaPlayer_volume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_volume)}
};

static sipEnumMemberDef enummembers_QMediaPlayer[] = {
    {sipName_AccessDeniedError, static_cast<int>(QMediaPlayer::AccessDeniedError), 77},
    {sipName_BufferedMedia, static_cast<int>(QMediaPlayer::BufferedMedia), 80},
    {sipName_BufferingMedia, static_cast<int>(QMediaPlayer::BufferingMedia), 80},
    {sipName_EndOfMedia, static_cast<int>(QMediaPlayer::EndOfMedia), 80},
    {sipName_FormatError, static_cast<int>(QMediaPlayer::FormatError), 77},
    {sipName_InvalidMedia, static_cast<int>(QMediaPlayer::InvalidMedia), 80},
    {sipName_LoadedMedia, static_cast<int>(QMediaPlayer::LoadedMedia), 80},
    {sipName_LoadingMedia, static_cast<int>(QMediaPlayer::LoadingMedia), 80},
    {sipName_LowLatency, static_cast<int>(QMediaPlayer::LowLatency), 78},
    {sipName_NetworkError, static_cast<int>(QMediaPlayer::NetworkError), 77},
    {sipName_NoError, static_cast<int>(QMediaPlayer::NoError), 77},
    {sipName_NoMedia, static_cast<int>(QMediaPlayer::NoMedia), 80},
    {sipName_PausedState, static_cast<int>(QMediaPlayer::PausedState), 81},
    {sipName_PlayingState, static_cast<int>(QMediaPlayer::PlayingState), 81},
    {sipName_ResourceError, static_cast<int>(QMediaPlayer::ResourceError), 77},
    {sipName_ServiceMissingError, static_cast<int>(QMediaPlayer::ServiceMissingError), 77},
    {sipName_StalledMedia, static_cast<int>(QMediaPlayer::StalledMedia), 80},
    {sipName_StoppedState, static_cast<int>(QMediaPlayer::StoppedState), 81},
    {sipName_StreamPlayback, static_cast<int>(QMediaPlayer::StreamPlayback), 78},
    {sipName_UnknownMediaStatus, static_cast<int>(QMediaPlayer::UnknownMediaStatus), 80},
    {sipName_VideoSurface, static_cast<int>(QMediaPlayer::VideoSurface), 78},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMediaPlayer[] = {
    {"audioRoleChanged(QAudio::Role)", "\1audioRoleChanged(self, QAudio.Role)", 0, 0},
    {"networkConfigurationChanged(QNetworkConfiguration)", "\1networkConfigurationChanged(self, QNetworkConfiguration)", 0, 0},
    {"playbackRateChanged(qreal)", "\1playbackRateChanged(self, float)", 0, 0},
    {"seekableChanged(bool)", "\1seekableChanged(self, bool)", 0, 0},
    {"bufferStatusChanged(int)", "\1bufferStatusChanged(self, int)", 0, 0},
    {"videoAvailableChanged(bool)", "\1videoAvailableChanged(self, bool)", 0, 0},
    {"audioAvailableChanged(bool)", "\1audioAvailableChanged(self, bool)", 0, 0},
    {"mutedChanged(bool)", "\1mutedChanged(self, bool)", 0, 0},
    {"volumeChanged(int)", "\1volumeChanged(self, int)", 0, 0},
    {"positionChanged(qint64)", "\1positionChanged(self, int)", 0, 0},
    {"durationChanged(qint64)", "\1durationChanged(self, int)", 0, 0},
    {"mediaStatusChanged(QMediaPlayer::MediaStatus)", "\1mediaStatusChanged(self, QMediaPlayer.MediaStatus)", 0, 0},
    {"stateChanged(QMediaPlayer::State)", "\1stateChanged(self, QMediaPlayer.State)", 0, 0},
    {"currentMediaChanged(QMediaContent)", "\1currentMediaChanged(self, QMediaContent)", 0, 0},
    {"mediaChanged(QMediaContent)", "\1mediaChanged(self, QMediaContent)", 0, 0},
    {"error(QMediaPlayer::Error)", "\1error(self, QMediaPlayer.Error)", &methods_QMediaPlayer[7], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMediaPlayer, "\1QMediaPlayer(parent: QObject = None, flags: Union[QMediaPlayer.Flags, QMediaPlayer.Flag] = 0)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaPlayer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaPlayer,
        {0}
    },
    {
        sipNameNr_QMediaPlayer,
        {0, 0, 1},
        37, methods_QMediaPlayer,
        21, enummembers_QMediaPlayer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaPlayer,
    -1,
    -1,
    supers_QMediaPlayer,
    0,
    init_type_QMediaPlayer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaPlayer,
    0,
    0,
    0,
    release_QMediaPlayer,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMediaPlayer::staticMetaObject,
    0,
    signals_QMediaPlayer,
    0
};
